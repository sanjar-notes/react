{
  "paths": [
    {
      "type": "file",
      "value": "README.md"
    },
    {
      "type": "dir",
      "name": "home",
      "children": [
        {
          "type": "file",
          "value": "home/1_motivation.md"
        },
        {
          "type": "file",
          "value": "home/2_resources.md"
        },
        {
          "type": "file",
          "value": "home/3_roadmap.md"
        },
        {
          "type": "dir",
          "name": "4_resource_itineraries",
          "children": [
            {
              "type": "file",
              "value": "home/4_resource_itineraries/0_List_of_resources.md"
            },
            {
              "type": "file",
              "value": "home/4_resource_itineraries/1_Complete_Web_Developer_2020.md"
            },
            {
              "type": "dir",
              "name": "2_React_the_complete_guide",
              "children": [
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_React_the_complete_guide/0_Course_info.md"
                },
                {
                  "type": "dir",
                  "name": "10_side-effects,_reducers,_contextAPI",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/110_useEffect_hook.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/114_useEffect_cleanup_function.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/117_useReducer_hook.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/121_Introducing_React_Context_(Context_API).md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/122_Using_React_Context_API.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/123_Context_Limitations.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/127_Rules_of_hooks.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/129_Forward_refs.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "11_FoodOrder_app",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/133_Adding_a_header_component.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/137_Adding_a_form.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/141_Managing_cart_and_modal_state.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/149_Using_the_useEffect_hook.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "12_Behind_the_scenes_of_React_and_optimization_techniques",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/151_Module_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/152_How_React_Really_Works.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/153_Component_updates_in_action.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/154_A_closer_look_at_child_component_re_evaluation.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/155_Preventing_Unnecessary_ReEvaluations_with_React_memo.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/156_Prevent_function_re_creation_with_useCallback.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/157_useCallback_and_its_dependencies.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/159_Component_instance_and_state.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/160_State_scheduling_and_batching.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/161_Optimizing_with_useMemo.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "13_Class_based_components",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/163_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/164_What_and_why.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/165_Adding_a_first_class_based_component.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/166_Working_with_state_and_events.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/167_Component_lifecycles_in_class_components.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/169_Context_API_with_class_components.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/170_Class_vs_function_components_a_summary.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/171_Introducing_Error_Boundaries.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "14_Sending_HTTP_requests",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/173_Module_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/174_How_to_not_connect_to_a_database.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/175_Using_the_Star_Wars_API.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/176_Our_starting_App_and_backend.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/177_Sending_a_GET_request.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/178_Using_async_await.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/180_Handling_HTTP_errors.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/182_Preparing_the_project_for_the_next_steps.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/183_Sending_a_POST_request.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "15_Building_Custom_React_Hooks",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/186_Module_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/187_What_are_Custom_hooks.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/188_Creating_Custom_React_Hook.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/188_z_A_doubt_about_custom_hooks.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/191_A_more_realistic_example_of_custom_hook.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "16_Forms_and_user_input_detailed",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/197_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/199_Whats_so_complex_about_forms.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/200_Dealing_with_form_submission_and_user_input.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/201_Adding_Basic_Validation.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/202_Providing_validation_feedback.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/203_Handling_the_was_untouched_state.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/204_Reacting_on_lost_focus.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/205_Refactoring_and_deriving_states.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/206_Managing_overall_form_validity.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/207_Adding_a_custom_input_hook.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/211_Summary.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "17_Continue_with_FoodOrder_app",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/17_Continue_with_FoodOrder_app/214_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/17_Continue_with_FoodOrder_app/215_Moving_available_meals_to_the_backend.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/17_Continue_with_FoodOrder_app/219_Adding_a_checkout_form.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "18_Redux",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/226_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/227_Another_look_at_state_in_React_apps.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/228_Redux_vs_React_Context.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/229_How_Redux_works.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/230_1_Core_Redux_with_React.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/230_Core_Redux.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/231_Redux_with_React.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/237_Redux_with_React_for_class_components.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/241_Redux_challenges_and_Introducing_Redux_Toolkit.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/242_React_Toolkit_working.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "19_Advanced_Redux_INCOMPLETE",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/19_Advanced_Redux_INCOMPLETE/250_Module_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/19_Advanced_Redux_INCOMPLETE/251_Redux_and_side_effects.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "20_MultiPage_SPA_React_Router",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/266_Module_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/267_What_is_Routing_and_Why.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/268_Installing_React_Router.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/269_Defining_and_using_Routes.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/270_Working_with_Links.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/271_Using_NavLinks.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/274_1_exact_and_v5_matching_criteria.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/274_2_Switch.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/275_Nested_routes.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/276_Redirecting_the_user.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/277_272_Dynamic_Routes.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/283_Adding_a_not_found_page.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/284_Programmatic_navigation.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/285_Prompt_before_navigation.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/286_Working_with_Query_Params.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/288_Writing_more_flexible_Routing_code.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/289_v5_Summary.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/290_Upgrading_to_React_Router_v6.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/292_v6_4_SKIPPED.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "21_Deploying_React_apps",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/294_Module_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/295_Deployment_steps.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/296_Adding_Lazy_loading.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/297_Building_the_code_for_production.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/298_Getting_started_with_deployment.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/299_Exploring_routing_issues_and_finishing_deployment.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "22_Adding_authentication_to_React_apps",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/301_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/302_What_How_and_Why.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/303_Adding_user_signup.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/304_Three_basic_flows.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/309_Polishing_the_UI_redirects.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/310_Logout.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/311_Protected_pages.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/312. Persisting login state.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/313. Auto-logout.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "23_Intro_to_Next_js",
                  "children": [
                    {
                      "type": "dir",
                      "name": "1_Basic_Info",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/316_Module_introduction.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/317_What_is_Next_js.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/318_1st_key_feature_SSR.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/319_2nd_key_feature_simplifed_routing_file-based.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/320_3rd_key_feature_fullstack_utilities.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2_Project_setup_and_first_page",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/2_Project_setup_and_first_page/321_Creating_a_new_Next_app.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/2_Project_setup_and_first_page/322_Analyzing_Next_app_project_structure.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/2_Project_setup_and_first_page/323_Adding_first_pages.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3_Nested_and_dynamic_pages",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/3_Nested_and_dynamic_pages/324_Nested_paths_and_pages.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/3_Nested_and_dynamic_pages/325_Creating_dynamic_pages_with_parameters.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "4_Links",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/4_Links/326_Links.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "5_Onwards_to_a_bigger_project",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/328_Onwards_to_a_bigger_project.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/331_Outputting_a_List_of_meetups.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/332_The_app_js_file_and_layout_wrapper.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/333_Programmatic_navigation.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "6_Prerendering_and_related_constructs",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/6_Prerendering_and_related_constructs/335_How_pre-rendering_works_and_problems_we_face.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/6_Prerendering_and_related_constructs/338_More_about_SSR_with_getServerSideProps.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/6_Prerendering_and_related_constructs/339_SSG_for_dynamic_routes_getStaticPaths.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "7_API_Routes",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/341_Introducing_API_Routes.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/342_Working_with_MongoDB.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/343_Continuing_with_the_project.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/344_More_about_API_routes.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "8_Deploying_Nextjs_projects",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/8_Deploying_Nextjs_projects/346_Adding_head_Metadata.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/8_Deploying_Nextjs_projects/347_Deploying_Nextjs_projects.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_React_the_complete_guide/24_Animating_React_apps_DEFERRING.md"
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_Hooks_DEFERRING.md"
                },
                {
                  "type": "dir",
                  "name": "25_Replacing_Redux_with_React_hooks",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/369_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/371_Why_would_you_replace_Redux.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/372_Alternative__using_the_Context_API.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/375_Alternative__Custom_hook_as_a_Store.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "26_Testing_React_Apps",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/384_Module_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/385_What_is_testing_and_Why.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/386_Understanding_different_kinds_of_tests.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/387_What_to_Test_and_How_to_Test.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/388_Understanding_the_Techinical_setup_and_tools_involved.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/389_Running_a_first_test.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/390_Writing_our_first_test.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/391_Grouping_tests_together_with_test_suites.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/392_Testing_user_interaction_and_state.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/393_Testing_Connected_Components.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/394_Testing_Asynchronous_Code.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/395_Working_with_Mocks.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/396. Summary_and_Further_Resources.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_React_the_complete_guide/5_Until_section_5.md"
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_React_the_complete_guide/6_Styling_in_React_INCOMPLETE.md"
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_React_the_complete_guide/7_Debugging_React_apps.md"
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_React_the_complete_guide/8_Practice_Project.md"
                },
                {
                  "type": "dir",
                  "name": "9_Fragments,_Portals,_Refs",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/103_Fragments.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/105_Portals.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/106_Refs.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/107_controlled_vs_uncontrolled_components.md"
                    }
                  ]
                }
              ]
            },
            {
              "type": "dir",
              "name": "3-RN-Mosh",
              "children": [
                {
                  "type": "dir",
                  "name": "0-Ashish-overview-RN",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3-RN-Mosh/0-Ashish-overview-RN/1-first-hour.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3-RN-Mosh/0-Ashish-overview-RN/2-second-hour.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3-RN-Mosh/0-Ashish-overview-RN/3-third-hour.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "Part-1",
                  "children": [
                    {
                      "type": "dir",
                      "name": "1-Getting-started",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/1-Prerequisites.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/11-Logging.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/12-Debugging.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/13-Expo-publish.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/2-Popular-apps-built-with-RN.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/3-What-is-React-Native.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/4-Expo.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/6-Development-setup.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/7-First-app.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/8-Emulators.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2-Fundamental-concepts",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/1-Core-Components-and-APIs.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/2-View.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/3-Text.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/4-Image.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/5-Touchables.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/6-Button.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/7-Alert.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/8-StyleSheet.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/9-Platform.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3_Layout",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/10-Exercises.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/2-Dimensions.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/3-Detecting-Orientation-Changes.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/4-Flexbox.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/9-Absolute-and-Relative-Positioning.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "4-Styling",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/1-Introduction.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/10-Exercises.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/2-Borders.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/3-Shadows.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/4-Paddings-and-Margins.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/5-Styling-Text.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/6-Encapsulating-Styles-And-Wrappers.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/7-Icons.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/8-Platform-specific-Code.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/9-Organizing-Styles.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "5-Lists",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/1-FlatList.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/10-Multiple-FlatLists.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/6-Swipes.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/7-Deleting-item-aka-inner-click.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "6-Input-Components",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/2-TextInput.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/5-Switch.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/6-DatePicker.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/7-DropdownPicker.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/8-Modal.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "7-Forms",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/7-Forms/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "8-Additional-Improvements",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-1/8-Additional-Improvements/index.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "Part-2",
                  "children": [
                    {
                      "type": "dir",
                      "name": "2-Native-features",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/1-Native-feature-intro.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/15-Getting-Location.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/3-Image-pick-trial.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3-Navigation",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/1-Basic-code.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/2-Rules.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/3-Tab-navigators.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/4-Route-enums-in-React-Native.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "4-Networking",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/1-1-Intro.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/1-2-Inspecting-API-calls.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/10-Loading-animations.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/12-Sending-images.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/14-Progress.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/17-Progress-bar-UI.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/2-Slow-connection-and-loader.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "5-Offline-support",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/1-Intro.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/10-1-Caching-images.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/10-2-Thumbnails-loader.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/11-Coding-with-redux.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/12-Storing-user-actions-when-offline.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/13-Showing-offline-notice.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/2-Offline-strategies.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/3-Detecting-network-status.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/4-Caching.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/5-AsyncStorage.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/7-The-cache-layer.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/8-Coding-the-cache-layer.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/9-Usage-of-cache-layer.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "6-Authentication",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/1-Auth-Flow.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/10-Persist-across-restarts.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/16-Overlay.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/2-JWT-lib.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "7-Notifications",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/1-Intro-to-push-notifications.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/2-Push-notification-providers.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/3-Flow.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/4-Getting-push-notification-token.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/6-Send-test-notification.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/7-1-Notifications-from-the-server.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/7-2-Detect-notification.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/8-1-Navigate-on-notification.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/8-2-Local-notifications.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "8-Distribution",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/10-Distributing-to-the-App-store.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/11-Building-the-android-app.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/12-Distributing-to-playstore.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/13-OTA-updates.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/2-App-Icon.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/3-Optimize-assets.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/4-Optimize-bundle.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/5-Error-reporting.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/6-Environment-management.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/7-Expo-publish.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/8-Build-standalone-apps.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/9-Build-the-ios-app.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/index.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/3-RN-Mosh/index.md"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "value": "home/5_projects.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "tooling",
      "children": [
        {
          "type": "file",
          "value": "tooling/README.md"
        },
        {
          "type": "dir",
          "name": "obsidian-templates",
          "children": [
            {
              "type": "file",
              "value": "tooling/obsidian-templates/README.md"
            },
            {
              "type": "dir",
              "name": "templater",
              "children": [
                {
                  "type": "file",
                  "value": "tooling/obsidian-templates/templater/timestamp.md"
                },
                {
                  "type": "file",
                  "value": "tooling/obsidian-templates/templater/title_and_date.md"
                },
                {
                  "type": "file",
                  "value": "tooling/obsidian-templates/templater/w2h.md"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "dir",
      "name": "vault",
      "children": [
        {
          "type": "dir",
          "name": "0_npm",
          "children": [
            {
              "type": "file",
              "value": "vault/0_npm/1_Introduction_to_NPM.md"
            },
            {
              "type": "file",
              "value": "vault/0_npm/2_Node_and_NPM.md"
            },
            {
              "type": "file",
              "value": "vault/0_npm/3_Installing_and_using_NPM_packages.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "1_React_info_and_setup",
          "children": [
            {
              "type": "file",
              "value": "vault/1_React_info_and_setup/0_SPA_W2H.md"
            },
            {
              "type": "dir",
              "name": "1_create-react-app",
              "children": [
                {
                  "type": "file",
                  "value": "vault/1_React_info_and_setup/1_create-react-app/0_index.md"
                },
                {
                  "type": "file",
                  "value": "vault/1_React_info_and_setup/1_create-react-app/1_Folder_structure.md"
                },
                {
                  "type": "file",
                  "value": "vault/1_React_info_and_setup/1_create-react-app/2_Making_files_and_folders.md"
                },
                {
                  "type": "file",
                  "value": "vault/1_React_info_and_setup/1_create-react-app/3_React_ecosystem.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "vault/1_React_info_and_setup/2_Why_React.md"
            },
            {
              "type": "file",
              "value": "vault/1_React_info_and_setup/3_How_React_works.md"
            },
            {
              "type": "file",
              "value": "vault/1_React_info_and_setup/4_Migrating_to_Vite.md"
            },
            {
              "type": "file",
              "value": "vault/1_React_info_and_setup/5_Environment_variables.md"
            },
            {
              "type": "file",
              "value": "vault/1_React_info_and_setup/6_Dev_Tools.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "2_React_-_basics",
          "children": [
            {
              "type": "file",
              "value": "vault/2_React_-_basics/0_index.md"
            },
            {
              "type": "file",
              "value": "vault/2_React_-_basics/1_JSX.md"
            },
            {
              "type": "dir",
              "name": "2_React_Components",
              "children": [
                {
                  "type": "file",
                  "value": "vault/2_React_-_basics/2_React_Components/0_React_elements.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_React_-_basics/2_React_Components/1_Components.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_React_-_basics/2_React_Components/2_Function_based_component.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "vault/2_React_-_basics/2_importing_and_exporting_in_React.md"
            },
            {
              "type": "file",
              "value": "vault/2_React_-_basics/3_React_Components.md"
            },
            {
              "type": "file",
              "value": "vault/2_React_-_basics/4_Conditional_rendering_in_JSX.md"
            },
            {
              "type": "file",
              "value": "vault/2_React_-_basics/5_Rendering_lists.md"
            },
            {
              "type": "file",
              "value": "vault/2_React_-_basics/6_Organizing_Components.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "3_styling,_props,_children",
          "children": [
            {
              "type": "file",
              "value": "vault/3_styling,_props,_children/1_1_PropTypes_and_defaultProps.md"
            },
            {
              "type": "file",
              "value": "vault/3_styling,_props,_children/1_React_Props.md"
            },
            {
              "type": "dir",
              "name": "2_Styles in React",
              "children": [
                {
                  "type": "file",
                  "value": "vault/3_styling,_props,_children/2_Styles in React/1_Problem_of_styling_in_component_based_apps.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_styling,_props,_children/2_Styles in React/2_Normal_styling.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_styling,_props,_children/2_Styles in React/3_Dynamic_styling.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_styling,_props,_children/2_Styles in React/4_CSS_modules.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_styling,_props,_children/2_Styles in React/5_Styled_components.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "vault/3_styling,_props,_children/3_Wrapper_components.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "4_State",
          "children": [
            {
              "type": "file",
              "value": "vault/4_State/1_Events_and_handlers_in_React.md"
            },
            {
              "type": "file",
              "value": "vault/4_State/2_1_What_is_state.md"
            },
            {
              "type": "file",
              "value": "vault/4_State/2_2_State_using_useState_hook.md"
            },
            {
              "type": "file",
              "value": "vault/4_State/3_Working_with_multiple_states.md"
            },
            {
              "type": "file",
              "value": "vault/4_State/4_Two_way_binding.md"
            },
            {
              "type": "file",
              "value": "vault/4_State/5_Lifting_state_up.md"
            },
            {
              "type": "dir",
              "name": "6_State_management",
              "children": [
                {
                  "type": "file",
                  "value": "vault/4_State/6_State_management/1_State_management_W2H.md"
                }
              ]
            }
          ]
        },
        {
          "type": "dir",
          "name": "5_Lifecycle_and_hooks",
          "children": [
            {
              "type": "file",
              "value": "vault/5_Lifecycle_and_hooks/1_1_React_lifecycle_methods.md"
            },
            {
              "type": "file",
              "value": "vault/5_Lifecycle_and_hooks/1_React_lifecycle.md"
            },
            {
              "type": "file",
              "value": "vault/5_Lifecycle_and_hooks/1_React_lifecycle_hooks_TO_BE_DELETED.md"
            },
            {
              "type": "file",
              "value": "vault/5_Lifecycle_and_hooks/2_1_React_hooks.md"
            },
            {
              "type": "file",
              "value": "vault/5_Lifecycle_and_hooks/2_1_Why_React_hooks.md"
            },
            {
              "type": "file",
              "value": "vault/5_Lifecycle_and_hooks/2_2_Deriving_all_hooks_from_lifecycle.md"
            },
            {
              "type": "file",
              "value": "vault/5_Lifecycle_and_hooks/3_1_useEffect_cleanup_function.md"
            },
            {
              "type": "file",
              "value": "vault/5_Lifecycle_and_hooks/3_useEffect_hook.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "6_More_aspects_of_React",
          "children": [
            {
              "type": "file",
              "value": "vault/6_More_aspects_of_React/1_Routing.md"
            },
            {
              "type": "file",
              "value": "vault/6_More_aspects_of_React/2_Architecture_beyond_HTML.md"
            },
            {
              "type": "file",
              "value": "vault/6_More_aspects_of_React/3_Unidirectional_data_flow_and_Flux.md"
            },
            {
              "type": "file",
              "value": "vault/6_More_aspects_of_React/4_Code_splitting.md"
            },
            {
              "type": "file",
              "value": "vault/6_More_aspects_of_React/5_Redux.md"
            },
            {
              "type": "file",
              "value": "vault/6_More_aspects_of_React/index.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "8_Misc",
          "children": [
            {
              "type": "file",
              "value": "vault/8_Misc/1_Building_the_deployable.md"
            },
            {
              "type": "file",
              "value": "vault/8_Misc/1_Testing_of_React_apps.md"
            },
            {
              "type": "file",
              "value": "vault/8_Misc/2-Routing-enums-web.md"
            },
            {
              "type": "file",
              "value": "vault/8_Misc/index.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "9_React_Native",
          "children": [
            {
              "type": "file",
              "value": "vault/9_React_Native/1_setup.md"
            },
            {
              "type": "dir",
              "name": "2_styling",
              "children": [
                {
                  "type": "file",
                  "value": "vault/9_React_Native/2_styling/1_Tailwind_setup_in_RN.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "vault/9_React_Native/3_Basics.md"
            }
          ]
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "README.md",
      "url": "README.html",
      "content": "# React.js\n\n[Live link](https://sanjar-notes.github.io/react/home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/152_How_React_Really_Works)\n\n## Why\nMy needs:\n1. Break down UIs into small functions\n2. Make my own \"HTML components\"\n3. Don't get bogged down writing glue code\n4. Use the latest JS syntax without problems\n\nReact provides:\n1. A sane way to build apps - specify the frames, without worrying about the transition code.\n2. Componentization - break down the UI into small reusable (and manageable) parts\n3. Simple [DSL](https://en.wikipedia.org/wiki/Domain-specific_language) - it's like HTML except `{js_expression_here}` is used for including JS logic.\n4. Modules - JS, CSS files can be imported seamlessly\n5. Simple and stable app constructs\n6. Community support + [docs](https://react.dev/) + dev tools (the popularity!)\n\n## How\n- React uses a [heuristics-based algorithm](https://legacy.reactjs.org/docs/reconciliation.html) to \"figure out\" transitions between frames automatically.\n- It provides simple and stable app constructs (functions that you can import and use), so app development is practically declarative.\n\n## What\n\nReact is a declarative way to build user interfaces.\n> [React](https://reactjs.org/) is a *library* to *create* and *reuse* your own HTML tags.\n> \n> &mdash; Me when I started using React\n\n## Usage\nBrowse them here on GitHub or just clone the repo, it's [markdown](https://www.markdowntutorial.com/) 🙌.\n\nOr see the [notes website(experimental)](https://sanjar-notes.github.io/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/Behind_the_scenes_of_React_and_optimization_techniques/How_React_Really_Works)\n\n---\n\nThese are notes (mental models) I made while doing [this Udemy course(released 2020)](https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/).\n\nI have tried to compress and classify information into manageable chunks.\n",
      "html": "<h1 id=\"react.js\">React.js <a class=\"heading-anchor-permalink\" href=\"#react.js\">#</a></h1>\n<p><a href=\"https://sanjar-notes.github.io/react/home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/152_How_React_Really_Works\">Live link</a></p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>My needs:</p>\n<ol>\n<li>Break down UIs into small functions</li>\n<li>Make my own “HTML components”</li>\n<li>Don’t get bogged down writing glue code</li>\n<li>Use the latest JS syntax without problems</li>\n</ol>\n<p>React provides:</p>\n<ol>\n<li>A sane way to build apps - specify the frames, without worrying about the transition code.</li>\n<li>Componentization - break down the UI into small reusable (and manageable) parts</li>\n<li>Simple <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> - it’s like HTML except <code>{js_expression_here}</code> is used for including JS logic.</li>\n<li>Modules - JS, CSS files can be imported seamlessly</li>\n<li>Simple and stable app constructs</li>\n<li>Community support + <a href=\"https://react.dev/\">docs</a> + dev tools (the popularity!)</li>\n</ol>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<ul>\n<li>React uses a <a href=\"https://legacy.reactjs.org/docs/reconciliation.html\">heuristics-based algorithm</a> to “figure out” transitions between frames automatically.</li>\n<li>It provides simple and stable app constructs (functions that you can import and use), so app development is practically declarative.</li>\n</ul>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>React is a declarative way to build user interfaces.</p>\n<blockquote>\n<p><a href=\"https://reactjs.org/\">React</a> is a <em>library</em> to <em>create</em> and <em>reuse</em> your own HTML tags.</p>\n<p>— Me when I started using React</p>\n</blockquote>\n<h2 id=\"usage\">Usage <a class=\"heading-anchor-permalink\" href=\"#usage\">#</a></h2>\n<p>Browse them here on GitHub or just clone the repo, it’s <a href=\"https://www.markdowntutorial.com/\">markdown</a> 🙌.</p>\n<p>Or see the <a href=\"https://sanjar-notes.github.io/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/Behind_the_scenes_of_React_and_optimization_techniques/How_React_Really_Works\">notes website(experimental)</a></p>\n<hr>\n<p>These are notes (mental models) I made while doing <a href=\"https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/\">this Udemy course(released 2020)</a>.</p>\n<p>I have tried to compress and classify information into manageable chunks.</p>\n",
      "id": 0
    },
    {
      "path": "home/1_motivation.md",
      "url": "home/1_motivation.html",
      "content": "# 0. Motivation\nCreated Monday 01 November 2021\n\n\n",
      "html": "<h1 id=\"0.-motivation\">0. Motivation <a class=\"heading-anchor-permalink\" href=\"#0.-motivation\">#</a></h1>\n<p>Created Monday 01 November 2021</p>\n",
      "id": 1
    },
    {
      "path": "home/2_resources.md",
      "url": "home/2_resources.html",
      "content": "# 2. Resources\n\n1. [React the Complete Guide](https://www.udemy.com/course/nextjs-react-the-complete-guide/) at Udemy (Max Schwarzmuller aka Academind)\n2. [Codevolution @Youtube](https://www.youtube.com/c/Codevolution) - basic + advanced React and related libraries\n3. React Native (ETA can do in 3 days without notes) - [Mosh - The Ultimate React Native Series](https://codewithmosh.com/p/the-ultimate-react-native-course). Optionally, do it in parts:\n    1. [The Ultimate React Native Series: Fundamentals](https://codewithmosh.com/p/the-ultimate-react-native-course-part1)\n    2. [The Ultimate React Native Series: Advanced Concepts](https://codewithmosh.com/p/the-ultimate-react-native-course-part2)\n",
      "html": "<h1 id=\"2.-resources\">2. Resources <a class=\"heading-anchor-permalink\" href=\"#2.-resources\">#</a></h1>\n<ol>\n<li><a href=\"https://www.udemy.com/course/nextjs-react-the-complete-guide/\">React the Complete Guide</a> at Udemy (Max Schwarzmuller aka Academind)</li>\n<li><a href=\"https://www.youtube.com/c/Codevolution\">Codevolution @Youtube</a> - basic + advanced React and related libraries</li>\n<li>React Native (ETA can do in 3 days without notes) - <a href=\"https://codewithmosh.com/p/the-ultimate-react-native-course\">Mosh - The Ultimate React Native Series</a>. Optionally, do it in parts:\n<ol>\n<li><a href=\"https://codewithmosh.com/p/the-ultimate-react-native-course-part1\">The Ultimate React Native Series: Fundamentals</a></li>\n<li><a href=\"https://codewithmosh.com/p/the-ultimate-react-native-course-part2\">The Ultimate React Native Series: Advanced Concepts</a></li>\n</ol>\n</li>\n</ol>\n",
      "id": 2
    },
    {
      "path": "home/3_roadmap.md",
      "url": "home/3_roadmap.html",
      "content": "# 1. Roadmap\nCreated Thursday 22 October 2020\n\n- General roadmap - https://roadmap.sh/react\n- Ongoing course: https://www.udemy.com/course/react-the-complete-guide-incl-redux/\n\nUseful https://github.com/serodriguez68/react-cheatsheet-udemy-2019\nAlso see his course: https://www.udemy.com/course/react-redux/\n\n",
      "html": "<h1 id=\"1.-roadmap\">1. Roadmap <a class=\"heading-anchor-permalink\" href=\"#1.-roadmap\">#</a></h1>\n<p>Created Thursday 22 October 2020</p>\n<ul>\n<li>General roadmap - <a href=\"https://roadmap.sh/react\">https://roadmap.sh/react</a></li>\n<li>Ongoing course: <a href=\"https://www.udemy.com/course/react-the-complete-guide-incl-redux/\">https://www.udemy.com/course/react-the-complete-guide-incl-redux/</a></li>\n</ul>\n<p>Useful <a href=\"https://github.com/serodriguez68/react-cheatsheet-udemy-2019\">https://github.com/serodriguez68/react-cheatsheet-udemy-2019</a>\nAlso see his course: <a href=\"https://www.udemy.com/course/react-redux/\">https://www.udemy.com/course/react-redux/</a></p>\n",
      "id": 3
    },
    {
      "path": "home/4_resource_itineraries/0_List_of_resources.md",
      "url": "home/4_resource_itineraries/0_List_of_resources.html",
      "content": "# 2. Resources\nCreated Thursday 13 February 2022\n\nCourses:\n\nUseful https://github.com/serodriguez68/react-cheatsheet-udemy-2019\nAlso see his course: https://www.udemy.com/course/react-redux/\n",
      "html": "<h1 id=\"2.-resources\">2. Resources <a class=\"heading-anchor-permalink\" href=\"#2.-resources\">#</a></h1>\n<p>Created Thursday 13 February 2022</p>\n<p>Courses:</p>\n<p>Useful <a href=\"https://github.com/serodriguez68/react-cheatsheet-udemy-2019\">https://github.com/serodriguez68/react-cheatsheet-udemy-2019</a>\nAlso see his course: <a href=\"https://www.udemy.com/course/react-redux/\">https://www.udemy.com/course/react-redux/</a></p>\n",
      "id": 4
    },
    {
      "path": "home/4_resource_itineraries/1_Complete_Web_Developer_2020.md",
      "url": "home/4_resource_itineraries/1_Complete_Web_Developer_2020.html",
      "content": "# 2. Complete Web Developer 2020\nCreated Wednesday 16 February 2022\n\nThis is a course I did.\nLink: https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/\n\nIt taught _some_ React.js. But I didn't understand very much here.",
      "html": "<h1 id=\"2.-complete-web-developer-2020\">2. Complete Web Developer 2020 <a class=\"heading-anchor-permalink\" href=\"#2.-complete-web-developer-2020\">#</a></h1>\n<p>Created Wednesday 16 February 2022</p>\n<p>This is a course I did.\nLink: <a href=\"https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/\">https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/</a></p>\n<p>It taught <em>some</em> React.js. But I didn’t understand very much here.</p>\n",
      "id": 5
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/0_Course_info.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/0_Course_info.html",
      "content": "# 2. React the complete guide\nCreated Wednesday 16 February 2022\n\nThis is a course I started doing in January 2022.\nLink: - [React the complete guide](https://www.udemy.com/course/nextjs-react-the-complete-guide/)\n\nIt's a good course, starting from basic React.js.\n\nSee the folder for course details.",
      "html": "<h1 id=\"2.-react-the-complete-guide\">2. React the complete guide <a class=\"heading-anchor-permalink\" href=\"#2.-react-the-complete-guide\">#</a></h1>\n<p>Created Wednesday 16 February 2022</p>\n<p>This is a course I started doing in January 2022.\nLink: - <a href=\"https://www.udemy.com/course/nextjs-react-the-complete-guide/\">React the complete guide</a></p>\n<p>It’s a good course, starting from basic React.js.</p>\n<p>See the folder for course details.</p>\n",
      "id": 6
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/110_useEffect_hook.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/110_useEffect_hook.html",
      "content": "# 110. useEffect hook\nCreated Tuesday 08 March 2022\n- [x] in vault\n\n#### What is an effect, aka \"side effect\"?\nThe main job of React is to:\n1. Render UI\n2. React to user input.\n\nTasks other than these 2 are \"side effects\". Example - HTTP requests, DOM manipulation, computation, timers, using `localStorage`, listening to user input etc. Note that some normal ops can also be considered side-effects - like listening to user input for validation.\n\n### Why\nSide effects should not be coded \"as is\" into the component function, because:\n- They'll be executed each time the after component is rendered, i.e. after function is executed. This may be very expensive, or not needed.\n- If the side effects change state (using `useState`), then this will trigger an infinite loop. How: `side-effect` --> `change state` --> `re-render due to change state` --> `side-effect` 🔁 and so on.\n\nSo how do we code side effects into components, in a controllable way. The answer is the `useEffect` hook.\n\n### How\nSyntax of `useEffect`:\n```jsx\nimport {useEffect} from 'react';\n\nconst MyComponent() {\n\t...\n\tuseEffect( () => {...}, [...]);\n\t...\n\treturn <>...</>;\n}\n```\nIt has two pieces:\n1. Dependency array - just variables. React keeps track of these.\n2. A function that runs *after* every render if any dependencies have changed, including after the first render (independent of dependency array). Side effect code goes into this function.\n\n###### Note on dependency array\n1. If dependency = `undefined`, i.e. absent. Function will run after every render.\n2. If dependency = [] (empty array), the function will execute once, i.e. after first render.\n3. If the dependency array has any candidates, the function will run after every render, given the dependencies have changed.\n4. In-built functions, second element of `useState()` array, or anything defined outside the component should not be passed as a dependency, because it has no effect. Basically, only pass stuff that is changed/can change inside the component function (or its parent).\n\n### What\n- `useEffect` is the solution to the problem of placement (and therefore execution) of side-effect (s) code.\n- `useEffect` is not like `useState`. i.e. it won't trigger re-render due dependency array change. It will do so only if state is changed using `set` of `useState` inside the function, which is not the question here. Again, to reiterate - `useEffect` runs the function after every render if any dependency has changed.\n- Additionally, `useEffect` may be used as a refactor to repeated code, due to presence of a dependency array.\n\n###### When to use `useEffect`?\nIt should be used whenever you feel like running 3 life-cycle hooks, namely:\n - `componentDidMount`\n - `componentDidUpdate`\n - `componentWillUnmount`\nSee [this](https://blog.logrocket.com/guide-to-react-useeffect-hook/) for details. FIXME: refactor useEffect pages (this and the next page).\n\nSome common situations:\n1. The task is a side-effect. Note that all possible side-effect code is a part of `useEffect`, i.e. `useEffect` is for side-effects, the converse may not be true.\n2. It is computationally expensive and/or not needed on each render.\n3. For http requests, DB/`localStorage` read/writes may use `useEffect`.",
      "html": "<h1 id=\"110.-useeffect-hook\">110. useEffect hook <a class=\"heading-anchor-permalink\" href=\"#110.-useeffect-hook\">#</a></h1>\n<p>Created Tuesday 08 March 2022</p>\n<ul>\n<li>[x] in vault</li>\n</ul>\n<h4 id=\"what-is-an-effect%2C-aka-%E2%80%9Cside-effect%E2%80%9D%3F\">What is an effect, aka “side effect”? <a class=\"heading-anchor-permalink\" href=\"#what-is-an-effect%2C-aka-%E2%80%9Cside-effect%E2%80%9D%3F\">#</a></h4>\n<p>The main job of React is to:</p>\n<ol>\n<li>Render UI</li>\n<li>React to user input.</li>\n</ol>\n<p>Tasks other than these 2 are “side effects”. Example - HTTP requests, DOM manipulation, computation, timers, using <code>localStorage</code>, listening to user input etc. Note that some normal ops can also be considered side-effects - like listening to user input for validation.</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Side effects should not be coded “as is” into the component function, because:</p>\n<ul>\n<li>They’ll be executed each time the after component is rendered, i.e. after function is executed. This may be very expensive, or not needed.</li>\n<li>If the side effects change state (using <code>useState</code>), then this will trigger an infinite loop. How: <code>side-effect</code> --&gt; <code>change state</code> --&gt; <code>re-render due to change state</code> --&gt; <code>side-effect</code> 🔁 and so on.</li>\n</ul>\n<p>So how do we code side effects into components, in a controllable way. The answer is the <code>useEffect</code> hook.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>Syntax of <code>useEffect</code>:</p>\n<pre><code class=\"language-jsx\">import {useEffect} from 'react';\n\nconst MyComponent() {\n\t...\n\tuseEffect( () =&gt; {...}, [...]);\n\t...\n\treturn &lt;&gt;...&lt;/&gt;;\n}\n</code></pre>\n<p>It has two pieces:</p>\n<ol>\n<li>Dependency array - just variables. React keeps track of these.</li>\n<li>A function that runs <em>after</em> every render if any dependencies have changed, including after the first render (independent of dependency array). Side effect code goes into this function.</li>\n</ol>\n<h6 id=\"note-on-dependency-array\">Note on dependency array <a class=\"heading-anchor-permalink\" href=\"#note-on-dependency-array\">#</a></h6>\n<ol>\n<li>If dependency = <code>undefined</code>, i.e. absent. Function will run after every render.</li>\n<li>If dependency = [] (empty array), the function will execute once, i.e. after first render.</li>\n<li>If the dependency array has any candidates, the function will run after every render, given the dependencies have changed.</li>\n<li>In-built functions, second element of <code>useState()</code> array, or anything defined outside the component should not be passed as a dependency, because it has no effect. Basically, only pass stuff that is changed/can change inside the component function (or its parent).</li>\n</ol>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<ul>\n<li><code>useEffect</code> is the solution to the problem of placement (and therefore execution) of side-effect (s) code.</li>\n<li><code>useEffect</code> is not like <code>useState</code>. i.e. it won’t trigger re-render due dependency array change. It will do so only if state is changed using <code>set</code> of <code>useState</code> inside the function, which is not the question here. Again, to reiterate - <code>useEffect</code> runs the function after every render if any dependency has changed.</li>\n<li>Additionally, <code>useEffect</code> may be used as a refactor to repeated code, due to presence of a dependency array.</li>\n</ul>\n<h6 id=\"when-to-use-useeffect%3F\">When to use <code>useEffect</code>? <a class=\"heading-anchor-permalink\" href=\"#when-to-use-useeffect%3F\">#</a></h6>\n<p>It should be used whenever you feel like running 3 life-cycle hooks, namely:</p>\n<ul>\n<li><code>componentDidMount</code></li>\n<li><code>componentDidUpdate</code></li>\n<li><code>componentWillUnmount</code>\nSee <a href=\"https://blog.logrocket.com/guide-to-react-useeffect-hook/\">this</a> for details. FIXME: refactor useEffect pages (this and the next page).</li>\n</ul>\n<p>Some common situations:</p>\n<ol>\n<li>The task is a side-effect. Note that all possible side-effect code is a part of <code>useEffect</code>, i.e. <code>useEffect</code> is for side-effects, the converse may not be true.</li>\n<li>It is computationally expensive and/or not needed on each render.</li>\n<li>For http requests, DB/<code>localStorage</code> read/writes may use <code>useEffect</code>.</li>\n</ol>\n",
      "id": 7
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/114_useEffect_cleanup_function.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/114_useEffect_cleanup_function.html",
      "content": "# 114. useEffect cleanup function\nCreated Tuesday 08 March 2022\n- [x] in vault\n\n### Why\nSituation: The useEffect function may create eventListeners, or timeouts. Of course, we want only the latest ones, to avoid a cascading effect from old eventListeners, timeouts.\n\nTo do this 'cleanup', some cleanup code can be associated with `useEffect`, that runs **before** every `useEffect` function call, except the first execution (after 1st render).\n\nThis \"cleanup\" function can be specified as a callback from the function in `useEffect`.\n\n### How\nThe cleanup function is run:\n1. After each `useEffect` function execution.\n2. Except the first `useEffect` function execution. Here, the cleanup is not run before.\n3. After the component has been unmounted from the DOM.\n\nSo for `n` re-renders, the:\n- `useEffect` runs 1 (on first render) + `n` times.\n- The cleanup runs `n` + 1 (1 after unmount) times.\n\n### What\nThe cleanup function is meant to just have logic to avoid a cascading effect of the side-effect, as pointed out earlier.\n\n#### Example of cleanup function\nSuppose we have a text `input` field, and we wish to check if the text exists in the backend or not. We will use `useEffect`, because sending an HTTP request is a \"side-effect\". This is functionally OK. But if we do this on every `onChange` of the field, it will be a lot of backend requests.\n\nTo avoid this, we can actually wait for some time after the user has stopped (finished) typing in the text field. So we use a `setTimeout` in the `onChange` function. This will create a timeout before sending the HTTP request.\n\nBut again, as the `setTimeout` is set for each keystroke, but never removed, we'll have a cascading (repeating) effect from the enqueued `setTimeout`s. The solution is to remove the timeouts after each render, and set a new Timeout. This is perfect for the `useEffect`, as the cleanup is run before the `useEffect` function runs. The code would look something like this:\n```jsx\nimport {useEffect} from 'react';\n\nfunction MyComponent() {\n\t...\n\tuseEffect(() => {\n\t\tconst timeoutVar = setTimeout(\n\t\t\t() => {\n\t\t\t\t... // check HTTP request and validate\n\t\t\t};\n\n\t\treturn (() => { // cleanup function\n\t\t\tclearTimeout(timeOutVar);\n\t\t})\n\t\t\t, 400);\n\t}, [enteredField]);\n\t...\n};\n```\nSee this\n![](../../../../assets/114_useEffect_cleanup_function-image-1-aa8f0200.gif)\nHere the timeouts will be set and unset when the user is typing, and finally one will be run if the user stops typing. This reduces network calls, and when they have typed successfully, a request is sent.\n\nThis way of validating typed input is called \"de-bouncing\". An example where this is used - GitHub new repo name does not exist tick mark, Gmail new username 'taken' validation.\n\n###### useEffect is directly related to component lifecycle phases -  this is key to understanding when to use useEffect\n- `useEffect` is a way to run code w.r.t the life-cycle phases, which includes things like:\n\t- Run code after each render, by passing no dependency array.\n\t- Run code after before component is updated, i.e. using the cleanup function.\n\n###### Class components and useEffect\n- `useEffect` is essentially an API that's equivalent to the slightly imperative way to handle code that runs w.r.t lifecycle phases, as done in class components.\n- `useEffect` made it difficult for the developer to make incoherent lifecycle code, resulting in bugs. Thus, it made development easier by removing the 'bad' possibilities which were possible due to imperative access to lifecycle functions. FIXME: really, is this true?\n",
      "html": "<h1 id=\"114.-useeffect-cleanup-function\">114. useEffect cleanup function <a class=\"heading-anchor-permalink\" href=\"#114.-useeffect-cleanup-function\">#</a></h1>\n<p>Created Tuesday 08 March 2022</p>\n<ul>\n<li>[x] in vault</li>\n</ul>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Situation: The useEffect function may create eventListeners, or timeouts. Of course, we want only the latest ones, to avoid a cascading effect from old eventListeners, timeouts.</p>\n<p>To do this ‘cleanup’, some cleanup code can be associated with <code>useEffect</code>, that runs <strong>before</strong> every <code>useEffect</code> function call, except the first execution (after 1st render).</p>\n<p>This “cleanup” function can be specified as a callback from the function in <code>useEffect</code>.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>The cleanup function is run:</p>\n<ol>\n<li>After each <code>useEffect</code> function execution.</li>\n<li>Except the first <code>useEffect</code> function execution. Here, the cleanup is not run before.</li>\n<li>After the component has been unmounted from the DOM.</li>\n</ol>\n<p>So for <code>n</code> re-renders, the:</p>\n<ul>\n<li><code>useEffect</code> runs 1 (on first render) + <code>n</code> times.</li>\n<li>The cleanup runs <code>n</code> + 1 (1 after unmount) times.</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>The cleanup function is meant to just have logic to avoid a cascading effect of the side-effect, as pointed out earlier.</p>\n<h4 id=\"example-of-cleanup-function\">Example of cleanup function <a class=\"heading-anchor-permalink\" href=\"#example-of-cleanup-function\">#</a></h4>\n<p>Suppose we have a text <code>input</code> field, and we wish to check if the text exists in the backend or not. We will use <code>useEffect</code>, because sending an HTTP request is a “side-effect”. This is functionally OK. But if we do this on every <code>onChange</code> of the field, it will be a lot of backend requests.</p>\n<p>To avoid this, we can actually wait for some time after the user has stopped (finished) typing in the text field. So we use a <code>setTimeout</code> in the <code>onChange</code> function. This will create a timeout before sending the HTTP request.</p>\n<p>But again, as the <code>setTimeout</code> is set for each keystroke, but never removed, we’ll have a cascading (repeating) effect from the enqueued <code>setTimeout</code>s. The solution is to remove the timeouts after each render, and set a new Timeout. This is perfect for the <code>useEffect</code>, as the cleanup is run before the <code>useEffect</code> function runs. The code would look something like this:</p>\n<pre><code class=\"language-jsx\">import {useEffect} from 'react';\n\nfunction MyComponent() {\n\t...\n\tuseEffect(() =&gt; {\n\t\tconst timeoutVar = setTimeout(\n\t\t\t() =&gt; {\n\t\t\t\t... // check HTTP request and validate\n\t\t\t};\n\n\t\treturn (() =&gt; { // cleanup function\n\t\t\tclearTimeout(timeOutVar);\n\t\t})\n\t\t\t, 400);\n\t}, [enteredField]);\n\t...\n};\n</code></pre>\n<p>See this\n<img src=\"../../../../assets/114_useEffect_cleanup_function-image-1-aa8f0200.gif\" alt=\"\">\nHere the timeouts will be set and unset when the user is typing, and finally one will be run if the user stops typing. This reduces network calls, and when they have typed successfully, a request is sent.</p>\n<p>This way of validating typed input is called “de-bouncing”. An example where this is used - GitHub new repo name does not exist tick mark, Gmail new username ‘taken’ validation.</p>\n<h6 id=\"useeffect-is-directly-related-to-component-lifecycle-phases---this-is-key-to-understanding-when-to-use-useeffect\">useEffect is directly related to component lifecycle phases -  this is key to understanding when to use useEffect <a class=\"heading-anchor-permalink\" href=\"#useeffect-is-directly-related-to-component-lifecycle-phases---this-is-key-to-understanding-when-to-use-useeffect\">#</a></h6>\n<ul>\n<li><code>useEffect</code> is a way to run code w.r.t the life-cycle phases, which includes things like:\n<ul>\n<li>Run code after each render, by passing no dependency array.</li>\n<li>Run code after before component is updated, i.e. using the cleanup function.</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"class-components-and-useeffect\">Class components and useEffect <a class=\"heading-anchor-permalink\" href=\"#class-components-and-useeffect\">#</a></h6>\n<ul>\n<li><code>useEffect</code> is essentially an API that’s equivalent to the slightly imperative way to handle code that runs w.r.t lifecycle phases, as done in class components.</li>\n<li><code>useEffect</code> made it difficult for the developer to make incoherent lifecycle code, resulting in bugs. Thus, it made development easier by removing the ‘bad’ possibilities which were possible due to imperative access to lifecycle functions. FIXME: really, is this true?</li>\n</ul>\n",
      "id": 8
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/117_useReducer_hook.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/117_useReducer_hook.html",
      "content": "# 117. useReducer hook\nCreated Tuesday 12 March 2022\n- [ ] in vault\n    \n### Why (when to use it instead of `useState`)\n`useReducer` is a syntax sugar for `useState` . It is preferred over `useState` if the state:\n- Is complex (has many parts).\n- The state and data inside it are highly related (OK, but Why?).\n- Types of updates are more, as using `useState` would result in a lot of functions, which makes the JSX or JS code bulky.\n\n`useReducer` is an \"additional\" hook, and `useState` is the primary hook.\n\n### How\nThe 4 things needed for `useReducer` are:\n1. State - to be read\n2. Dispatch function - to be called with case argument and payload(state related argument). This function is provided by the hook.\n3. Reducer - this sets the new state based on the case argument and state related argument. This function is usually a switch case.\n4. Initial value of the state.\n\nThe basic syntax for `useReducer` is:\n```jsx\nimport React, { useReducer } from 'react';\n\nfunction reducerFunc(state, action) {\n\t// latest state,\n\t// action is the variable passed to dispath\n\tswitch(action.type)\n\t{\n\t\tcase 'CASE_VAL':\n\t\t\treturn {...state, name: action.payload}; // becomes state\n\t\t...\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown reducer type: ${action.type}`);\n\t}\n}\n\nfunction MyComponent () {\n\tconst [stateVar, dispatchFunc] = useReducer(reducerFunc, intialState);\n\t\n\treturn (<>\n\t\t\t...\n\t\t\t{state.name}\n\t\t\t...\n\t\t\t<button \n\t\t\t\tonClick={()=>dispatchFunc({type: 'CASE_VAL', payload: 'arg'}) }\n\t\t\t>\n\t\t\t  Name\n\t\t\t<button>\n\t\t\t...\n\t\t\t</>);\n}\n```\nAbout the syntax:\n1. It's a convention to name the case argument 'type', and the state related argument 'payload'. It's not a rule though.\n2. The reducer function is kept outside the component. This is not a very strict rule, but is the recommended way. Why: it doesn't re-prepare the reducer function every time that the component is run, which is good memory+time wise.\n\n- Also, as in `useState`, dispatch causes a re-render of the component, with the new state.\n- Having a `default` case (in the reducer function) that returns an error is a good practice, it helps avoid errors.\n\n#### Computed initialState\n- The `useReducer`, and hence `initialState` is ignored after the first render, the whole statement is.\n- There is an alternative syntax, that's especially useful if the initial value is the result of an expensive computation, and so should be run once during the first render. Only the `useReducer` statement changes.\n\t```jsx\n\tconst [stateVar, dispatchFunc] = useReducer(reducerFunc, intialArg, initFunc);\n\t\t\t// the initial value is now initFunc(initialArg).\n\t```\n\n### What\n- [Here](https://github.com/exemplar-codes/react-hello-world/blob/5a83a92598ad832fb882a43ede103946b9815458/src/Apps/UseReducerDemo/UseReducerDemo.jsx) is a simple example.\n- `useReducer` is like having a signal + payload (action) - an API(logic - reducer) and a backend (state). It's a good coding pattern. Makes the code sweet.\nSo `useReducer` is a syntax sugar of  `useState`, functionally.\n\n[Here](https://devtrium.com/posts/how-to-use-react-usereducer-hook#what-is-react-usereducer-hook-and-how-to-use-it)'s a good article for useReducer I took info from.\n",
      "html": "<h1 id=\"117.-usereducer-hook\">117. useReducer hook <a class=\"heading-anchor-permalink\" href=\"#117.-usereducer-hook\">#</a></h1>\n<p>Created Tuesday 12 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h3 id=\"why-(when-to-use-it-instead-of-usestate)\">Why (when to use it instead of <code>useState</code>) <a class=\"heading-anchor-permalink\" href=\"#why-(when-to-use-it-instead-of-usestate)\">#</a></h3>\n<p><code>useReducer</code> is a syntax sugar for <code>useState</code> . It is preferred over <code>useState</code> if the state:</p>\n<ul>\n<li>Is complex (has many parts).</li>\n<li>The state and data inside it are highly related (OK, but Why?).</li>\n<li>Types of updates are more, as using <code>useState</code> would result in a lot of functions, which makes the JSX or JS code bulky.</li>\n</ul>\n<p><code>useReducer</code> is an “additional” hook, and <code>useState</code> is the primary hook.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>The 4 things needed for <code>useReducer</code> are:</p>\n<ol>\n<li>State - to be read</li>\n<li>Dispatch function - to be called with case argument and payload(state related argument). This function is provided by the hook.</li>\n<li>Reducer - this sets the new state based on the case argument and state related argument. This function is usually a switch case.</li>\n<li>Initial value of the state.</li>\n</ol>\n<p>The basic syntax for <code>useReducer</code> is:</p>\n<pre><code class=\"language-jsx\">import React, { useReducer } from 'react';\n\nfunction reducerFunc(state, action) {\n\t// latest state,\n\t// action is the variable passed to dispath\n\tswitch(action.type)\n\t{\n\t\tcase 'CASE_VAL':\n\t\t\treturn {...state, name: action.payload}; // becomes state\n\t\t...\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown reducer type: ${action.type}`);\n\t}\n}\n\nfunction MyComponent () {\n\tconst [stateVar, dispatchFunc] = useReducer(reducerFunc, intialState);\n\t\n\treturn (&lt;&gt;\n\t\t\t...\n\t\t\t{state.name}\n\t\t\t...\n\t\t\t&lt;button \n\t\t\t\tonClick={()=&gt;dispatchFunc({type: 'CASE_VAL', payload: 'arg'}) }\n\t\t\t&gt;\n\t\t\t  Name\n\t\t\t&lt;button&gt;\n\t\t\t...\n\t\t\t&lt;/&gt;);\n}\n</code></pre>\n<p>About the syntax:</p>\n<ol>\n<li>It’s a convention to name the case argument ‘type’, and the state related argument ‘payload’. It’s not a rule though.</li>\n<li>The reducer function is kept outside the component. This is not a very strict rule, but is the recommended way. Why: it doesn’t re-prepare the reducer function every time that the component is run, which is good memory+time wise.</li>\n</ol>\n<ul>\n<li>Also, as in <code>useState</code>, dispatch causes a re-render of the component, with the new state.</li>\n<li>Having a <code>default</code> case (in the reducer function) that returns an error is a good practice, it helps avoid errors.</li>\n</ul>\n<h4 id=\"computed-initialstate\">Computed initialState <a class=\"heading-anchor-permalink\" href=\"#computed-initialstate\">#</a></h4>\n<ul>\n<li>The <code>useReducer</code>, and hence <code>initialState</code> is ignored after the first render, the whole statement is.</li>\n<li>There is an alternative syntax, that’s especially useful if the initial value is the result of an expensive computation, and so should be run once during the first render. Only the <code>useReducer</code> statement changes.<pre><code class=\"language-jsx\">const [stateVar, dispatchFunc] = useReducer(reducerFunc, intialArg, initFunc);\n\t\t// the initial value is now initFunc(initialArg).\n</code></pre>\n</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/exemplar-codes/react-hello-world/blob/5a83a92598ad832fb882a43ede103946b9815458/src/Apps/UseReducerDemo/UseReducerDemo.jsx\">Here</a> is a simple example.</li>\n<li><code>useReducer</code> is like having a signal + payload (action) - an API(logic - reducer) and a backend (state). It’s a good coding pattern. Makes the code sweet.\nSo <code>useReducer</code> is a syntax sugar of  <code>useState</code>, functionally.</li>\n</ul>\n<p><a href=\"https://devtrium.com/posts/how-to-use-react-usereducer-hook#what-is-react-usereducer-hook-and-how-to-use-it\">Here</a>’s a good article for useReducer I took info from.</p>\n",
      "id": 9
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/121_Introducing_React_Context_(Context_API).md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/121_Introducing_React_Context_(Context_API).html",
      "content": "# 121. Introducing React Context (Context_API)\nCreated Tuesday 14 March 2022\n- [ ] in vault\n\n### Why\n##### Situation\nWe pass data:\n1. Down (parent --> child) using props.\n2. Up (child --> parent) by lifting state up.\n\nBut many times, it happens that the source and destination are not directly connected.\nIn this case, we pass props or lift state up through components that don't have anything to do with the data being passed i.e. they are just used as \"plumbing\" for passing data.\n\nThis is fine from a functionality point of view.\n\n##### Problem\nBut this is not good from a code-design point of view, because only relevant data should remain at relevant places. Data not related to a component should not at all be handled in it, i.e. for \"plumbing\" purposes.\n\nEven if the code-design is ignored, for bigger apps, this leads to bad code, because it becomes difficult to know which component is actually using the data and which component is just used for forwarding data.\n\nFIXME: Is it really a problem though, we could have just marked props as \"forwarding\"/\"relevant\".\n\n##### Solution\nHave a \"component-wide\" (component wide global) state storage, which is read/written to by the relevant components.\nThis makes the code more elegant.\n\nFIXME: is using a relatively \"global\" state a good thing?\n\n### What\nIt's like a syntax sugar, where props are being handled in a marked way, i.e. plumbing props vs useful props. This is the implementation, I guess (FIXME: guess?).",
      "html": "<h1 id=\"121.-introducing-react-context-(context_api)\">121. Introducing React Context (Context_API) <a class=\"heading-anchor-permalink\" href=\"#121.-introducing-react-context-(context_api)\">#</a></h1>\n<p>Created Tuesday 14 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<h5 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h5>\n<p>We pass data:</p>\n<ol>\n<li>Down (parent --&gt; child) using props.</li>\n<li>Up (child --&gt; parent) by lifting state up.</li>\n</ol>\n<p>But many times, it happens that the source and destination are not directly connected.\nIn this case, we pass props or lift state up through components that don’t have anything to do with the data being passed i.e. they are just used as “plumbing” for passing data.</p>\n<p>This is fine from a functionality point of view.</p>\n<h5 id=\"problem\">Problem <a class=\"heading-anchor-permalink\" href=\"#problem\">#</a></h5>\n<p>But this is not good from a code-design point of view, because only relevant data should remain at relevant places. Data not related to a component should not at all be handled in it, i.e. for “plumbing” purposes.</p>\n<p>Even if the code-design is ignored, for bigger apps, this leads to bad code, because it becomes difficult to know which component is actually using the data and which component is just used for forwarding data.</p>\n<p>FIXME: Is it really a problem though, we could have just marked props as “forwarding”/“relevant”.</p>\n<h5 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h5>\n<p>Have a “component-wide” (component wide global) state storage, which is read/written to by the relevant components.\nThis makes the code more elegant.</p>\n<p>FIXME: is using a relatively “global” state a good thing?</p>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>It’s like a syntax sugar, where props are being handled in a marked way, i.e. plumbing props vs useful props. This is the implementation, I guess (FIXME: guess?).</p>\n",
      "id": 10
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/122_Using_React_Context_API.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/122_Using_React_Context_API.html",
      "content": "# 122. Using React Context API\nCreated Tuesday 14 March 2022\n- [ ] in vault\n\n### Why\nPassing props or lifting state visibly is not good, better use a component-wide state.\n\n\n### How\nThe 3 steps when using the Context API, obviously (logically), are:\n1. **Create** the context. This is done in a standalone file.\n2. **Provide** the context at the appropriate place (component). It's made available to all descendants of the selected root component. Remember to **specify** the context value (object) at this stage.\n3. **Consume** the context. Of course in a descendant. *Consuming the context outside of the Provider is not possible (really important - because React does not raise an error when you do this, which leads to silent bugs).*\n\nNote: Both the provider and consumer are generated from the context. Remembering this makes it very easy to remember the whole syntax of context API.\n\nThere are two ways of consuming Context:\n1. Using the `Consumer` component. This just looks a tad ugly.\n2. Using the `useContext` hook. Looks better.\n\n###### Details of using React Context\n1. To **Create** the context, make a React component named something like 'context'. This is done in separate a JavaScript file. It's recommended to store this in a folder called 'store'.\n```js\nimport React from 'react';\n\nconst AuthContext = React.createContext({});\n\nexport default AuthContext;\n```\n2. To **provide**, or place the store at the place of use - import and wrap the provider component (i.e. ContextComponent.`Provider`) around the ancestor component. This specifies that the context will be available to all descendants, and the ancestor will re-render if any change occurs in the context.\n   \n   Remember to provide the context object here as a `value`.\n```jsx\nimport React, { useState } from 'react';\n\nimport AuthContext from './path_to_auth-context';\n\nconst AppCommonAncestor = () => {\n\tconst [val, setVal] = useState(0);\n\t\n\treturn (<AuthContext.Provider value={{val, setVal}}> \n\t\t\t{/* code as usual */}\n\t\t\t</AuthContext.Provider>);\n};\n```\n3.  To consume the context, import the context component and use the `useContext` hook. Using the hook actually provides a read only<span title=\"write is achieved using functions, similar to lifting state up\">*</span> copy of the context, so that re-renders are possible (from the first ancestor).\n```jsx\nimport React from 'react';\n\nimport AuthContext from './path_to_auth-context';\n\nimport AppComponent = () => {\n\tconst ctx = useContext(AuthContext);\n\t\n\treturn (<>\n\t\t\t{ \n\t\t\t// can read ctx. writing is done by function invocation\n\t\t\t}\n\t\t\t</>);\n};\n```\n\nNote: There's another way to consume context - just wrap the consuming component's code by the Context.`Consumer`. This is equivalent to using the hook, but looks bad.\n```jsx\nimport React from 'react';\n\nimport AuthContext from './path_to_auth-context';\n\nimport AppComponent = () => {\n\treturn (<AuthContext.Consumer>\n\t\t\t{ \n\t\t\t\t(ctx) => {\n\t\t\t\t\t// can read ctx. writing is done by function invocation\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t</AuthContext.Consumer>);\n};\n```\n\n**Tip**: For better IDE auto-completion, just add some attributes (called default context) in the context component.\n\n\n### What\n- React context is thus a way to have a global state across components.\n- The hook provides a read only object for each user(consumer component). A write re-renders the ancestor component, effectively re-rendering all descendant components.\n\n- One should absolutely use `useState`, `useEffect` at the component where context is \"Provided\", for persistence and automatic re-renders, of course by adding the `useState` variables to the context. FIXME: is `useState` even required if writing to context already causes re-render?\n\n- One must be careful to not use context for reusable components, which must use props (which are basically arguments for them).\n- So use context only when there's lot of plumbing needed AND the components involved are *specific*(i.e. not reused).\n\n- Context component(s) and the store folder are nice way to handle all data within the app, in a dedicated place.\n\n\n### Architectural style for context\nThere are two ways to write code when using context - because \"context by default does not contain state\":\n1. Have a file containing the context, and specify the `Provider` `value` separately at the \"root\" (ancestor) of the UI subset. The stateful logic, in this case is specified at the \"root\" component, a core UI component. Note that all context is accessible within this \"root\" component.\n\t```jsx\n\t// FoodContext.js\n\tconst FoodContext = React.createContext({});\n\texport default FoodContext;\n\t```\n\t\n\t```jsx\n\t// FoodRoot.jsx\n\timport FoodContext from './store_path/FoodContext';\n\n\tfunction FoodRoot () {\n\t\t// the UI subset tree's state logic start\n\t\tconst [count, setCount] = useState(0);\n\t\t// state logic end\n\n\t\treturn \n\t\t(\n\t\t\t<FoodContext.Provider value={{count, setCount}}>\n\t\t\t\t... <!-- can use count, setCount here -->\n\t\t\t</FoodContext.Provider>\n\t\t);\n\t}\n\texport default FoodRoot;\n\t```\n2. Have a single file to specify both the context and `Provider` `value` , then export both (use `props.children` for the Provider being exported). Essentially, all context (including state logic) resides in the context file, and not in any core UI component. Note that the context is not available at the \"Provider\" component (\"FoodRoot.jsx\" here).\n\t```jsx\n\t// FoodContext.js\n\tconst FoodContext = React.createContext({});\n\n\tfunction FoodContextProvider() {\n\t\tconst [count, setCount] = useState(0); // have state logic here\n\n\t\treturn \n\t\t(\n\t\t\t<FoodContext.Provider value={{count, setCount}}>\n\t\t\t\t{props.children /* IMPORTANT */}\n\t\t\t</FoodContext.Provider>\n\t\t);\n\t}\n\t\n\texport default FoodContext;\n\texport { FoodContextProvider };\n\t```\n\t\n\t```jsx\n\t// FoodRoot.jsx\n\timport { FoodContextProvider } from './store_path/FoodContext';\n\n\tfunction FoodRoot () {\n\t\treturn \n\t\t(\n\t\t\t<FoodContextProvider>\n\t\t\t\t... <!-- CANNOT use count, setCount directly here -->\n\t\t\t</FoodContextProvider>\n\t\t);\n\t}\n\texport default FoodRoot;\n\t```\n- Note that both styles don't affect the consumption of the context in any way, and that we still need to export the context.\n- What to use? Well both have their pros and cons. In case 1, context is available in the \"Provider\" component, but not in case 2. The con of case 1 is that the Provider is clogged with context details, which may be removed from it and placed in the context, to make the code lean.",
      "html": "<h1 id=\"122.-using-react-context-api\">122. Using React Context API <a class=\"heading-anchor-permalink\" href=\"#122.-using-react-context-api\">#</a></h1>\n<p>Created Tuesday 14 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Passing props or lifting state visibly is not good, better use a component-wide state.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>The 3 steps when using the Context API, obviously (logically), are:</p>\n<ol>\n<li><strong>Create</strong> the context. This is done in a standalone file.</li>\n<li><strong>Provide</strong> the context at the appropriate place (component). It’s made available to all descendants of the selected root component. Remember to <strong>specify</strong> the context value (object) at this stage.</li>\n<li><strong>Consume</strong> the context. Of course in a descendant. <em>Consuming the context outside of the Provider is not possible (really important - because React does not raise an error when you do this, which leads to silent bugs).</em></li>\n</ol>\n<p>Note: Both the provider and consumer are generated from the context. Remembering this makes it very easy to remember the whole syntax of context API.</p>\n<p>There are two ways of consuming Context:</p>\n<ol>\n<li>Using the <code>Consumer</code> component. This just looks a tad ugly.</li>\n<li>Using the <code>useContext</code> hook. Looks better.</li>\n</ol>\n<h6 id=\"details-of-using-react-context\">Details of using React Context <a class=\"heading-anchor-permalink\" href=\"#details-of-using-react-context\">#</a></h6>\n<ol>\n<li>To <strong>Create</strong> the context, make a React component named something like ‘context’. This is done in separate a JavaScript file. It’s recommended to store this in a folder called ‘store’.</li>\n</ol>\n<pre><code class=\"language-js\">import React from 'react';\n\nconst AuthContext = React.createContext({});\n\nexport default AuthContext;\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>To <strong>provide</strong>, or place the store at the place of use - import and wrap the provider component (i.e. ContextComponent.<code>Provider</code>) around the ancestor component. This specifies that the context will be available to all descendants, and the ancestor will re-render if any change occurs in the context.</p>\n<p>Remember to provide the context object here as a <code>value</code>.</p>\n</li>\n</ol>\n<pre><code class=\"language-jsx\">import React, { useState } from 'react';\n\nimport AuthContext from './path_to_auth-context';\n\nconst AppCommonAncestor = () =&gt; {\n\tconst [val, setVal] = useState(0);\n\t\n\treturn (&lt;AuthContext.Provider value={{val, setVal}}&gt; \n\t\t\t{/* code as usual */}\n\t\t\t&lt;/AuthContext.Provider&gt;);\n};\n</code></pre>\n<ol start=\"3\">\n<li>To consume the context, import the context component and use the <code>useContext</code> hook. Using the hook actually provides a read only<span title=\"write is achieved using functions, similar to lifting state up\">*</span> copy of the context, so that re-renders are possible (from the first ancestor).</li>\n</ol>\n<pre><code class=\"language-jsx\">import React from 'react';\n\nimport AuthContext from './path_to_auth-context';\n\nimport AppComponent = () =&gt; {\n\tconst ctx = useContext(AuthContext);\n\t\n\treturn (&lt;&gt;\n\t\t\t{ \n\t\t\t// can read ctx. writing is done by function invocation\n\t\t\t}\n\t\t\t&lt;/&gt;);\n};\n</code></pre>\n<p>Note: There’s another way to consume context - just wrap the consuming component’s code by the Context.<code>Consumer</code>. This is equivalent to using the hook, but looks bad.</p>\n<pre><code class=\"language-jsx\">import React from 'react';\n\nimport AuthContext from './path_to_auth-context';\n\nimport AppComponent = () =&gt; {\n\treturn (&lt;AuthContext.Consumer&gt;\n\t\t\t{ \n\t\t\t\t(ctx) =&gt; {\n\t\t\t\t\t// can read ctx. writing is done by function invocation\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t&lt;/AuthContext.Consumer&gt;);\n};\n</code></pre>\n<p><strong>Tip</strong>: For better IDE auto-completion, just add some attributes (called default context) in the context component.</p>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<ul>\n<li>\n<p>React context is thus a way to have a global state across components.</p>\n</li>\n<li>\n<p>The hook provides a read only object for each user(consumer component). A write re-renders the ancestor component, effectively re-rendering all descendant components.</p>\n</li>\n<li>\n<p>One should absolutely use <code>useState</code>, <code>useEffect</code> at the component where context is “Provided”, for persistence and automatic re-renders, of course by adding the <code>useState</code> variables to the context. FIXME: is <code>useState</code> even required if writing to context already causes re-render?</p>\n</li>\n<li>\n<p>One must be careful to not use context for reusable components, which must use props (which are basically arguments for them).</p>\n</li>\n<li>\n<p>So use context only when there’s lot of plumbing needed AND the components involved are <em>specific</em>(i.e. not reused).</p>\n</li>\n<li>\n<p>Context component(s) and the store folder are nice way to handle all data within the app, in a dedicated place.</p>\n</li>\n</ul>\n<h3 id=\"architectural-style-for-context\">Architectural style for context <a class=\"heading-anchor-permalink\" href=\"#architectural-style-for-context\">#</a></h3>\n<p>There are two ways to write code when using context - because “context by default does not contain state”:</p>\n<ol>\n<li>\n<p>Have a file containing the context, and specify the <code>Provider</code> <code>value</code> separately at the “root” (ancestor) of the UI subset. The stateful logic, in this case is specified at the “root” component, a core UI component. Note that all context is accessible within this “root” component.</p>\n<pre><code class=\"language-jsx\">// FoodContext.js\nconst FoodContext = React.createContext({});\nexport default FoodContext;\n</code></pre>\n<pre><code class=\"language-jsx\">// FoodRoot.jsx\nimport FoodContext from './store_path/FoodContext';\n\nfunction FoodRoot () {\n\t// the UI subset tree's state logic start\n\tconst [count, setCount] = useState(0);\n\t// state logic end\n\n\treturn \n\t(\n\t\t&lt;FoodContext.Provider value={{count, setCount}}&gt;\n\t\t\t... &lt;!-- can use count, setCount here --&gt;\n\t\t&lt;/FoodContext.Provider&gt;\n\t);\n}\nexport default FoodRoot;\n</code></pre>\n</li>\n<li>\n<p>Have a single file to specify both the context and <code>Provider</code> <code>value</code> , then export both (use <code>props.children</code> for the Provider being exported). Essentially, all context (including state logic) resides in the context file, and not in any core UI component. Note that the context is not available at the “Provider” component (“FoodRoot.jsx” here).</p>\n<pre><code class=\"language-jsx\">// FoodContext.js\nconst FoodContext = React.createContext({});\n\nfunction FoodContextProvider() {\n\tconst [count, setCount] = useState(0); // have state logic here\n\n\treturn \n\t(\n\t\t&lt;FoodContext.Provider value={{count, setCount}}&gt;\n\t\t\t{props.children /* IMPORTANT */}\n\t\t&lt;/FoodContext.Provider&gt;\n\t);\n}\n\nexport default FoodContext;\nexport { FoodContextProvider };\n</code></pre>\n<pre><code class=\"language-jsx\">// FoodRoot.jsx\nimport { FoodContextProvider } from './store_path/FoodContext';\n\nfunction FoodRoot () {\n\treturn \n\t(\n\t\t&lt;FoodContextProvider&gt;\n\t\t\t... &lt;!-- CANNOT use count, setCount directly here --&gt;\n\t\t&lt;/FoodContextProvider&gt;\n\t);\n}\nexport default FoodRoot;\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>Note that both styles don’t affect the consumption of the context in any way, and that we still need to export the context.</li>\n<li>What to use? Well both have their pros and cons. In case 1, context is available in the “Provider” component, but not in case 2. The con of case 1 is that the Provider is clogged with context details, which may be removed from it and placed in the context, to make the code lean.</li>\n</ul>\n",
      "id": 11
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/123_Context_Limitations.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/123_Context_Limitations.html",
      "content": "# 123. Context Limitations\nCreated Tuesday 06 May 2022\n- [ ] in vault\n\n\n###### What are the limitations?\n1. This is not a limitation, but just a reminder - context is for managing state and props are for configuring (i.e. passing arguments) to reusable components. So context API cannot and should not be used everywhere. Props are still vital and have a separate role.\n2. React context is not optimized for frequent state changes. This is just how it is designed. The tool that allows for both global state and fast changes is Redux.js, which we will learn soon.\n3. Components subscribed to context (i.e. have `useContext`) in them will be updated, even if part of context they're using is unchanged. i.e. re-renders aren't as granular as they could be. *Redux* doesn't have this issue, since one can \"subscribe\" to specific parts of the store too, and the component gets a re-render signal only when those parts change.",
      "html": "<h1 id=\"123.-context-limitations\">123. Context Limitations <a class=\"heading-anchor-permalink\" href=\"#123.-context-limitations\">#</a></h1>\n<p>Created Tuesday 06 May 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h6 id=\"what-are-the-limitations%3F\">What are the limitations? <a class=\"heading-anchor-permalink\" href=\"#what-are-the-limitations%3F\">#</a></h6>\n<ol>\n<li>This is not a limitation, but just a reminder - context is for managing state and props are for configuring (i.e. passing arguments) to reusable components. So context API cannot and should not be used everywhere. Props are still vital and have a separate role.</li>\n<li>React context is not optimized for frequent state changes. This is just how it is designed. The tool that allows for both global state and fast changes is Redux.js, which we will learn soon.</li>\n<li>Components subscribed to context (i.e. have <code>useContext</code>) in them will be updated, even if part of context they’re using is unchanged. i.e. re-renders aren’t as granular as they could be. <em>Redux</em> doesn’t have this issue, since one can “subscribe” to specific parts of the store too, and the component gets a re-render signal only when those parts change.</li>\n</ol>\n",
      "id": 12
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/127_Rules_of_hooks.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/127_Rules_of_hooks.html",
      "content": "# 127. Rules of hooks\nCreated Tuesday 06 May 2022\n- [ ] in vault\n\n- Basically, simple rules like don't use hooks inside conditionals, loops in the component function.\n- To be honest, I don't think these rules should be kept in mind actively, because it's really rare that one thinks/needs hooks inside conditionals/loops or anything these rules stand for. There's not much to worry about learning these rules.\nFIXME: add details",
      "html": "<h1 id=\"127.-rules-of-hooks\">127. Rules of hooks <a class=\"heading-anchor-permalink\" href=\"#127.-rules-of-hooks\">#</a></h1>\n<p>Created Tuesday 06 May 2022</p>\n<ul>\n<li>\n<p>[ ] in vault</p>\n</li>\n<li>\n<p>Basically, simple rules like don’t use hooks inside conditionals, loops in the component function.</p>\n</li>\n<li>\n<p>To be honest, I don’t think these rules should be kept in mind actively, because it’s really rare that one thinks/needs hooks inside conditionals/loops or anything these rules stand for. There’s not much to worry about learning these rules.\nFIXME: add details</p>\n</li>\n</ul>\n",
      "id": 13
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/129_Forward_refs.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/10_side-effects,_reducers,_contextAPI/129_Forward_refs.html",
      "content": "# 129. Forward refs\nCreated Tuesday 06 May 2022\n- [ ] in vault\n\n### Why\n- The `useRef` hooks works on HTML elements only, and not custom components.\n- The forward ref functionality let's one add refs to custom components too, so that they can be controlled directly (without the need of state/re-renders).\n- It's rarely used.\n- Used to pass control of \"ref\" state to children.\n- Practically, used to pass control of parent to child. Example: a collapsible wrapper component exposes a ref it's \"slots\", which may be used to `open`, `close`, `toggle` the popup as well as let the child know if the popup is visible or not.\n\n### How\nHere's an example. We use ref on a custom component, just like a ref is added to an HTML element.\n```jsx\nimport { useRef } from 'react';\n\nfunction MainApp() {\n\tconst inputRef = useRef();\n\t\n\t/* some logic using inputRef.current */\n\t\n\treturn <Section ref={inputRef} />;\n}\n\nexport default \n```\n\nWe need to drill down the component chain using `forwardRef` for each component in the chain, and add `ref`,  till we reach an HTML element, where we also add a `ref`. The `ref` on the top of the chain will now reference the HTML element at the bottom of the chain.\n```jsx\nconst Section = React.forwardRef((props, ref) => <input type='text' ref={ref} />);\n\nexport default Section;\n```",
      "html": "<h1 id=\"129.-forward-refs\">129. Forward refs <a class=\"heading-anchor-permalink\" href=\"#129.-forward-refs\">#</a></h1>\n<p>Created Tuesday 06 May 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<ul>\n<li>The <code>useRef</code> hooks works on HTML elements only, and not custom components.</li>\n<li>The forward ref functionality let’s one add refs to custom components too, so that they can be controlled directly (without the need of state/re-renders).</li>\n<li>It’s rarely used.</li>\n<li>Used to pass control of “ref” state to children.</li>\n<li>Practically, used to pass control of parent to child. Example: a collapsible wrapper component exposes a ref it’s “slots”, which may be used to <code>open</code>, <code>close</code>, <code>toggle</code> the popup as well as let the child know if the popup is visible or not.</li>\n</ul>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>Here’s an example. We use ref on a custom component, just like a ref is added to an HTML element.</p>\n<pre><code class=\"language-jsx\">import { useRef } from 'react';\n\nfunction MainApp() {\n\tconst inputRef = useRef();\n\t\n\t/* some logic using inputRef.current */\n\t\n\treturn &lt;Section ref={inputRef} /&gt;;\n}\n\nexport default \n</code></pre>\n<p>We need to drill down the component chain using <code>forwardRef</code> for each component in the chain, and add <code>ref</code>,  till we reach an HTML element, where we also add a <code>ref</code>. The <code>ref</code> on the top of the chain will now reference the HTML element at the bottom of the chain.</p>\n<pre><code class=\"language-jsx\">const Section = React.forwardRef((props, ref) =&gt; &lt;input type='text' ref={ref} /&gt;);\n\nexport default Section;\n</code></pre>\n",
      "id": 14
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/133_Adding_a_header_component.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/133_Adding_a_header_component.html",
      "content": "# 133. Adding a header component\nCreated Saturday 25 June 2022\n\n[Code link -React Meals](https://github.com/exemplar-codes/react-meals)\n- React, or more correctly, Webpack, requires assets to be imported (via `import` or `require`), and assets don't work normally, like in case of `img src` or `link href`.\n```jsx\nimport imageFile from './image.jpg';\nimport styles from './stylesheet.css';\n\nfunction App {\n\treturn \n\t(<>\n\t\t<link rel=\"stylesheet\" href=\"../style.css\" /> <!-- Won't work -->\n\t\t<link rel=\"stylesheet\" href={styles} /> <!-- Works -->\n\t\t\n\t\t...\n\t\t<img src=\"./image.jpg\" /> <!-- Won't work -->\n\t\t<img src={imageFile} /> <!-- Works -->\n\t\t...\n\t<>);\n}\n```",
      "html": "<h1 id=\"133.-adding-a-header-component\">133. Adding a header component <a class=\"heading-anchor-permalink\" href=\"#133.-adding-a-header-component\">#</a></h1>\n<p>Created Saturday 25 June 2022</p>\n<p><a href=\"https://github.com/exemplar-codes/react-meals\">Code link -React Meals</a></p>\n<ul>\n<li>React, or more correctly, Webpack, requires assets to be imported (via <code>import</code> or <code>require</code>), and assets don’t work normally, like in case of <code>img src</code> or <code>link href</code>.</li>\n</ul>\n<pre><code class=\"language-jsx\">import imageFile from './image.jpg';\nimport styles from './stylesheet.css';\n\nfunction App {\n\treturn \n\t(&lt;&gt;\n\t\t&lt;link rel=&quot;stylesheet&quot; href=&quot;../style.css&quot; /&gt; &lt;!-- Won't work --&gt;\n\t\t&lt;link rel=&quot;stylesheet&quot; href={styles} /&gt; &lt;!-- Works --&gt;\n\t\t\n\t\t...\n\t\t&lt;img src=&quot;./image.jpg&quot; /&gt; &lt;!-- Won't work --&gt;\n\t\t&lt;img src={imageFile} /&gt; &lt;!-- Works --&gt;\n\t\t...\n\t&lt;&gt;);\n}\n</code></pre>\n",
      "id": 15
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/137_Adding_a_form.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/137_Adding_a_form.html",
      "content": "# 137. Adding a form\nCreated Saturday 25 June 2022\n\n* Key attribute can be set on HTML elements as well as custom components. Note that key *won't* be available as prop if passed to a custom component. See [StackOverflow](https://stackoverflow.com/questions/30465651/passing-keys-to-children-in-react-js#comment-49012941) for details/discussion.\n\n- It is normal and desirable to have a bunch of generic components that are used all over the app. They can be stored in a folder called 'shared' or 'UI'.\n\n- `label` HTML element in React uses `htmlFor` instead of `for`.\n\n- One can rewrite multiple attributes on an element succinctly, by using the spread operator. As usual, key-value of the object will match the attribute names and values.\n```jsx\nfunction App (){\n\tconst attribs = {name: 'Sanjar', age: 24};\n\treturn <>\n\t\t...\n\t\t<Item id={attribs.name} age={attribs.age} height={5.10}/> <!-- longer -->\n\t\t<Item {...attribs} height={5.10} /> <!-- equivalent, consise -->\n\t\t...\n\t</>;\n}\n```\n",
      "html": "<h1 id=\"137.-adding-a-form\">137. Adding a form <a class=\"heading-anchor-permalink\" href=\"#137.-adding-a-form\">#</a></h1>\n<p>Created Saturday 25 June 2022</p>\n<ul>\n<li>Key attribute can be set on HTML elements as well as custom components. Note that key <em>won’t</em> be available as prop if passed to a custom component. See <a href=\"https://stackoverflow.com/questions/30465651/passing-keys-to-children-in-react-js#comment-49012941\">StackOverflow</a> for details/discussion.</li>\n</ul>\n<ul>\n<li>\n<p>It is normal and desirable to have a bunch of generic components that are used all over the app. They can be stored in a folder called ‘shared’ or ‘UI’.</p>\n</li>\n<li>\n<p><code>label</code> HTML element in React uses <code>htmlFor</code> instead of <code>for</code>.</p>\n</li>\n<li>\n<p>One can rewrite multiple attributes on an element succinctly, by using the spread operator. As usual, key-value of the object will match the attribute names and values.</p>\n</li>\n</ul>\n<pre><code class=\"language-jsx\">function App (){\n\tconst attribs = {name: 'Sanjar', age: 24};\n\treturn &lt;&gt;\n\t\t...\n\t\t&lt;Item id={attribs.name} age={attribs.age} height={5.10}/&gt; &lt;!-- longer --&gt;\n\t\t&lt;Item {...attribs} height={5.10} /&gt; &lt;!-- equivalent, consise --&gt;\n\t\t...\n\t&lt;/&gt;;\n}\n</code></pre>\n",
      "id": 16
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/141_Managing_cart_and_modal_state.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/141_Managing_cart_and_modal_state.html",
      "content": "# 141. Managing cart and modal state\nCreated Saturday 25 June 2022\n\nModals generally have two components:\n1. The content box\n2. The backdrop - meaning the space surrounding the content box.\n\nUsually, the content box has a \"Cancel\" button. Also, it's a good UX practice to make the backdrop clickable and the click to act as the \"Cancel\" button.\n\nTo have these features in a modal, make the modal consisting of two pieces, a backdrop `div` along with a \"content box\" placed at the centre. Add an `onClick` to the `div` (the backdrop) too.",
      "html": "<h1 id=\"141.-managing-cart-and-modal-state\">141. Managing cart and modal state <a class=\"heading-anchor-permalink\" href=\"#141.-managing-cart-and-modal-state\">#</a></h1>\n<p>Created Saturday 25 June 2022</p>\n<p>Modals generally have two components:</p>\n<ol>\n<li>The content box</li>\n<li>The backdrop - meaning the space surrounding the content box.</li>\n</ol>\n<p>Usually, the content box has a “Cancel” button. Also, it’s a good UX practice to make the backdrop clickable and the click to act as the “Cancel” button.</p>\n<p>To have these features in a modal, make the modal consisting of two pieces, a backdrop <code>div</code> along with a “content box” placed at the centre. Add an <code>onClick</code> to the <code>div</code> (the backdrop) too.</p>\n",
      "id": 17
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/149_Using_the_useEffect_hook.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/11_FoodOrder_app/149_Using_the_useEffect_hook.html",
      "content": "# 149. Using the useEffect hook\nCreated Saturday 01 July 2022\n\nI have two things that are not clear to me:\n1. When to use useEffect, exactly? The author used useEffect to apply styles to a component. If I keep thinking \"useEffects are used for side-effects\", how am I going to be sure when to use it. Need a better understanding of when to use useEffect. FIXME: when to use useEffect\n2. How does state (and context) work for the descendant components? By this, I mean what happens to state of the descendant component when the parent's state changes, does their `useState` statement run again, or is anything preserved? This is really confusing for me. Example: There was a descendant using a context, and the context changed. I had a `console.log` in this component to monitor re-renders, but it never ran after the first time, which is strange since the context changed, and all descendants should be re-render. Does re-render not mean that the component function/file is ran again? FIXME: how do descendant re-renders work?\n\nAnswers\n1. *TBD*\n2. Okay here are the observations:\n\t1. Files are never re-run on render. Yeah, it doesn't make sense.\n\t2. Component functions are run again on re-render (i.e. of course, due to state change in relevant component/ancestor)\n\t3. Hooks are NOT run again, even if the re-render is caused by an ancestor.\n\tThis means that a de-hooked copy of the function is kept in memory at all times.",
      "html": "<h1 id=\"149.-using-the-useeffect-hook\">149. Using the useEffect hook <a class=\"heading-anchor-permalink\" href=\"#149.-using-the-useeffect-hook\">#</a></h1>\n<p>Created Saturday 01 July 2022</p>\n<p>I have two things that are not clear to me:</p>\n<ol>\n<li>When to use useEffect, exactly? The author used useEffect to apply styles to a component. If I keep thinking “useEffects are used for side-effects”, how am I going to be sure when to use it. Need a better understanding of when to use useEffect. FIXME: when to use useEffect</li>\n<li>How does state (and context) work for the descendant components? By this, I mean what happens to state of the descendant component when the parent’s state changes, does their <code>useState</code> statement run again, or is anything preserved? This is really confusing for me. Example: There was a descendant using a context, and the context changed. I had a <code>console.log</code> in this component to monitor re-renders, but it never ran after the first time, which is strange since the context changed, and all descendants should be re-render. Does re-render not mean that the component function/file is ran again? FIXME: how do descendant re-renders work?</li>\n</ol>\n<p>Answers</p>\n<ol>\n<li><em>TBD</em></li>\n<li>Okay here are the observations:\n<ol>\n<li>Files are never re-run on render. Yeah, it doesn’t make sense.</li>\n<li>Component functions are run again on re-render (i.e. of course, due to state change in relevant component/ancestor)</li>\n<li>Hooks are NOT run again, even if the re-render is caused by an ancestor.\nThis means that a de-hooked copy of the function is kept in memory at all times.</li>\n</ol>\n</li>\n</ol>\n",
      "id": 18
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/151_Module_Introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/151_Module_Introduction.html",
      "content": "# 151. Module Introduction\nCreated Monday 04 July 2022\n\nIt is important to understand how React works, as it will help in taking decisions while making React based UIs.\n\nWe'll learn 3 things in this module:\n1. How does React work behind the scenes?\n2. Understand virtual DOM and DOM updates.\n3. Understand state and state updates.",
      "html": "<h1 id=\"151.-module-introduction\">151. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#151.-module-introduction\">#</a></h1>\n<p>Created Monday 04 July 2022</p>\n<p>It is important to understand how React works, as it will help in taking decisions while making React based UIs.</p>\n<p>We’ll learn 3 things in this module:</p>\n<ol>\n<li>How does React work behind the scenes?</li>\n<li>Understand virtual DOM and DOM updates.</li>\n<li>Understand state and state updates.</li>\n</ol>\n",
      "id": 19
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/152_How_React_Really_Works.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/152_How_React_Really_Works.html",
      "content": "# 152. How React Really Works\nCreated Monday 04 July 2022\n\nThe React library is actually the set of two libraries:\n1. `react`  - \"A JavaScript library for building user interfaces\": Contains logic for diffing, component tree, props, state/context. It is oblivious of the browser and DOM, i.e. it works with an abstract UI tree. `react` hands the UI tree \"differences\" to `react-dom` in case of web apps.\n2. `react-dom` - \"interface to the web\": Contains logic to mutate the real DOM based on the \"differences to be made\" - provided by `react`.\n\n![](../../../../assets/152_How_React_Really_Works-image-1-024b227f.png)\n\n### Re-evaluating component function  !==  Re-rendering the DOM\n![](../../../../assets/152_How_React_Really_Works-image-2-024b227f.png)\n\nChanges are made only if they are required. If the HTML already exists, no change to the real DOM is made.\n![](../../../../assets/152_How_React_Really_Works-image-3-024b227f.png)\n",
      "html": "<h1 id=\"152.-how-react-really-works\">152. How React Really Works <a class=\"heading-anchor-permalink\" href=\"#152.-how-react-really-works\">#</a></h1>\n<p>Created Monday 04 July 2022</p>\n<p>The React library is actually the set of two libraries:</p>\n<ol>\n<li><code>react</code>  - “A JavaScript library for building user interfaces”: Contains logic for diffing, component tree, props, state/context. It is oblivious of the browser and DOM, i.e. it works with an abstract UI tree. <code>react</code> hands the UI tree “differences” to <code>react-dom</code> in case of web apps.</li>\n<li><code>react-dom</code> - “interface to the web”: Contains logic to mutate the real DOM based on the “differences to be made” - provided by <code>react</code>.</li>\n</ol>\n<p><img src=\"../../../../assets/152_How_React_Really_Works-image-1-024b227f.png\" alt=\"\"></p>\n<h3 id=\"re-evaluating-component-function-!%3D%3D-re-rendering-the-dom\">Re-evaluating component function  !==  Re-rendering the DOM <a class=\"heading-anchor-permalink\" href=\"#re-evaluating-component-function-!%3D%3D-re-rendering-the-dom\">#</a></h3>\n<p><img src=\"../../../../assets/152_How_React_Really_Works-image-2-024b227f.png\" alt=\"\"></p>\n<p>Changes are made only if they are required. If the HTML already exists, no change to the real DOM is made.\n<img src=\"../../../../assets/152_How_React_Really_Works-image-3-024b227f.png\" alt=\"\"></p>\n",
      "id": 20
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/153_Component_updates_in_action.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/153_Component_updates_in_action.html",
      "content": "# 153. Component updates in action\nCreated Monday 04 July 2022\n\n- I know that component functions are re-run on state change, but the DOM only updates diffs, and does not re-render everything. \n\t- Coded up an example here, see [code](https://github.com/exemplar-codes/assorted-reactjs-apps/commit/a3efefa66142ad22db73bc9017d578b53504823d) + [live app](https://exemplar-codes.github.io/ComponentUpdatesInAction#).\n\t- The diffs can be seen by flashing of tags in the Elements tab of DevTools.\n- It should be noted that all changes to the UI are caused by state changes, i.e. re-rendering takes place only if there's some state change.",
      "html": "<h1 id=\"153.-component-updates-in-action\">153. Component updates in action <a class=\"heading-anchor-permalink\" href=\"#153.-component-updates-in-action\">#</a></h1>\n<p>Created Monday 04 July 2022</p>\n<ul>\n<li>I know that component functions are re-run on state change, but the DOM only updates diffs, and does not re-render everything.\n<ul>\n<li>Coded up an example here, see <a href=\"https://github.com/exemplar-codes/assorted-reactjs-apps/commit/a3efefa66142ad22db73bc9017d578b53504823d\">code</a> + <a href=\"https://exemplar-codes.github.io/ComponentUpdatesInAction#\">live app</a>.</li>\n<li>The diffs can be seen by flashing of tags in the Elements tab of DevTools.</li>\n</ul>\n</li>\n<li>It should be noted that all changes to the UI are caused by state changes, i.e. re-rendering takes place only if there’s some state change.</li>\n</ul>\n",
      "id": 21
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/154_A_closer_look_at_child_component_re_evaluation.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/154_A_closer_look_at_child_component_re_evaluation.html",
      "content": "# 154. A closer look at child component re evaluation\nCreated Monday 04 July 2022\n\n### Component re-evaluation causes re-running of child components too\nOn re-render, the function re-executes, which includes re-execution of all UI component it returns. Example:\n```jsx\n\tfunction MyComponent() {\n\t\t// some state logic\n\t\treturn <><A /> <B /> <C /></>;\n\t}\n```\nOn re-render, the function 'MyComponent' will re-run, and so will the functions for component 'A', 'B' and 'C'. Note that this will continue recursively for all components used by A, B, C too. Also it does not matter if their props change or not, i.e. React *will* re-run the component functions even if props haven't change. Yes, this is inefficient.\n\t\nOf course, only differences will be updated in the real DOM, i.e. re-evaluating component function does not necessarily lead to a re-render of the DOM. Reason: React DOM diffing.\n\n---\n- Child component re-renders don't re-initialize their state. i.e. a child component preserves state between re-renders.",
      "html": "<h1 id=\"154.-a-closer-look-at-child-component-re-evaluation\">154. A closer look at child component re evaluation <a class=\"heading-anchor-permalink\" href=\"#154.-a-closer-look-at-child-component-re-evaluation\">#</a></h1>\n<p>Created Monday 04 July 2022</p>\n<h3 id=\"component-re-evaluation-causes-re-running-of-child-components-too\">Component re-evaluation causes re-running of child components too <a class=\"heading-anchor-permalink\" href=\"#component-re-evaluation-causes-re-running-of-child-components-too\">#</a></h3>\n<p>On re-render, the function re-executes, which includes re-execution of all UI component it returns. Example:</p>\n<pre><code class=\"language-jsx\">\tfunction MyComponent() {\n\t\t// some state logic\n\t\treturn &lt;&gt;&lt;A /&gt; &lt;B /&gt; &lt;C /&gt;&lt;/&gt;;\n\t}\n</code></pre>\n<p>On re-render, the function ‘MyComponent’ will re-run, and so will the functions for component ‘A’, ‘B’ and ‘C’. Note that this will continue recursively for all components used by A, B, C too. Also it does not matter if their props change or not, i.e. React <em>will</em> re-run the component functions even if props haven’t change. Yes, this is inefficient.</p>\n<p>Of course, only differences will be updated in the real DOM, i.e. re-evaluating component function does not necessarily lead to a re-render of the DOM. Reason: React DOM diffing.</p>\n<hr>\n<ul>\n<li>Child component re-renders don’t re-initialize their state. i.e. a child component preserves state between re-renders.</li>\n</ul>\n",
      "id": 22
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/155_Preventing_Unnecessary_ReEvaluations_with_React_memo.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/155_Preventing_Unnecessary_ReEvaluations_with_React_memo.html",
      "content": "# 155. Preventing Unnecessary Re-Evaluations with React.memo()\nCreated Sunday 10 July 2022\n\n### Why\n- In the last page, we acknowledged that in React, when a component re-evaluates, so do all of it's constituents, even if their props haven't change (which includes not having any). This *is* inefficient.\n\n### How\n- Solving the problem\n\t- The solution is simple, just compare the old and new props and run the component function only if there's a change. If there's no change, return the stored copy of the render output, i.e. don't compute it again. React provides this functionality out of the box.\n\t- This optimization is a trade-off though - prop diffing vs function re-evaluation. \n\t\t- And it depends (on number/complexity of props, number of child components) which is costly, so use `React.memo` with care.\n\t\t- If it's known that props will change frequently, it's better to avoid using `React.memo`.\n\t\t- It's better to use `React.memo` to avoid re-evaluations of whole UI tree sections, of course knowing that props don't change very frequently.\n\t- Why isn't this 'prop-diffing' the default - because of the overhead of prop-diffing.\n- **Important note** - `React.memo` is only concerned with props. State changes will always cause a re-evaluation, `React.memo` has no control over that.\n\n\n## What (syntax and details)\n - Skeleton - `export default React.memo(Component, [areEqualCallback])`\n\n### Basic usage\n- Just wrap the component function, for which you want to do prop diffing of *received props*, with `React.memo()`. So, a normal component like this:\n\t```jsx\n\tconst MyComponent = (props) => { return <> ...</>; };\n\t\n\texport default MyComponent;\n\t```\n\tbecomes\n\t```jsx\n\timport React from 'react'; // cannot be skipped if using memo\n\tconst MyComponent = (props) => { return <> ...</>; };\n\t\n\texport default React.memo(MyComponent);\n\t\n\t\n\t// OR equivalently\n\tconst MyComponent = React.memo((props) => { return <> ...</>; });\n\t\n\texport default MyComponent;\n\t```\n- `React.memo` can also be used on components that don't receive props.\n\n### Custom diff usage\n- Intent - the following construct is provided by React because it only does \"shallow\" comparison of props, i.e. only checks if the reference has changed or not. This is not sufficient at all, since props are objects. Even if there are no props, the props value if `{}`, and `{} === {}` is false in JavaScript.\n- The second argument of `React.memo` is optional. It's a function.\n- Parameters: previous and current (new) props, in this order.\n- Return value specifies if function should re-run (and potentially re-render) or not. So:\n\t- `true` - don't run\n\t- `false` - do run\n- By default it returns false.\n\nExample:\n```jsx\nconst MyButton = React.memo(\n  ({ title }) => {\n    const clickHandler = () => window.alert(\"Hello\");\n    \n    return <button onClick={clickHandler}> {title} </button>;\n  },\n  (prevProps, curProps) => prevProps.title === curProps.title\n);\n```\n\n\n## MAid\n`useMemo` helps us prevent re-evaluations of components when the app tree re-renders. Additionally, it can do this w.r.t props.\n\n\n## Thoughts\n- The prevent re-run with component without props case should be default behavior. \n\t- [More info](https://stackoverflow.com/questions/53074551/when-should-you-not-use-react-memo).\n\t- Maybe not - what if the propless component uses `Math.random` or `new Date()`. Ignoring the opinions of React.Strict, how to do this - because re-evaluation does lead to change in UI even though props have not changed. *It's kind of like the external API are a \"prop\" that have changed* - this seems to be a good excuse to have the current behavior (i.e. re-rerun no matter what).\n- How does the hook work? My guess:\n\t- React keeps a copy of two things internally:\n\t\t- Props received in the latest evaluation.\n\t\t- Return value of the latest evaluation.\n\t- If props have changed, it re-evaluates the function and stores both props and return value. And returns the return value to the parent.\n\t- If props haven't changed, it just returns the stored return value of the latest evaluation to the parent.\n\t- Note: the return value is stored \"kind of\" in the component itself (which was wrapped in `React.memo`), and not it's parent. This means that the parent is oblivious to the fact that it received a stored value instead of a newly computed one. FIXME(I'm not sure if the both props and return value are stored in the parent or not. Also need to find out if the parent knows if one of it's children value was a stored value, not a computed one, maybe the parent is aware, idk)\n- How to control re-evaluation w.r.t both state + props? FIXME (this was popular in class components). BTW: I never had to do this, during experiments or work, atleast knowingly. How would I do it without a new hook, approaches:\n\t1. State changed, there are no props. FIXME: continue later: https://codesandbox.io/s/angry-agnesi-4e4be2?file=/src/App.js. Also see [discussion on bailing out of state upates](https://github.com/facebook/react/issues/14110) - I actually encountered this somewhere in the Redux section, oh, [here](obsidian://open?vault=reactjs-notes&file=home%2F4_resource_itineraries%2F2_React_the_complete_guide%2F25_Replacing_Redux_with_React_hooks%2F372_Alternative__using_the_Context_API). \n\t```jsx\n\tfunction stateComparator(prevState, currentState) { // true means don't re-evaluate\n\t\treturn ...; // some diffing logic\n\t}\n\t\n\tfunction MyShell() {\n\t\tconst [command, setCommand] = useState(\"App initialized\");\n\t\t\n\t\treturn <div>\n\t\t\t<input onChange={(e) => setState(e.target.value} value={command} />\n\t\t\t<br /> <span>{command}</span></div>;\n\t}\n\t```",
      "html": "<h1 id=\"155.-preventing-unnecessary-re-evaluations-with-react.memo()\">155. Preventing Unnecessary Re-Evaluations with React.memo() <a class=\"heading-anchor-permalink\" href=\"#155.-preventing-unnecessary-re-evaluations-with-react.memo()\">#</a></h1>\n<p>Created Sunday 10 July 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<ul>\n<li>In the last page, we acknowledged that in React, when a component re-evaluates, so do all of it’s constituents, even if their props haven’t change (which includes not having any). This <em>is</em> inefficient.</li>\n</ul>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<ul>\n<li>Solving the problem\n<ul>\n<li>The solution is simple, just compare the old and new props and run the component function only if there’s a change. If there’s no change, return the stored copy of the render output, i.e. don’t compute it again. React provides this functionality out of the box.</li>\n<li>This optimization is a trade-off though - prop diffing vs function re-evaluation.\n<ul>\n<li>And it depends (on number/complexity of props, number of child components) which is costly, so use <code>React.memo</code> with care.</li>\n<li>If it’s known that props will change frequently, it’s better to avoid using <code>React.memo</code>.</li>\n<li>It’s better to use <code>React.memo</code> to avoid re-evaluations of whole UI tree sections, of course knowing that props don’t change very frequently.</li>\n</ul>\n</li>\n<li>Why isn’t this ‘prop-diffing’ the default - because of the overhead of prop-diffing.</li>\n</ul>\n</li>\n<li><strong>Important note</strong> - <code>React.memo</code> is only concerned with props. State changes will always cause a re-evaluation, <code>React.memo</code> has no control over that.</li>\n</ul>\n<h2 id=\"what-(syntax-and-details)\">What (syntax and details) <a class=\"heading-anchor-permalink\" href=\"#what-(syntax-and-details)\">#</a></h2>\n<ul>\n<li>Skeleton - <code>export default React.memo(Component, [areEqualCallback])</code></li>\n</ul>\n<h3 id=\"basic-usage\">Basic usage <a class=\"heading-anchor-permalink\" href=\"#basic-usage\">#</a></h3>\n<ul>\n<li>Just wrap the component function, for which you want to do prop diffing of <em>received props</em>, with <code>React.memo()</code>. So, a normal component like this:<pre><code class=\"language-jsx\">const MyComponent = (props) =&gt; { return &lt;&gt; ...&lt;/&gt;; };\n\nexport default MyComponent;\n</code></pre>\nbecomes<pre><code class=\"language-jsx\">import React from 'react'; // cannot be skipped if using memo\nconst MyComponent = (props) =&gt; { return &lt;&gt; ...&lt;/&gt;; };\n\nexport default React.memo(MyComponent);\n\n\n// OR equivalently\nconst MyComponent = React.memo((props) =&gt; { return &lt;&gt; ...&lt;/&gt;; });\n\nexport default MyComponent;\n</code></pre>\n</li>\n<li><code>React.memo</code> can also be used on components that don’t receive props.</li>\n</ul>\n<h3 id=\"custom-diff-usage\">Custom diff usage <a class=\"heading-anchor-permalink\" href=\"#custom-diff-usage\">#</a></h3>\n<ul>\n<li>Intent - the following construct is provided by React because it only does “shallow” comparison of props, i.e. only checks if the reference has changed or not. This is not sufficient at all, since props are objects. Even if there are no props, the props value if <code>{}</code>, and <code>{} === {}</code> is false in JavaScript.</li>\n<li>The second argument of <code>React.memo</code> is optional. It’s a function.</li>\n<li>Parameters: previous and current (new) props, in this order.</li>\n<li>Return value specifies if function should re-run (and potentially re-render) or not. So:\n<ul>\n<li><code>true</code> - don’t run</li>\n<li><code>false</code> - do run</li>\n</ul>\n</li>\n<li>By default it returns false.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-jsx\">const MyButton = React.memo(\n  ({ title }) =&gt; {\n    const clickHandler = () =&gt; window.alert(&quot;Hello&quot;);\n    \n    return &lt;button onClick={clickHandler}&gt; {title} &lt;/button&gt;;\n  },\n  (prevProps, curProps) =&gt; prevProps.title === curProps.title\n);\n</code></pre>\n<h2 id=\"maid\">MAid <a class=\"heading-anchor-permalink\" href=\"#maid\">#</a></h2>\n<p><code>useMemo</code> helps us prevent re-evaluations of components when the app tree re-renders. Additionally, it can do this w.r.t props.</p>\n<h2 id=\"thoughts\">Thoughts <a class=\"heading-anchor-permalink\" href=\"#thoughts\">#</a></h2>\n<ul>\n<li>The prevent re-run with component without props case should be default behavior.\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/53074551/when-should-you-not-use-react-memo\">More info</a>.</li>\n<li>Maybe not - what if the propless component uses <code>Math.random</code> or <code>new Date()</code>. Ignoring the opinions of React.Strict, how to do this - because re-evaluation does lead to change in UI even though props have not changed. <em>It’s kind of like the external API are a “prop” that have changed</em> - this seems to be a good excuse to have the current behavior (i.e. re-rerun no matter what).</li>\n</ul>\n</li>\n<li>How does the hook work? My guess:\n<ul>\n<li>React keeps a copy of two things internally:\n<ul>\n<li>Props received in the latest evaluation.</li>\n<li>Return value of the latest evaluation.</li>\n</ul>\n</li>\n<li>If props have changed, it re-evaluates the function and stores both props and return value. And returns the return value to the parent.</li>\n<li>If props haven’t changed, it just returns the stored return value of the latest evaluation to the parent.</li>\n<li>Note: the return value is stored “kind of” in the component itself (which was wrapped in <code>React.memo</code>), and not it’s parent. This means that the parent is oblivious to the fact that it received a stored value instead of a newly computed one. FIXME(I’m not sure if the both props and return value are stored in the parent or not. Also need to find out if the parent knows if one of it’s children value was a stored value, not a computed one, maybe the parent is aware, idk)</li>\n</ul>\n</li>\n<li>How to control re-evaluation w.r.t both state + props? FIXME (this was popular in class components). BTW: I never had to do this, during experiments or work, atleast knowingly. How would I do it without a new hook, approaches:\n<ol>\n<li>State changed, there are no props. FIXME: continue later: <a href=\"https://codesandbox.io/s/angry-agnesi-4e4be2?file=/src/App.js\">https://codesandbox.io/s/angry-agnesi-4e4be2?file=/src/App.js</a>. Also see <a href=\"https://github.com/facebook/react/issues/14110\">discussion on bailing out of state upates</a> - I actually encountered this somewhere in the Redux section, oh, <a href=\"obsidian://open?vault=reactjs-notes&amp;file=home%2F4_resource_itineraries%2F2_React_the_complete_guide%2F25_Replacing_Redux_with_React_hooks%2F372_Alternative__using_the_Context_API\">here</a>.</li>\n</ol>\n<pre><code class=\"language-jsx\">function stateComparator(prevState, currentState) { // true means don't re-evaluate\n\treturn ...; // some diffing logic\n}\n\nfunction MyShell() {\n\tconst [command, setCommand] = useState(&quot;App initialized&quot;);\n\t\n\treturn &lt;div&gt;\n\t\t&lt;input onChange={(e) =&gt; setState(e.target.value} value={command} /&gt;\n\t\t&lt;br /&gt; &lt;span&gt;{command}&lt;/span&gt;&lt;/div&gt;;\n}\n</code></pre>\n</li>\n</ul>\n",
      "id": 23
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/156_Prevent_function_re_creation_with_useCallback.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/156_Prevent_function_re_creation_with_useCallback.html",
      "content": "# 156. Prevent function re-evaluation with useCallback\nCreated Sunday 10 July 2022\n\n## Situation - React.memo \\*generally fails for functions received as props\n\\*exceptions - function returned by `useState`, or functions that are not re-created on re-component evaluation.\n\nConsider this UI tree:\n```jsx\nimport { useState } from \"react\";\n\nconst Button = React.memo((props) => {\n  console.log(\"Button ran\");\n  return <button onClick={props.toggleShow}>Click me!</button>;\n}); // using React.memo\n\nconst App = () => {\n  const [show, setShow] = useState(true);\n\n  const toggleShow = () => setShow((prev) => !prev); // re-created on re-evaluation\n\n  return (\n    <>\n      {show && <p> Text visible </p>}\n      <Button toggleShow={toggleShow} />\n    </>\n  );\n};\n```\n\nWill the `Button` be re-evaluated when it is clicked here? Yes, it will be, even if we use `React.memo`. This is because the prop passed to `Button` changes. Does it really? Yes, it is re-created on each re-evaluation in the `App`. Reason: functions are not primitive values, and therefore a change in reference (address in memory) means non-equality even if the values are the same. Some examples of this phenomenon:\n```js\n[1, 2, 3] === [1, 2, 3] // false, non-primitive variables are compared by address, in addition to value.\nfalse === false // true, primitive values are compared by value.\n```\n- The function returned by `useState` is guaranteed to remain constant irrespective of re-renders.\n\n\n## Why\nThe situation discussed above makes it impossible to use `React.memo` with usual in-component created functions (a.k.a callbacks).\n\n\n## How\n- React solves this problem by providing a hook that maintains the referential integrity of the callbacks between re-evaluations - the `useCallback` hook.\n- To use it - wrap the callback function in `useCallback`, along with a dependency array (empty array is fine too). The callback used in the code example on this page can be re-written as:\n\t```jsx\n\tconst toggleShow = useCallback(() => setShow(prev => !prev), []);\n\t```\n- If anything in the dependency array changes, the callback function will be re-created on re-evaluation.\n- When `useCallback` is used, React stores the callback function internally and keeps it independent of function re-evaluation, of course assuming that nothing in the dependency array changes.\n\n\n## What\nUse `useCallback` to make `React.memo` effective.",
      "html": "<h1 id=\"156.-prevent-function-re-evaluation-with-usecallback\">156. Prevent function re-evaluation with useCallback <a class=\"heading-anchor-permalink\" href=\"#156.-prevent-function-re-evaluation-with-usecallback\">#</a></h1>\n<p>Created Sunday 10 July 2022</p>\n<h2 id=\"situation---react.memo-*generally-fails-for-functions-received-as-props\">Situation - React.memo *generally fails for functions received as props <a class=\"heading-anchor-permalink\" href=\"#situation---react.memo-*generally-fails-for-functions-received-as-props\">#</a></h2>\n<p>*exceptions - function returned by <code>useState</code>, or functions that are not re-created on re-component evaluation.</p>\n<p>Consider this UI tree:</p>\n<pre><code class=\"language-jsx\">import { useState } from &quot;react&quot;;\n\nconst Button = React.memo((props) =&gt; {\n  console.log(&quot;Button ran&quot;);\n  return &lt;button onClick={props.toggleShow}&gt;Click me!&lt;/button&gt;;\n}); // using React.memo\n\nconst App = () =&gt; {\n  const [show, setShow] = useState(true);\n\n  const toggleShow = () =&gt; setShow((prev) =&gt; !prev); // re-created on re-evaluation\n\n  return (\n    &lt;&gt;\n      {show &amp;&amp; &lt;p&gt; Text visible &lt;/p&gt;}\n      &lt;Button toggleShow={toggleShow} /&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>\n<p>Will the <code>Button</code> be re-evaluated when it is clicked here? Yes, it will be, even if we use <code>React.memo</code>. This is because the prop passed to <code>Button</code> changes. Does it really? Yes, it is re-created on each re-evaluation in the <code>App</code>. Reason: functions are not primitive values, and therefore a change in reference (address in memory) means non-equality even if the values are the same. Some examples of this phenomenon:</p>\n<pre><code class=\"language-js\">[1, 2, 3] === [1, 2, 3] // false, non-primitive variables are compared by address, in addition to value.\nfalse === false // true, primitive values are compared by value.\n</code></pre>\n<ul>\n<li>The function returned by <code>useState</code> is guaranteed to remain constant irrespective of re-renders.</li>\n</ul>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>The situation discussed above makes it impossible to use <code>React.memo</code> with usual in-component created functions (a.k.a callbacks).</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<ul>\n<li>React solves this problem by providing a hook that maintains the referential integrity of the callbacks between re-evaluations - the <code>useCallback</code> hook.</li>\n<li>To use it - wrap the callback function in <code>useCallback</code>, along with a dependency array (empty array is fine too). The callback used in the code example on this page can be re-written as:<pre><code class=\"language-jsx\">const toggleShow = useCallback(() =&gt; setShow(prev =&gt; !prev), []);\n</code></pre>\n</li>\n<li>If anything in the dependency array changes, the callback function will be re-created on re-evaluation.</li>\n<li>When <code>useCallback</code> is used, React stores the callback function internally and keeps it independent of function re-evaluation, of course assuming that nothing in the dependency array changes.</li>\n</ul>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Use <code>useCallback</code> to make <code>React.memo</code> effective.</p>\n",
      "id": 24
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/157_useCallback_and_its_dependencies.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/157_useCallback_and_its_dependencies.html",
      "content": "# 157. useCallback and its dependencies\nCreated Monday 11 July 2022\n\n### Why\nWhat is the use of the dependency array in `useCallback` ? To answer this, let's think of how `useCallback` works. Consider the following code:\n```jsx\nimport { useState, useCallback } from 'react';\n\nfunction Main() {\n\tconst [show, setShow] = useState(false);\n\tconst [allowToggle, setAllowToggle] = useState(false);\n\n\tconst toggleHandler = useCallback(() => {\n\t\t\tif(allowToggle)\n\t\t\t\tsetShow(prev => !prev);\n\t\t, []); // Will this handler work?\n\t\t\n\tconst allowToggleHandler = () => setAllowToggle(prev => !prev);\n\t\t\n\treturn (<>\n\t\t\t{show && 'Message visible'}\n\t\t\t<Button handler={allowToggleHandler}>{allowToggle ? 'Disallow' : 'Allow'}Toggle</Button>\n\t\t\t\t<Button handler={toggleHandler}>Toggle</Button>\t\t\n\t\t\t</>);\n}\n```\nWill the handler maintain referential integrity between re-evaluations? No, it will not. Reason: `useCallback` *saves* the snapshot of the callback along with all it's variables (even external ones). This means the callback's dependent variable (`allowToggle` in this case) is actually a copy instead of the actual variable reference. Even if the component updates and `allowToggle` becomes `true`, the callback doesn't change.\n\n- In short, the dependency array allows the re-creation of the callback, if it's dependent on external variables. This is *very* important and show be kept in mind.\n\n### How\nTo make this example work, add `allowToggle` to the dependency array, like so:\n```jsx\nconst toggleHandler = useCallback(() => {\n\tif(allowToggle)\n\t\tsetShow(prev => !prev);\n}, [allowToggle]); // will work now\n```",
      "html": "<h1 id=\"157.-usecallback-and-its-dependencies\">157. useCallback and its dependencies <a class=\"heading-anchor-permalink\" href=\"#157.-usecallback-and-its-dependencies\">#</a></h1>\n<p>Created Monday 11 July 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>What is the use of the dependency array in <code>useCallback</code> ? To answer this, let’s think of how <code>useCallback</code> works. Consider the following code:</p>\n<pre><code class=\"language-jsx\">import { useState, useCallback } from 'react';\n\nfunction Main() {\n\tconst [show, setShow] = useState(false);\n\tconst [allowToggle, setAllowToggle] = useState(false);\n\n\tconst toggleHandler = useCallback(() =&gt; {\n\t\t\tif(allowToggle)\n\t\t\t\tsetShow(prev =&gt; !prev);\n\t\t, []); // Will this handler work?\n\t\t\n\tconst allowToggleHandler = () =&gt; setAllowToggle(prev =&gt; !prev);\n\t\t\n\treturn (&lt;&gt;\n\t\t\t{show &amp;&amp; 'Message visible'}\n\t\t\t&lt;Button handler={allowToggleHandler}&gt;{allowToggle ? 'Disallow' : 'Allow'}Toggle&lt;/Button&gt;\n\t\t\t\t&lt;Button handler={toggleHandler}&gt;Toggle&lt;/Button&gt;\t\t\n\t\t\t&lt;/&gt;);\n}\n</code></pre>\n<p>Will the handler maintain referential integrity between re-evaluations? No, it will not. Reason: <code>useCallback</code> <em>saves</em> the snapshot of the callback along with all it’s variables (even external ones). This means the callback’s dependent variable (<code>allowToggle</code> in this case) is actually a copy instead of the actual variable reference. Even if the component updates and <code>allowToggle</code> becomes <code>true</code>, the callback doesn’t change.</p>\n<ul>\n<li>In short, the dependency array allows the re-creation of the callback, if it’s dependent on external variables. This is <em>very</em> important and show be kept in mind.</li>\n</ul>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>To make this example work, add <code>allowToggle</code> to the dependency array, like so:</p>\n<pre><code class=\"language-jsx\">const toggleHandler = useCallback(() =&gt; {\n\tif(allowToggle)\n\t\tsetShow(prev =&gt; !prev);\n}, [allowToggle]); // will work now\n</code></pre>\n",
      "id": 25
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/159_Component_instance_and_state.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/159_Component_instance_and_state.html",
      "content": "# 158. Component instance and state\nCreated Monday 11 July 2022\n\n![](../../../../assets/159_Component_instance_and_state-image-1-024b227f.png)\n- When a stateful component is first evaluated, React attaches it's state to the component's instance.\n- As seen previously, `useState` is only run once, on first function evaluation, and ignored on all subsequent re-evaluations.\n- The state of a component's instance remains attached to it, irrespective of its or its ancestor's/descendant's re-renders/re-evaluations, until the component is removed from the DOM. When the component is unmounted from the DOM, the state is freed, and when it's reattached, the state is reset (i.e. initialized with the default value generally specified in `useState`).\n\t- In other words, all stateful components (their instances to be precise) of the UI tree maintain their own state, until they are unmounted.\n\t- Note that re-mounting is treated the same as unmounting + fresh mount. i.e. state is not remembered by default on remount.\n\t- Conditional rendering change is the same as re-mounting too. See [live](https://exemplar-codes.github.io/ComponentStateBridge#).\n- This component instance-state bridge is provided by React.\n",
      "html": "<h1 id=\"158.-component-instance-and-state\">158. Component instance and state <a class=\"heading-anchor-permalink\" href=\"#158.-component-instance-and-state\">#</a></h1>\n<p>Created Monday 11 July 2022</p>\n<p><img src=\"../../../../assets/159_Component_instance_and_state-image-1-024b227f.png\" alt=\"\"></p>\n<ul>\n<li>When a stateful component is first evaluated, React attaches it’s state to the component’s instance.</li>\n<li>As seen previously, <code>useState</code> is only run once, on first function evaluation, and ignored on all subsequent re-evaluations.</li>\n<li>The state of a component’s instance remains attached to it, irrespective of its or its ancestor’s/descendant’s re-renders/re-evaluations, until the component is removed from the DOM. When the component is unmounted from the DOM, the state is freed, and when it’s reattached, the state is reset (i.e. initialized with the default value generally specified in <code>useState</code>).\n<ul>\n<li>In other words, all stateful components (their instances to be precise) of the UI tree maintain their own state, until they are unmounted.</li>\n<li>Note that re-mounting is treated the same as unmounting + fresh mount. i.e. state is not remembered by default on remount.</li>\n<li>Conditional rendering change is the same as re-mounting too. See <a href=\"https://exemplar-codes.github.io/ComponentStateBridge#\">live</a>.</li>\n</ul>\n</li>\n<li>This component instance-state bridge is provided by React.</li>\n</ul>\n",
      "id": 26
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/160_State_scheduling_and_batching.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/160_State_scheduling_and_batching.html",
      "content": "# 160. State scheduling and batching\nCreated Monday 11 July 2022\n\n### Why\n- React batches state changes.\n- React can postpone state changes, in theory. This is done if there's some pending computation of higher priority.\n\n### How\n- State changes are batched in order, for a given state. And yes, multiple state changes can be batched for the same state.\n- If there are multiple state updates, but for different states, i.e. if state change calls are close together (i.e. in a synchronous chain), then they are batched, and only *one* re-evaluation takes place.\n  ```jsx\n\tconst handler = () => {\n\t\t\tsetText('Hello');\n\t\t\t// state is not updated here\n\t\t\tsetAge(24);\n\t\t};\n\t```\n\t```jsx\n\t// even this, somewhat convulted example, works, React is smart in batching state changes\n\tconst handler = () => {\n\t\t(() => setText('Hello'))();\n\t\t\t// state is not updated here\n\t\t(() => setAge(24))();\n\t}\n\t```\n- The component is re-evaluated (and re-rendered) only after the all state changes have been processed.\n  ![](../../../../assets/160_State_scheduling_and_batching-image-1-024b227f.png)\n- Use a callback in the state mutation function, if the state to be set depends on the previous state. Do this because the latest state from the batch is available as the param. Example:\n\t```jsx\n\tconst [count, setCount] = useState(0);\n\n\tsetCount(count + 1); // unsafe, not good\n\tsetCount(prevCount => prevCount + 1); // safe and better\n\t```\n\tWhy do this? Because it could be the case that multiple state changes were batched and not all processed (i.e. re-evaluation has not taken place), so the state accessed is actually the one of the last component evaluation.\n\n### What\n- State change batching is practically unobservable (because React is fast).\n- The only issue can be the dependence of new state on the last change, which can be taken care of by using the callback version of the state mutation function (provided by `useState`).\n- Inside `useEffect`, it is safe to use normal state update, even if depends on the previous state because `useEffect`'s code runs after the re-render, ensuring that all batched changes have finished processing.\n- State batching/processing is not something to worry about, generally.\n",
      "html": "<h1 id=\"160.-state-scheduling-and-batching\">160. State scheduling and batching <a class=\"heading-anchor-permalink\" href=\"#160.-state-scheduling-and-batching\">#</a></h1>\n<p>Created Monday 11 July 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<ul>\n<li>React batches state changes.</li>\n<li>React can postpone state changes, in theory. This is done if there’s some pending computation of higher priority.</li>\n</ul>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<ul>\n<li>State changes are batched in order, for a given state. And yes, multiple state changes can be batched for the same state.</li>\n<li>If there are multiple state updates, but for different states, i.e. if state change calls are close together (i.e. in a synchronous chain), then they are batched, and only <em>one</em> re-evaluation takes place.<pre><code class=\"language-jsx\">  const handler = () =&gt; {\n  \t\tsetText('Hello');\n  \t\t// state is not updated here\n  \t\tsetAge(24);\n  \t};\n</code></pre>\n<pre><code class=\"language-jsx\">// even this, somewhat convulted example, works, React is smart in batching state changes\nconst handler = () =&gt; {\n\t(() =&gt; setText('Hello'))();\n\t\t// state is not updated here\n\t(() =&gt; setAge(24))();\n}\n</code></pre>\n</li>\n<li>The component is re-evaluated (and re-rendered) only after the all state changes have been processed.\n<img src=\"../../../../assets/160_State_scheduling_and_batching-image-1-024b227f.png\" alt=\"\"></li>\n<li>Use a callback in the state mutation function, if the state to be set depends on the previous state. Do this because the latest state from the batch is available as the param. Example:<pre><code class=\"language-jsx\">const [count, setCount] = useState(0);\n\nsetCount(count + 1); // unsafe, not good\nsetCount(prevCount =&gt; prevCount + 1); // safe and better\n</code></pre>\nWhy do this? Because it could be the case that multiple state changes were batched and not all processed (i.e. re-evaluation has not taken place), so the state accessed is actually the one of the last component evaluation.</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<ul>\n<li>State change batching is practically unobservable (because React is fast).</li>\n<li>The only issue can be the dependence of new state on the last change, which can be taken care of by using the callback version of the state mutation function (provided by <code>useState</code>).</li>\n<li>Inside <code>useEffect</code>, it is safe to use normal state update, even if depends on the previous state because <code>useEffect</code>'s code runs after the re-render, ensuring that all batched changes have finished processing.</li>\n<li>State batching/processing is not something to worry about, generally.</li>\n</ul>\n",
      "id": 27
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/161_Optimizing_with_useMemo.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/161_Optimizing_with_useMemo.html",
      "content": "# 161. Optimizing with useMemo\nCreated Thursday 14 July 2022\n\nAll optimizations we have spoken about till now (i.e. `React.memo` and `useCallback` hook) are about preventing unnecessary re-evaluations of *child components*. Now, we'll optimize computations inside a given component itself.\n\n### Why\n- Components will do computations on data, from parts of the props/context. \n- These computations can sometimes be expensive (time, space wise), and we would like to memoize them. Consider a general component:\n```jsx\nfunction MyComponent(props) {\n\n\tconst ec1 = expensiveComp1(props.data1); // stores computation\n\texpensiveComp2(props.data2, props.data3); // returns void\n\t\n\treturn <>...</>; // ignore, this, as we're focusing on component's own computations\n}\n```\nNow, there's no need of optimizing component's self computations if :\n1. It's the first evaluation.\n2. If props have changed.\n\nSo there's scope for optimization only if some parts of the props (relevant to expensive computations) have not changed. In other words, we need to do something like `React.memo` (which works based prop diffing), but only check differences of certain props, and not all of them (`React.memo` does diffing of all).\n\n### How\n- React provides a way to selectively do prop diffing in order to avoid expensive computations - the `useMemo` hook.\n- Syntax - wrap the computation in the hook along with a dependency array of props involved:\n```jsx\nimport {useMemo} from 'react';\n\nfunction MyComponent(props) {\n\tconst ec1 = useMemo(() => {\n\t\t// ... computation involving\n\t\treturn expensiveComp1(props.data1)\n\t}, [props.data1]);\n\t\n\tuseMemo(() => { // void\n\t\t// ... computation involving props.data2, props.data3\n\t\texpensiveComp2(props.data2, props.data3)\n\t\t// not returning is fine\n\t}, [props.data2, props.data3]);\n\t\n\treturn <>...</>;\n}```\nIn short:\n```jsx\nfunction App(props)\n{\n\tconst computedValue = useMemo(() => {return /* computations */}, [/*props involved in the computation*/]);\n\n\t// OR, for void computations, don't assign, return anything\n\treturn <>...</>;\n}\n```\n- How does the hook work - just like `React.memo`, i.e. React keeps a copy of:\n\t1. latest relevant props (as indicated in the dependency array(s)) of the component instance.\n\t2. Latest evaluated value.\n\tUpon component re-evaluation, it executes the `useMemo` callback only if the indicated props have changed and updates the computed value. Otherwise it returns the previously computed value.\n- Issues with reference values - consider the following code:\n\t```jsx\n\timport {useMemo} from 'react';\n\t\n\tfunction App() {\n\t\treturn <Child list={[10, -2, 34, 2]} />;\n\t}\n\t\n\tfunction Child(props) {\n\t\tconst sortedList = useMemo(() => props.list.sort(), [props.list]);\n\t\treturn <>...</>;\n\t}\n\t```\n\tSuppose the UI tree evaluates. When `App` re-evaluates, it will cause re-evaluation of `Child`, but will it recompute `sortedList`? Yes, it will. Reason: `props.list` *has* changed, because when `App` was re-evaluated, it re-created the prop, and it won't be equal to stored prop (by the hook) because `Array` is not a primitive data type.\n\n\tHow to solve this? Use `useMemo` in `App` (the parent) with an empty dependency array. This will ensure that the list is not re-created. The code will look like this\n\t```jsx\n\timport {useMemo} from 'react';\n\t\n\tfunction App() {\n\t\treturn <Child list={useMemo(() => [10, -2, 34, 2], [])} />;\n\n\t\t// or, alternatively\n\t\tconst list = useMemo(() => [10, -2, 34, 2], []);\n\t\treturn <Child list={list} />;\n\t}\n\t\n\tfunction Child(props) { // no change needed\n\t\tconst sortedList = useMemo(() => props.list.sort(), [props.list]);\n\t\treturn <>...</>;\n\t}\n\t```\n\tNote: This kind of \"data memoization\" does have certain overhead.\n\t\n### What\n- Conditional execution with memoization of code based on selective prop diffing.\n\n\n### Observations\n- We can implement `React.memo` using `useMemo`, just pass the whole `props` object as the dependency and move the return value inside the callback. Example:\n\t```jsx\n\tconst {useMemo} from 'react';\n\tconst MyComponent(props) {\n\t\tconst retValue = useMemo(() => {\n\t\t\treturn <>...</>;\n\t\t}, [props]);\n\t\t\n\t\treturn retValue;\n\t}\n\t```\n- `useCallback` memoizes functions, but `useMemo` memoizes all kinds of data.\n\nAssets\n1. [Simple useMemo demo](https://github.com/exemplar-codes/assorted-reactjs-apps/commit/194d02dadc8d2dfa773ecf5915c19c75df307315)\n2. [Parent Child useMemo demo](https://github.com/exemplar-codes/assorted-reactjs-apps/commit/04dbea03bac4309c617322451e9f5f32785d6c43)",
      "html": "<h1 id=\"161.-optimizing-with-usememo\">161. Optimizing with useMemo <a class=\"heading-anchor-permalink\" href=\"#161.-optimizing-with-usememo\">#</a></h1>\n<p>Created Thursday 14 July 2022</p>\n<p>All optimizations we have spoken about till now (i.e. <code>React.memo</code> and <code>useCallback</code> hook) are about preventing unnecessary re-evaluations of <em>child components</em>. Now, we’ll optimize computations inside a given component itself.</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<ul>\n<li>Components will do computations on data, from parts of the props/context.</li>\n<li>These computations can sometimes be expensive (time, space wise), and we would like to memoize them. Consider a general component:</li>\n</ul>\n<pre><code class=\"language-jsx\">function MyComponent(props) {\n\n\tconst ec1 = expensiveComp1(props.data1); // stores computation\n\texpensiveComp2(props.data2, props.data3); // returns void\n\t\n\treturn &lt;&gt;...&lt;/&gt;; // ignore, this, as we're focusing on component's own computations\n}\n</code></pre>\n<p>Now, there’s no need of optimizing component’s self computations if :</p>\n<ol>\n<li>It’s the first evaluation.</li>\n<li>If props have changed.</li>\n</ol>\n<p>So there’s scope for optimization only if some parts of the props (relevant to expensive computations) have not changed. In other words, we need to do something like <code>React.memo</code> (which works based prop diffing), but only check differences of certain props, and not all of them (<code>React.memo</code> does diffing of all).</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<ul>\n<li>React provides a way to selectively do prop diffing in order to avoid expensive computations - the <code>useMemo</code> hook.</li>\n<li>Syntax - wrap the computation in the hook along with a dependency array of props involved:</li>\n</ul>\n<pre><code class=\"language-jsx\">import {useMemo} from 'react';\n\nfunction MyComponent(props) {\n\tconst ec1 = useMemo(() =&gt; {\n\t\t// ... computation involving\n\t\treturn expensiveComp1(props.data1)\n\t}, [props.data1]);\n\t\n\tuseMemo(() =&gt; { // void\n\t\t// ... computation involving props.data2, props.data3\n\t\texpensiveComp2(props.data2, props.data3)\n\t\t// not returning is fine\n\t}, [props.data2, props.data3]);\n\t\n\treturn &lt;&gt;...&lt;/&gt;;\n}```\nIn short:\n```jsx\nfunction App(props)\n{\n\tconst computedValue = useMemo(() =&gt; {return /* computations */}, [/*props involved in the computation*/]);\n\n\t// OR, for void computations, don't assign, return anything\n\treturn &lt;&gt;...&lt;/&gt;;\n}\n</code></pre>\n<ul>\n<li>\n<p>How does the hook work - just like <code>React.memo</code>, i.e. React keeps a copy of:</p>\n<ol>\n<li>latest relevant props (as indicated in the dependency array(s)) of the component instance.</li>\n<li>Latest evaluated value.\nUpon component re-evaluation, it executes the <code>useMemo</code> callback only if the indicated props have changed and updates the computed value. Otherwise it returns the previously computed value.</li>\n</ol>\n</li>\n<li>\n<p>Issues with reference values - consider the following code:</p>\n<pre><code class=\"language-jsx\">import {useMemo} from 'react';\n\nfunction App() {\n\treturn &lt;Child list={[10, -2, 34, 2]} /&gt;;\n}\n\nfunction Child(props) {\n\tconst sortedList = useMemo(() =&gt; props.list.sort(), [props.list]);\n\treturn &lt;&gt;...&lt;/&gt;;\n}\n</code></pre>\n<p>Suppose the UI tree evaluates. When <code>App</code> re-evaluates, it will cause re-evaluation of <code>Child</code>, but will it recompute <code>sortedList</code>? Yes, it will. Reason: <code>props.list</code> <em>has</em> changed, because when <code>App</code> was re-evaluated, it re-created the prop, and it won’t be equal to stored prop (by the hook) because <code>Array</code> is not a primitive data type.</p>\n<p>How to solve this? Use <code>useMemo</code> in <code>App</code> (the parent) with an empty dependency array. This will ensure that the list is not re-created. The code will look like this</p>\n<pre><code class=\"language-jsx\">import {useMemo} from 'react';\n\nfunction App() {\n\treturn &lt;Child list={useMemo(() =&gt; [10, -2, 34, 2], [])} /&gt;;\n\n\t// or, alternatively\n\tconst list = useMemo(() =&gt; [10, -2, 34, 2], []);\n\treturn &lt;Child list={list} /&gt;;\n}\n\nfunction Child(props) { // no change needed\n\tconst sortedList = useMemo(() =&gt; props.list.sort(), [props.list]);\n\treturn &lt;&gt;...&lt;/&gt;;\n}\n</code></pre>\n<p>Note: This kind of “data memoization” does have certain overhead.</p>\n</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<ul>\n<li>Conditional execution with memoization of code based on selective prop diffing.</li>\n</ul>\n<h3 id=\"observations\">Observations <a class=\"heading-anchor-permalink\" href=\"#observations\">#</a></h3>\n<ul>\n<li>We can implement <code>React.memo</code> using <code>useMemo</code>, just pass the whole <code>props</code> object as the dependency and move the return value inside the callback. Example:<pre><code class=\"language-jsx\">const {useMemo} from 'react';\nconst MyComponent(props) {\n\tconst retValue = useMemo(() =&gt; {\n\t\treturn &lt;&gt;...&lt;/&gt;;\n\t}, [props]);\n\t\n\treturn retValue;\n}\n</code></pre>\n</li>\n<li><code>useCallback</code> memoizes functions, but <code>useMemo</code> memoizes all kinds of data.</li>\n</ul>\n<p>Assets</p>\n<ol>\n<li><a href=\"https://github.com/exemplar-codes/assorted-reactjs-apps/commit/194d02dadc8d2dfa773ecf5915c19c75df307315\">Simple useMemo demo</a></li>\n<li><a href=\"https://github.com/exemplar-codes/assorted-reactjs-apps/commit/04dbea03bac4309c617322451e9f5f32785d6c43\">Parent Child useMemo demo</a></li>\n</ol>\n",
      "id": 28
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/163_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/163_Module_introduction.html",
      "content": "# 163. Module introduction\nCreated Monday 14 July 2022\n\n- This section is optional.\n\n# About classes in React\n- Classes are a computationally equivalent way to create React components.\n- Classes were the norm for building components before React 16.8, at-least for stateful components. Introduction of hooks made function based stateful components possible.\n\t![](../../../../assets/163_Module_introduction-image-1-26e0cbb1.png)\n- They are seldom used in new codebases, but they are still present in a majority of apps, libraries.\n\n### What's in this section\n1. What are and why class components?\n2. Working with class based components?\n3. Error boundaries - can only be worked with using Class based components.\n",
      "html": "<h1 id=\"163.-module-introduction\">163. Module introduction <a class=\"heading-anchor-permalink\" href=\"#163.-module-introduction\">#</a></h1>\n<p>Created Monday 14 July 2022</p>\n<ul>\n<li>This section is optional.</li>\n</ul>\n<h1 id=\"about-classes-in-react\">About classes in React <a class=\"heading-anchor-permalink\" href=\"#about-classes-in-react\">#</a></h1>\n<ul>\n<li>Classes are a computationally equivalent way to create React components.</li>\n<li>Classes were the norm for building components before React 16.8, at-least for stateful components. Introduction of hooks made function based stateful components possible.\n<img src=\"../../../../assets/163_Module_introduction-image-1-26e0cbb1.png\" alt=\"\"></li>\n<li>They are seldom used in new codebases, but they are still present in a majority of apps, libraries.</li>\n</ul>\n<h3 id=\"what%E2%80%99s-in-this-section\">What’s in this section <a class=\"heading-anchor-permalink\" href=\"#what%E2%80%99s-in-this-section\">#</a></h3>\n<ol>\n<li>What are and why class components?</li>\n<li>Working with class based components?</li>\n<li>Error boundaries - can only be worked with using Class based components.</li>\n</ol>\n",
      "id": 29
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/164_What_and_why.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/164_What_and_why.html",
      "content": "# 164. What and why\nCreated Monday 14 July 2022\n\n- Class based components are an alternative to function based components.\n- Jargon - Class based components are also known as 'class components', the same goes for  function based components which are also known as 'function components'.\n- With the exception of 'Error boundaries' - functional and class based components are equally valid for any kind of components, and are interoperable.\n\n### Class vs function components - basic difference\n![](../../../../assets/164_What_and_why-image-1-26e0cbb1.png)\n1. Functions return JSX directly. Classes need to have a function named `render` that returns the JSX.\n2. Functions have `useState` for working with state which provides both the current value and a mutator for state. Classes store state as an instance variable named `state` and use the React provided mutator called `setState`.\n3. Functions don't have to use the `this` keyword, almost always. Classes have to use `this` almost everywhere.\n4. Functions use React \"hooks\" to hook into React life-cycle. Classes have \"imperative\" style hooks available to them.\n   *Note*: Classes cannot use React hooks, and Functions cannot use lifecycle methods (FIXME: not sure if functions cannot use lifecycle hooks).\n",
      "html": "<h1 id=\"164.-what-and-why\">164. What and why <a class=\"heading-anchor-permalink\" href=\"#164.-what-and-why\">#</a></h1>\n<p>Created Monday 14 July 2022</p>\n<ul>\n<li>Class based components are an alternative to function based components.</li>\n<li>Jargon - Class based components are also known as ‘class components’, the same goes for  function based components which are also known as ‘function components’.</li>\n<li>With the exception of ‘Error boundaries’ - functional and class based components are equally valid for any kind of components, and are interoperable.</li>\n</ul>\n<h3 id=\"class-vs-function-components---basic-difference\">Class vs function components - basic difference <a class=\"heading-anchor-permalink\" href=\"#class-vs-function-components---basic-difference\">#</a></h3>\n<p><img src=\"../../../../assets/164_What_and_why-image-1-26e0cbb1.png\" alt=\"\"></p>\n<ol>\n<li>Functions return JSX directly. Classes need to have a function named <code>render</code> that returns the JSX.</li>\n<li>Functions have <code>useState</code> for working with state which provides both the current value and a mutator for state. Classes store state as an instance variable named <code>state</code> and use the React provided mutator called <code>setState</code>.</li>\n<li>Functions don’t have to use the <code>this</code> keyword, almost always. Classes have to use <code>this</code> almost everywhere.</li>\n<li>Functions use React “hooks” to hook into React life-cycle. Classes have “imperative” style hooks available to them.\n<em>Note</em>: Classes cannot use React hooks, and Functions cannot use lifecycle methods (FIXME: not sure if functions cannot use lifecycle hooks).</li>\n</ol>\n",
      "id": 30
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/165_Adding_a_first_class_based_component.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/165_Adding_a_first_class_based_component.html",
      "content": "# 165. Adding a first class based component\nCreated Monday 14 July 2022\n\n[Code link](https://github.com/exemplar-codes/react-with-classes)\n\nThis is a simple app written using functional component. And it uses a simple state.\nOur goal is to rewrite it use Classes instead of function components.\n\n---\nFunctional component:\n```jsx\nimport classes from './User.module.css';\n\nconst User = (props) => {\n  return <li className={classes.user}>{props.name}</li>;\n};\n\nexport default User;\n```\nre-written as a class component:\n```jsx\nimport { Component } from \"react\";\nimport classes from \"./User.module.css\";\n\nclass User extends Component {\n  render() {\n    return <li className={classes.user}>{this.props.name}</li>;\n  }\n}\n\nexport default User;\n```\n---\n### Learnings\n1. Class components need to extend from `React.Component`.\n2. Class constructor is not needed for stateless components, in general.\n3. Class needs to have a `render` method that returns JSX.\n4. Props are accessed via the `this.props` variable. It is available by default, i.e. without a constructor.\n5. Classes and functional components are interoperable, i.e. classes can use function components and vice-versa. One can mix and match whatever one prefers, but generally it's good to either use all functional or all class components. This may not be the case if the codebase is old, and contains class components, which is fine.",
      "html": "<h1 id=\"165.-adding-a-first-class-based-component\">165. Adding a first class based component <a class=\"heading-anchor-permalink\" href=\"#165.-adding-a-first-class-based-component\">#</a></h1>\n<p>Created Monday 14 July 2022</p>\n<p><a href=\"https://github.com/exemplar-codes/react-with-classes\">Code link</a></p>\n<p>This is a simple app written using functional component. And it uses a simple state.\nOur goal is to rewrite it use Classes instead of function components.</p>\n<hr>\n<p>Functional component:</p>\n<pre><code class=\"language-jsx\">import classes from './User.module.css';\n\nconst User = (props) =&gt; {\n  return &lt;li className={classes.user}&gt;{props.name}&lt;/li&gt;;\n};\n\nexport default User;\n</code></pre>\n<p>re-written as a class component:</p>\n<pre><code class=\"language-jsx\">import { Component } from &quot;react&quot;;\nimport classes from &quot;./User.module.css&quot;;\n\nclass User extends Component {\n  render() {\n    return &lt;li className={classes.user}&gt;{this.props.name}&lt;/li&gt;;\n  }\n}\n\nexport default User;\n</code></pre>\n<hr>\n<h3 id=\"learnings\">Learnings <a class=\"heading-anchor-permalink\" href=\"#learnings\">#</a></h3>\n<ol>\n<li>Class components need to extend from <code>React.Component</code>.</li>\n<li>Class constructor is not needed for stateless components, in general.</li>\n<li>Class needs to have a <code>render</code> method that returns JSX.</li>\n<li>Props are accessed via the <code>this.props</code> variable. It is available by default, i.e. without a constructor.</li>\n<li>Classes and functional components are interoperable, i.e. classes can use function components and vice-versa. One can mix and match whatever one prefers, but generally it’s good to either use all functional or all class components. This may not be the case if the codebase is old, and contains class components, which is fine.</li>\n</ol>\n",
      "id": 31
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/166_Working_with_state_and_events.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/166_Working_with_state_and_events.html",
      "content": "# 166. Working with state and events\nCreated Monday 15 July 2022\n\nGoal: convert a functional stateful component from class based one.\n\nFunctional code:\n```jsx\nimport { useState } from 'react';\nimport User from './User';\n\nimport classes from './Users.module.css';\n\nconst DUMMY_USERS = [\n  { id: 'u1', name: 'Max' },\n  { id: 'u2', name: 'Manuel' },\n  { id: 'u3', name: 'Julie' },\n];\n\nconst Users = () => {\n  const [showUsers, setShowUsers] = useState(true);\n\n  const toggleUsersHandler = () => {\n    setShowUsers((curState) => !curState);\n  };\n\n  const usersList = (\n    <ul>\n      {DUMMY_USERS.map((user) => (\n        <User key={user.id} name={user.name} />\n      ))}\n    </ul>\n  );\n\n  return (\n    <div className={classes.users}>\n      <button onClick={toggleUsersHandler}>\n        {showUsers ? 'Hide' : 'Show'} Users\n      </button>\n      {showUsers && usersList}\n    </div>\n  );\n};\n\nexport default Users;\n```\nre-written as a class component:\n```jsx\nimport { Component } from \"react\";\n\nclass Users extends Component {\n  constructor() {\n    super();\n    //   const [showUsers, setShowUsers] = useState(true);\n    this.state = { showUsers: true };\n  }\n  toggleUsersHandler() {\n    // setShowUsers((curState) => !curState);\n    this.setState((latestState) => {\n      return { showUsers: !latestState.showUsers };\n    });\n  }\n\n  render() {\n  // stateless helper functions/datum are OK inside render()\n    const usersList = (\n      <ul>\n        {DUMMY_USERS.map((user) => (\n          <User key={user.id} name={user.name} />\n        ))}\n      </ul>\n    );\n\n    return (\n      <div className={classes.users}>\n        {/* <button onClick={toggleUsersHandler}> */}\n        <button onClick={this.toggleUsersHandler.bind(this)}>\n          {this.state.showUsers ? \"Hide\" : \"Show\"} Users\n        </button>\n        {this.props.children}\n        {this.state.showUsers && usersList}\n      </div>\n    );\n  }\n}\n\nexport default Users;\n```\n\n### Learnings\n1. **Callbacks** should usually be made instance methods.\n   - The proper way to specify an instance callback function is like this - `this.myFunction.bind(this)`. e.g. `<button onClick={this.myFunc().bind(this)}>`.\n   - Calling it does not require `bind`, i.e. `this.myFunction()` is OK.\n   - We can still have helper functions/data in the render if we like, but callbacks involving state are better kept out of the `render` method.\n2. Working with **state**:\n\t1. Initialization - initialize an instance variable called \"state\", which must be an `object`. With class based components, all state variables are always kept in this object called \"state\".\n\t2. Updation - to update state, use the React provided instance method called `setState` which has two versions, just like the mutator provided by `useState` hook:\n\t\t1. Pass the new state *changes*, as an object.\n\t\t2. Pass a function that provides the latest state and returns the new state changes. This is used if the new state depends on the previous state.\n\t\t   \n\t\tNote: `setState` automatically merges changes - we only pass the *changes* to be made as an object, and React will automatically *merge* the new state object with the existing state. i.e. the state is merged, not overridden. This is different from `useState`, where state is overridden, instead of being merged.\n\t\tExample of state change:\n\t\t```jsx\n\t\tclass MyComponent extends Component {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.state = {odd: false, color: 'blue'};\n\t\t\t}\n\t\n\t\t\ttoggleParity() {\n\t\t\t\tthis.setState(prevState => {parity: !prevState.parity});\n\t\t\t}\n\t\t\t\n\t\t\trender() { return <>...</>; }\n\t\t}\n\t\t```\n3. Imported classes work exactly the same as functional components.",
      "html": "<h1 id=\"166.-working-with-state-and-events\">166. Working with state and events <a class=\"heading-anchor-permalink\" href=\"#166.-working-with-state-and-events\">#</a></h1>\n<p>Created Monday 15 July 2022</p>\n<p>Goal: convert a functional stateful component from class based one.</p>\n<p>Functional code:</p>\n<pre><code class=\"language-jsx\">import { useState } from 'react';\nimport User from './User';\n\nimport classes from './Users.module.css';\n\nconst DUMMY_USERS = [\n  { id: 'u1', name: 'Max' },\n  { id: 'u2', name: 'Manuel' },\n  { id: 'u3', name: 'Julie' },\n];\n\nconst Users = () =&gt; {\n  const [showUsers, setShowUsers] = useState(true);\n\n  const toggleUsersHandler = () =&gt; {\n    setShowUsers((curState) =&gt; !curState);\n  };\n\n  const usersList = (\n    &lt;ul&gt;\n      {DUMMY_USERS.map((user) =&gt; (\n        &lt;User key={user.id} name={user.name} /&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n\n  return (\n    &lt;div className={classes.users}&gt;\n      &lt;button onClick={toggleUsersHandler}&gt;\n        {showUsers ? 'Hide' : 'Show'} Users\n      &lt;/button&gt;\n      {showUsers &amp;&amp; usersList}\n    &lt;/div&gt;\n  );\n};\n\nexport default Users;\n</code></pre>\n<p>re-written as a class component:</p>\n<pre><code class=\"language-jsx\">import { Component } from &quot;react&quot;;\n\nclass Users extends Component {\n  constructor() {\n    super();\n    //   const [showUsers, setShowUsers] = useState(true);\n    this.state = { showUsers: true };\n  }\n  toggleUsersHandler() {\n    // setShowUsers((curState) =&gt; !curState);\n    this.setState((latestState) =&gt; {\n      return { showUsers: !latestState.showUsers };\n    });\n  }\n\n  render() {\n  // stateless helper functions/datum are OK inside render()\n    const usersList = (\n      &lt;ul&gt;\n        {DUMMY_USERS.map((user) =&gt; (\n          &lt;User key={user.id} name={user.name} /&gt;\n        ))}\n      &lt;/ul&gt;\n    );\n\n    return (\n      &lt;div className={classes.users}&gt;\n        {/* &lt;button onClick={toggleUsersHandler}&gt; */}\n        &lt;button onClick={this.toggleUsersHandler.bind(this)}&gt;\n          {this.state.showUsers ? &quot;Hide&quot; : &quot;Show&quot;} Users\n        &lt;/button&gt;\n        {this.props.children}\n        {this.state.showUsers &amp;&amp; usersList}\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default Users;\n</code></pre>\n<h3 id=\"learnings\">Learnings <a class=\"heading-anchor-permalink\" href=\"#learnings\">#</a></h3>\n<ol>\n<li><strong>Callbacks</strong> should usually be made instance methods.\n<ul>\n<li>The proper way to specify an instance callback function is like this - <code>this.myFunction.bind(this)</code>. e.g. <code>&lt;button onClick={this.myFunc().bind(this)}&gt;</code>.</li>\n<li>Calling it does not require <code>bind</code>, i.e. <code>this.myFunction()</code> is OK.</li>\n<li>We can still have helper functions/data in the render if we like, but callbacks involving state are better kept out of the <code>render</code> method.</li>\n</ul>\n</li>\n<li>Working with <strong>state</strong>:\n<ol>\n<li>\n<p>Initialization - initialize an instance variable called “state”, which must be an <code>object</code>. With class based components, all state variables are always kept in this object called “state”.</p>\n</li>\n<li>\n<p>Updation - to update state, use the React provided instance method called <code>setState</code> which has two versions, just like the mutator provided by <code>useState</code> hook:</p>\n<ol>\n<li>Pass the new state <em>changes</em>, as an object.</li>\n<li>Pass a function that provides the latest state and returns the new state changes. This is used if the new state depends on the previous state.</li>\n</ol>\n<p>Note: <code>setState</code> automatically merges changes - we only pass the <em>changes</em> to be made as an object, and React will automatically <em>merge</em> the new state object with the existing state. i.e. the state is merged, not overridden. This is different from <code>useState</code>, where state is overridden, instead of being merged.\nExample of state change:</p>\n<pre><code class=\"language-jsx\">class MyComponent extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {odd: false, color: 'blue'};\n\t}\n\n\ttoggleParity() {\n\t\tthis.setState(prevState =&gt; {parity: !prevState.parity});\n\t}\n\t\n\trender() { return &lt;&gt;...&lt;/&gt;; }\n}\n</code></pre>\n</li>\n</ol>\n</li>\n<li>Imported classes work exactly the same as functional components.</li>\n</ol>\n",
      "id": 32
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/167_Component_lifecycles_in_class_components.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/167_Component_lifecycles_in_class_components.html",
      "content": "# 167. Component life-cycles in class components\nCreated Monday 15 July 2022\n\nClass based components can't use React hooks. So how do we run side-effects?\n\nClass based components have a somewhat imperative API for running side-effects, which exposes the life-cycle methods directly.\n\nThe most common life-cycle methods are:\n1. `componentDidMount` - called after the component first mount (i.e. evaluation and render are complete) to the DOM. Equivalent to `useEffect(..., [])`.\n2. `componentDidUpdate` - called after the component has updated (i.e. evaluation and *potential* render are complete) to the DOM. Equivalent to `useEffect(...)`. If one uses `if` conditions inside this function, it'll become equivalent to `useEffect(..., [someValue])`.\n3. `componentWillUnmount` - called just before the component is unmounted from the DOM. Equivalent to the cleanup function of `useEffect`.\n   \nTransform functional component that uses `useEffect`:\n```jsx\nimport { useState, useEffect } from \"react\";\nimport classes from \"./UserFinder.module.css\";\nimport Users from \"./Users\";\n\nconst DUMMY_USERS = [\n  { id: \"u1\", name: \"Max\" },\n  { id: \"u2\", name: \"Manuel\" },\n  { id: \"u3\", name: \"Julie\" },\n];\n\nconst UserFinder = () => {\n  const [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    setFilteredUsers(\n      DUMMY_USERS.filter((user) =>\n        user.name.toLowerCase().includes(searchTerm.trim().toLowerCase())\n      )\n    );\n  }, [searchTerm]);\n\n  const searchChangeHandler = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  return (\n    <div className={classes[\"finder\"]}>\n      <input type=\"search\" onChange={searchChangeHandler} />\n      <Users users={filteredUsers} />\n    </div>\n  );\n};\n\nexport default UserFinder;\n```\nto class based component:\n```jsx\nimport { Component } from 'react';\n\nclass UserFinder extends Component {\n  constructor() {\n    super();\n    this.state = { filteredUsers: DUMMY_USERS, searchTerm: \"\" };\n  }\n\n  searchChangeHandler(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  /*\n  useEffect(() => {\n\tsetFilteredUsers(\n\t  DUMMY_USERS.filter((user) =>\n\t\tuser.name.toLowerCase().includes(searchTerm.trim().toLowerCase())\n\t  )\n\t);\n  }, [searchTerm]);\n  */\n  \n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchTerm !== this.state.searchTerm) {\n      // update list\n      this.setState({\n        filteredUsers: DUMMY_USERS.filter((user) =>\n          user.name\n            .toLowerCase()\n            .includes(this.state.searchTerm.trim().toLowerCase())\n        ),\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className={classes[\"finder\"]}>\n        <input type=\"search\" onChange={this.searchChangeHandler.bind(this)} />\n        <p>{this.state.searchTerm}</p>\n        <Users users={this.state.filteredUsers} />\n      </div>\n    );\n  }\n}\n\nexport default UserFinder;\n```\n\n### Learnings\n1. `componentDidUpdate` receives two parameters - previous props and previous state. These may be compared with the new props or state, in order to avoid infinite loops.\n   ```jsx\n   componentDidUpdate(prevProps, prevState) {\n\t   if(prevState.x != this.state.x) {\n\t\t   // do something\n\t   }\n   }\n\t```\n2. Using life-cycle methods in classes is a different mental model. It is more imperative, and less concise than `useEffect` in functional components.\n\n\n### An important observation - re-instantiation of components is avoided, unless absolutely needed\nThe `componentDidUpdate` function receives previous props, in addition to previous state.\nHaving previous state was fine, but why does it receive previous props? Well the answer to this question is that when comparing (during tree diffing) two *custom* components of the same type, even if there are changes in props, the instance of the component remains the same (this is actually the reason state is preserved between renders), irrespective of prop changes. Of course React runs the `render` method and then diffs it with the existing tree.\n\nIn short, the important thing to note here is that components are instantiated only once, even between multiple renders, including if the re-render call came from the ancestor i.e. re-evaluation is related to `render` output instead of `constructor`.\n\nSource: https://reactjs.org/docs/reconciliation.html#component-elements-of-the-same-type\n\nIt could be argued that this an arbitrary decision by the React team, one could have re-instantiated custom components on each render and only saved previous state (which is obvious - it should be saved), and not previous props. It does, however, make a change to React, in that we have retained some extra information, i.e. previous props, which may be used if needed. If previous props are not saved, it does not matter if you re-instantiate or not, at-least from an API point of view (ignoring performance), because the amount of information, and hence the set of possible actions would remain unchanged.\n\nFIXME: get a little more comfortable with how this works. I'm a little foggy with this, but it doesn't matter, this is a nuanced implementation detail.",
      "html": "<h1 id=\"167.-component-life-cycles-in-class-components\">167. Component life-cycles in class components <a class=\"heading-anchor-permalink\" href=\"#167.-component-life-cycles-in-class-components\">#</a></h1>\n<p>Created Monday 15 July 2022</p>\n<p>Class based components can’t use React hooks. So how do we run side-effects?</p>\n<p>Class based components have a somewhat imperative API for running side-effects, which exposes the life-cycle methods directly.</p>\n<p>The most common life-cycle methods are:</p>\n<ol>\n<li><code>componentDidMount</code> - called after the component first mount (i.e. evaluation and render are complete) to the DOM. Equivalent to <code>useEffect(..., [])</code>.</li>\n<li><code>componentDidUpdate</code> - called after the component has updated (i.e. evaluation and <em>potential</em> render are complete) to the DOM. Equivalent to <code>useEffect(...)</code>. If one uses <code>if</code> conditions inside this function, it’ll become equivalent to <code>useEffect(..., [someValue])</code>.</li>\n<li><code>componentWillUnmount</code> - called just before the component is unmounted from the DOM. Equivalent to the cleanup function of <code>useEffect</code>.</li>\n</ol>\n<p>Transform functional component that uses <code>useEffect</code>:</p>\n<pre><code class=\"language-jsx\">import { useState, useEffect } from &quot;react&quot;;\nimport classes from &quot;./UserFinder.module.css&quot;;\nimport Users from &quot;./Users&quot;;\n\nconst DUMMY_USERS = [\n  { id: &quot;u1&quot;, name: &quot;Max&quot; },\n  { id: &quot;u2&quot;, name: &quot;Manuel&quot; },\n  { id: &quot;u3&quot;, name: &quot;Julie&quot; },\n];\n\nconst UserFinder = () =&gt; {\n  const [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n  const [searchTerm, setSearchTerm] = useState(&quot;&quot;);\n\n  useEffect(() =&gt; {\n    setFilteredUsers(\n      DUMMY_USERS.filter((user) =&gt;\n        user.name.toLowerCase().includes(searchTerm.trim().toLowerCase())\n      )\n    );\n  }, [searchTerm]);\n\n  const searchChangeHandler = (event) =&gt; {\n    setSearchTerm(event.target.value);\n  };\n\n  return (\n    &lt;div className={classes[&quot;finder&quot;]}&gt;\n      &lt;input type=&quot;search&quot; onChange={searchChangeHandler} /&gt;\n      &lt;Users users={filteredUsers} /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default UserFinder;\n</code></pre>\n<p>to class based component:</p>\n<pre><code class=\"language-jsx\">import { Component } from 'react';\n\nclass UserFinder extends Component {\n  constructor() {\n    super();\n    this.state = { filteredUsers: DUMMY_USERS, searchTerm: &quot;&quot; };\n  }\n\n  searchChangeHandler(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  /*\n  useEffect(() =&gt; {\n\tsetFilteredUsers(\n\t  DUMMY_USERS.filter((user) =&gt;\n\t\tuser.name.toLowerCase().includes(searchTerm.trim().toLowerCase())\n\t  )\n\t);\n  }, [searchTerm]);\n  */\n  \n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchTerm !== this.state.searchTerm) {\n      // update list\n      this.setState({\n        filteredUsers: DUMMY_USERS.filter((user) =&gt;\n          user.name\n            .toLowerCase()\n            .includes(this.state.searchTerm.trim().toLowerCase())\n        ),\n      });\n    }\n  }\n\n  render() {\n    return (\n      &lt;div className={classes[&quot;finder&quot;]}&gt;\n        &lt;input type=&quot;search&quot; onChange={this.searchChangeHandler.bind(this)} /&gt;\n        &lt;p&gt;{this.state.searchTerm}&lt;/p&gt;\n        &lt;Users users={this.state.filteredUsers} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default UserFinder;\n</code></pre>\n<h3 id=\"learnings\">Learnings <a class=\"heading-anchor-permalink\" href=\"#learnings\">#</a></h3>\n<ol>\n<li><code>componentDidUpdate</code> receives two parameters - previous props and previous state. These may be compared with the new props or state, in order to avoid infinite loops.<pre><code class=\"language-jsx\">componentDidUpdate(prevProps, prevState) {\n    if(prevState.x != this.state.x) {\n \t   // do something\n    }\n}\n</code></pre>\n</li>\n<li>Using life-cycle methods in classes is a different mental model. It is more imperative, and less concise than <code>useEffect</code> in functional components.</li>\n</ol>\n<h3 id=\"an-important-observation---re-instantiation-of-components-is-avoided%2C-unless-absolutely-needed\">An important observation - re-instantiation of components is avoided, unless absolutely needed <a class=\"heading-anchor-permalink\" href=\"#an-important-observation---re-instantiation-of-components-is-avoided%2C-unless-absolutely-needed\">#</a></h3>\n<p>The <code>componentDidUpdate</code> function receives previous props, in addition to previous state.\nHaving previous state was fine, but why does it receive previous props? Well the answer to this question is that when comparing (during tree diffing) two <em>custom</em> components of the same type, even if there are changes in props, the instance of the component remains the same (this is actually the reason state is preserved between renders), irrespective of prop changes. Of course React runs the <code>render</code> method and then diffs it with the existing tree.</p>\n<p>In short, the important thing to note here is that components are instantiated only once, even between multiple renders, including if the re-render call came from the ancestor i.e. re-evaluation is related to <code>render</code> output instead of <code>constructor</code>.</p>\n<p>Source: <a href=\"https://reactjs.org/docs/reconciliation.html#component-elements-of-the-same-type\">https://reactjs.org/docs/reconciliation.html#component-elements-of-the-same-type</a></p>\n<p>It could be argued that this an arbitrary decision by the React team, one could have re-instantiated custom components on each render and only saved previous state (which is obvious - it should be saved), and not previous props. It does, however, make a change to React, in that we have retained some extra information, i.e. previous props, which may be used if needed. If previous props are not saved, it does not matter if you re-instantiate or not, at-least from an API point of view (ignoring performance), because the amount of information, and hence the set of possible actions would remain unchanged.</p>\n<p>FIXME: get a little more comfortable with how this works. I’m a little foggy with this, but it doesn’t matter, this is a nuanced implementation detail.</p>\n",
      "id": 33
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/169_Context_API_with_class_components.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/169_Context_API_with_class_components.html",
      "content": "# 169. Context API with class components\nCreated Monday 18 July 2022\n\n### What about context in class based components?\n- Well, the *\"context\"* and the *\"provider\"* are *created* exactly the same way as with functional components.\n- As for consuming the context, we can still use `MyContext.Consumer` and provided callback, exactly the same way as we did with functional component. Of course, this does not look good, and is undesirable, irrespective of whether the component is function or class based.\n\nSo, the only difference, is how we consumer context in a \"good-looking way\".\nIn functional components, we had the `useContext` hook, which could be used to access multiple contexts too. But class components don't have access to hooks.\n\n***There's actually NO good way to access context, except the case when there's a single context.***\n\nFor consuming a single context, use the `static` modifier to indicate the context, like so:\n```jsx\nimport {Component} from 'react';\nimport AuthContext from '.../path';\n\nclass MyComponent extends Component {\n\tstatic contextType = AuthContext;\n\n\t// Context is now available via this.context\n}\n```\n\nIf you need more than one context for a class component, one has to use a work-around.",
      "html": "<h1 id=\"169.-context-api-with-class-components\">169. Context API with class components <a class=\"heading-anchor-permalink\" href=\"#169.-context-api-with-class-components\">#</a></h1>\n<p>Created Monday 18 July 2022</p>\n<h3 id=\"what-about-context-in-class-based-components%3F\">What about context in class based components? <a class=\"heading-anchor-permalink\" href=\"#what-about-context-in-class-based-components%3F\">#</a></h3>\n<ul>\n<li>Well, the <em>“context”</em> and the <em>“provider”</em> are <em>created</em> exactly the same way as with functional components.</li>\n<li>As for consuming the context, we can still use <code>MyContext.Consumer</code> and provided callback, exactly the same way as we did with functional component. Of course, this does not look good, and is undesirable, irrespective of whether the component is function or class based.</li>\n</ul>\n<p>So, the only difference, is how we consumer context in a “good-looking way”.\nIn functional components, we had the <code>useContext</code> hook, which could be used to access multiple contexts too. But class components don’t have access to hooks.</p>\n<p><em><strong>There’s actually NO good way to access context, except the case when there’s a single context.</strong></em></p>\n<p>For consuming a single context, use the <code>static</code> modifier to indicate the context, like so:</p>\n<pre><code class=\"language-jsx\">import {Component} from 'react';\nimport AuthContext from '.../path';\n\nclass MyComponent extends Component {\n\tstatic contextType = AuthContext;\n\n\t// Context is now available via this.context\n}\n</code></pre>\n<p>If you need more than one context for a class component, one has to use a work-around.</p>\n",
      "id": 34
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/170_Class_vs_function_components_a_summary.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/170_Class_vs_function_components_a_summary.html",
      "content": "# 170. Class vs function components: A summary\nCreated Monday 18 July 2022\n\n- Building apps with class components alone is also fine.\n- Functional components are the norm in modern React.\n- It is fine to ignore class based components, except for Error boundaries.\n\n\n### Differences between class and functional components:\nFunctional components:\n1. Leaner\n2. No use of the `this` keyword\n3. Access multiple contexts easily\n\nClass based components:\n1. Verbose\n2. Can't access contexts easily\n3. Error boundaries need class based components.\n\n\n### Recommendations from the instructor\n1. Prefer functional components.\n2. Use class based components if:\n\t1. If you prefer them\n\t2. The existing project codebase or convention involves class based components.\n\t3. For building Error boundaries.\n\t   ",
      "html": "<h1 id=\"170.-class-vs-function-components%3A-a-summary\">170. Class vs function components: A summary <a class=\"heading-anchor-permalink\" href=\"#170.-class-vs-function-components%3A-a-summary\">#</a></h1>\n<p>Created Monday 18 July 2022</p>\n<ul>\n<li>Building apps with class components alone is also fine.</li>\n<li>Functional components are the norm in modern React.</li>\n<li>It is fine to ignore class based components, except for Error boundaries.</li>\n</ul>\n<h3 id=\"differences-between-class-and-functional-components%3A\">Differences between class and functional components: <a class=\"heading-anchor-permalink\" href=\"#differences-between-class-and-functional-components%3A\">#</a></h3>\n<p>Functional components:</p>\n<ol>\n<li>Leaner</li>\n<li>No use of the <code>this</code> keyword</li>\n<li>Access multiple contexts easily</li>\n</ol>\n<p>Class based components:</p>\n<ol>\n<li>Verbose</li>\n<li>Can’t access contexts easily</li>\n<li>Error boundaries need class based components.</li>\n</ol>\n<h3 id=\"recommendations-from-the-instructor\">Recommendations from the instructor <a class=\"heading-anchor-permalink\" href=\"#recommendations-from-the-instructor\">#</a></h3>\n<ol>\n<li>Prefer functional components.</li>\n<li>Use class based components if:\n<ol>\n<li>If you prefer them</li>\n<li>The existing project codebase or convention involves class based components.</li>\n<li>For building Error boundaries.</li>\n</ol>\n</li>\n</ol>\n",
      "id": 35
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/171_Introducing_Error_Boundaries.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/171_Introducing_Error_Boundaries.html",
      "content": "# 171. Introducing Error Boundaries\nCreated Monday 18 July 2022\n\n### Why\nThere are sometimes errors which are:\n1. Used for informational purposes, i.e. error handling between different parts of an application.\n2. Cannot generally be fixed. For example - if the server is temporarily not responding.\n\nSo why not use error handling normally? Well, if a child component throws an error, the `catch` should be inside the same component (and function). In short, it cannot be handled in a parent component.\n\n\n### How\n##### Error handling solutions\nOne way to do error handling is to create a context with error initialized to `null`. Then, instead of `throw`ing an error, we'll simply call a function (defined in this \"error\" context). The context provider will conditionally handle the error and show a message etc. See this [code](https://github.com/exemplar-codes/react-with-classes/commit/625ea216b0f7356c7039a03a7bfe13436407c04d).\n\nThis is, of course, not so elegant - we are having to import context, then call a function defined in it. A better way would be to just catch `throw`n errors directly by the kind of \"error\" context provider. This is possible if make changes to the React core library to catch error bubbling up from the source of `throw`.\n\nReact implements a functionally similar feature, called \"Error boundary\".\n\n\n##### Error boundaries\n- An error boundary is simply a *class* based React component that implements the `componentDidCatch` method. That's all. The error boundary also implements the usual `render` function.\n- This error boundary wraps the app, or parts of it. When any of it's ancestor throws an error, the `componentDidCatch` method is called.\n- When the error occurs, we should show some error UI. But we will first need to cause a re-render. To do that, we use state in the error boundary component. To cause the re-render, we mutate the state inside `componentDidCatch`. \n- When the error occurs, `componentDidCatch` gets called, where, as said, we mutate state to indicate that an error has occurred. In the next re-render the `render` method of the error boundary gets called, and we conditionally avoid the usual flow of the app, rendering a message component instead. By default the error boundary just render s`props.children`.\n- The `componentDidCatch` has a parameter with the error that occurred available.\n\nSo, to add an error boundary to an app:\nA. Create the class boundary\n\t1. Create a class based component with state indicating if an error has occured, and set it to `false`.\n\t2. Implement the `componentDidCatch` method so that it sets the state to specify that an error has occurred.\n\t3. Implement the `render` method to return `props.children` by default, and conditionally return an error component (or message).\nB. Using the error boundary - wrap the potentially error causing part of the app by the error boundary (component).\nC. You can now throw error by using `throw`.\nThat's all\n\nExample - Consider the following app.\n```jsx\nimport {Component} from 'react';\nimport MyUser from '.../path';\n\nfunction App() {\n\treturn <MyUser />;\n}\n```\n\n```jsx\nfunction MyUser() {\n\treturn <button onClick={() => {throw new Error('Error occured');}}>Trigger Error</button>;\n}\n\nexport default MyUser;\n```\n\nLet's define an error boundary to handle the error. Note, it must be a class based component:\n```jsx\nimport {Component} from 'react';\n\nclass MyErrorBoundary extends Component {\n\tconstructor() { // need state to cause a re-render when error occurs\n\t\tsuper();\n\t\tthis.state = {hasError: false, error: null};\n\t}\n\n\tcomponentDidCatch(error) {\n\t\tthis.setState({hasError:true, error: error});\n\t}\n\n\trender() {\n\t\treturn this.state.hasError ? <p>Error Occured</p> : this.props.children;\n\t}\n}\n\nexport default MyErrorBoundary;\n```\n\nTo use the error boundary, wrap the potentially error causing component inside it. For example:\n```jsx\n\nfunction App() {\n\treturn <MyErrorBoundary><MyUsers /></MyErrorBoundary>;\n}\n```\n\nThe error will now be caught.\n\n##### A note about error boundary(s)\n - One may use multiple error boundaries and conditionally handle different types of errors, i.e. by using implementing `componentDidCatch` conditionally based on `error` parameter it provides.\n - Or use a single error boundary and use switch cases, with the state containing many types of \"error has occurred\".",
      "html": "<h1 id=\"171.-introducing-error-boundaries\">171. Introducing Error Boundaries <a class=\"heading-anchor-permalink\" href=\"#171.-introducing-error-boundaries\">#</a></h1>\n<p>Created Monday 18 July 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>There are sometimes errors which are:</p>\n<ol>\n<li>Used for informational purposes, i.e. error handling between different parts of an application.</li>\n<li>Cannot generally be fixed. For example - if the server is temporarily not responding.</li>\n</ol>\n<p>So why not use error handling normally? Well, if a child component throws an error, the <code>catch</code> should be inside the same component (and function). In short, it cannot be handled in a parent component.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<h5 id=\"error-handling-solutions\">Error handling solutions <a class=\"heading-anchor-permalink\" href=\"#error-handling-solutions\">#</a></h5>\n<p>One way to do error handling is to create a context with error initialized to <code>null</code>. Then, instead of <code>throw</code>ing an error, we’ll simply call a function (defined in this “error” context). The context provider will conditionally handle the error and show a message etc. See this <a href=\"https://github.com/exemplar-codes/react-with-classes/commit/625ea216b0f7356c7039a03a7bfe13436407c04d\">code</a>.</p>\n<p>This is, of course, not so elegant - we are having to import context, then call a function defined in it. A better way would be to just catch <code>throw</code>n errors directly by the kind of “error” context provider. This is possible if make changes to the React core library to catch error bubbling up from the source of <code>throw</code>.</p>\n<p>React implements a functionally similar feature, called “Error boundary”.</p>\n<h5 id=\"error-boundaries\">Error boundaries <a class=\"heading-anchor-permalink\" href=\"#error-boundaries\">#</a></h5>\n<ul>\n<li>An error boundary is simply a <em>class</em> based React component that implements the <code>componentDidCatch</code> method. That’s all. The error boundary also implements the usual <code>render</code> function.</li>\n<li>This error boundary wraps the app, or parts of it. When any of it’s ancestor throws an error, the <code>componentDidCatch</code> method is called.</li>\n<li>When the error occurs, we should show some error UI. But we will first need to cause a re-render. To do that, we use state in the error boundary component. To cause the re-render, we mutate the state inside <code>componentDidCatch</code>.</li>\n<li>When the error occurs, <code>componentDidCatch</code> gets called, where, as said, we mutate state to indicate that an error has occurred. In the next re-render the <code>render</code> method of the error boundary gets called, and we conditionally avoid the usual flow of the app, rendering a message component instead. By default the error boundary just render s<code>props.children</code>.</li>\n<li>The <code>componentDidCatch</code> has a parameter with the error that occurred available.</li>\n</ul>\n<p>So, to add an error boundary to an app:\nA. Create the class boundary\n1. Create a class based component with state indicating if an error has occured, and set it to <code>false</code>.\n2. Implement the <code>componentDidCatch</code> method so that it sets the state to specify that an error has occurred.\n3. Implement the <code>render</code> method to return <code>props.children</code> by default, and conditionally return an error component (or message).\nB. Using the error boundary - wrap the potentially error causing part of the app by the error boundary (component).\nC. You can now throw error by using <code>throw</code>.\nThat’s all</p>\n<p>Example - Consider the following app.</p>\n<pre><code class=\"language-jsx\">import {Component} from 'react';\nimport MyUser from '.../path';\n\nfunction App() {\n\treturn &lt;MyUser /&gt;;\n}\n</code></pre>\n<pre><code class=\"language-jsx\">function MyUser() {\n\treturn &lt;button onClick={() =&gt; {throw new Error('Error occured');}}&gt;Trigger Error&lt;/button&gt;;\n}\n\nexport default MyUser;\n</code></pre>\n<p>Let’s define an error boundary to handle the error. Note, it must be a class based component:</p>\n<pre><code class=\"language-jsx\">import {Component} from 'react';\n\nclass MyErrorBoundary extends Component {\n\tconstructor() { // need state to cause a re-render when error occurs\n\t\tsuper();\n\t\tthis.state = {hasError: false, error: null};\n\t}\n\n\tcomponentDidCatch(error) {\n\t\tthis.setState({hasError:true, error: error});\n\t}\n\n\trender() {\n\t\treturn this.state.hasError ? &lt;p&gt;Error Occured&lt;/p&gt; : this.props.children;\n\t}\n}\n\nexport default MyErrorBoundary;\n</code></pre>\n<p>To use the error boundary, wrap the potentially error causing component inside it. For example:</p>\n<pre><code class=\"language-jsx\">\nfunction App() {\n\treturn &lt;MyErrorBoundary&gt;&lt;MyUsers /&gt;&lt;/MyErrorBoundary&gt;;\n}\n</code></pre>\n<p>The error will now be caught.</p>\n<h5 id=\"a-note-about-error-boundary(s)\">A note about error boundary(s) <a class=\"heading-anchor-permalink\" href=\"#a-note-about-error-boundary(s)\">#</a></h5>\n<ul>\n<li>One may use multiple error boundaries and conditionally handle different types of errors, i.e. by using implementing <code>componentDidCatch</code> conditionally based on <code>error</code> parameter it provides.</li>\n<li>Or use a single error boundary and use switch cases, with the state containing many types of “error has occurred”.</li>\n</ul>\n",
      "id": 36
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/173_Module_Introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/173_Module_Introduction.html",
      "content": "# 173. Module Introduction\nCreated Monday 18 July 2022\n\n- We only worked with local/dummy data in our React apps.\n- In this section, we'll fetch/post data to/from back-end.\n- We'll also look at how to handle error and loading states in apps.",
      "html": "<h1 id=\"173.-module-introduction\">173. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#173.-module-introduction\">#</a></h1>\n<p>Created Monday 18 July 2022</p>\n<ul>\n<li>We only worked with local/dummy data in our React apps.</li>\n<li>In this section, we’ll fetch/post data to/from back-end.</li>\n<li>We’ll also look at how to handle error and loading states in apps.</li>\n</ul>\n",
      "id": 37
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/174_How_to_not_connect_to_a_database.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/174_How_to_not_connect_to_a_database.html",
      "content": "# 174. How to (Not) connect to a database\nCreated Monday 18 July 2022\n\n##### Talking to a DB directly from client side app\n- Browser-side apps don't, and shouldn't directly talk to databases.\n- If an app does, the it's very badly written and highly unsecure app.\n![](../../../../assets/174_How_to_not_connect_to_a_database-image-1-d81ad2d1.png)\nBut why?\n- This is difficult to do (technically).\n- All client side code is available to the user (i.e. via the browser dev tools, for example). Connecting *directly* to a database in a client app would, thus, expose database credentials to the outside world, which is not desirable and a huge security concern.\n\tNote: to know more about client-side code accessibility by the user, see [this](https://academind.com/tutorials/hide-javascript-code).\n- Performance issues.\n\nIn short, it's not secure.\n\nHow do we then read/write data persistently in our client-side app (React app, for example)?\n\n##### Back-end App\nWe employ a \"back-end app\" as a bridge between the client-app (React in this case) and the database. Essentially, it's a program running on the server, which is connected to the database program.\n\nNote: The database and back-end app may or may not be running on the same physical machine. It does not matter either way, it's irrelevant to the client-app.\n\n![](../../../../assets/174_How_to_not_connect_to_a_database-image-2-d81ad2d1.png)\n\nThe back-end app has all the credentials of the database, and as it's code/data is not accessible to the client-side (in general, i.e. except what is allowed to be transmitted), there's no security issue.\n\nOK, but how does the client-app read/write to the database?\n\nIgnore authentication and authorization of the user (which is also a responsibility of the back-end) for now. The back-end app exposes an API (Application Programming Interface) which works according to HTTP, and is continuously listening for HTTP requests.\n\nFinally, the client-side app makes HTTP requests to available APIs, via URLs for reading/writing data from/to the database. The client-side processes the response and populates/updates the UI accordingly in the browser.\n",
      "html": "<h1 id=\"174.-how-to-(not)-connect-to-a-database\">174. How to (Not) connect to a database <a class=\"heading-anchor-permalink\" href=\"#174.-how-to-(not)-connect-to-a-database\">#</a></h1>\n<p>Created Monday 18 July 2022</p>\n<h5 id=\"talking-to-a-db-directly-from-client-side-app\">Talking to a DB directly from client side app <a class=\"heading-anchor-permalink\" href=\"#talking-to-a-db-directly-from-client-side-app\">#</a></h5>\n<ul>\n<li>Browser-side apps don’t, and shouldn’t directly talk to databases.</li>\n<li>If an app does, the it’s very badly written and highly unsecure app.\n<img src=\"../../../../assets/174_How_to_not_connect_to_a_database-image-1-d81ad2d1.png\" alt=\"\">\nBut why?</li>\n<li>This is difficult to do (technically).</li>\n<li>All client side code is available to the user (i.e. via the browser dev tools, for example). Connecting <em>directly</em> to a database in a client app would, thus, expose database credentials to the outside world, which is not desirable and a huge security concern.\nNote: to know more about client-side code accessibility by the user, see <a href=\"https://academind.com/tutorials/hide-javascript-code\">this</a>.</li>\n<li>Performance issues.</li>\n</ul>\n<p>In short, it’s not secure.</p>\n<p>How do we then read/write data persistently in our client-side app (React app, for example)?</p>\n<h5 id=\"back-end-app\">Back-end App <a class=\"heading-anchor-permalink\" href=\"#back-end-app\">#</a></h5>\n<p>We employ a “back-end app” as a bridge between the client-app (React in this case) and the database. Essentially, it’s a program running on the server, which is connected to the database program.</p>\n<p>Note: The database and back-end app may or may not be running on the same physical machine. It does not matter either way, it’s irrelevant to the client-app.</p>\n<p><img src=\"../../../../assets/174_How_to_not_connect_to_a_database-image-2-d81ad2d1.png\" alt=\"\"></p>\n<p>The back-end app has all the credentials of the database, and as it’s code/data is not accessible to the client-side (in general, i.e. except what is allowed to be transmitted), there’s no security issue.</p>\n<p>OK, but how does the client-app read/write to the database?</p>\n<p>Ignore authentication and authorization of the user (which is also a responsibility of the back-end) for now. The back-end app exposes an API (Application Programming Interface) which works according to HTTP, and is continuously listening for HTTP requests.</p>\n<p>Finally, the client-side app makes HTTP requests to available APIs, via URLs for reading/writing data from/to the database. The client-side processes the response and populates/updates the UI accordingly in the browser.</p>\n",
      "id": 38
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/175_Using_the_Star_Wars_API.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/175_Using_the_Star_Wars_API.html",
      "content": "# 175. Using the Star Wars API\nCreated Monday 18 July 2022\n\n- Going to learn how to work with HTTP requests using the Star Wars API. We are using a ready made API to keep focus on React, instead of writing a backend app.\n- Site: https://swapi.dev/, fallback site: https://swapi.py4e.com/\n- This is a read-only REST API that returns JSON data. REST means there are different URLs that are used to access different resources.",
      "html": "<h1 id=\"175.-using-the-star-wars-api\">175. Using the Star Wars API <a class=\"heading-anchor-permalink\" href=\"#175.-using-the-star-wars-api\">#</a></h1>\n<p>Created Monday 18 July 2022</p>\n<ul>\n<li>Going to learn how to work with HTTP requests using the Star Wars API. We are using a ready made API to keep focus on React, instead of writing a backend app.</li>\n<li>Site: <a href=\"https://swapi.dev/\">https://swapi.dev/</a>, fallback site: <a href=\"https://swapi.py4e.com/\">https://swapi.py4e.com/</a></li>\n<li>This is a read-only REST API that returns JSON data. REST means there are different URLs that are used to access different resources.</li>\n</ul>\n",
      "id": 39
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/176_Our_starting_App_and_backend.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/176_Our_starting_App_and_backend.html",
      "content": "# 176. Our starting App and backend\nCreated Monday 18 July 2022\n\n### More about REST/GraphQL APIs(optional)\n[Link](https://academind.com/tutorials/rest-vs-graphql)\n- API here refers to HTTP based web APIs.\n- About both:\n\t1. REST is an architectural style for web APIs.\n\t2. GraphQL is both a data manipulation language and a runtime for fulfilling queries made using the language.\n- Both are ways to structure and work with web APIs.\n- A backend app may use either or both. REST is the more prevalent and popular one, GraphQL is a younger\n\nSimilarities and differences\n![](../../../../assets/176_Our_starting_App_and_backend-image-1-d81ad2d1.png)\n\nEssentially, difference between the two is the consumption style. Of course, the backend-app is also implemented differently. The query, in case of GraphQL, should abide by the GraphQL query specification.\n![](../../../../assets/176_Our_starting_App_and_backend-image-2-d81ad2d1.png)\n![](../../../../assets/176_Our_starting_App_and_backend-image-3-d81ad2d1.png)\n![](../../../../assets/176_Our_starting_App_and_backend-image-4-d81ad2d1.png)\n![](../../../../assets/176_Our_starting_App_and_backend-image-5-d81ad2d1.png)\n\nWhen should one use REST, or GraphQL?\n- **REST**\n\t- Pros:\n\t\t- Easy to use and implement.\n\t- Cons\n\t\t- Excessive data transmission, generally. e.g. you only need {name, picture} for posts, but you get entire objects.\n\t\t- Multiple requests may be needed by the client.\n\t\t- Client is somewhat bulkier, because multiple resources need to be tied together\n- **GraphQL**\n\t- Pros\n\t\t- Data transported is minimal - more granular control over what is needed.\n\t\t- A single requests can fetch multiple resources.\n\t- Cons\n\t\t- A tad difficult to use and implement.\n\t\t- Client maybe bulkier due to GraphQL handling packages.\n\nOf course, these are general characteristics, i.e. the decision depends on the needs of the client-side app.\n",
      "html": "<h1 id=\"176.-our-starting-app-and-backend\">176. Our starting App and backend <a class=\"heading-anchor-permalink\" href=\"#176.-our-starting-app-and-backend\">#</a></h1>\n<p>Created Monday 18 July 2022</p>\n<h3 id=\"more-about-rest%2Fgraphql-apis(optional)\">More about REST/GraphQL APIs(optional) <a class=\"heading-anchor-permalink\" href=\"#more-about-rest%2Fgraphql-apis(optional)\">#</a></h3>\n<p><a href=\"https://academind.com/tutorials/rest-vs-graphql\">Link</a></p>\n<ul>\n<li>API here refers to HTTP based web APIs.</li>\n<li>About both:\n<ol>\n<li>REST is an architectural style for web APIs.</li>\n<li>GraphQL is both a data manipulation language and a runtime for fulfilling queries made using the language.</li>\n</ol>\n</li>\n<li>Both are ways to structure and work with web APIs.</li>\n<li>A backend app may use either or both. REST is the more prevalent and popular one, GraphQL is a younger</li>\n</ul>\n<p>Similarities and differences\n<img src=\"../../../../assets/176_Our_starting_App_and_backend-image-1-d81ad2d1.png\" alt=\"\"></p>\n<p>Essentially, difference between the two is the consumption style. Of course, the backend-app is also implemented differently. The query, in case of GraphQL, should abide by the GraphQL query specification.\n<img src=\"../../../../assets/176_Our_starting_App_and_backend-image-2-d81ad2d1.png\" alt=\"\">\n<img src=\"../../../../assets/176_Our_starting_App_and_backend-image-3-d81ad2d1.png\" alt=\"\">\n<img src=\"../../../../assets/176_Our_starting_App_and_backend-image-4-d81ad2d1.png\" alt=\"\">\n<img src=\"../../../../assets/176_Our_starting_App_and_backend-image-5-d81ad2d1.png\" alt=\"\"></p>\n<p>When should one use REST, or GraphQL?</p>\n<ul>\n<li><strong>REST</strong>\n<ul>\n<li>Pros:\n<ul>\n<li>Easy to use and implement.</li>\n</ul>\n</li>\n<li>Cons\n<ul>\n<li>Excessive data transmission, generally. e.g. you only need {name, picture} for posts, but you get entire objects.</li>\n<li>Multiple requests may be needed by the client.</li>\n<li>Client is somewhat bulkier, because multiple resources need to be tied together</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>GraphQL</strong>\n<ul>\n<li>Pros\n<ul>\n<li>Data transported is minimal - more granular control over what is needed.</li>\n<li>A single requests can fetch multiple resources.</li>\n</ul>\n</li>\n<li>Cons\n<ul>\n<li>A tad difficult to use and implement.</li>\n<li>Client maybe bulkier due to GraphQL handling packages.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Of course, these are general characteristics, i.e. the decision depends on the needs of the client-side app.</p>\n",
      "id": 40
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/177_Sending_a_GET_request.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/177_Sending_a_GET_request.html",
      "content": "# 177. Sending a GET request\nCreated Monday 18 July 2022\n\n[Section project](https://github.com/exemplar-codes/react-http-app)\n\n### Why\nTo make send/receive data from/to the server. We usually use HTTP (or HTTPS).\n\n\n### How\n- A React app is fundamentally JavaScript code that runs in the browser, so we can use browser APIs (like `fetch`) as well as HTTP request libraries (like \"axios\").\n- We'll be using the built in `fetch` because it's supported by all browsers, as of now. By default the HTTP verb is `GET`.\n\n- Because network requests are handled asynchronously, we'll need to use state to cause a re-render when the request finishes.\n- Keep an \"isLoading\" boolean state too. We set this to `true` on button click or App/component load, just before invoking the network request. We also add a conditional UI component for rendering \"Loading...\" text/animation. We set \"isLoading\" back to `false` once the request is complete. This is a standard UX practice.\n- There are two cases for fetching:\n\t- Without `useEffect` - if fetch is triggered by the user or some other event.\n\t- With `useEffect` - need to fetch on app/component load.\n  \nExample of GET request - without `useEffect`, so using state:\n```jsx\nimport { useState } from 'react';\n\nconst App() {\n\tconst [data, setData] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\t\n\tfunction getProfile() {\n\t\tsetLoading(true);\n\t\tfetch('https://api.github.com/users/sanjarcode').then(response => response.json()).then(data => { setData(data); setLoading(false); });\n\t}\n\n\treturn <>\n\t\t\t<button onClick={getProfile}>Load Data</button>\n\t\t\t<p>{loading && 'Loading...'}</p>\n\t\t\t<p>{!loading && data && JSON.stringify(data)}</p>\n\t\t   </>;\n}\n\nexport default App;\n```\nObserve the flow of this component:\n1. Initially, both data and loading are false.\n2. Upon button click, the `getProfile` function is run. The first line (`setLoading(true)`) causes a re-render, but the function execution continues. The loading text is shown in this render.\n3. `fetch` runs, and if assuming it's a success, causes state changes `setData(data)` and `setLoading(false)`. Both state changes are batched and the component re-renders. The loading text is now absent, and data is displayed.\nNote: The most important thing here is that the callback function `getProfile` keeps running even if the component re-renders. This works because state mutators are guaranteed to remain unchanged on re-renders.\n\nSimilarly, we can make requests on App/component load, without a user event. To do so, use `useEffect`. Of course, we still need state to cause a re-render:\n```jsx\nimport { useState, useEffect } from 'react';\n\nconst App() {\n\tconst [data, setData] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\t\n\tfunction getProfile() {\n\t\tsetLoading(true);\n\t\tfetch('https://api.github.com/users/sanjarcode').then(response => response.json()).then(data => { setData(data); setLoading(false); });\n\t}\n\n\tconst dataSignature = JSON.stringify(data); // to avoid infinite re-renders\n\t// need to stringify because object is a non-primitive data type\n\t\n\tuseEffect(getProfile, [dataSignature]);\n\t\n\treturn <>\n\t\t\t<p>{loading && 'Loading...'}</p>\n\t\t\t<p>{!loading && data && JSON.stringify(data)}</p>\n\t\t   </>;\n}\n\nexport default App;\n```\n\n- We can avoid do requests without state too, by using `ref`s to update DOM on network request success, but we won't be able to show \"Loading...\" UI, which is very important for UX. So it's better to use state.\n\n\n### What\nTo make network requests:\n1. Use some state to render change on request success.\n2. Also keep a \"isLoading\" variable, and use it to show some loading state, like an animation or text.\n3. Use `useEffect` if request must be sent on App/component load. For event triggered fetches (like button clicks), there's no need to use `useEffect`, the event callback can do the network request.\n\n\n### Extra\n#### How to make requests with a time limit? (not discussed in course)\nWell, it is simple. Use [axios](https://stackoverflow.com/a/62082804/11392807) for straightforward code.\n\nIf using `fetch`, do this:\n1. Maintain an extra state \"timeLimitExceeded\" initialized to `false`.\n2. Run the request (e.g. `fetch`) and a timer (with time limit) beside each other. Save this timer.\n3. Nest this request and timer into a \"void\" promise, using `new Promise((resolve, reject) => ...)`. Resolve inside the network request, and reject with an error inside the timer.\n4. Mutate \"timeLimitExceeded\" state to `true` in the catch clause of this promise. Add some UI element conditionally which displays an appropriate message.\n5. In the `finally` clause, clear the timeout, using `window.clearTimeout`. Doing this to avoid running the timer if request was successful.\n6. Nest this void promise inside a function.\n7. Use this function in `useEffect` or as an event callback.\n\nCode example:\n```jsx\nimport { useState } from 'react';\n\nfunction TimedRequestApp() {\n\tconst [data, setData] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\tconst [timeLimitExceeded, setTimeLimitExceeded] = useState(false);\n\n\tconst maxTimeLimit = 10000; // in millisecond\n\t\n\tfunction requestHandler() {\n\t\tsetLoading(true);\n\t\tsetTimeLimitExceeded(false); // remove existing message\n\n\t\tlet limitTimer;\n\t\tnew Promise((resolve, reject) => {\n\t\t\tlimitTimer = setTimeout(() => {\n\t\t\t\treject(new Error('Time Limit Exceeded'));\n\t\t\t}, maxTimeLimit)\n\n\t\t\tfetch(url).then(response => response.json()).then(data => {\n\t\t\t\t...\n\t\t\t\t// app-data logic\n\t\t\t\t...\n\t\t\t\n\t\t\t\tresolve();\n\t\t\t})\n\t\t})\n\t\t.catch(() => setTimeLimitExceeded(true))\n\t\t.finally(() => {\n\t\t\tsetLoading(false));\n\t\t\tclearTimeout(limitTimer); // prevents execution if request successful\n\t\t});\n\t}\n\t\n\treturn <>\n\t\t\t<button onClick={requestHandler}>Load Data</button>\n\t\t\t{loading && <p>Loading...</p>}\n\t\t\t{timeLimitExceeded && <p>Time Limit Exceeded! Try again</p>}\n\t\t\t{!loading && !timeLimitExceeded && data && JSON.stringify(data)}\n\t\t   </>;\n}\n\nexport default TimedRequestApp;\n```\nOf course, we can also use `Promise.all`.",
      "html": "<h1 id=\"177.-sending-a-get-request\">177. Sending a GET request <a class=\"heading-anchor-permalink\" href=\"#177.-sending-a-get-request\">#</a></h1>\n<p>Created Monday 18 July 2022</p>\n<p><a href=\"https://github.com/exemplar-codes/react-http-app\">Section project</a></p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>To make send/receive data from/to the server. We usually use HTTP (or HTTPS).</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<ul>\n<li>\n<p>A React app is fundamentally JavaScript code that runs in the browser, so we can use browser APIs (like <code>fetch</code>) as well as HTTP request libraries (like “axios”).</p>\n</li>\n<li>\n<p>We’ll be using the built in <code>fetch</code> because it’s supported by all browsers, as of now. By default the HTTP verb is <code>GET</code>.</p>\n</li>\n<li>\n<p>Because network requests are handled asynchronously, we’ll need to use state to cause a re-render when the request finishes.</p>\n</li>\n<li>\n<p>Keep an “isLoading” boolean state too. We set this to <code>true</code> on button click or App/component load, just before invoking the network request. We also add a conditional UI component for rendering “Loading…” text/animation. We set “isLoading” back to <code>false</code> once the request is complete. This is a standard UX practice.</p>\n</li>\n<li>\n<p>There are two cases for fetching:</p>\n<ul>\n<li>Without <code>useEffect</code> - if fetch is triggered by the user or some other event.</li>\n<li>With <code>useEffect</code> - need to fetch on app/component load.</li>\n</ul>\n</li>\n</ul>\n<p>Example of GET request - without <code>useEffect</code>, so using state:</p>\n<pre><code class=\"language-jsx\">import { useState } from 'react';\n\nconst App() {\n\tconst [data, setData] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\t\n\tfunction getProfile() {\n\t\tsetLoading(true);\n\t\tfetch('https://api.github.com/users/sanjarcode').then(response =&gt; response.json()).then(data =&gt; { setData(data); setLoading(false); });\n\t}\n\n\treturn &lt;&gt;\n\t\t\t&lt;button onClick={getProfile}&gt;Load Data&lt;/button&gt;\n\t\t\t&lt;p&gt;{loading &amp;&amp; 'Loading...'}&lt;/p&gt;\n\t\t\t&lt;p&gt;{!loading &amp;&amp; data &amp;&amp; JSON.stringify(data)}&lt;/p&gt;\n\t\t   &lt;/&gt;;\n}\n\nexport default App;\n</code></pre>\n<p>Observe the flow of this component:</p>\n<ol>\n<li>Initially, both data and loading are false.</li>\n<li>Upon button click, the <code>getProfile</code> function is run. The first line (<code>setLoading(true)</code>) causes a re-render, but the function execution continues. The loading text is shown in this render.</li>\n<li><code>fetch</code> runs, and if assuming it’s a success, causes state changes <code>setData(data)</code> and <code>setLoading(false)</code>. Both state changes are batched and the component re-renders. The loading text is now absent, and data is displayed.\nNote: The most important thing here is that the callback function <code>getProfile</code> keeps running even if the component re-renders. This works because state mutators are guaranteed to remain unchanged on re-renders.</li>\n</ol>\n<p>Similarly, we can make requests on App/component load, without a user event. To do so, use <code>useEffect</code>. Of course, we still need state to cause a re-render:</p>\n<pre><code class=\"language-jsx\">import { useState, useEffect } from 'react';\n\nconst App() {\n\tconst [data, setData] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\t\n\tfunction getProfile() {\n\t\tsetLoading(true);\n\t\tfetch('https://api.github.com/users/sanjarcode').then(response =&gt; response.json()).then(data =&gt; { setData(data); setLoading(false); });\n\t}\n\n\tconst dataSignature = JSON.stringify(data); // to avoid infinite re-renders\n\t// need to stringify because object is a non-primitive data type\n\t\n\tuseEffect(getProfile, [dataSignature]);\n\t\n\treturn &lt;&gt;\n\t\t\t&lt;p&gt;{loading &amp;&amp; 'Loading...'}&lt;/p&gt;\n\t\t\t&lt;p&gt;{!loading &amp;&amp; data &amp;&amp; JSON.stringify(data)}&lt;/p&gt;\n\t\t   &lt;/&gt;;\n}\n\nexport default App;\n</code></pre>\n<ul>\n<li>We can avoid do requests without state too, by using <code>ref</code>s to update DOM on network request success, but we won’t be able to show “Loading…” UI, which is very important for UX. So it’s better to use state.</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>To make network requests:</p>\n<ol>\n<li>Use some state to render change on request success.</li>\n<li>Also keep a “isLoading” variable, and use it to show some loading state, like an animation or text.</li>\n<li>Use <code>useEffect</code> if request must be sent on App/component load. For event triggered fetches (like button clicks), there’s no need to use <code>useEffect</code>, the event callback can do the network request.</li>\n</ol>\n<h3 id=\"extra\">Extra <a class=\"heading-anchor-permalink\" href=\"#extra\">#</a></h3>\n<h4 id=\"how-to-make-requests-with-a-time-limit%3F-(not-discussed-in-course)\">How to make requests with a time limit? (not discussed in course) <a class=\"heading-anchor-permalink\" href=\"#how-to-make-requests-with-a-time-limit%3F-(not-discussed-in-course)\">#</a></h4>\n<p>Well, it is simple. Use <a href=\"https://stackoverflow.com/a/62082804/11392807\">axios</a> for straightforward code.</p>\n<p>If using <code>fetch</code>, do this:</p>\n<ol>\n<li>Maintain an extra state “timeLimitExceeded” initialized to <code>false</code>.</li>\n<li>Run the request (e.g. <code>fetch</code>) and a timer (with time limit) beside each other. Save this timer.</li>\n<li>Nest this request and timer into a “void” promise, using <code>new Promise((resolve, reject) =&gt; ...)</code>. Resolve inside the network request, and reject with an error inside the timer.</li>\n<li>Mutate “timeLimitExceeded” state to <code>true</code> in the catch clause of this promise. Add some UI element conditionally which displays an appropriate message.</li>\n<li>In the <code>finally</code> clause, clear the timeout, using <code>window.clearTimeout</code>. Doing this to avoid running the timer if request was successful.</li>\n<li>Nest this void promise inside a function.</li>\n<li>Use this function in <code>useEffect</code> or as an event callback.</li>\n</ol>\n<p>Code example:</p>\n<pre><code class=\"language-jsx\">import { useState } from 'react';\n\nfunction TimedRequestApp() {\n\tconst [data, setData] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\tconst [timeLimitExceeded, setTimeLimitExceeded] = useState(false);\n\n\tconst maxTimeLimit = 10000; // in millisecond\n\t\n\tfunction requestHandler() {\n\t\tsetLoading(true);\n\t\tsetTimeLimitExceeded(false); // remove existing message\n\n\t\tlet limitTimer;\n\t\tnew Promise((resolve, reject) =&gt; {\n\t\t\tlimitTimer = setTimeout(() =&gt; {\n\t\t\t\treject(new Error('Time Limit Exceeded'));\n\t\t\t}, maxTimeLimit)\n\n\t\t\tfetch(url).then(response =&gt; response.json()).then(data =&gt; {\n\t\t\t\t...\n\t\t\t\t// app-data logic\n\t\t\t\t...\n\t\t\t\n\t\t\t\tresolve();\n\t\t\t})\n\t\t})\n\t\t.catch(() =&gt; setTimeLimitExceeded(true))\n\t\t.finally(() =&gt; {\n\t\t\tsetLoading(false));\n\t\t\tclearTimeout(limitTimer); // prevents execution if request successful\n\t\t});\n\t}\n\t\n\treturn &lt;&gt;\n\t\t\t&lt;button onClick={requestHandler}&gt;Load Data&lt;/button&gt;\n\t\t\t{loading &amp;&amp; &lt;p&gt;Loading...&lt;/p&gt;}\n\t\t\t{timeLimitExceeded &amp;&amp; &lt;p&gt;Time Limit Exceeded! Try again&lt;/p&gt;}\n\t\t\t{!loading &amp;&amp; !timeLimitExceeded &amp;&amp; data &amp;&amp; JSON.stringify(data)}\n\t\t   &lt;/&gt;;\n}\n\nexport default TimedRequestApp;\n</code></pre>\n<p>Of course, we can also use <code>Promise.all</code>.</p>\n",
      "id": 41
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/178_Using_async_await.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/178_Using_async_await.html",
      "content": "# 178. Using async await\nCreated Tuesday 19 July 2022\n\nMake the request handler an `async` function and replace `.then` by `await`s. Example:\n```jsx\nimport { useState, useEffect } from 'react';\n\nconst App() {\n\tconst [data, setData] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\t\n\tasync function getProfile() {\n\t\tsetLoading(true); // synchronous piece\n\t\t\n\t\tconst response = await fetch('https://api.github.com/users/sanjarcode');\n\t\tconst data = await response.json();\n\t\t\n\t\tsetData(data); // synchronous piece\n\t\tsetLoading(false); // synchronous piece\n\t}\n\n\tconst dataSignature = JSON.stringify(data); // to avoid infinite re-renders\n\t// need to stringify because object is a non-primitive data type\n\t\n\tuseEffect(getProfile, [dataSignature]);\n\t\n\treturn <>\n\t\t\t<p>{loading && 'Loading...'}</p>\n\t\t\t<p>{!loading && data && JSON.stringify(data)}</p>\n\t\t   </>;\n}\n\nexport default App;\n```\nI have not completed learning about `async/await`, but it seems like replacing `.then` by `await` and using `try/catch/finally` blocks instead of `.catch`, `.finally` seems to work.",
      "html": "<h1 id=\"178.-using-async-await\">178. Using async await <a class=\"heading-anchor-permalink\" href=\"#178.-using-async-await\">#</a></h1>\n<p>Created Tuesday 19 July 2022</p>\n<p>Make the request handler an <code>async</code> function and replace <code>.then</code> by <code>await</code>s. Example:</p>\n<pre><code class=\"language-jsx\">import { useState, useEffect } from 'react';\n\nconst App() {\n\tconst [data, setData] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\t\n\tasync function getProfile() {\n\t\tsetLoading(true); // synchronous piece\n\t\t\n\t\tconst response = await fetch('https://api.github.com/users/sanjarcode');\n\t\tconst data = await response.json();\n\t\t\n\t\tsetData(data); // synchronous piece\n\t\tsetLoading(false); // synchronous piece\n\t}\n\n\tconst dataSignature = JSON.stringify(data); // to avoid infinite re-renders\n\t// need to stringify because object is a non-primitive data type\n\t\n\tuseEffect(getProfile, [dataSignature]);\n\t\n\treturn &lt;&gt;\n\t\t\t&lt;p&gt;{loading &amp;&amp; 'Loading...'}&lt;/p&gt;\n\t\t\t&lt;p&gt;{!loading &amp;&amp; data &amp;&amp; JSON.stringify(data)}&lt;/p&gt;\n\t\t   &lt;/&gt;;\n}\n\nexport default App;\n</code></pre>\n<p>I have not completed learning about <code>async/await</code>, but it seems like replacing <code>.then</code> by <code>await</code> and using <code>try/catch/finally</code> blocks instead of <code>.catch</code>, <code>.finally</code> seems to work.</p>\n",
      "id": 42
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/180_Handling_HTTP_errors.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/180_Handling_HTTP_errors.html",
      "content": "# 180. Handling HTTP errors\nCreated Tuesday 19 July 2022\n\n### Why\nWe should show errors if they error, in the UI.\n\n\n### How\n- Have an \"error\" state and a conditionally rendered component with a message/animation indicating an error has occurred.\n\nAn important observation: HTTP request errors don't trigger an error (similar to `throw Error`) when using `fetch`. The browser simply prints a message in the console and moves on.\nTo detect HTTP errors, check `fetch` `response`'s `ok` attribute. If that is true, everything is OK, else something has went wrong. So `throw` an error conditionally, and catch it in the `.catch` (if using promises) or `catch` clause(if using `async/await`). Also, update the error state in this clause, which will cause a re-render.\n\n- The axios library does trigger a JS error.\n- Error are handled in different ways by different APIs - some return an error response, other return a JSON with some message. Error handling, thus, depends on the API being consumed.\n  \n  \n### What\nHandled similar to loading state.",
      "html": "<h1 id=\"180.-handling-http-errors\">180. Handling HTTP errors <a class=\"heading-anchor-permalink\" href=\"#180.-handling-http-errors\">#</a></h1>\n<p>Created Tuesday 19 July 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>We should show errors if they error, in the UI.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<ul>\n<li>Have an “error” state and a conditionally rendered component with a message/animation indicating an error has occurred.</li>\n</ul>\n<p>An important observation: HTTP request errors don’t trigger an error (similar to <code>throw Error</code>) when using <code>fetch</code>. The browser simply prints a message in the console and moves on.\nTo detect HTTP errors, check <code>fetch</code> <code>response</code>'s <code>ok</code> attribute. If that is true, everything is OK, else something has went wrong. So <code>throw</code> an error conditionally, and catch it in the <code>.catch</code> (if using promises) or <code>catch</code> clause(if using <code>async/await</code>). Also, update the error state in this clause, which will cause a re-render.</p>\n<ul>\n<li>The axios library does trigger a JS error.</li>\n<li>Error are handled in different ways by different APIs - some return an error response, other return a JSON with some message. Error handling, thus, depends on the API being consumed.</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>Handled similar to loading state.</p>\n",
      "id": 43
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/182_Preparing_the_project_for_the_next_steps.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/182_Preparing_the_project_for_the_next_steps.html",
      "content": "# 182. Preparing the project for the next steps\nCreated Tuesday 19 July 2022\n\n### Why\nWe have worked with `GET` requests. It's time to `POST` data to a backend.\nThe Star Wars API is a read-only API. We need something where we can submit data.\n\nWe'll be using Firebase. It provides a simple backend-app with a database through a REST API as one of it's features. It's free to use.\n\n\n### How\n1. Log in to Firebase\n2. Create a project\n3. Go to Build -> Realtime Database\n4. Create a database and Start in \"Test mode\"\n5. Copy the generates URL.\n\nThis URL can be used to communicate with the backend, and consequently read/write to the database.\n\nAppend a JSON file name after the last `/` of the URL. Example: `/movies.json`.\nIf this database node does not exist, it will be created.\n\nGenerated URL: https://react-http-88257-default-rtdb.asia-southeast1.firebasedatabase.app/movies.json",
      "html": "<h1 id=\"182.-preparing-the-project-for-the-next-steps\">182. Preparing the project for the next steps <a class=\"heading-anchor-permalink\" href=\"#182.-preparing-the-project-for-the-next-steps\">#</a></h1>\n<p>Created Tuesday 19 July 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>We have worked with <code>GET</code> requests. It’s time to <code>POST</code> data to a backend.\nThe Star Wars API is a read-only API. We need something where we can submit data.</p>\n<p>We’ll be using Firebase. It provides a simple backend-app with a database through a REST API as one of it’s features. It’s free to use.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<ol>\n<li>Log in to Firebase</li>\n<li>Create a project</li>\n<li>Go to Build -&gt; Realtime Database</li>\n<li>Create a database and Start in “Test mode”</li>\n<li>Copy the generates URL.</li>\n</ol>\n<p>This URL can be used to communicate with the backend, and consequently read/write to the database.</p>\n<p>Append a JSON file name after the last <code>/</code> of the URL. Example: <code>/movies.json</code>.\nIf this database node does not exist, it will be created.</p>\n<p>Generated URL: <a href=\"https://react-http-88257-default-rtdb.asia-southeast1.firebasedatabase.app/movies.json\">https://react-http-88257-default-rtdb.asia-southeast1.firebasedatabase.app/movies.json</a></p>\n",
      "id": 44
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/183_Sending_a_POST_request.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/183_Sending_a_POST_request.html",
      "content": "# 183. Sending a POST request\nCreated Tuesday 19 July 2022\n\n### How\n`fetch` can be used to make `POST` requests also. By default, it's `GET`.\nTo specify `POST`, a second argument is passed, along with `method`, `body` and `headers` (if needed).\n\nExample:\n```js\nfetch(url, {\n\tmethod: 'POST',\n\tbody: JSON.stringify(movie), // movie is an object, transformed into JSON\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t}\n})\n```\n\n- The result of making a `POST` request depends completely on the API. It's not a strict requirement that `POST` create a new resource, which is the general convention.\n- Similar to `GET` requests, we can add \"Posting...\" and error messages.\n- Of course, we need to have a form to take in input.\n\n\n### What\nExcept the second argument and a body, there's no difference between `GET` and `POST` code.",
      "html": "<h1 id=\"183.-sending-a-post-request\">183. Sending a POST request <a class=\"heading-anchor-permalink\" href=\"#183.-sending-a-post-request\">#</a></h1>\n<p>Created Tuesday 19 July 2022</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p><code>fetch</code> can be used to make <code>POST</code> requests also. By default, it’s <code>GET</code>.\nTo specify <code>POST</code>, a second argument is passed, along with <code>method</code>, <code>body</code> and <code>headers</code> (if needed).</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">fetch(url, {\n\tmethod: 'POST',\n\tbody: JSON.stringify(movie), // movie is an object, transformed into JSON\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t}\n})\n</code></pre>\n<ul>\n<li>The result of making a <code>POST</code> request depends completely on the API. It’s not a strict requirement that <code>POST</code> create a new resource, which is the general convention.</li>\n<li>Similar to <code>GET</code> requests, we can add “Posting…” and error messages.</li>\n<li>Of course, we need to have a form to take in input.</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>Except the second argument and a body, there’s no difference between <code>GET</code> and <code>POST</code> code.</p>\n",
      "id": 45
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/186_Module_Introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/186_Module_Introduction.html",
      "content": "# 186. Module Introduction\nCreated Wednesday 20 July 2022\n\n- Custom hooks are a way to re-use logic across components.\n- Custom hooks are not something *new*/*non-obvious*. They are just the practice of the DRY principle.\n![](../../../../assets/186_Module_Introduction-image-1-89681f93.png)\n- We have already worked with React hooks, which are important and unique.\n- There are 3 rules for hooks in React. The rules are:\n\t1. Don't call them inside nested functions, i.e. call them only in component functions.\n\t2. Don't call them in a code block, i.e. they should not be called in conditionals, loops etc.\n\t3. Can be called inside custom hooks. *This is relevant now*.\n---\nThis section will be about:\n1. Custom hooks - What & Why?\n2. Building a Custom hook.\n3. Custom hooks rules and practices.\n",
      "html": "<h1 id=\"186.-module-introduction\">186. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#186.-module-introduction\">#</a></h1>\n<p>Created Wednesday 20 July 2022</p>\n<ul>\n<li>Custom hooks are a way to re-use logic across components.</li>\n<li>Custom hooks are not something <em>new</em>/<em>non-obvious</em>. They are just the practice of the DRY principle.\n<img src=\"../../../../assets/186_Module_Introduction-image-1-89681f93.png\" alt=\"\"></li>\n<li>We have already worked with React hooks, which are important and unique.</li>\n<li>There are 3 rules for hooks in React. The rules are:\n<ol>\n<li>Don’t call them inside nested functions, i.e. call them only in component functions.</li>\n<li>Don’t call them in a code block, i.e. they should not be called in conditionals, loops etc.</li>\n<li>Can be called inside custom hooks. <em>This is relevant now</em>.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<p>This section will be about:</p>\n<ol>\n<li>Custom hooks - What &amp; Why?</li>\n<li>Building a Custom hook.</li>\n<li>Custom hooks rules and practices.</li>\n</ol>\n",
      "id": 46
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/187_What_are_Custom_hooks.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/187_What_are_Custom_hooks.html",
      "content": "# 187. What are \"Custom Hooks\" ?\nCreated Wednesday 20 July 2022\n\n### Why\nOutsource **stateful** logic into **re-usable functions**.\nThese \"custom hooks\" can then be used in components.\n\n### What\n- Custom hooks are regular hooks which contain stateful logic.\n- Unlike regular functions (i.e. non component function), custom hooks *can* use React hooks and state.",
      "html": "<h1 id=\"187.-what-are-%E2%80%9Ccustom-hooks%E2%80%9D-%3F\">187. What are “Custom Hooks” ? <a class=\"heading-anchor-permalink\" href=\"#187.-what-are-%E2%80%9Ccustom-hooks%E2%80%9D-%3F\">#</a></h1>\n<p>Created Wednesday 20 July 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Outsource <strong>stateful</strong> logic into <strong>re-usable functions</strong>.\nThese “custom hooks” can then be used in components.</p>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<ul>\n<li>Custom hooks are regular hooks which contain stateful logic.</li>\n<li>Unlike regular functions (i.e. non component function), custom hooks <em>can</em> use React hooks and state.</li>\n</ul>\n",
      "id": 47
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/188_Creating_Custom_React_Hook.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/188_Creating_Custom_React_Hook.html",
      "content": "# 188. Creating Custom React Hook\nCreated Saturday 23 July 2022\n\n### Situation\nCreate this.\n![](../../../../assets/188_Creating_Custom_React_Hook-image-1-89681f93.gif)\nBoth counters start from 0, one increments and the other decrements, every 1 second.\n\nThere are 2 known ways to do this:\n1. Create two separate components - this will contain the most duplication\n2. Have an higher order component, that takes in counter (i.e. the state) updation logic as prop. Code:\n\t```jsx\n\timport { useState, useEffect } from 'react';\n\n\tfunction EverySecondCounter(props) {\n\t\tconst [count, setCounter] = useState(0);\n\n\t\tuseEffect(() => {\n\t\t\tconst timer = setTimeout(() => setCounter(props.updateCounter);\n\n\t\t\treturn () => clearTimeout(timer);\n\t\t});\n\n\t\treturn <div>{counter}</div>;\n\t}\n\n\tfunction App() {\n\t\treturn <>\n\t\t\t<EverySecondCounter updateCounter={(prevState) => prevState + 1} />\n\t\t\t<br />\n\t\t\t<EverySecondCounter updateCounter={(prevState) => prevState - 1} />\n\t\t\t</>;\n\t}\n\t```\n\nIt is also possible, that different components have similar parts, and neither of these approaches will help.\n\n\n### How\n- Hooks are functions that can have state and use React hooks. There's no special syntax to create them, apart from naming it properly (i.e. `use` prefix).\n\n##### Creation\n- Custom hooks creation follow some conventions and rules:\n\t1. Every custom hook should be kept in it's own `.js` file.\n\t2. File name can be anything. Reason: a hook is not a component, so no PascalCase needed./\n\t3. Every custom hook name must start with `use`, this is important for 2 reasons:\n\t\t1. Helps indicate that the function is a hook.\n\t\t2. Helps with code intellisense in most IDE/editors.\n\t\tNote: not using a prefix `use` won't affect functionality. It's just a recommendation.\n- A hook can accept parameters, as it's a function.\n- Custom hooks may or may not have return values.\n- It is important to note that a state variable returned from a hook can act as the latest state. Every re-render will update the variable, without re-initializing the state (in the hook). *It just works*. Example:\n\t```jsx\n\timport {useState, useEffect} from 'react';\n\n\tfunction useCounter() {\n\t\tconst [count, setCount] = useState(0);\n\n\t\tuseEffect(() => {\n\t\t\tconst timer = setTimeout(() => setCount(prevCount => prevCount + 1)\n\t\t\t, 1000);\n\n\t\t\t() => clearTimeout(timer);\n\t\t});\n\n\t\treturn count; // returning the state\n\t}\n\n\tfunction App() {\n\t\tconst incrementiveCount = useCounter(); // state is updated on each re-render\n\n\t\treturn <div>{incrementiveCount}</div>;\n\t}\n\t```\n##### Use\n- To use a custom hook, import and use it like any other React hook.\n\n##### Behavior of hooks\n1. Each use of hook has it's own state, that is coupled with the component/hook it's being used in.\n2. The place where a custom hook is used(i.e. called) can be visualized as if the custom hook code was directly placed there. Functionally, this is how custom hooks behave. In short, *the hook gets attached to the component where it is being used*. FIXME: how are custom hooks implemented.\n\n### What\nSee the code, [here](https://github.com/exemplar-codes/assorted-reactjs-apps/blob/f86d9b6343e848100cf6ef8ad53b01fde49c5762/src/Apps/CustomHookDemoCounter/CustomHookDemoCounter.jsx).\n",
      "html": "<h1 id=\"188.-creating-custom-react-hook\">188. Creating Custom React Hook <a class=\"heading-anchor-permalink\" href=\"#188.-creating-custom-react-hook\">#</a></h1>\n<p>Created Saturday 23 July 2022</p>\n<h3 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h3>\n<p>Create this.\n<img src=\"../../../../assets/188_Creating_Custom_React_Hook-image-1-89681f93.gif\" alt=\"\">\nBoth counters start from 0, one increments and the other decrements, every 1 second.</p>\n<p>There are 2 known ways to do this:</p>\n<ol>\n<li>Create two separate components - this will contain the most duplication</li>\n<li>Have an higher order component, that takes in counter (i.e. the state) updation logic as prop. Code:<pre><code class=\"language-jsx\">import { useState, useEffect } from 'react';\n\nfunction EverySecondCounter(props) {\n\tconst [count, setCounter] = useState(0);\n\n\tuseEffect(() =&gt; {\n\t\tconst timer = setTimeout(() =&gt; setCounter(props.updateCounter);\n\n\t\treturn () =&gt; clearTimeout(timer);\n\t});\n\n\treturn &lt;div&gt;{counter}&lt;/div&gt;;\n}\n\nfunction App() {\n\treturn &lt;&gt;\n\t\t&lt;EverySecondCounter updateCounter={(prevState) =&gt; prevState + 1} /&gt;\n\t\t&lt;br /&gt;\n\t\t&lt;EverySecondCounter updateCounter={(prevState) =&gt; prevState - 1} /&gt;\n\t\t&lt;/&gt;;\n}\n</code></pre>\n</li>\n</ol>\n<p>It is also possible, that different components have similar parts, and neither of these approaches will help.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<ul>\n<li>Hooks are functions that can have state and use React hooks. There’s no special syntax to create them, apart from naming it properly (i.e. <code>use</code> prefix).</li>\n</ul>\n<h5 id=\"creation\">Creation <a class=\"heading-anchor-permalink\" href=\"#creation\">#</a></h5>\n<ul>\n<li>Custom hooks creation follow some conventions and rules:\n<ol>\n<li>Every custom hook should be kept in it’s own <code>.js</code> file.</li>\n<li>File name can be anything. Reason: a hook is not a component, so no PascalCase needed./</li>\n<li>Every custom hook name must start with <code>use</code>, this is important for 2 reasons:\n<ol>\n<li>Helps indicate that the function is a hook.</li>\n<li>Helps with code intellisense in most IDE/editors.\nNote: not using a prefix <code>use</code> won’t affect functionality. It’s just a recommendation.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>A hook can accept parameters, as it’s a function.</li>\n<li>Custom hooks may or may not have return values.</li>\n<li>It is important to note that a state variable returned from a hook can act as the latest state. Every re-render will update the variable, without re-initializing the state (in the hook). <em>It just works</em>. Example:<pre><code class=\"language-jsx\">import {useState, useEffect} from 'react';\n\nfunction useCounter() {\n\tconst [count, setCount] = useState(0);\n\n\tuseEffect(() =&gt; {\n\t\tconst timer = setTimeout(() =&gt; setCount(prevCount =&gt; prevCount + 1)\n\t\t, 1000);\n\n\t\t() =&gt; clearTimeout(timer);\n\t});\n\n\treturn count; // returning the state\n}\n\nfunction App() {\n\tconst incrementiveCount = useCounter(); // state is updated on each re-render\n\n\treturn &lt;div&gt;{incrementiveCount}&lt;/div&gt;;\n}\n</code></pre>\n</li>\n</ul>\n<h5 id=\"use\">Use <a class=\"heading-anchor-permalink\" href=\"#use\">#</a></h5>\n<ul>\n<li>To use a custom hook, import and use it like any other React hook.</li>\n</ul>\n<h5 id=\"behavior-of-hooks\">Behavior of hooks <a class=\"heading-anchor-permalink\" href=\"#behavior-of-hooks\">#</a></h5>\n<ol>\n<li>Each use of hook has it’s own state, that is coupled with the component/hook it’s being used in.</li>\n<li>The place where a custom hook is used(i.e. called) can be visualized as if the custom hook code was directly placed there. Functionally, this is how custom hooks behave. In short, <em>the hook gets attached to the component where it is being used</em>. FIXME: how are custom hooks implemented.</li>\n</ol>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>See the code, <a href=\"https://github.com/exemplar-codes/assorted-reactjs-apps/blob/f86d9b6343e848100cf6ef8ad53b01fde49c5762/src/Apps/CustomHookDemoCounter/CustomHookDemoCounter.jsx\">here</a>.</p>\n",
      "id": 48
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/188_z_A_doubt_about_custom_hooks.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/188_z_A_doubt_about_custom_hooks.html",
      "content": "# 188. A doubt about custom hooks\nCreated Sunday 24 July 2022\n\nSee this [app #24](https://exemplar-codes.github.io/assorted-reactjs-apps/) and it's [code](https://github.com/exemplar-codes/assorted-reactjs-apps/blob/13f7aa245a7c4078fb1a93344fa9c4465bdf4d20/src/Apps/CustomHookDemoCounter/CustomHookDemoCounter.jsx).\nFIXME: Why does this happen?",
      "html": "<h1 id=\"188.-a-doubt-about-custom-hooks\">188. A doubt about custom hooks <a class=\"heading-anchor-permalink\" href=\"#188.-a-doubt-about-custom-hooks\">#</a></h1>\n<p>Created Sunday 24 July 2022</p>\n<p>See this <a href=\"https://exemplar-codes.github.io/assorted-reactjs-apps/\">app #24</a> and it’s <a href=\"https://github.com/exemplar-codes/assorted-reactjs-apps/blob/13f7aa245a7c4078fb1a93344fa9c4465bdf4d20/src/Apps/CustomHookDemoCounter/CustomHookDemoCounter.jsx\">code</a>.\nFIXME: Why does this happen?</p>\n",
      "id": 49
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/191_A_more_realistic_example_of_custom_hook.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/15_Building_Custom_React_Hooks/191_A_more_realistic_example_of_custom_hook.html",
      "content": "# 191. A more realistic example of custom hook\nCreated Tuesday 24 July 2022\n\nWe'll look at some complications and their solutions, that can arise in a real use case.\nConsider [App.jsx](https://github.com/exemplar-codes/react-custom-hooks-realistic-example/blob/cbfbbc15df2b8069460d807868fd37e2f187df7f/src/App.jsx) and [NewTask.jsx](https://github.com/exemplar-codes/react-custom-hooks-realistic-example/blob/cbfbbc15df2b8069460d807868fd37e2f187df7f/src/components/NewTask/NewTask.jsx). Observe that:\n1. Both make HTTP requests, method varies of course.\n2. Both do some work on the JSON data response.\n3. Both handle `isLoading` and `error` states.\n4. Both create and call a function encapsulating `fetch` either as a callback or in `useEffect`, so we'll do the same, i.e. return a callback.\n\n- We can extract this functionality out to a custom hook.\n- There are two possible ways to do this - pass the `onSuccess` functionality, `url`, `method` and `payloadBody` to the hook, or let them be parameters of the callback being returned by the hook.\n- We'll choose the latter, because we need to work with `taskText` as input in `NewTask.jsx.\n- We should return the callback by wrapping it inside `useCallback`, and as it doesn't take any external variables (parameters are internal variables), we don't need to provide a dependencies list.\n\tHad we chosen to provide the arguments to be passed to the hook, we'd have to use `useCallback` and also mandate that the `onSuccess` being returned be wrapped inside `useCallback` as well, which would hurt the hook's usability.\n\nSee final result, [here](https://github.com/exemplar-codes/react-custom-hooks-realistic-example/commit/ffa88863002e66bc86a9222c35c2ad8bd65a1812).\n\n---\nCustom hooks behave very fluidly and don't require any special syntax. But they can sometimes become convoluted if the custom hooks behavior needs to be heavily varied (as that will increase parameters in the hook and therefore complexity).",
      "html": "<h1 id=\"191.-a-more-realistic-example-of-custom-hook\">191. A more realistic example of custom hook <a class=\"heading-anchor-permalink\" href=\"#191.-a-more-realistic-example-of-custom-hook\">#</a></h1>\n<p>Created Tuesday 24 July 2022</p>\n<p>We’ll look at some complications and their solutions, that can arise in a real use case.\nConsider <a href=\"https://github.com/exemplar-codes/react-custom-hooks-realistic-example/blob/cbfbbc15df2b8069460d807868fd37e2f187df7f/src/App.jsx\">App.jsx</a> and <a href=\"https://github.com/exemplar-codes/react-custom-hooks-realistic-example/blob/cbfbbc15df2b8069460d807868fd37e2f187df7f/src/components/NewTask/NewTask.jsx\">NewTask.jsx</a>. Observe that:</p>\n<ol>\n<li>Both make HTTP requests, method varies of course.</li>\n<li>Both do some work on the JSON data response.</li>\n<li>Both handle <code>isLoading</code> and <code>error</code> states.</li>\n<li>Both create and call a function encapsulating <code>fetch</code> either as a callback or in <code>useEffect</code>, so we’ll do the same, i.e. return a callback.</li>\n</ol>\n<ul>\n<li>We can extract this functionality out to a custom hook.</li>\n<li>There are two possible ways to do this - pass the <code>onSuccess</code> functionality, <code>url</code>, <code>method</code> and <code>payloadBody</code> to the hook, or let them be parameters of the callback being returned by the hook.</li>\n<li>We’ll choose the latter, because we need to work with <code>taskText</code> as input in `NewTask.jsx.</li>\n<li>We should return the callback by wrapping it inside <code>useCallback</code>, and as it doesn’t take any external variables (parameters are internal variables), we don’t need to provide a dependencies list.\nHad we chosen to provide the arguments to be passed to the hook, we’d have to use <code>useCallback</code> and also mandate that the <code>onSuccess</code> being returned be wrapped inside <code>useCallback</code> as well, which would hurt the hook’s usability.</li>\n</ul>\n<p>See final result, <a href=\"https://github.com/exemplar-codes/react-custom-hooks-realistic-example/commit/ffa88863002e66bc86a9222c35c2ad8bd65a1812\">here</a>.</p>\n<hr>\n<p>Custom hooks behave very fluidly and don’t require any special syntax. But they can sometimes become convoluted if the custom hooks behavior needs to be heavily varied (as that will increase parameters in the hook and therefore complexity).</p>\n",
      "id": 50
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/197_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/197_Module_introduction.html",
      "content": "# 197. Module Introduction\nCreated Sunday 24 July 2022\n\n- This course will be about handling forms and user input.\n- This includes working with form validations.\n---\nThis section might sound trivial or unimportant, but:\n1. A lot of web apps are all about forms.\n2. Working with forms can be more difficult and complex than it seems. Especially if good UX is the goal.\n\nIn this section, we are not going to learn new React features or how to write HTML forms. Instead we are going to build forms and code them in a clean and manageable way.\n\n---\nWe'll explore:\n1. What's complex about forms\n2. Handling inputs and forms with React\n3. Learn about various tools and approaches that will help us write clean code for forms.",
      "html": "<h1 id=\"197.-module-introduction\">197. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#197.-module-introduction\">#</a></h1>\n<p>Created Sunday 24 July 2022</p>\n<ul>\n<li>This course will be about handling forms and user input.</li>\n<li>This includes working with form validations.</li>\n</ul>\n<hr>\n<p>This section might sound trivial or unimportant, but:</p>\n<ol>\n<li>A lot of web apps are all about forms.</li>\n<li>Working with forms can be more difficult and complex than it seems. Especially if good UX is the goal.</li>\n</ol>\n<p>In this section, we are not going to learn new React features or how to write HTML forms. Instead we are going to build forms and code them in a clean and manageable way.</p>\n<hr>\n<p>We’ll explore:</p>\n<ol>\n<li>What’s complex about forms</li>\n<li>Handling inputs and forms with React</li>\n<li>Learn about various tools and approaches that will help us write clean code for forms.</li>\n</ol>\n",
      "id": 51
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/199_Whats_so_complex_about_forms.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/199_Whats_so_complex_about_forms.html",
      "content": "# 197. What's so complex about forms?\nCreated Sunday 24 July 2022\n\n##### Observation\n- Forms seem simple and trivial, but they are **not**. They can be even be considered *complex*, from a developer perspective.\n\t- This is because a form is essentially a set of inputs, i.e. the state of a form to be valid/invalid is a complex one determined by the all the entered inputs.\n\t- Each input may have it's validations, in addition to secondary validations (i.e. the coherence of entered inputs with each other) or \"dynamic\" validations, i.e. one may need to run validations w.r.t existing data of the app, thus requiring communication with the server.\n\t- Each input may also have multiple error messages that should be displayed, depending on the entered input and it's relation to other dependent inputs.\n\t![](../../../../assets/199_Whats_so_complex_about_forms-image-1-ee6df205.png)\n\n##### When to validate\nA complex part of forms is the displaying of messages for invalid inputs. The question is - when to validate? There are 3 ways to validate:\n1. When the form is *submitted*\n\t- Pros\n\t\t- Blank/initial warning, is avoided, i.e. when the form has just loaded.\n\t\t- Easy to code.\n\t- Cons\n\t\t- Feedback is too late, especially for long forms.\n\t\t- The user may need to manually go back to the invalid user input.\n2. When a input is *losing focus*\n\t- Pros\n\t\t- Blank/initial warning, is avoided, i.e. when the form has just loaded.\n\t\t- Feedback is better than on form submission.\n\t- Cons\n\t\t- Error message for input is removed when the user is correcting the invalid input.\n3. On every keystroke (or input change)\n\t- Pros\n\t\t- Immediate feedback.\n\t- Cons\n\t\t- There's are blank/initial warnings, when the form loads, which may be annoying.\n\nOf course, we can use a combination of these for different inputs.\n![](../../../../assets/199_Whats_so_complex_about_forms-image-2-ee6df205.png)\n",
      "html": "<h1 id=\"197.-what%E2%80%99s-so-complex-about-forms%3F\">197. What’s so complex about forms? <a class=\"heading-anchor-permalink\" href=\"#197.-what%E2%80%99s-so-complex-about-forms%3F\">#</a></h1>\n<p>Created Sunday 24 July 2022</p>\n<h5 id=\"observation\">Observation <a class=\"heading-anchor-permalink\" href=\"#observation\">#</a></h5>\n<ul>\n<li>Forms seem simple and trivial, but they are <strong>not</strong>. They can be even be considered <em>complex</em>, from a developer perspective.\n<ul>\n<li>This is because a form is essentially a set of inputs, i.e. the state of a form to be valid/invalid is a complex one determined by the all the entered inputs.</li>\n<li>Each input may have it’s validations, in addition to secondary validations (i.e. the coherence of entered inputs with each other) or “dynamic” validations, i.e. one may need to run validations w.r.t existing data of the app, thus requiring communication with the server.</li>\n<li>Each input may also have multiple error messages that should be displayed, depending on the entered input and it’s relation to other dependent inputs.\n<img src=\"../../../../assets/199_Whats_so_complex_about_forms-image-1-ee6df205.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"when-to-validate\">When to validate <a class=\"heading-anchor-permalink\" href=\"#when-to-validate\">#</a></h5>\n<p>A complex part of forms is the displaying of messages for invalid inputs. The question is - when to validate? There are 3 ways to validate:</p>\n<ol>\n<li>When the form is <em>submitted</em>\n<ul>\n<li>Pros\n<ul>\n<li>Blank/initial warning, is avoided, i.e. when the form has just loaded.</li>\n<li>Easy to code.</li>\n</ul>\n</li>\n<li>Cons\n<ul>\n<li>Feedback is too late, especially for long forms.</li>\n<li>The user may need to manually go back to the invalid user input.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>When a input is <em>losing focus</em>\n<ul>\n<li>Pros\n<ul>\n<li>Blank/initial warning, is avoided, i.e. when the form has just loaded.</li>\n<li>Feedback is better than on form submission.</li>\n</ul>\n</li>\n<li>Cons\n<ul>\n<li>Error message for input is removed when the user is correcting the invalid input.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>On every keystroke (or input change)\n<ul>\n<li>Pros\n<ul>\n<li>Immediate feedback.</li>\n</ul>\n</li>\n<li>Cons\n<ul>\n<li>There’s are blank/initial warnings, when the form loads, which may be annoying.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>Of course, we can use a combination of these for different inputs.\n<img src=\"../../../../assets/199_Whats_so_complex_about_forms-image-2-ee6df205.png\" alt=\"\"></p>\n",
      "id": 52
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/200_Dealing_with_form_submission_and_user_input.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/200_Dealing_with_form_submission_and_user_input.html",
      "content": "# 200. Dealing with form submission and user input\nCreated Monday 25 July 2022\n\n[Code repo](https://github.com/exemplar-codes/reactjs-forms-user-input)\n\nThere are two ways to access user input - `ref` and `onChange`(with state). I already know this. See [onChange](https://github.com/exemplar-codes/reactjs-forms-user-input/commit/a0925ba34d508f3c3f7df1f9f3b8f7175f9e4845) and [ref](https://github.com/exemplar-codes/reactjs-forms-user-input/commit/7ba6b0a577b9009f555457a8d4e24771be89c16b).\n\nWhich one to use?\n- If input value is wanted only once, i.e. on submission, a `ref` is better.\n- If input value is wanted on each keystroke, `onChange` is better.\n\nNote that in both ways, resetting the input is possible, but writing to the DOM (using `ref`) is not a clean way to use React. In short, prefer state if there is need for 2-way-binding (i.e. for input resets), either with `ref` or `onChange`, by setting the `value` property in the `input` tag.\n\n- Remember to clear the input on form submission. Doing this is possible with 2-way-binding, as shown earlier in the course.",
      "html": "<h1 id=\"200.-dealing-with-form-submission-and-user-input\">200. Dealing with form submission and user input <a class=\"heading-anchor-permalink\" href=\"#200.-dealing-with-form-submission-and-user-input\">#</a></h1>\n<p>Created Monday 25 July 2022</p>\n<p><a href=\"https://github.com/exemplar-codes/reactjs-forms-user-input\">Code repo</a></p>\n<p>There are two ways to access user input - <code>ref</code> and <code>onChange</code>(with state). I already know this. See <a href=\"https://github.com/exemplar-codes/reactjs-forms-user-input/commit/a0925ba34d508f3c3f7df1f9f3b8f7175f9e4845\">onChange</a> and <a href=\"https://github.com/exemplar-codes/reactjs-forms-user-input/commit/7ba6b0a577b9009f555457a8d4e24771be89c16b\">ref</a>.</p>\n<p>Which one to use?</p>\n<ul>\n<li>If input value is wanted only once, i.e. on submission, a <code>ref</code> is better.</li>\n<li>If input value is wanted on each keystroke, <code>onChange</code> is better.</li>\n</ul>\n<p>Note that in both ways, resetting the input is possible, but writing to the DOM (using <code>ref</code>) is not a clean way to use React. In short, prefer state if there is need for 2-way-binding (i.e. for input resets), either with <code>ref</code> or <code>onChange</code>, by setting the <code>value</code> property in the <code>input</code> tag.</p>\n<ul>\n<li>Remember to clear the input on form submission. Doing this is possible with 2-way-binding, as shown earlier in the course.</li>\n</ul>\n",
      "id": 53
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/201_Adding_Basic_Validation.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/201_Adding_Basic_Validation.html",
      "content": "# 201. Adding basic validation\nCreated Monday 25 July 2022\n\n- Client-side validation is good. But client-side validation alone (i.e. without server side validation) is very dangerous. Reason: client side code is accessible to the user, and may be bypassed. In short, server-side validation is a must, irrespective of whether client-side validation exists or not.\n- Client-side validation is for UX, not security.\n  \n[Here](https://github.com/exemplar-codes/reactjs-forms-user-input/commit/0fb8fd49ac8dc6634e35cfdc0217079886477633), I've implemented a basic validation to ignore empty inputs. There's one UX problem though: there's no indication to the user that the input was invalid.",
      "html": "<h1 id=\"201.-adding-basic-validation\">201. Adding basic validation <a class=\"heading-anchor-permalink\" href=\"#201.-adding-basic-validation\">#</a></h1>\n<p>Created Monday 25 July 2022</p>\n<ul>\n<li>Client-side validation is good. But client-side validation alone (i.e. without server side validation) is very dangerous. Reason: client side code is accessible to the user, and may be bypassed. In short, server-side validation is a must, irrespective of whether client-side validation exists or not.</li>\n<li>Client-side validation is for UX, not security.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/reactjs-forms-user-input/commit/0fb8fd49ac8dc6634e35cfdc0217079886477633\">Here</a>, I’ve implemented a basic validation to ignore empty inputs. There’s one UX problem though: there’s no indication to the user that the input was invalid.</p>\n",
      "id": 54
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/202_Providing_validation_feedback.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/202_Providing_validation_feedback.html",
      "content": "# 202. Providing validation feedback\nCreated Monday 25 July 2022\n\n- Validation feedback is very important in forms, from a UX point of view.\n- Validation feedback is usually done by keeping an error state for the input and corresponding conditionally rendered UI (like a message or icon).\n\nSee [this](https://github.com/exemplar-codes/reactjs-forms-user-input/commit/b83389e620ea8307103053b1bdf65053e86adca1).",
      "html": "<h1 id=\"202.-providing-validation-feedback\">202. Providing validation feedback <a class=\"heading-anchor-permalink\" href=\"#202.-providing-validation-feedback\">#</a></h1>\n<p>Created Monday 25 July 2022</p>\n<ul>\n<li>Validation feedback is very important in forms, from a UX point of view.</li>\n<li>Validation feedback is usually done by keeping an error state for the input and corresponding conditionally rendered UI (like a message or icon).</li>\n</ul>\n<p>See <a href=\"https://github.com/exemplar-codes/reactjs-forms-user-input/commit/b83389e620ea8307103053b1bdf65053e86adca1\">this</a>.</p>\n",
      "id": 55
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/203_Handling_the_was_untouched_state.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/203_Handling_the_was_untouched_state.html",
      "content": "# 203. Handling the \"was untouched\" state\nCreated Monday 25 July 2022\n\n- We used a trick [here](https://github.com/exemplar-codes/reactjs-forms-user-input/commit/b83389e620ea8307103053b1bdf65053e86adca1) - we set the form as *valid* when it loaded. This may become a problem, for example, if were using `useEffect` to do some a request if the form is valid.\n- This trick may be harmless in many scenarios, but it is semantically wrong part of our app.\n- The problem can be solved by having another state, which just stores the fact that the form is untouched or not. We can set the form to be invalid initially and use this new state to not run requests. This would be semantically correct code.",
      "html": "<h1 id=\"203.-handling-the-%E2%80%9Cwas-untouched%E2%80%9D-state\">203. Handling the “was untouched” state <a class=\"heading-anchor-permalink\" href=\"#203.-handling-the-%E2%80%9Cwas-untouched%E2%80%9D-state\">#</a></h1>\n<p>Created Monday 25 July 2022</p>\n<ul>\n<li>We used a trick <a href=\"https://github.com/exemplar-codes/reactjs-forms-user-input/commit/b83389e620ea8307103053b1bdf65053e86adca1\">here</a> - we set the form as <em>valid</em> when it loaded. This may become a problem, for example, if were using <code>useEffect</code> to do some a request if the form is valid.</li>\n<li>This trick may be harmless in many scenarios, but it is semantically wrong part of our app.</li>\n<li>The problem can be solved by having another state, which just stores the fact that the form is untouched or not. We can set the form to be invalid initially and use this new state to not run requests. This would be semantically correct code.</li>\n</ul>\n",
      "id": 56
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/204_Reacting_on_lost_focus.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/204_Reacting_on_lost_focus.html",
      "content": "# 204. Reacting on lost focus\nCreated Monday 25 July 2022\n\n- Use `onBlur` to do this.\nFIXME:  `onBlur` needs a click, can't this be done \"onHoverEnd\"",
      "html": "<h1 id=\"204.-reacting-on-lost-focus\">204. Reacting on lost focus <a class=\"heading-anchor-permalink\" href=\"#204.-reacting-on-lost-focus\">#</a></h1>\n<p>Created Monday 25 July 2022</p>\n<ul>\n<li>Use <code>onBlur</code> to do this.\nFIXME:  <code>onBlur</code> needs a click, can’t this be done “onHoverEnd”</li>\n</ul>\n",
      "id": 57
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/205_Refactoring_and_deriving_states.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/205_Refactoring_and_deriving_states.html",
      "content": "# 205. Refactoring and derived states\nCreated Monday 25 July 2022\n\n*Nothing new here*.\n\n- The current code is messy and arbitrary, there's no clear structure to it.\n- The code is not scalable for additional input values.\n\n- Note that we need just need two states per input - `isTouched` and the `enteredValue` state. Additionally, we need a validation function which works works on the `enteredValue` to determine validity and a conditionally rendered UI to display validation error. So 4 pieces of code per input.\n\n##### Derived states\n- Try to use as little states as possible, i.e. use normal variables for states that can be computed using other states. In short, don't use state for derived values of validations.\n\n\n##### Refactoring\n- Try to minimize code repetition.\n- Use custom hooks to manage similar types of inputs.",
      "html": "<h1 id=\"205.-refactoring-and-derived-states\">205. Refactoring and derived states <a class=\"heading-anchor-permalink\" href=\"#205.-refactoring-and-derived-states\">#</a></h1>\n<p>Created Monday 25 July 2022</p>\n<p><em>Nothing new here</em>.</p>\n<ul>\n<li>\n<p>The current code is messy and arbitrary, there’s no clear structure to it.</p>\n</li>\n<li>\n<p>The code is not scalable for additional input values.</p>\n</li>\n<li>\n<p>Note that we need just need two states per input - <code>isTouched</code> and the <code>enteredValue</code> state. Additionally, we need a validation function which works works on the <code>enteredValue</code> to determine validity and a conditionally rendered UI to display validation error. So 4 pieces of code per input.</p>\n</li>\n</ul>\n<h5 id=\"derived-states\">Derived states <a class=\"heading-anchor-permalink\" href=\"#derived-states\">#</a></h5>\n<ul>\n<li>Try to use as little states as possible, i.e. use normal variables for states that can be computed using other states. In short, don’t use state for derived values of validations.</li>\n</ul>\n<h5 id=\"refactoring\">Refactoring <a class=\"heading-anchor-permalink\" href=\"#refactoring\">#</a></h5>\n<ul>\n<li>Try to minimize code repetition.</li>\n<li>Use custom hooks to manage similar types of inputs.</li>\n</ul>\n",
      "id": 58
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/206_Managing_overall_form_validity.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/206_Managing_overall_form_validity.html",
      "content": "# 206. Managing overall form validity\nCreated Tuesday 26 July 2022\n\n*Nothing new here*.\n- Have a single variable that stores the overall form validity. This is not generally a state variable, as it can be derived using other states/derived_states.\n- This variable may be binary yes/no, or there could be multiple valid states of a form (for example, when some inputs are optional and therefore can be left empty).",
      "html": "<h1 id=\"206.-managing-overall-form-validity\">206. Managing overall form validity <a class=\"heading-anchor-permalink\" href=\"#206.-managing-overall-form-validity\">#</a></h1>\n<p>Created Tuesday 26 July 2022</p>\n<p><em>Nothing new here</em>.</p>\n<ul>\n<li>Have a single variable that stores the overall form validity. This is not generally a state variable, as it can be derived using other states/derived_states.</li>\n<li>This variable may be binary yes/no, or there could be multiple valid states of a form (for example, when some inputs are optional and therefore can be left empty).</li>\n</ul>\n",
      "id": 59
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/207_Adding_a_custom_input_hook.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/207_Adding_a_custom_input_hook.html",
      "content": "# 207. Adding a custom input hook\nCreated Tuesday 26 July 2022\n\nThe current [code](https://github.com/exemplar-codes/reactjs-forms-user-input/commit/4d9a91e8d013df60f031a4ced64e149f082f33e6)still has a repetitive structure, in that each state has a *isValid* and *value* state. We can abstract this out to a custom hook.\n\nSteps to make the custom hook:\n1. Copy all code relevant to a state in the hook.\n2. Rename stuff to be generic in the hook.\n3. Add any arbitrary code to be taken as parameter, e.g. the validation logic in this case.\n4. Return whatever is *used* in component.\n\nSee [result](https://github.com/exemplar-codes/reactjs-forms-user-input/commit/7c091cddd97723b9ba21ae4d9d35cd3b3d362edd). This code has less repetition and code for the component is focused on UI instead of form logic.\n\nNote: Alternatively, we can make custom Input component that work for multiple kind of inputs.",
      "html": "<h1 id=\"207.-adding-a-custom-input-hook\">207. Adding a custom input hook <a class=\"heading-anchor-permalink\" href=\"#207.-adding-a-custom-input-hook\">#</a></h1>\n<p>Created Tuesday 26 July 2022</p>\n<p>The current <a href=\"https://github.com/exemplar-codes/reactjs-forms-user-input/commit/4d9a91e8d013df60f031a4ced64e149f082f33e6\">code</a>still has a repetitive structure, in that each state has a <em>isValid</em> and <em>value</em> state. We can abstract this out to a custom hook.</p>\n<p>Steps to make the custom hook:</p>\n<ol>\n<li>Copy all code relevant to a state in the hook.</li>\n<li>Rename stuff to be generic in the hook.</li>\n<li>Add any arbitrary code to be taken as parameter, e.g. the validation logic in this case.</li>\n<li>Return whatever is <em>used</em> in component.</li>\n</ol>\n<p>See <a href=\"https://github.com/exemplar-codes/reactjs-forms-user-input/commit/7c091cddd97723b9ba21ae4d9d35cd3b3d362edd\">result</a>. This code has less repetition and code for the component is focused on UI instead of form logic.</p>\n<p>Note: Alternatively, we can make custom Input component that work for multiple kind of inputs.</p>\n",
      "id": 60
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/211_Summary.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/16_Forms_and_user_input_detailed/211_Summary.html",
      "content": "# 211. Summary\nCreated Tuesday 26 July 2022\n\n- There are 3rd party libraries that help in making forms. One example is [Formik](https://formik.org/).\n- An important aspect of forms in an SPA is to use `localStorage`/`sessionStorage` to store entered input, this provides good UX, i.e. input is retained even if the page is refreshed without submission.\n- Another important thing in forms is pre-filling of values we already know, so that work done by the user is minimized. Example: WorkDay job forms.",
      "html": "<h1 id=\"211.-summary\">211. Summary <a class=\"heading-anchor-permalink\" href=\"#211.-summary\">#</a></h1>\n<p>Created Tuesday 26 July 2022</p>\n<ul>\n<li>There are 3rd party libraries that help in making forms. One example is <a href=\"https://formik.org/\">Formik</a>.</li>\n<li>An important aspect of forms in an SPA is to use <code>localStorage</code>/<code>sessionStorage</code> to store entered input, this provides good UX, i.e. input is retained even if the page is refreshed without submission.</li>\n<li>Another important thing in forms is pre-filling of values we already know, so that work done by the user is minimized. Example: WorkDay job forms.</li>\n</ul>\n",
      "id": 61
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/17_Continue_with_FoodOrder_app/214_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/17_Continue_with_FoodOrder_app/214_Module_introduction.html",
      "content": "# 214. Module Introduction\nCreated Tuesday 26 July 2022\n\nGoal: to apply what we learnt in recent module to the [Food Order](https://github.com/exemplar-codes/react-meals) app.\nWe'll add:\n1. Fetch available meals from the backend.\n2. Add a checkout/order form, with validation.\n3. Submit (i.e. store) the final order to the server.\n\nWe'll be using Firebase's Realtime database as a backend. Here's the backend URL:  https://react-http-88257-default-rtdb.asia-southeast1.firebasedatabase.app",
      "html": "<h1 id=\"214.-module-introduction\">214. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#214.-module-introduction\">#</a></h1>\n<p>Created Tuesday 26 July 2022</p>\n<p>Goal: to apply what we learnt in recent module to the <a href=\"https://github.com/exemplar-codes/react-meals\">Food Order</a> app.\nWe’ll add:</p>\n<ol>\n<li>Fetch available meals from the backend.</li>\n<li>Add a checkout/order form, with validation.</li>\n<li>Submit (i.e. store) the final order to the server.</li>\n</ol>\n<p>We’ll be using Firebase’s Realtime database as a backend. Here’s the backend URL:  <a href=\"https://react-http-88257-default-rtdb.asia-southeast1.firebasedatabase.app\">https://react-http-88257-default-rtdb.asia-southeast1.firebasedatabase.app</a></p>\n",
      "id": 62
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/17_Continue_with_FoodOrder_app/215_Moving_available_meals_to_the_backend.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/17_Continue_with_FoodOrder_app/215_Moving_available_meals_to_the_backend.html",
      "content": "# 215. Moving available meals to the backend\nCreated Tuesday 26 July 2022\n\n- Move the meal list data to the Firebase server, by manually entering the data. Here's the meal list: https://github.com/exemplar-codes/react-meals/blob/abea856489fb0723d5eb407a6dfe6d3f79128cf9/src/components/Meals/AvailableMeals.jsx\n- After doing that, populate the meals from the server instead of the hard-coded list. The file is same as above.\n\nHere's the final [code](https://github.com/exemplar-codes/react-meals/commit/d29ba8f2f85e86f524c40591714f7ed572584c99).",
      "html": "<h1 id=\"215.-moving-available-meals-to-the-backend\">215. Moving available meals to the backend <a class=\"heading-anchor-permalink\" href=\"#215.-moving-available-meals-to-the-backend\">#</a></h1>\n<p>Created Tuesday 26 July 2022</p>\n<ul>\n<li>Move the meal list data to the Firebase server, by manually entering the data. Here’s the meal list: <a href=\"https://github.com/exemplar-codes/react-meals/blob/abea856489fb0723d5eb407a6dfe6d3f79128cf9/src/components/Meals/AvailableMeals.jsx\">https://github.com/exemplar-codes/react-meals/blob/abea856489fb0723d5eb407a6dfe6d3f79128cf9/src/components/Meals/AvailableMeals.jsx</a></li>\n<li>After doing that, populate the meals from the server instead of the hard-coded list. The file is same as above.</li>\n</ul>\n<p>Here’s the final <a href=\"https://github.com/exemplar-codes/react-meals/commit/d29ba8f2f85e86f524c40591714f7ed572584c99\">code</a>.</p>\n",
      "id": 63
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/17_Continue_with_FoodOrder_app/219_Adding_a_checkout_form.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/17_Continue_with_FoodOrder_app/219_Adding_a_checkout_form.html",
      "content": "# 219. Adding a checkout form\nCreated Tuesday 26 July 2022\n\nCode [result](https://github.com/exemplar-codes/react-meals/commit/0a479f54da3c724846cf6bd9fee5306040ed996b)\n\nThis section was mostly about applying what we learnt so far.",
      "html": "<h1 id=\"219.-adding-a-checkout-form\">219. Adding a checkout form <a class=\"heading-anchor-permalink\" href=\"#219.-adding-a-checkout-form\">#</a></h1>\n<p>Created Tuesday 26 July 2022</p>\n<p>Code <a href=\"https://github.com/exemplar-codes/react-meals/commit/0a479f54da3c724846cf6bd9fee5306040ed996b\">result</a></p>\n<p>This section was mostly about applying what we learnt so far.</p>\n",
      "id": 64
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/226_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/226_Module_introduction.html",
      "content": "# 226. Module introduction\nCreated Wednesday 27 July 2022\n\n- Redux is a very popular third party library for state management.\n- It is especially popular with the React ecosystem.\n- Note that Redux is not tied to React, it is a general state management solution.\n\nThis course section will be about:\n1. What is Redux? And why is it needed?\n2. Redux (`redux`) basics and using Redux with React (`react-redux`).\n3. Redux Toolkit - simplifies working with Redux.\n\n\n### Why Redux?\nFIXME(reasons - better dev tools, easy debugging, predictable state change make app execution predictable which is desirable)",
      "html": "<h1 id=\"226.-module-introduction\">226. Module introduction <a class=\"heading-anchor-permalink\" href=\"#226.-module-introduction\">#</a></h1>\n<p>Created Wednesday 27 July 2022</p>\n<ul>\n<li>Redux is a very popular third party library for state management.</li>\n<li>It is especially popular with the React ecosystem.</li>\n<li>Note that Redux is not tied to React, it is a general state management solution.</li>\n</ul>\n<p>This course section will be about:</p>\n<ol>\n<li>What is Redux? And why is it needed?</li>\n<li>Redux (<code>redux</code>) basics and using Redux with React (<code>react-redux</code>).</li>\n<li>Redux Toolkit - simplifies working with Redux.</li>\n</ol>\n<h3 id=\"why-redux%3F\">Why Redux? <a class=\"heading-anchor-permalink\" href=\"#why-redux%3F\">#</a></h3>\n<p>FIXME(reasons - better dev tools, easy debugging, predictable state change make app execution predictable which is desirable)</p>\n",
      "id": 65
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/227_Another_look_at_state_in_React_apps.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/227_Another_look_at_state_in_React_apps.html",
      "content": "# 227. Another look at state in React apps\nCreated Wednesday 27 July 2022\n\n##### What is Redux?\nRedux is a state management system for *cross-component* or *app-wide* state.\n\n##### What is Cross-Component/App-Wide state?\n- State refers to variables/data in the app which changes and correspondingly, leads to a change in the UI being rendered.\n- State in GUI apps can be classified into 3 types:\n\t1. Local state - state that belongs to a single component. Implemented using `useState` and `useReducer`. Example: entered input for an `input` tag.\n\t2. Component-wide state - state used by multiple components of the app. Implemented by state being passed to other components by prop-drilling or `useContext`. Example: modal open/closed state.\n\t3. App-wide state - state that affects most/all components of the app. Implementation is the same as component-wide state.\n![](../../../../assets/227_Another_look_at_state_in_React_apps-image-1-9210b00c.png)\n",
      "html": "<h1 id=\"227.-another-look-at-state-in-react-apps\">227. Another look at state in React apps <a class=\"heading-anchor-permalink\" href=\"#227.-another-look-at-state-in-react-apps\">#</a></h1>\n<p>Created Wednesday 27 July 2022</p>\n<h5 id=\"what-is-redux%3F\">What is Redux? <a class=\"heading-anchor-permalink\" href=\"#what-is-redux%3F\">#</a></h5>\n<p>Redux is a state management system for <em>cross-component</em> or <em>app-wide</em> state.</p>\n<h5 id=\"what-is-cross-component%2Fapp-wide-state%3F\">What is Cross-Component/App-Wide state? <a class=\"heading-anchor-permalink\" href=\"#what-is-cross-component%2Fapp-wide-state%3F\">#</a></h5>\n<ul>\n<li>State refers to variables/data in the app which changes and correspondingly, leads to a change in the UI being rendered.</li>\n<li>State in GUI apps can be classified into 3 types:\n<ol>\n<li>Local state - state that belongs to a single component. Implemented using <code>useState</code> and <code>useReducer</code>. Example: entered input for an <code>input</code> tag.</li>\n<li>Component-wide state - state used by multiple components of the app. Implemented by state being passed to other components by prop-drilling or <code>useContext</code>. Example: modal open/closed state.</li>\n<li>App-wide state - state that affects most/all components of the app. Implementation is the same as component-wide state.\n<img src=\"../../../../assets/227_Another_look_at_state_in_React_apps-image-1-9210b00c.png\" alt=\"\"></li>\n</ol>\n</li>\n</ul>\n",
      "id": 66
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/228_Redux_vs_React_Context.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/228_Redux_vs_React_Context.html",
      "content": "# 228. Redux vs React Context\nCreated Wednesday 27 July 2022\n\n- Both React Context and Redux help avoid prop-drilling for cross-component and app-wide state. Why use Redux then?\n  \nReact Context has some *potential* disadvantages, like:\n- Complexity:\n\t1. React Context can lead to complex code, for larger applications.\n\t2. React Context providers need to nested within one another for UI components, which looks bad. Example:\n\t\t```jsx\n\t\t\treturn (\n\t\t\t\t<AuthContextProvider>\n\t\t\t\t\t<ThemeContextProvider>\n\t\t\t\t\t\t<UIInteractionContextProvider>\n\t\t\t\t\t\t\t<MultiStepFormContextProvider>\n\t\t\t\t\t\t\t\t<UserRegistration />\n\t\t\t\t\t\t\t</MultiStepFormContextProvider>\n\t\t\t\t\t\t</UIInteractionContextProvider>\n\t\t\t\t\t</ThemeContextProvider>\n\t\t\t\t</AuthContextProvider>\n\t\t);\n\t\t```\n\t   If less contexts are used to avoid this nesting, the provider components get bloated with unrelated data. For example, theme and auth are completely unrelated, but are together in:\n\t\t```jsx\n\t\tfunction AllContextProvider() {\n\t\t  const [isAuth, setIsAuth] = useState(false);\n\t\t  const [isEvaluatingAuth, setIsEvaluatingAuth] = useState(false);\n\t\t  const [activeTheme, setActiveTheme] = useState(\"default\");\n\t\t  const [ ... ] = useState(...);\n\t\t  \n\t\t  function loginHandler(email, password) { };\n\t\t  function signupHandler(email, password) { ... };\n\t\t  function changeThemeHandler(new Theme) { };\n\t\t  \n\t\t  return <AllContext.Provider></AllContext.Provider>;\n\t\t}\n\t\n\t\t```\n- Performance - React Context is OK for low frequency updates like theme, auth change. For high frequency updates, use Redux.\n\t> My personal summary is that new context is ready to be used for *low frequency unlikely updates (like locale/theme)*. It's also good to use it in the same way as old context was used. I.e. for static values and then propagate updates through subscriptions. It's *not ready* to be used as a replacement for all Flux-like state propagation. [Source](https://github.com/facebook/react/issues/14110#issuecomment-448074060)\n\t\nNote: Both React Context and Redux may be used for different parts of an app, or use just one of them.",
      "html": "<h1 id=\"228.-redux-vs-react-context\">228. Redux vs React Context <a class=\"heading-anchor-permalink\" href=\"#228.-redux-vs-react-context\">#</a></h1>\n<p>Created Wednesday 27 July 2022</p>\n<ul>\n<li>Both React Context and Redux help avoid prop-drilling for cross-component and app-wide state. Why use Redux then?</li>\n</ul>\n<p>React Context has some <em>potential</em> disadvantages, like:</p>\n<ul>\n<li>Complexity:\n<ol>\n<li>React Context can lead to complex code, for larger applications.</li>\n<li>React Context providers need to nested within one another for UI components, which looks bad. Example:<pre><code class=\"language-jsx\">\treturn (\n\t\t&lt;AuthContextProvider&gt;\n\t\t\t&lt;ThemeContextProvider&gt;\n\t\t\t\t&lt;UIInteractionContextProvider&gt;\n\t\t\t\t\t&lt;MultiStepFormContextProvider&gt;\n\t\t\t\t\t\t&lt;UserRegistration /&gt;\n\t\t\t\t\t&lt;/MultiStepFormContextProvider&gt;\n\t\t\t\t&lt;/UIInteractionContextProvider&gt;\n\t\t\t&lt;/ThemeContextProvider&gt;\n\t\t&lt;/AuthContextProvider&gt;\n);\n</code></pre>\nIf less contexts are used to avoid this nesting, the provider components get bloated with unrelated data. For example, theme and auth are completely unrelated, but are together in:<pre><code class=\"language-jsx\">function AllContextProvider() {\n  const [isAuth, setIsAuth] = useState(false);\n  const [isEvaluatingAuth, setIsEvaluatingAuth] = useState(false);\n  const [activeTheme, setActiveTheme] = useState(&quot;default&quot;);\n  const [ ... ] = useState(...);\n  \n  function loginHandler(email, password) { };\n  function signupHandler(email, password) { ... };\n  function changeThemeHandler(new Theme) { };\n  \n  return &lt;AllContext.Provider&gt;&lt;/AllContext.Provider&gt;;\n}\n\n</code></pre>\n</li>\n</ol>\n</li>\n<li>Performance - React Context is OK for low frequency updates like theme, auth change. For high frequency updates, use Redux.\n<blockquote>\n<p>My personal summary is that new context is ready to be used for <em>low frequency unlikely updates (like locale/theme)</em>. It’s also good to use it in the same way as old context was used. I.e. for static values and then propagate updates through subscriptions. It’s <em>not ready</em> to be used as a replacement for all Flux-like state propagation. <a href=\"https://github.com/facebook/react/issues/14110#issuecomment-448074060\">Source</a></p>\n</blockquote>\n</li>\n</ul>\n<p>Note: Both React Context and Redux may be used for different parts of an app, or use just one of them.</p>\n",
      "id": 67
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/229_How_Redux_works.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/229_How_Redux_works.html",
      "content": "# 229. How Redux works\nCreated Thursday 28 July 2022\n\n##### Redux's working architecture\n- One data (state) store for the entire application, which stores all cross-component and app-wide state.\n- \"Subscription\" callbacks can be set-up with the store. These subscriptions trigger the callback when the store changes.\n- Store mutation is triggered when by running the \"dispatch\" function and passing an \"action\", which calls a \"reducer\". This *reducer* mutates the store.\nThe process continues 🔄.\n\nAs evident, Redux has nothing to do with React. It's a standalone library.\n\nFor React apps, we can subscribe in such a way that component relevant store changes causes re-render of the component.\n![](../../../../assets/229_How_Redux_works-image-1-9210b00c.png)\n",
      "html": "<h1 id=\"229.-how-redux-works\">229. How Redux works <a class=\"heading-anchor-permalink\" href=\"#229.-how-redux-works\">#</a></h1>\n<p>Created Thursday 28 July 2022</p>\n<h5 id=\"redux%E2%80%99s-working-architecture\">Redux’s working architecture <a class=\"heading-anchor-permalink\" href=\"#redux%E2%80%99s-working-architecture\">#</a></h5>\n<ul>\n<li>One data (state) store for the entire application, which stores all cross-component and app-wide state.</li>\n<li>“Subscription” callbacks can be set-up with the store. These subscriptions trigger the callback when the store changes.</li>\n<li>Store mutation is triggered when by running the “dispatch” function and passing an “action”, which calls a “reducer”. This <em>reducer</em> mutates the store.\nThe process continues 🔄.</li>\n</ul>\n<p>As evident, Redux has nothing to do with React. It’s a standalone library.</p>\n<p>For React apps, we can subscribe in such a way that component relevant store changes causes re-render of the component.\n<img src=\"../../../../assets/229_How_Redux_works-image-1-9210b00c.png\" alt=\"\"></p>\n",
      "id": 68
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/230_1_Core_Redux_with_React.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/230_1_Core_Redux_with_React.html",
      "content": "# 230.1. Core Redux with React\nCreated Friday 29 July 2022\n\n[Code](https://github.com/exemplar-codes/core-redux-react-demo)\n\nWhat I did here:\n1. Used `React.useState` for re-rendering the component and triggered it in the reducer. See [code](https://github.com/exemplar-codes/core-redux-react-demo/commit/260bdf1a94cc108b35cc7f52cd74a8dca8a9f8f2).\n2. Used a hook to do the same. See [code](https://github.com/exemplar-codes/core-redux-react-demo/commit/8b991bb392e292a17dce6b9c7b3aa4bfc843b33e).\n\nShortcomings and solutions:\n1. How to re-render multiple dependent components when the store is changed by any component? One way is to store the re-render function of the root of this cross-component store, and re-evaluate that, causing a re-render of all the dependent components. This can be done by exporting a custom dispatch function from the root of the cross-component section, which also calls re-render. This exported dispatch may called by descendants, and will re-render the whole cross-component section. *In short, we need to \"Provide\" as in `useContext`*. See [code](https://github.com/exemplar-codes/core-redux-react-demo/commit/753de6d926b30f674dfc593388e5e1ee3ae38b63#diff-26da19e39a61206e097a8088a139c7ccfc4ac5c4139a5d581bda5e55976ab538).",
      "html": "<h1 id=\"230.1.-core-redux-with-react\">230.1. Core Redux with React <a class=\"heading-anchor-permalink\" href=\"#230.1.-core-redux-with-react\">#</a></h1>\n<p>Created Friday 29 July 2022</p>\n<p><a href=\"https://github.com/exemplar-codes/core-redux-react-demo\">Code</a></p>\n<p>What I did here:</p>\n<ol>\n<li>Used <code>React.useState</code> for re-rendering the component and triggered it in the reducer. See <a href=\"https://github.com/exemplar-codes/core-redux-react-demo/commit/260bdf1a94cc108b35cc7f52cd74a8dca8a9f8f2\">code</a>.</li>\n<li>Used a hook to do the same. See <a href=\"https://github.com/exemplar-codes/core-redux-react-demo/commit/8b991bb392e292a17dce6b9c7b3aa4bfc843b33e\">code</a>.</li>\n</ol>\n<p>Shortcomings and solutions:</p>\n<ol>\n<li>How to re-render multiple dependent components when the store is changed by any component? One way is to store the re-render function of the root of this cross-component store, and re-evaluate that, causing a re-render of all the dependent components. This can be done by exporting a custom dispatch function from the root of the cross-component section, which also calls re-render. This exported dispatch may called by descendants, and will re-render the whole cross-component section. <em>In short, we need to “Provide” as in <code>useContext</code></em>. See <a href=\"https://github.com/exemplar-codes/core-redux-react-demo/commit/753de6d926b30f674dfc593388e5e1ee3ae38b63#diff-26da19e39a61206e097a8088a139c7ccfc4ac5c4139a5d581bda5e55976ab538\">code</a>.</li>\n</ol>\n",
      "id": 69
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/230_Core_Redux.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/230_Core_Redux.html",
      "content": "# 230. Core Redux\nCreated Friday 29 July 2022\n\nCore Redux is the npm package \"redux\".\nCode: https://github.com/exemplar-codes/redux-demo\n\n#### Constructs\nThere are 4 constructs in core Redux:\n1. Store\n2. Reducer\n3. Subscribers, if any.\n4. Dispatch calls\n\n\n#### Details\n1. **Reducer** - this is a function that takes in 2 parameters, latest state and something called \"action\". The \"action\" is the same as argument passed to the dispatch function. It must must return the new state. Note:\n\t1. DO NOT mutate the state directly, this can cause unforeseen bugs. Instead return a copy of the new state.\n\t2. It must return the complete state, as redux *will not* merge the returned object with the state, i.e. behaves exactly like `React.useState`.\n2. **Store** - this is created using `redux.createStore(reducerFunc)`, takes reducer as the first argument. It has the following attributes:\n\t1. `store.latestState()` - latest snapshot of the store.\n\t2. `store.dispatch` - can dispatch to cause store mutation\n\t3. `store.subscribe(callback)` - subscribe to the store via callback.\n\t\n\t\tStore initialization is not a part of core Redux. Store initialization is done indirectly by calling the reducer when the store is first created, so initialization logic is part of the reducer. \n\t\n\t\tNote: For this first reducer call, \"action\" argument is generated by Redux, and state is `undefined`. Because state is `undefined` only for the first time, store initialization can be done by using a default argument in the reducer. Like so:\n\t\t```js\n\t\tconst initialState = {count: 0};\n\t\tconst reducer = (state=initialState, action) => {};\n\t\t```\n3. **Subscribers** - callbacks without any parameter. Subscribed using `store.subscribe`, triggered on store change. Subscriptions are optional. There can be multiple subscriptions.\n4. **Dispatch** call - using `store.dispatch`, the first argument (aka \"action\") will be made available as-is to the reducer as its second param. The \"action\" may be of any data type, but it is generally an object carrying a \"type\" string field and an optional \"payload\" variable.\n\n#### Code sample\n```js\nconst {createStore} from 'redux';\n\nconst initialState = {count: 0, showCount: true}; // 0 initialization\n\nconst reducer = (state = initalState, action) => { // 1. Reducer\n\tswitch(action.type) {\n\t\tcase 'INCREMENT':\n\t\t\treturn {...state, count: state.count + 1};\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'DECREMENT':\n\t\t\treturn {...state, count: state.count - 1};\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'INCREASE_BY':\n\t\t\treturn {...state, count: state.count + action.delta};\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'TOGGLE':\n\t\t\treturn {...state, showCount: !state.showCount};\n\t\t\tbreak;\n\t}\n\n\treturn state; // works for both initialization and wrong dispatch\n}\n\t\nconst store = createStore(reducer); // 2. Store creation\n\nstore.dispatch({type: 'INCREMENT'}); // 3. Dispatch\nstore.dispatch({type: 'INCREASE_BY', delta: 20});\n\n\nfunction subscriberCallback = () => console.log('Store mutated!');\n\nstore.subscribe(subscriberCallback); // 4. subscription\n```",
      "html": "<h1 id=\"230.-core-redux\">230. Core Redux <a class=\"heading-anchor-permalink\" href=\"#230.-core-redux\">#</a></h1>\n<p>Created Friday 29 July 2022</p>\n<p>Core Redux is the npm package “redux”.\nCode: <a href=\"https://github.com/exemplar-codes/redux-demo\">https://github.com/exemplar-codes/redux-demo</a></p>\n<h4 id=\"constructs\">Constructs <a class=\"heading-anchor-permalink\" href=\"#constructs\">#</a></h4>\n<p>There are 4 constructs in core Redux:</p>\n<ol>\n<li>Store</li>\n<li>Reducer</li>\n<li>Subscribers, if any.</li>\n<li>Dispatch calls</li>\n</ol>\n<h4 id=\"details\">Details <a class=\"heading-anchor-permalink\" href=\"#details\">#</a></h4>\n<ol>\n<li><strong>Reducer</strong> - this is a function that takes in 2 parameters, latest state and something called “action”. The “action” is the same as argument passed to the dispatch function. It must must return the new state. Note:\n<ol>\n<li>DO NOT mutate the state directly, this can cause unforeseen bugs. Instead return a copy of the new state.</li>\n<li>It must return the complete state, as redux <em>will not</em> merge the returned object with the state, i.e. behaves exactly like <code>React.useState</code>.</li>\n</ol>\n</li>\n<li><strong>Store</strong> - this is created using <code>redux.createStore(reducerFunc)</code>, takes reducer as the first argument. It has the following attributes:\n<ol>\n<li>\n<p><code>store.latestState()</code> - latest snapshot of the store.</p>\n</li>\n<li>\n<p><code>store.dispatch</code> - can dispatch to cause store mutation</p>\n</li>\n<li>\n<p><code>store.subscribe(callback)</code> - subscribe to the store via callback.</p>\n<p>Store initialization is not a part of core Redux. Store initialization is done indirectly by calling the reducer when the store is first created, so initialization logic is part of the reducer.</p>\n<p>Note: For this first reducer call, “action” argument is generated by Redux, and state is <code>undefined</code>. Because state is <code>undefined</code> only for the first time, store initialization can be done by using a default argument in the reducer. Like so:</p>\n<pre><code class=\"language-js\">const initialState = {count: 0};\nconst reducer = (state=initialState, action) =&gt; {};\n</code></pre>\n</li>\n</ol>\n</li>\n<li><strong>Subscribers</strong> - callbacks without any parameter. Subscribed using <code>store.subscribe</code>, triggered on store change. Subscriptions are optional. There can be multiple subscriptions.</li>\n<li><strong>Dispatch</strong> call - using <code>store.dispatch</code>, the first argument (aka “action”) will be made available as-is to the reducer as its second param. The “action” may be of any data type, but it is generally an object carrying a “type” string field and an optional “payload” variable.</li>\n</ol>\n<h4 id=\"code-sample\">Code sample <a class=\"heading-anchor-permalink\" href=\"#code-sample\">#</a></h4>\n<pre><code class=\"language-js\">const {createStore} from 'redux';\n\nconst initialState = {count: 0, showCount: true}; // 0 initialization\n\nconst reducer = (state = initalState, action) =&gt; { // 1. Reducer\n\tswitch(action.type) {\n\t\tcase 'INCREMENT':\n\t\t\treturn {...state, count: state.count + 1};\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'DECREMENT':\n\t\t\treturn {...state, count: state.count - 1};\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'INCREASE_BY':\n\t\t\treturn {...state, count: state.count + action.delta};\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'TOGGLE':\n\t\t\treturn {...state, showCount: !state.showCount};\n\t\t\tbreak;\n\t}\n\n\treturn state; // works for both initialization and wrong dispatch\n}\n\t\nconst store = createStore(reducer); // 2. Store creation\n\nstore.dispatch({type: 'INCREMENT'}); // 3. Dispatch\nstore.dispatch({type: 'INCREASE_BY', delta: 20});\n\n\nfunction subscriberCallback = () =&gt; console.log('Store mutated!');\n\nstore.subscribe(subscriberCallback); // 4. subscription\n</code></pre>\n",
      "id": 70
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/231_Redux_with_React.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/231_Redux_with_React.html",
      "content": "# 231. Redux with React\nCreated Saturday 30 July 2022\n\n[Code](https://github.com/exemplar-codes/react-redux-demo) - using Redux in React apps.\n\nNeed two `npm` packages for this project:\n1. Core Redux - `redux`\n2. React bindings in Redux - `react-redux`. This makes connecting React components to the store easier.\n\n`react-redux`, in addition to other functions, helps in adding component re-render subscriptions to the store. Other than this, everything is already present in the `redux` package.\n\nThere are 4 things to keep in mind when using `redux` with `react-redux`:\n1. **Store** - created using core `redux`. No change from core redux and React usage. Convention: stores are kept in a separate `.js` file.\n2. **Provider** - `react-redux.Provider` is a wrapper component that should be wrapped around the UI sub-tree where store needs to be accessed. It takes a prop `store` which points to the redux store.\n3. **Consuming** data from store, for functional components - use the `react-redux.useSelector` to access relevant part of the store. The first parameter is a function that takes in the store and returns the part of the store whose value is needed by the component.\n4. For **dispatching** store changes in functional components - use the `useDispatch` hook which takes in the store as first parameter. It returns the store's dispatch function.\n\nSubscriptions to components are automatically managed(i.e. added on component mount and remove on component dismount) by `react-redux`. In short, any change in the store will re-render relevant components in the UI sub-tree.\n\n\n### Questions\nHow to access the correct state and dispatch function if there are multiple providers in the UI ancestor?? Neither `useSelector` nor `useDispatch` take a store as argument. I have observed that the innermost provider is chosen as the store state.",
      "html": "<h1 id=\"231.-redux-with-react\">231. Redux with React <a class=\"heading-anchor-permalink\" href=\"#231.-redux-with-react\">#</a></h1>\n<p>Created Saturday 30 July 2022</p>\n<p><a href=\"https://github.com/exemplar-codes/react-redux-demo\">Code</a> - using Redux in React apps.</p>\n<p>Need two <code>npm</code> packages for this project:</p>\n<ol>\n<li>Core Redux - <code>redux</code></li>\n<li>React bindings in Redux - <code>react-redux</code>. This makes connecting React components to the store easier.</li>\n</ol>\n<p><code>react-redux</code>, in addition to other functions, helps in adding component re-render subscriptions to the store. Other than this, everything is already present in the <code>redux</code> package.</p>\n<p>There are 4 things to keep in mind when using <code>redux</code> with <code>react-redux</code>:</p>\n<ol>\n<li><strong>Store</strong> - created using core <code>redux</code>. No change from core redux and React usage. Convention: stores are kept in a separate <code>.js</code> file.</li>\n<li><strong>Provider</strong> - <code>react-redux.Provider</code> is a wrapper component that should be wrapped around the UI sub-tree where store needs to be accessed. It takes a prop <code>store</code> which points to the redux store.</li>\n<li><strong>Consuming</strong> data from store, for functional components - use the <code>react-redux.useSelector</code> to access relevant part of the store. The first parameter is a function that takes in the store and returns the part of the store whose value is needed by the component.</li>\n<li>For <strong>dispatching</strong> store changes in functional components - use the <code>useDispatch</code> hook which takes in the store as first parameter. It returns the store’s dispatch function.</li>\n</ol>\n<p>Subscriptions to components are automatically managed(i.e. added on component mount and remove on component dismount) by <code>react-redux</code>. In short, any change in the store will re-render relevant components in the UI sub-tree.</p>\n<h3 id=\"questions\">Questions <a class=\"heading-anchor-permalink\" href=\"#questions\">#</a></h3>\n<p>How to access the correct state and dispatch function if there are multiple providers in the UI ancestor?? Neither <code>useSelector</code> nor <code>useDispatch</code> take a store as argument. I have observed that the innermost provider is chosen as the store state.</p>\n",
      "id": 71
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/237_Redux_with_React_for_class_components.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/237_Redux_with_React_for_class_components.html",
      "content": "# 237. Redux with React for class components\nCreated Saturday 30 July 2022\n\nThere are 5 things when using `redux` with `react-redux`:\n1. **Store** - creation is same as with functional components.\n2. **Provider** - same as with functional components.\n3. **Consuming** data from store, for class components - all data to be consumed is provided through props. We have to define a function, by convention called \"*mapStateToProps*\" which takes in the store state as argument and must return an object of to-be-props pointing to relevant parts of the store state. This object will be added to existing props of the component. Example:\n\t```jsx\n\tfunction mapStateToProps(state) {\n\t\treturn { count: state.count, showCount: state.showCount };\n\t}\n\t```\n4. **Dispatching** store changes in class components - this is also done by adding functions to props. One needs to define a function, by convention called \"*mapDispatchToProps*\" which provides the dispatch function of the store as it's first argument. We must return an object of to-be-added-props which help in mutating the store. There are two ways to do this - pass the dispatch function itself as a prop, or create functions which call the dispatch function, and are called from inside the component. Example:\n\t```jsx\n\tfunction mapDispatchToProps(dispatch) {\n\t\treturn { \n\t\t\tincrementHandler: () => dispatch({type: 'INCREMENT'}),\n\t\t\ttoggleCountHandler: () => dispatch({type: 'TOGGLE'})\n\t\t};\n\t}\n\n\t// OR\n\t\n\tfunction mapDispatchToProps(dispatch) {\n\t\treturn { dispatch };\n\t}\n\t\n\tclass MyComponent extends React.Component {\n\t\tincrementHandler() {\n\t\t\tthis.props.dispatch('INCREMENT');\n\t\t}\n\t\t\n\t\ttoggleCountHandler() {\n\t\t\tthis.props.dispatch('TOGGLE');\n\t\t}\n\t\trender(){ /*  */}\n\t}\n\t```\n5. **Connecting** the consumption and dispatch functions to the component. This is done by the `react-redux.connect` function. It is a function that takes in the \"*mapStateToProps*\" and \"*mapDispatchToProps*\" functions as arguments and return s an HOC function that takes the React component as argument, and returns the component with the props attached. See:\n\t```jsx\n\timport {connect} from 'react-redux';\n\t\n\tclass MyComponent from React.Component {\n\t}\n\n\tfunction mapStateToProps() {}\n\tfunction mapDispatchToProps() {}\n\n\texport default connect(mapStateToProps, mapDispatchToProps)(MyComponent);\n\t```\n   \nSubscriptions to components are automatically managed(i.e. added on component mount and remove on component dismount) by `react-redux`. In short, any change in the store will re-render relevant components in the UI sub-tree.\n\nNote: \n1. In both *mapStateToProps* and *mapDispatchToProps*, we only have to return an object of props to be added. Existing props are merged with this object.\n2. Both *mapStateToProps* and *mapDispatchToProps* have latest (really?, FIXME) props available to them as the second parameter. i.e.:\n\t```jsx\n\tfunction mapStateToProps(state, props) { return {}; }\n\tfunction mapDispatchToProps(state, props) { return {}; \n\t```\n3. `connect` works for functional components too. So this way of consuming and dispatching may be used by functional components too. This works because the a functional or class component, is essentially the same and `connect` doesn't care. So, this, works too:\n\t```jsx\n\timport {connect} from 'react-redux';\n\t\n\tfunction MyComponent(props) {\n\t}\n\t\n\tfunction mapStateToProps() {}\n\tfunction mapDispatchToProps() {}\n\t\n\texport default connect(mapStateToProps, mapDispatchToProps)(MyComponent);\n\t```\n\tThis way is sometimes preferred because it separates real props from store props.\n\n### Questions\nHow to access the correct state and dispatch function if there are multiple providers in the UI ancestor? Neither `mapStateToProps` nor `mapDispatchToProps` take a store as argument. I have observed that the innermost provider is chosen as the store state.",
      "html": "<h1 id=\"237.-redux-with-react-for-class-components\">237. Redux with React for class components <a class=\"heading-anchor-permalink\" href=\"#237.-redux-with-react-for-class-components\">#</a></h1>\n<p>Created Saturday 30 July 2022</p>\n<p>There are 5 things when using <code>redux</code> with <code>react-redux</code>:</p>\n<ol>\n<li><strong>Store</strong> - creation is same as with functional components.</li>\n<li><strong>Provider</strong> - same as with functional components.</li>\n<li><strong>Consuming</strong> data from store, for class components - all data to be consumed is provided through props. We have to define a function, by convention called “<em>mapStateToProps</em>” which takes in the store state as argument and must return an object of to-be-props pointing to relevant parts of the store state. This object will be added to existing props of the component. Example:<pre><code class=\"language-jsx\">function mapStateToProps(state) {\n\treturn { count: state.count, showCount: state.showCount };\n}\n</code></pre>\n</li>\n<li><strong>Dispatching</strong> store changes in class components - this is also done by adding functions to props. One needs to define a function, by convention called “<em>mapDispatchToProps</em>” which provides the dispatch function of the store as it’s first argument. We must return an object of to-be-added-props which help in mutating the store. There are two ways to do this - pass the dispatch function itself as a prop, or create functions which call the dispatch function, and are called from inside the component. Example:<pre><code class=\"language-jsx\">function mapDispatchToProps(dispatch) {\n\treturn { \n\t\tincrementHandler: () =&gt; dispatch({type: 'INCREMENT'}),\n\t\ttoggleCountHandler: () =&gt; dispatch({type: 'TOGGLE'})\n\t};\n}\n\n// OR\n\nfunction mapDispatchToProps(dispatch) {\n\treturn { dispatch };\n}\n\nclass MyComponent extends React.Component {\n\tincrementHandler() {\n\t\tthis.props.dispatch('INCREMENT');\n\t}\n\t\n\ttoggleCountHandler() {\n\t\tthis.props.dispatch('TOGGLE');\n\t}\n\trender(){ /*  */}\n}\n</code></pre>\n</li>\n<li><strong>Connecting</strong> the consumption and dispatch functions to the component. This is done by the <code>react-redux.connect</code> function. It is a function that takes in the “<em>mapStateToProps</em>” and “<em>mapDispatchToProps</em>” functions as arguments and return s an HOC function that takes the React component as argument, and returns the component with the props attached. See:<pre><code class=\"language-jsx\">import {connect} from 'react-redux';\n\nclass MyComponent from React.Component {\n}\n\nfunction mapStateToProps() {}\nfunction mapDispatchToProps() {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyComponent);\n</code></pre>\n</li>\n</ol>\n<p>Subscriptions to components are automatically managed(i.e. added on component mount and remove on component dismount) by <code>react-redux</code>. In short, any change in the store will re-render relevant components in the UI sub-tree.</p>\n<p>Note:</p>\n<ol>\n<li>In both <em>mapStateToProps</em> and <em>mapDispatchToProps</em>, we only have to return an object of props to be added. Existing props are merged with this object.</li>\n<li>Both <em>mapStateToProps</em> and <em>mapDispatchToProps</em> have latest (really?, FIXME) props available to them as the second parameter. i.e.:<pre><code class=\"language-jsx\">function mapStateToProps(state, props) { return {}; }\nfunction mapDispatchToProps(state, props) { return {}; \n</code></pre>\n</li>\n<li><code>connect</code> works for functional components too. So this way of consuming and dispatching may be used by functional components too. This works because the a functional or class component, is essentially the same and <code>connect</code> doesn’t care. So, this, works too:<pre><code class=\"language-jsx\">import {connect} from 'react-redux';\n\nfunction MyComponent(props) {\n}\n\nfunction mapStateToProps() {}\nfunction mapDispatchToProps() {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyComponent);\n</code></pre>\nThis way is sometimes preferred because it separates real props from store props.</li>\n</ol>\n<h3 id=\"questions\">Questions <a class=\"heading-anchor-permalink\" href=\"#questions\">#</a></h3>\n<p>How to access the correct state and dispatch function if there are multiple providers in the UI ancestor? Neither <code>mapStateToProps</code> nor <code>mapDispatchToProps</code> take a store as argument. I have observed that the innermost provider is chosen as the store state.</p>\n",
      "id": 72
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/241_Redux_challenges_and_Introducing_Redux_Toolkit.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/241_Redux_challenges_and_Introducing_Redux_Toolkit.html",
      "content": "# 241. Redux challenges and Introducing Redux Toolkit\nCreated Saturday 30 July 2022\n\nThere's an easier way to use Redux in React projects.\nList of potential problems with existing way of using Redux(i.e. `redux` + `react-redux`) for large apps:\n1. Clashing action terms.\n2. Long reducer function due to absence of state merging.\n3. State immutability rule could be ignored.\n\n- Redux Toolkit solves these problems and makes working with Redux with React easier.\n- Redux Toolkit is created by the same team as `redux` and `react-redux`.\n- Redux Toolkit is also known as RTK.\n\n### Why Redux Toolkit?\nFIXME(reasons - to make the reducer and store maintainable by chunking it into multiple reducers and \"slices\")",
      "html": "<h1 id=\"241.-redux-challenges-and-introducing-redux-toolkit\">241. Redux challenges and Introducing Redux Toolkit <a class=\"heading-anchor-permalink\" href=\"#241.-redux-challenges-and-introducing-redux-toolkit\">#</a></h1>\n<p>Created Saturday 30 July 2022</p>\n<p>There’s an easier way to use Redux in React projects.\nList of potential problems with existing way of using Redux(i.e. <code>redux</code> + <code>react-redux</code>) for large apps:</p>\n<ol>\n<li>Clashing action terms.</li>\n<li>Long reducer function due to absence of state merging.</li>\n<li>State immutability rule could be ignored.</li>\n</ol>\n<ul>\n<li>Redux Toolkit solves these problems and makes working with Redux with React easier.</li>\n<li>Redux Toolkit is created by the same team as <code>redux</code> and <code>react-redux</code>.</li>\n<li>Redux Toolkit is also known as RTK.</li>\n</ul>\n<h3 id=\"why-redux-toolkit%3F\">Why Redux Toolkit? <a class=\"heading-anchor-permalink\" href=\"#why-redux-toolkit%3F\">#</a></h3>\n<p>FIXME(reasons - to make the reducer and store maintainable by chunking it into multiple reducers and “slices”)</p>\n",
      "id": 73
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/242_React_Toolkit_working.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/242_React_Toolkit_working.html",
      "content": "# 242. Adding state slices\nCreated Saturday 30 July 2022\n\nTo work with React Toolkit, a React project needs two packages:\n1. `@reduxjs/toolkit` - contains core `redux` and extra functionality\n2. `react-redux` - React bindings for providing and consuming store state.\n   \nNote: remove npm package `redux` from `package.json` if present, because it's already present in using `@reduxjs/toolkit`. `import` from `redux` to create store is still valid, although there may be no Intellisense now. It is generally not used when using RTK.\n\n### Working with RTK\nThere are 5 constructs when working with RTK:\n1. Slices - these are combined by RTK to create the whole store. Their function is to separate out reducers and parts of store relevant to a feature. \n   \n   The `createSlice` function takes an object with attributes `name` which is a string, `initialState` which is an object, and a `reducers`(**plural**) which is an object of reducer functions.\n   A slice is created like so:\n\t```jsx\n\timport { createSlice } from '@reduxjs/toolkit';\n\n\tconst authInitialState = { isAuthenticated: false };\n\n\tconst authSlice = createSlice({\n\t\tname: 'auth', // can be named anything, isn't used elsewhere\n\t\tinitialState: authInitialState,\n\t\treducers: {\n\t\t\tlogin: (state) => (state.isAuthenticated = true),\n\t\t\tlogout: (state) => (state.isAuthenticated = false),\n\t\t\tcheckPassword: (state, action) => (state.existingPassword === action.payload.password)\n\t\t}\n\t})\n\t```\n\t\n\tA slice combines all specified reducers into a *single* reducer accessible via the `reducer` (**singular**) attribute. This reducer is usually exported from the slice file (yes, slices are kept in individual files).\n\t```jsx\n\texport default authSlice.reducer;\n\t```\n2. Creating the store - the store is created by combining all the reducers (available in the slices), using the `configureStore` function available in RTK. Note: the `configureStore` param is an object with the attribute of `reducer` (**singular**).\n\t```jsx\n\timport { configureStore } from '@reduxjs/toolkit';\n\t\n\tconst authSlice = /**/ ;\n\tconst counterSlice = /**/ ;\n\n\tconst store = configureStore({\n\t\treducer: { counter: counterSlice.reducer, auth: authSlice.reducer }\n\t});\n\n\texport default store;\n\t```\n\tThe `configureStore.reducer` object's keys **don't** have to match the slice name, but they are generally kept the same. But the key is important and used elsewhere.\n\t\n\tIf there's just a single store, the `configureStore.reducer` can be set to the reducer directly. Like so:\n\t```jsx\n\tconst store = configureStore({ reducer: counterSlice.reducer }); // also OK\n\t```\n3. Actions - unlike core `redux`, actions strings are not specified by us. RTK action objects which contain unique `action.type` strings. The set of actions available to a slice can be accessed from the slice. These are kept in the slice file, and generally exported where a dispatch needs to be done. Example:\n\t```jsx\n\texport const authActions = authSlice.actions;\n\t```\n1. Providing the store - same as before, i.e. by wrapping the React ancestor with `react-redux`'s `<Provider store={}></Provider>`.\n2. Consuming the store data - mostly the same as without RTK, i.e. using the `useSelector` hook. The difference is that the data relevant to a slice is actually kept in that slice, and needs to be accessed by the name of slice (specified during slice creation). Example:\n\t```jsx\n\t// suppose the relevant slices names' are 'counter' and 'auth'\n\timport { useSelector } from 'react-redux';\n\tfunction MyComponent() {\n\t\tconst count = useSelector(state => state.counter.count); // instead of state.count\n\t\tconst authenticated = useSelector(state => state.auth.isAuthenticated);\n\n\t\treturn /**/;\n\t}\n\t```\n6. Dispatch - dispatch are still done using `useDispatch`. The only difference is the way we specify actions. Actions are first accessed from the slice using the `actions` attribute. Then we call a particular action function as per it's name specified in the reducer object of the slice. Note: the action function should be called to generate the action.\n   \n   We can pass action data to by passing the data directly in the action function. This will be made available an attribute named `payload` in the action object received by the reducer.\n   \n   Code example:\n\t```jsx\n\timport { useDispatch } from 'react-redux';\n\timport { authActions } from '../auth';\n\n\tfunction MyComponent() {\n\t\tconst dispatch = useDispatch();\n\t\t\n\t\tconst loginHandler = () => dispatch(authActions.login());\n\t\tconst passwordHandler = (event) => dispatch(authActions.passwordCheck(event.target.value));\n\n\t\treturn /**/;\n\t}\n\t```\n\nNote:\n1. Name of the slice and name of the slice reducer in `configureStore.reducer` key don't have to match. See [code](https://github.com/exemplar-codes/react-redux-demo/commit/8a09aa87c7c538848d12bcc0774e9c064b6db451).\n2. When accessing store data using `useSelector`, the key of the callback param must match the slice reducer name. If there's only one reducer passed directly to `configureStore`, the data is directly accessible. See [code](https://github.com/exemplar-codes/react-redux-demo/commit/d5ca4e7de8525e6a536506f6ff5f29e61acefc2e#diff-5541be143e3e2a0dcdfefeb9ca7c2ac4cb3eb7965e000bd10669f31f125755cf).\n3. All data passed to the action creator during dispatch is made available as `payload` in attribute of the action in the slice reducer.\n4. Every attribute `reducer` is singular at all places except during slice creation, where it's plural.\n5. Store drilling w.r.t slice reducer name is there only when consuming store data, not in the slice's `reducers`.\n6. Slices are kept in different files, and only the slice's action creators object and reducer are exported, since they're needed during dispatch and store creation, respectively.\n\n- See [code](https://github.com/exemplar-codes/react-redux-demo/commit/1546db08861125733265e11773d1909acf3fc30c) for this whole page.\n- RTK with class based components is also [easy](./237_Redux_with_React_for_class_components.md), because all needed functions `connect`, *mapStateToProps* and *mapDispatchToProps* are all still part of `react-redux` package. See [code](https://github.com/exemplar-codes/react-redux-demo/commit/7c8c403f547abeaf542ff73cb052e1dd46db04a2).\n\n\n### Questions\n1. Can a reducer in a slice access values from another slice? No, each reducer can access only slice in it's data. If two slices wish to use each other's data, they should be combined into a single slice OR one can do some acrobatics to get reducers to share data.\n2. Can two slices have data with the same name? Yes, there's no scope of collision as reducers are confined to their own slices. This may cause confusion amongst developers of the project, though. See [code](https://github.com/exemplar-codes/react-redux-demo/commit/8d2ef9f3838979384acec94cb51cf64bfcaff0ca).\n\n\nFIXME: \n- mention that `createStore`, `createSlice`, `reducer` (with getState), `createAsyncThunk`, `createSelector` are the important things. Everything else is an add on.\n- RTK is good enough to be used. Redux (vanilla) can be ignored.\n- Side-effects though discouraged, can still be called form async thunks.\n- Mentions the few [issues](https://github.com/sanjar-notes/react/issues/33) with RTK",
      "html": "<h1 id=\"242.-adding-state-slices\">242. Adding state slices <a class=\"heading-anchor-permalink\" href=\"#242.-adding-state-slices\">#</a></h1>\n<p>Created Saturday 30 July 2022</p>\n<p>To work with React Toolkit, a React project needs two packages:</p>\n<ol>\n<li><code>@reduxjs/toolkit</code> - contains core <code>redux</code> and extra functionality</li>\n<li><code>react-redux</code> - React bindings for providing and consuming store state.</li>\n</ol>\n<p>Note: remove npm package <code>redux</code> from <code>package.json</code> if present, because it’s already present in using <code>@reduxjs/toolkit</code>. <code>import</code> from <code>redux</code> to create store is still valid, although there may be no Intellisense now. It is generally not used when using RTK.</p>\n<h3 id=\"working-with-rtk\">Working with RTK <a class=\"heading-anchor-permalink\" href=\"#working-with-rtk\">#</a></h3>\n<p>There are 5 constructs when working with RTK:</p>\n<ol>\n<li>\n<p>Slices - these are combined by RTK to create the whole store. Their function is to separate out reducers and parts of store relevant to a feature.</p>\n<p>The <code>createSlice</code> function takes an object with attributes <code>name</code> which is a string, <code>initialState</code> which is an object, and a <code>reducers</code>(<strong>plural</strong>) which is an object of reducer functions.\nA slice is created like so:</p>\n<pre><code class=\"language-jsx\">import { createSlice } from '@reduxjs/toolkit';\n\nconst authInitialState = { isAuthenticated: false };\n\nconst authSlice = createSlice({\n\tname: 'auth', // can be named anything, isn't used elsewhere\n\tinitialState: authInitialState,\n\treducers: {\n\t\tlogin: (state) =&gt; (state.isAuthenticated = true),\n\t\tlogout: (state) =&gt; (state.isAuthenticated = false),\n\t\tcheckPassword: (state, action) =&gt; (state.existingPassword === action.payload.password)\n\t}\n})\n</code></pre>\n<p>A slice combines all specified reducers into a <em>single</em> reducer accessible via the <code>reducer</code> (<strong>singular</strong>) attribute. This reducer is usually exported from the slice file (yes, slices are kept in individual files).</p>\n<pre><code class=\"language-jsx\">export default authSlice.reducer;\n</code></pre>\n</li>\n<li>\n<p>Creating the store - the store is created by combining all the reducers (available in the slices), using the <code>configureStore</code> function available in RTK. Note: the <code>configureStore</code> param is an object with the attribute of <code>reducer</code> (<strong>singular</strong>).</p>\n<pre><code class=\"language-jsx\">import { configureStore } from '@reduxjs/toolkit';\n\nconst authSlice = /**/ ;\nconst counterSlice = /**/ ;\n\nconst store = configureStore({\n\treducer: { counter: counterSlice.reducer, auth: authSlice.reducer }\n});\n\nexport default store;\n</code></pre>\n<p>The <code>configureStore.reducer</code> object’s keys <strong>don’t</strong> have to match the slice name, but they are generally kept the same. But the key is important and used elsewhere.</p>\n<p>If there’s just a single store, the <code>configureStore.reducer</code> can be set to the reducer directly. Like so:</p>\n<pre><code class=\"language-jsx\">const store = configureStore({ reducer: counterSlice.reducer }); // also OK\n</code></pre>\n</li>\n<li>\n<p>Actions - unlike core <code>redux</code>, actions strings are not specified by us. RTK action objects which contain unique <code>action.type</code> strings. The set of actions available to a slice can be accessed from the slice. These are kept in the slice file, and generally exported where a dispatch needs to be done. Example:</p>\n<pre><code class=\"language-jsx\">export const authActions = authSlice.actions;\n</code></pre>\n</li>\n<li>\n<p>Providing the store - same as before, i.e. by wrapping the React ancestor with <code>react-redux</code>'s <code>&lt;Provider store={}&gt;&lt;/Provider&gt;</code>.</p>\n</li>\n<li>\n<p>Consuming the store data - mostly the same as without RTK, i.e. using the <code>useSelector</code> hook. The difference is that the data relevant to a slice is actually kept in that slice, and needs to be accessed by the name of slice (specified during slice creation). Example:</p>\n<pre><code class=\"language-jsx\">// suppose the relevant slices names' are 'counter' and 'auth'\nimport { useSelector } from 'react-redux';\nfunction MyComponent() {\n\tconst count = useSelector(state =&gt; state.counter.count); // instead of state.count\n\tconst authenticated = useSelector(state =&gt; state.auth.isAuthenticated);\n\n\treturn /**/;\n}\n</code></pre>\n</li>\n<li>\n<p>Dispatch - dispatch are still done using <code>useDispatch</code>. The only difference is the way we specify actions. Actions are first accessed from the slice using the <code>actions</code> attribute. Then we call a particular action function as per it’s name specified in the reducer object of the slice. Note: the action function should be called to generate the action.</p>\n<p>We can pass action data to by passing the data directly in the action function. This will be made available an attribute named <code>payload</code> in the action object received by the reducer.</p>\n<p>Code example:</p>\n<pre><code class=\"language-jsx\">import { useDispatch } from 'react-redux';\nimport { authActions } from '../auth';\n\nfunction MyComponent() {\n\tconst dispatch = useDispatch();\n\t\n\tconst loginHandler = () =&gt; dispatch(authActions.login());\n\tconst passwordHandler = (event) =&gt; dispatch(authActions.passwordCheck(event.target.value));\n\n\treturn /**/;\n}\n</code></pre>\n</li>\n</ol>\n<p>Note:</p>\n<ol>\n<li>Name of the slice and name of the slice reducer in <code>configureStore.reducer</code> key don’t have to match. See <a href=\"https://github.com/exemplar-codes/react-redux-demo/commit/8a09aa87c7c538848d12bcc0774e9c064b6db451\">code</a>.</li>\n<li>When accessing store data using <code>useSelector</code>, the key of the callback param must match the slice reducer name. If there’s only one reducer passed directly to <code>configureStore</code>, the data is directly accessible. See <a href=\"https://github.com/exemplar-codes/react-redux-demo/commit/d5ca4e7de8525e6a536506f6ff5f29e61acefc2e#diff-5541be143e3e2a0dcdfefeb9ca7c2ac4cb3eb7965e000bd10669f31f125755cf\">code</a>.</li>\n<li>All data passed to the action creator during dispatch is made available as <code>payload</code> in attribute of the action in the slice reducer.</li>\n<li>Every attribute <code>reducer</code> is singular at all places except during slice creation, where it’s plural.</li>\n<li>Store drilling w.r.t slice reducer name is there only when consuming store data, not in the slice’s <code>reducers</code>.</li>\n<li>Slices are kept in different files, and only the slice’s action creators object and reducer are exported, since they’re needed during dispatch and store creation, respectively.</li>\n</ol>\n<ul>\n<li>See <a href=\"https://github.com/exemplar-codes/react-redux-demo/commit/1546db08861125733265e11773d1909acf3fc30c\">code</a> for this whole page.</li>\n<li>RTK with class based components is also <a href=\"./237_Redux_with_React_for_class_components.html\">easy</a>, because all needed functions <code>connect</code>, <em>mapStateToProps</em> and <em>mapDispatchToProps</em> are all still part of <code>react-redux</code> package. See <a href=\"https://github.com/exemplar-codes/react-redux-demo/commit/7c8c403f547abeaf542ff73cb052e1dd46db04a2\">code</a>.</li>\n</ul>\n<h3 id=\"questions\">Questions <a class=\"heading-anchor-permalink\" href=\"#questions\">#</a></h3>\n<ol>\n<li>Can a reducer in a slice access values from another slice? No, each reducer can access only slice in it’s data. If two slices wish to use each other’s data, they should be combined into a single slice OR one can do some acrobatics to get reducers to share data.</li>\n<li>Can two slices have data with the same name? Yes, there’s no scope of collision as reducers are confined to their own slices. This may cause confusion amongst developers of the project, though. See <a href=\"https://github.com/exemplar-codes/react-redux-demo/commit/8d2ef9f3838979384acec94cb51cf64bfcaff0ca\">code</a>.</li>\n</ol>\n<p>FIXME:</p>\n<ul>\n<li>mention that <code>createStore</code>, <code>createSlice</code>, <code>reducer</code> (with getState), <code>createAsyncThunk</code>, <code>createSelector</code> are the important things. Everything else is an add on.</li>\n<li>RTK is good enough to be used. Redux (vanilla) can be ignored.</li>\n<li>Side-effects though discouraged, can still be called form async thunks.</li>\n<li>Mentions the few <a href=\"https://github.com/sanjar-notes/react/issues/33\">issues</a> with RTK</li>\n</ul>\n",
      "id": 74
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/19_Advanced_Redux_INCOMPLETE/250_Module_Introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/19_Advanced_Redux_INCOMPLETE/250_Module_Introduction.html",
      "content": "# 251. Module Introduction\nCreated Sunday 31 July 2022\n\nThis module talks about:\n1. Handling async tasks with Redux\n2. Organizing Redux code.\n3. Explore the Redux Dev Tools.",
      "html": "<h1 id=\"251.-module-introduction\">251. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#251.-module-introduction\">#</a></h1>\n<p>Created Sunday 31 July 2022</p>\n<p>This module talks about:</p>\n<ol>\n<li>Handling async tasks with Redux</li>\n<li>Organizing Redux code.</li>\n<li>Explore the Redux Dev Tools.</li>\n</ol>\n",
      "id": 75
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/19_Advanced_Redux_INCOMPLETE/251_Redux_and_side_effects.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/19_Advanced_Redux_INCOMPLETE/251_Redux_and_side_effects.html",
      "content": "# 251. Redux and side-effects\nCreated Friday 19 August 2022\n\n### Situation\nAn app certainly has asynchronous and side-effect code. Redux, on the other hand, has a core principle regarding _reducers_ - Reducers must be pure, side-effect free and synchronous functions.\n\nFIXME - why should reducers be pure in Redux? Maybe to allow for time travel debugging.\n\nThis, of course, does not mean that we cannot work with Redux in code involving non-pure operations. It's just that _reducers_ constrained to be pure. So there are two ways to work with Redux with non-pure code:\n1. Run dispatch as needed, inside non-pure code too. Absolutely OK. Code, if used often, is somewhat \"all over the place\".\n2. Create an \"action creator\", which can be an impure function but returns an action object which can be used for dispatch. This \"hack\" is called a \"thunk action creator\" in the Redux community. Redux has provisions for making thunk action creators and provides the function with necessary Redux functions like `dispatch`, `getState`, by using `redux-thunk` middleware package.\n\n### Action Creator architecture\nAction creator, in it's simplest form, is something like this:\n```js\nfunction MyActionCreator(payload) {\n\treturn { type: 'MY_STRING', payload };\n}\n```\nThis is fine for avoiding extra string code, and is used.\n\nBut the popular definition of \"action-creator\" is not that of a function that *merely* \"returns an action\". So what is it then? Let's see.\n\nAn action creator that has side-effects but everything is synchronous, will look like so:\n```js\nimport store from './path';\n\nfunction MyActionCreator(payload, config) {\n\tdoSomething...;\n\t\t\n\tstore.dispatch(...);\n\t...\n\tstore.dispatch(...);\n\t...\n\tstore.getState();\n\n\treturn {type: 'MY_STRING', payload};\n}\n```\nThis is fine.\n\nBut what about an action creator that must run async operations.\nLet's try:\n```js\nimport store from './path';\n\nfunction MyActionCreator(dispatch, getState, payload) {\n\n\t(async function() {\n\t\tawait doSomething...;\n\t\t\t\n\t\tstore.dispatch(...);\n\t\t...\n\t\tstore.dispatch(...);\n\t\t...\n\t\tstore.getState();\n\t})();\n\t\n\treturn {type: 'MY_STRING', payload};\n}\n```\nWould this work? No. We will return before the computation of the async function ends. Observed carefully, it is impossible in JS to return a value from a function after doing async ops. At best, you can return a promise with a return value.\n\nNow, the action creator was an async function itself (i.e. it returned a promise with the action value), we would need to change the Redux API to something like so:\n```js\nimport store from './path';\n\nmyActionCreator().then(action => store.dispatch(action));\n```\nBut this is the same as using store between async functions, which we can do already (the first option). This also makes action creators of two types - synchronous and asynchronous ones. This is resolved by the architecture Thunk architecture Redux uses.\n\n### Thunk architecture in Redux\nSo what's the architecture of thunks?\n- Redux solves the problem of two kinds of action creator (thunks) by mandating that all thunks be *synchronous* (but may run side-effects).\n- Instead of returning an action object, thunk creators return a callback function (the thunk) which either returns an action object or a promise that does.\n```js\n// Creating the thunk\nfunction myThunkCreator(payload) {\n\treturn () => {type: 'MY_STRING', payload};\n}\n\nfunction myAsyncThunkCreator(payload) {\n\treturn async () => { \n\t\t\t...; \n\t\t\t...; \n\t\t\treturn {type: 'MY_STRING', payload}\n\t\t};\n}\n\nimport store from '../path';\n// using the thunk - Note, we need to call(()) the thunk\nstore.dispatch(myThunkCreator());\nstore.dispatch(myAsyncThunkCreator());\n\n// BOTH have same structure - return a function (which can be async)\n```\nAdditionally, Redux provides `dispatch, getState` to thunks, so they may run multiple dispatches. All in all, the thunk syntax is:\n```js\nfunction myThunkCreator(thunkArg) {\n\treturn [async] function ({dispatch, getState}) {\n\t\t\t\n\t\t}\n}\n```\n\nFIXME: this is incomplete, and has errors.",
      "html": "<h1 id=\"251.-redux-and-side-effects\">251. Redux and side-effects <a class=\"heading-anchor-permalink\" href=\"#251.-redux-and-side-effects\">#</a></h1>\n<p>Created Friday 19 August 2022</p>\n<h3 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h3>\n<p>An app certainly has asynchronous and side-effect code. Redux, on the other hand, has a core principle regarding <em>reducers</em> - Reducers must be pure, side-effect free and synchronous functions.</p>\n<p>FIXME - why should reducers be pure in Redux? Maybe to allow for time travel debugging.</p>\n<p>This, of course, does not mean that we cannot work with Redux in code involving non-pure operations. It’s just that <em>reducers</em> constrained to be pure. So there are two ways to work with Redux with non-pure code:</p>\n<ol>\n<li>Run dispatch as needed, inside non-pure code too. Absolutely OK. Code, if used often, is somewhat “all over the place”.</li>\n<li>Create an “action creator”, which can be an impure function but returns an action object which can be used for dispatch. This “hack” is called a “thunk action creator” in the Redux community. Redux has provisions for making thunk action creators and provides the function with necessary Redux functions like <code>dispatch</code>, <code>getState</code>, by using <code>redux-thunk</code> middleware package.</li>\n</ol>\n<h3 id=\"action-creator-architecture\">Action Creator architecture <a class=\"heading-anchor-permalink\" href=\"#action-creator-architecture\">#</a></h3>\n<p>Action creator, in it’s simplest form, is something like this:</p>\n<pre><code class=\"language-js\">function MyActionCreator(payload) {\n\treturn { type: 'MY_STRING', payload };\n}\n</code></pre>\n<p>This is fine for avoiding extra string code, and is used.</p>\n<p>But the popular definition of “action-creator” is not that of a function that <em>merely</em> “returns an action”. So what is it then? Let’s see.</p>\n<p>An action creator that has side-effects but everything is synchronous, will look like so:</p>\n<pre><code class=\"language-js\">import store from './path';\n\nfunction MyActionCreator(payload, config) {\n\tdoSomething...;\n\t\t\n\tstore.dispatch(...);\n\t...\n\tstore.dispatch(...);\n\t...\n\tstore.getState();\n\n\treturn {type: 'MY_STRING', payload};\n}\n</code></pre>\n<p>This is fine.</p>\n<p>But what about an action creator that must run async operations.\nLet’s try:</p>\n<pre><code class=\"language-js\">import store from './path';\n\nfunction MyActionCreator(dispatch, getState, payload) {\n\n\t(async function() {\n\t\tawait doSomething...;\n\t\t\t\n\t\tstore.dispatch(...);\n\t\t...\n\t\tstore.dispatch(...);\n\t\t...\n\t\tstore.getState();\n\t})();\n\t\n\treturn {type: 'MY_STRING', payload};\n}\n</code></pre>\n<p>Would this work? No. We will return before the computation of the async function ends. Observed carefully, it is impossible in JS to return a value from a function after doing async ops. At best, you can return a promise with a return value.</p>\n<p>Now, the action creator was an async function itself (i.e. it returned a promise with the action value), we would need to change the Redux API to something like so:</p>\n<pre><code class=\"language-js\">import store from './path';\n\nmyActionCreator().then(action =&gt; store.dispatch(action));\n</code></pre>\n<p>But this is the same as using store between async functions, which we can do already (the first option). This also makes action creators of two types - synchronous and asynchronous ones. This is resolved by the architecture Thunk architecture Redux uses.</p>\n<h3 id=\"thunk-architecture-in-redux\">Thunk architecture in Redux <a class=\"heading-anchor-permalink\" href=\"#thunk-architecture-in-redux\">#</a></h3>\n<p>So what’s the architecture of thunks?</p>\n<ul>\n<li>Redux solves the problem of two kinds of action creator (thunks) by mandating that all thunks be <em>synchronous</em> (but may run side-effects).</li>\n<li>Instead of returning an action object, thunk creators return a callback function (the thunk) which either returns an action object or a promise that does.</li>\n</ul>\n<pre><code class=\"language-js\">// Creating the thunk\nfunction myThunkCreator(payload) {\n\treturn () =&gt; {type: 'MY_STRING', payload};\n}\n\nfunction myAsyncThunkCreator(payload) {\n\treturn async () =&gt; { \n\t\t\t...; \n\t\t\t...; \n\t\t\treturn {type: 'MY_STRING', payload}\n\t\t};\n}\n\nimport store from '../path';\n// using the thunk - Note, we need to call(()) the thunk\nstore.dispatch(myThunkCreator());\nstore.dispatch(myAsyncThunkCreator());\n\n// BOTH have same structure - return a function (which can be async)\n</code></pre>\n<p>Additionally, Redux provides <code>dispatch, getState</code> to thunks, so they may run multiple dispatches. All in all, the thunk syntax is:</p>\n<pre><code class=\"language-js\">function myThunkCreator(thunkArg) {\n\treturn [async] function ({dispatch, getState}) {\n\t\t\t\n\t\t}\n}\n</code></pre>\n<p>FIXME: this is incomplete, and has errors.</p>\n",
      "id": 76
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/266_Module_Introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/266_Module_Introduction.html",
      "content": "# 266. Module Introduction\nCreated Saturday 27 August 2022\n\n- All projects I've made until now changes views but the URL always stays the same.\n- Not having a URL is a big disadvantage. Having URLs lets the user share a link to specific parts of our application, which is a great feature of the web, in general.\n\n- Now, we are building SPAs (single-page-application), meaning the page never refreshes. How do we implement URLs into an SPA?\n- Well, we do something called client-side-routing. Meaning our SPA shell's JavaScript is such that it detects the current URL and switches to the appropriate view. Also, it can change the view and the URL based on user action (like clicking a button). This _simulates_ the behavior that URL and view are related, as if a server is involved for page load (it isn't in reality).\n- So, client-side-routing is actually an \"illusion\" of URL and corresponding view changes.\n\n- We'll use a library called \"React Router\" that helps us declaratively configure routing for a React SPA.\n  \n  In this module, we'll study about:\n  1. Client Side Routing\n  2. React-Router package",
      "html": "<h1 id=\"266.-module-introduction\">266. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#266.-module-introduction\">#</a></h1>\n<p>Created Saturday 27 August 2022</p>\n<ul>\n<li>\n<p>All projects I’ve made until now changes views but the URL always stays the same.</p>\n</li>\n<li>\n<p>Not having a URL is a big disadvantage. Having URLs lets the user share a link to specific parts of our application, which is a great feature of the web, in general.</p>\n</li>\n<li>\n<p>Now, we are building SPAs (single-page-application), meaning the page never refreshes. How do we implement URLs into an SPA?</p>\n</li>\n<li>\n<p>Well, we do something called client-side-routing. Meaning our SPA shell’s JavaScript is such that it detects the current URL and switches to the appropriate view. Also, it can change the view and the URL based on user action (like clicking a button). This <em>simulates</em> the behavior that URL and view are related, as if a server is involved for page load (it isn’t in reality).</p>\n</li>\n<li>\n<p>So, client-side-routing is actually an “illusion” of URL and corresponding view changes.</p>\n</li>\n<li>\n<p>We’ll use a library called “React Router” that helps us declaratively configure routing for a React SPA.</p>\n<p>In this module, we’ll study about:</p>\n<ol>\n<li>Client Side Routing</li>\n<li>React-Router package</li>\n</ol>\n</li>\n</ul>\n",
      "id": 77
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/267_What_is_Routing_and_Why.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/267_What_is_Routing_and_Why.html",
      "content": "# 267. What is Routing and Why\nCreated Saturday 27 August 2022\n\n#### What is routing?\nAll projects made so far have the same URL for all their views (view states).\nSharing a URL to a certain view is not possible. This is bad because it increases manual work for the user.\n\nWhat do we want - we want to have a set of URLs and their corresponding views, which remain in sync when the URL changes (either through the address bar by the user or programmatically by us).\n![](../../../../assets/267_What_is_Routing_and_Why-image-1-8a17c415.png)\n\n#### Why Client-Side Routing?\nThe needed flow, as mentioned above, is the default in a traditional multi-page application - where each URL has a corresponding HTML page, which is loaded when the URL changes. But this has the disadvantage of browser \"reload\" UX, which is the reason we're building an SPA in the first place.\n![](../../../../assets/267_What_is_Routing_and_Why-image-2-8a17c415.png)\n\n#### What we want\nWe want to add routing code to our SPA shell, so that it overrides the browser default (of loading a new page on URL change), and instead change the DOM to match the view when the URL changes.\n\nIn simple terms, we watch for the URL change or back/forward button events.\n\nWe do this via a library called React-Router.\n![](../../../../assets/267_What_is_Routing_and_Why-image-3-8a17c415.png)\n",
      "html": "<h1 id=\"267.-what-is-routing-and-why\">267. What is Routing and Why <a class=\"heading-anchor-permalink\" href=\"#267.-what-is-routing-and-why\">#</a></h1>\n<p>Created Saturday 27 August 2022</p>\n<h4 id=\"what-is-routing%3F\">What is routing? <a class=\"heading-anchor-permalink\" href=\"#what-is-routing%3F\">#</a></h4>\n<p>All projects made so far have the same URL for all their views (view states).\nSharing a URL to a certain view is not possible. This is bad because it increases manual work for the user.</p>\n<p>What do we want - we want to have a set of URLs and their corresponding views, which remain in sync when the URL changes (either through the address bar by the user or programmatically by us).\n<img src=\"../../../../assets/267_What_is_Routing_and_Why-image-1-8a17c415.png\" alt=\"\"></p>\n<h4 id=\"why-client-side-routing%3F\">Why Client-Side Routing? <a class=\"heading-anchor-permalink\" href=\"#why-client-side-routing%3F\">#</a></h4>\n<p>The needed flow, as mentioned above, is the default in a traditional multi-page application - where each URL has a corresponding HTML page, which is loaded when the URL changes. But this has the disadvantage of browser “reload” UX, which is the reason we’re building an SPA in the first place.\n<img src=\"../../../../assets/267_What_is_Routing_and_Why-image-2-8a17c415.png\" alt=\"\"></p>\n<h4 id=\"what-we-want\">What we want <a class=\"heading-anchor-permalink\" href=\"#what-we-want\">#</a></h4>\n<p>We want to add routing code to our SPA shell, so that it overrides the browser default (of loading a new page on URL change), and instead change the DOM to match the view when the URL changes.</p>\n<p>In simple terms, we watch for the URL change or back/forward button events.</p>\n<p>We do this via a library called React-Router.\n<img src=\"../../../../assets/267_What_is_Routing_and_Why-image-3-8a17c415.png\" alt=\"\"></p>\n",
      "id": 78
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/268_Installing_React_Router.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/268_Installing_React_Router.html",
      "content": "# 268. Installing React Router\nCreated Saturday 27 August 2022\n\n- React-Router is used to implement client side routing in React apps.\n- As of now, there are two main versions: v5 and v6 (latest). v5 is more popular and we'll start with it. We'll also learnt about than migrating to v6, which won't be very different from v5.\n\n[Learning project - React Router Demo](https://github.com/exemplar-codes/react-router-demo)\n\nTo use React Router v5, install the `react-router-dom` NPM package (yes `dom` is needed for web apps). We'll install v5:\n```bash\nnpm install react-router-dom@5\n```",
      "html": "<h1 id=\"268.-installing-react-router\">268. Installing React Router <a class=\"heading-anchor-permalink\" href=\"#268.-installing-react-router\">#</a></h1>\n<p>Created Saturday 27 August 2022</p>\n<ul>\n<li>React-Router is used to implement client side routing in React apps.</li>\n<li>As of now, there are two main versions: v5 and v6 (latest). v5 is more popular and we’ll start with it. We’ll also learnt about than migrating to v6, which won’t be very different from v5.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/react-router-demo\">Learning project - React Router Demo</a></p>\n<p>To use React Router v5, install the <code>react-router-dom</code> NPM package (yes <code>dom</code> is needed for web apps). We’ll install v5:</p>\n<pre><code class=\"language-bash\">npm install react-router-dom@5\n</code></pre>\n",
      "id": 79
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/269_Defining_and_using_Routes.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/269_Defining_and_using_Routes.html",
      "content": "# 269. Defining and using Routes\nCreated Saturday 27 August 2022\n\nThe most basic way to have client side routing is to use `Route` to conditionally render components based on the current URL. The process is simple:\n1. Nest the component you wish to render conditionally (i.e. based on current URL), inside the `Route` component provided by React Router.\n2. Then, *effectively* nest all the `Route`s by `BrowserRouter`. This is usually done once at the root component of the app. This is needed for the `Route` and other router specific stuff to work.\n\nExample:\n```jsx\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path=\"/welcome\">\n        <h1>Welcome</h1>\n      </Route>\n      <Route path=\"/products\">\n        <h1>Products</h1>\n      </Route>\n    </BrowserRouter>\n  );\n}\n```\nSee [code](https://github.com/exemplar-codes/react-router-demo/commit/c32a78bf71ea31c68e60e4c06d5b1888d75674f3).\n\nNote:\n- `Route` is not case sensitive by default. To make it case sensitive, use the `sensitive` boolean prop.\n- `Route.path` always needs the prefix `/`.",
      "html": "<h1 id=\"269.-defining-and-using-routes\">269. Defining and using Routes <a class=\"heading-anchor-permalink\" href=\"#269.-defining-and-using-routes\">#</a></h1>\n<p>Created Saturday 27 August 2022</p>\n<p>The most basic way to have client side routing is to use <code>Route</code> to conditionally render components based on the current URL. The process is simple:</p>\n<ol>\n<li>Nest the component you wish to render conditionally (i.e. based on current URL), inside the <code>Route</code> component provided by React Router.</li>\n<li>Then, <em>effectively</em> nest all the <code>Route</code>s by <code>BrowserRouter</code>. This is usually done once at the root component of the app. This is needed for the <code>Route</code> and other router specific stuff to work.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-jsx\">function App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Route path=&quot;/welcome&quot;&gt;\n        &lt;h1&gt;Welcome&lt;/h1&gt;\n      &lt;/Route&gt;\n      &lt;Route path=&quot;/products&quot;&gt;\n        &lt;h1&gt;Products&lt;/h1&gt;\n      &lt;/Route&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre>\n<p>See <a href=\"https://github.com/exemplar-codes/react-router-demo/commit/c32a78bf71ea31c68e60e4c06d5b1888d75674f3\">code</a>.</p>\n<p>Note:</p>\n<ul>\n<li><code>Route</code> is not case sensitive by default. To make it case sensitive, use the <code>sensitive</code> boolean prop.</li>\n<li><code>Route.path</code> always needs the prefix <code>/</code>.</li>\n</ul>\n",
      "id": 80
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/270_Working_with_Links.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/270_Working_with_Links.html",
      "content": "# 270. Working with Links\nCreated Sunday 28 August 2022\n\n### Situation\n- We used `Route` to conditionally render components based on a URL. But what about hyperlinks, what happens when we click one? \n- Does it override browser default of making a request and change the URL? Well, no[(see code)](https://github.com/exemplar-codes/react-router-demo/commit/a2c7b4830dcd4126fbcd4dc98046605c7bae00a4). The `a` tag is impervious to effects from the React Router, this is by design because even in an SPA, we may have links to external resources. So `a` tags do cause a page reload (which we wish to avoid for in-app links).\n\n### Solution\nInstead of `a` tags, use the `Link` component provided React Router,  for internal links (i.e. within the app). The `Link` component, on click:\n1. Changes the URL\n2. Prevents requests, and page reload on URL change\n3. Re-renders the app, so that `Route`s are evaluated according to the new URL.\n   \n- Syntax - takes in a `to` prop of type string\n\t```jsx\n\t<a href=\"/welcome\">Welcome</a>; // will reload page.\n\t\n\t<Link to=\"/welcome\">Welcome</Link>; // will do client side routing\n\t```\n\nNote: `Link`s, like `Route`s, don't work outside `BrowserRouter`. This is not usually a concern because `BrowserRouter` nests the root component.\n\n### About Link\n- Visually, both `a` and `Link` behave in the same way.\n- Internally, `Link` tag is a specialized `a` tag.",
      "html": "<h1 id=\"270.-working-with-links\">270. Working with Links <a class=\"heading-anchor-permalink\" href=\"#270.-working-with-links\">#</a></h1>\n<p>Created Sunday 28 August 2022</p>\n<h3 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h3>\n<ul>\n<li>We used <code>Route</code> to conditionally render components based on a URL. But what about hyperlinks, what happens when we click one?</li>\n<li>Does it override browser default of making a request and change the URL? Well, no<a href=\"https://github.com/exemplar-codes/react-router-demo/commit/a2c7b4830dcd4126fbcd4dc98046605c7bae00a4\">(see code)</a>. The <code>a</code> tag is impervious to effects from the React Router, this is by design because even in an SPA, we may have links to external resources. So <code>a</code> tags do cause a page reload (which we wish to avoid for in-app links).</li>\n</ul>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<p>Instead of <code>a</code> tags, use the <code>Link</code> component provided React Router,  for internal links (i.e. within the app). The <code>Link</code> component, on click:</p>\n<ol>\n<li>Changes the URL</li>\n<li>Prevents requests, and page reload on URL change</li>\n<li>Re-renders the app, so that <code>Route</code>s are evaluated according to the new URL.</li>\n</ol>\n<ul>\n<li>Syntax - takes in a <code>to</code> prop of type string<pre><code class=\"language-jsx\">&lt;a href=&quot;/welcome&quot;&gt;Welcome&lt;/a&gt;; // will reload page.\n\n&lt;Link to=&quot;/welcome&quot;&gt;Welcome&lt;/Link&gt;; // will do client side routing\n</code></pre>\n</li>\n</ul>\n<p>Note: <code>Link</code>s, like <code>Route</code>s, don’t work outside <code>BrowserRouter</code>. This is not usually a concern because <code>BrowserRouter</code> nests the root component.</p>\n<h3 id=\"about-link\">About Link <a class=\"heading-anchor-permalink\" href=\"#about-link\">#</a></h3>\n<ul>\n<li>Visually, both <code>a</code> and <code>Link</code> behave in the same way.</li>\n<li>Internally, <code>Link</code> tag is a specialized <code>a</code> tag.</li>\n</ul>\n",
      "id": 81
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/271_Using_NavLinks.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/271_Using_NavLinks.html",
      "content": "# 271. Using NavLinks\nCreated Sunday 28 August 2022\n\n### Why\nConsider this [code](https://github.com/exemplar-codes/react-router-demo/commit/28ac9b51da8d683876eca2e41d0a6bd2ef826621). There's an important feature that's missing - we should be able to somehow highlight on what page we are (by highlighting the link). This, if done, normally, will take some custom code, i.e. something like `className={window.location.pathname === '.../path' ? {styles_for_navLink}: {}}`.\n\nReact Router provides a functionality to *add* CSS classes to `Link`s based on the current URL. Instead of `Link` (which is agnostic to current URL), use `NavLink`, which accepts a class as prop that gets applied conditionally based on current URL.\n\n### How\nSyntax:\n```jsx\n{// 1. Simple class\n<NavLink activeClassName='myActiveClass' to=\"/welcome\">Welcome<NavLink>\n\n{// 2. CSS modules\nimport classes from './MyComponent.module.css';\n\n<NavLink activeClassName={classes.myActiveClass} to=\"/welcome\">Welcome<NavLink>;\n\n{// 3. If activeClassName prop is omitted\n<NavLink to=\"/welcome\">Welcome</NavLink>;\n \n{/* added class name will only be present if current URL matches 'to' prop value */}\n```\nwill render as:\n```html\n<a href=\"/welcome\" class=\"myActiveClass\">... <!-- URL === '/welcome', prop used - string or CSS module - #1, #2 --> \n\n<a href=\"/welcome\" class=\"active\">... <!-- URL === '/welcome', prop not used, #3 -->\n\n<a href=\"/welcome\" >... <!-- URL !== '/welcome', no class by Router -->\n```\nNote:\n1. If `activeClassName` prop is omitted, 'active' is added as class, otherwise prop value is added as class, assuming URL match.\n2. If current URL does not match, no classes are added by React Router.\n\n\n### What\n`NavLink` behaves just like `Link` except conditional classes based on current URL.\n\nSee [code example](https://github.com/exemplar-codes/react-router-demo/commit/4cbb0b0fad4bab9c6451b254b15fd81ec953b490).",
      "html": "<h1 id=\"271.-using-navlinks\">271. Using NavLinks <a class=\"heading-anchor-permalink\" href=\"#271.-using-navlinks\">#</a></h1>\n<p>Created Sunday 28 August 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Consider this <a href=\"https://github.com/exemplar-codes/react-router-demo/commit/28ac9b51da8d683876eca2e41d0a6bd2ef826621\">code</a>. There’s an important feature that’s missing - we should be able to somehow highlight on what page we are (by highlighting the link). This, if done, normally, will take some custom code, i.e. something like <code>className={window.location.pathname === '.../path' ? {styles_for_navLink}: {}}</code>.</p>\n<p>React Router provides a functionality to <em>add</em> CSS classes to <code>Link</code>s based on the current URL. Instead of <code>Link</code> (which is agnostic to current URL), use <code>NavLink</code>, which accepts a class as prop that gets applied conditionally based on current URL.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>Syntax:</p>\n<pre><code class=\"language-jsx\">{// 1. Simple class\n&lt;NavLink activeClassName='myActiveClass' to=&quot;/welcome&quot;&gt;Welcome&lt;NavLink&gt;\n\n{// 2. CSS modules\nimport classes from './MyComponent.module.css';\n\n&lt;NavLink activeClassName={classes.myActiveClass} to=&quot;/welcome&quot;&gt;Welcome&lt;NavLink&gt;;\n\n{// 3. If activeClassName prop is omitted\n&lt;NavLink to=&quot;/welcome&quot;&gt;Welcome&lt;/NavLink&gt;;\n \n{/* added class name will only be present if current URL matches 'to' prop value */}\n</code></pre>\n<p>will render as:</p>\n<pre><code class=\"language-html\">&lt;a href=&quot;/welcome&quot; class=&quot;myActiveClass&quot;&gt;... &lt;!-- URL === '/welcome', prop used - string or CSS module - #1, #2 --&gt; \n\n&lt;a href=&quot;/welcome&quot; class=&quot;active&quot;&gt;... &lt;!-- URL === '/welcome', prop not used, #3 --&gt;\n\n&lt;a href=&quot;/welcome&quot; &gt;... &lt;!-- URL !== '/welcome', no class by Router --&gt;\n</code></pre>\n<p>Note:</p>\n<ol>\n<li>If <code>activeClassName</code> prop is omitted, ‘active’ is added as class, otherwise prop value is added as class, assuming URL match.</li>\n<li>If current URL does not match, no classes are added by React Router.</li>\n</ol>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p><code>NavLink</code> behaves just like <code>Link</code> except conditional classes based on current URL.</p>\n<p>See <a href=\"https://github.com/exemplar-codes/react-router-demo/commit/4cbb0b0fad4bab9c6451b254b15fd81ec953b490\">code example</a>.</p>\n",
      "id": 82
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/274_1_exact_and_v5_matching_criteria.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/274_1_exact_and_v5_matching_criteria.html",
      "content": "# 274.1. exact and v5 matching criteria\nCreated Saturday 24 September 2022\n\n## v5 matching criteria\nReact Router v5 matching criteria is not very intuitive (i.e. it does not respect specificity). But it is simple:\n```js\nconst matchingCriteria = () => url.startsWith(route); \n\n// kind of\n// it's actually - \"ancestor list prefix, equals\"\n```\n\n## Situation\nThe matching criteria leads to an issue. Consider the following code:\n```jsx\nfunction App() {\n  return (\n    <>\n      <Route path=\"/alice\">\n        <h1>Alice rendered</h1>\n      </Route>\n      <Route path=\"/alice/bob\">\n        <h1>Alice/Bob rendered</h1>\n      </Route>\n    </>\n  );\n}\n```\nThere are two cases. If the URL:\n1. Is `/alice`, the first one matches, as it should. OK.\n2. Is `/alice/bob`, the second one matches, as it should. But, the first one matches too, and so both get rendered.\n  \nWe want to avoid this behavior, i.e. avoid the 2nd case.\n\n## exact\n`Route` has a boolean prop named `exact` which is used to solve this problem. Using the prop will render only if there's an \"exact\" match.\n\nSo, the code can be corrected to:\n```jsx\nfunction App() {\n  return (\n    <>\n      <Route path=\"/alice\" exact> <!-- render only on exact match -->\n        <h1>Alice rendered</h1>\n      </Route>\n      <Route path=\"/alice/bob\">\n        <h1>Alice/Bob rendered</h1>\n      </Route>\n    </>\n  );\n}\n```\n\n## How\nThe `exact` prop is internally part of the criteria. After introduction of `Route.exact`, the criteria can be thought of as:\n```js\nconst matchingCriteria = (exact) => exact ? url === route : url.startsWith(route); \n```\n\n## Notes\nThis matching criteria issue can happen with all parts of React Router, e.g.`NavLink`'s activation. And so it supports the `exact` prop.",
      "html": "<h1 id=\"274.1.-exact-and-v5-matching-criteria\">274.1. exact and v5 matching criteria <a class=\"heading-anchor-permalink\" href=\"#274.1.-exact-and-v5-matching-criteria\">#</a></h1>\n<p>Created Saturday 24 September 2022</p>\n<h2 id=\"v5-matching-criteria\">v5 matching criteria <a class=\"heading-anchor-permalink\" href=\"#v5-matching-criteria\">#</a></h2>\n<p>React Router v5 matching criteria is not very intuitive (i.e. it does not respect specificity). But it is simple:</p>\n<pre><code class=\"language-js\">const matchingCriteria = () =&gt; url.startsWith(route); \n\n// kind of\n// it's actually - &quot;ancestor list prefix, equals&quot;\n</code></pre>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>The matching criteria leads to an issue. Consider the following code:</p>\n<pre><code class=\"language-jsx\">function App() {\n  return (\n    &lt;&gt;\n      &lt;Route path=&quot;/alice&quot;&gt;\n        &lt;h1&gt;Alice rendered&lt;/h1&gt;\n      &lt;/Route&gt;\n      &lt;Route path=&quot;/alice/bob&quot;&gt;\n        &lt;h1&gt;Alice/Bob rendered&lt;/h1&gt;\n      &lt;/Route&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<p>There are two cases. If the URL:</p>\n<ol>\n<li>Is <code>/alice</code>, the first one matches, as it should. OK.</li>\n<li>Is <code>/alice/bob</code>, the second one matches, as it should. But, the first one matches too, and so both get rendered.</li>\n</ol>\n<p>We want to avoid this behavior, i.e. avoid the 2nd case.</p>\n<h2 id=\"exact\">exact <a class=\"heading-anchor-permalink\" href=\"#exact\">#</a></h2>\n<p><code>Route</code> has a boolean prop named <code>exact</code> which is used to solve this problem. Using the prop will render only if there’s an “exact” match.</p>\n<p>So, the code can be corrected to:</p>\n<pre><code class=\"language-jsx\">function App() {\n  return (\n    &lt;&gt;\n      &lt;Route path=&quot;/alice&quot; exact&gt; &lt;!-- render only on exact match --&gt;\n        &lt;h1&gt;Alice rendered&lt;/h1&gt;\n      &lt;/Route&gt;\n      &lt;Route path=&quot;/alice/bob&quot;&gt;\n        &lt;h1&gt;Alice/Bob rendered&lt;/h1&gt;\n      &lt;/Route&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>The <code>exact</code> prop is internally part of the criteria. After introduction of <code>Route.exact</code>, the criteria can be thought of as:</p>\n<pre><code class=\"language-js\">const matchingCriteria = (exact) =&gt; exact ? url === route : url.startsWith(route); \n</code></pre>\n<h2 id=\"notes\">Notes <a class=\"heading-anchor-permalink\" href=\"#notes\">#</a></h2>\n<p>This matching criteria issue can happen with all parts of React Router, e.g.<code>NavLink</code>'s activation. And so it supports the <code>exact</code> prop.</p>\n",
      "id": 83
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/274_2_Switch.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/274_2_Switch.html",
      "content": "# 274.2. Switch\nCreated Saturday 24 September 2022\n\n## Why\nI don't know. I guess, this is a way to have specificity.\n\nConsider the following code (assume we don't wish to refactor):\n```jsx\nfunction App() {\n  return (\n    <>\n\t  {someCondition && (\n        <Route path=\"/alice\">\n          <h1>Alice rendered someCondition</h1>\n          <>...</>\n        </Route>\n      )}\n      \n      <Route path=\"/alice\">\n        <h1>Alice rendered</h1>\n      </Route>\n    </>\n  );\n}\n```\n\nTwo cases:\n1. If the `someCondition` is false, only the second one will render. OK.\n2. If it's true, both will render. We don't want this to happen, i.e. we wish to render only first one.\n\n### How\nWe need a construct that renders only the first matching `Route`.\n\nTechnically, we can iterate over the nodes using `for` a loop, `break` on route match. Or something similar.\n\n## What\nReact Router v5 provides the `Switch` component which does exactly this.\nExample - using code from above:\n```jsx\nimport { Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Switch>\n      {someCondition && (\n        <Route path=\"/alice\">\n          <h1>Alice rendered someCondition</h1>\n          <>...</>\n        </Route>\n      )}\n\n      <Route path=\"/alice\">\n        <h1>Alice rendered</h1>\n      </Route>\n    </Switch>\n  );\n}\n```\nThis will select only the first matching child.\n\nNote: Use only `Route` as children of `Switch`. Using general react nodes can cause confusion as they match with `/`.",
      "html": "<h1 id=\"274.2.-switch\">274.2. Switch <a class=\"heading-anchor-permalink\" href=\"#274.2.-switch\">#</a></h1>\n<p>Created Saturday 24 September 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>I don’t know. I guess, this is a way to have specificity.</p>\n<p>Consider the following code (assume we don’t wish to refactor):</p>\n<pre><code class=\"language-jsx\">function App() {\n  return (\n    &lt;&gt;\n\t  {someCondition &amp;&amp; (\n        &lt;Route path=&quot;/alice&quot;&gt;\n          &lt;h1&gt;Alice rendered someCondition&lt;/h1&gt;\n          &lt;&gt;...&lt;/&gt;\n        &lt;/Route&gt;\n      )}\n      \n      &lt;Route path=&quot;/alice&quot;&gt;\n        &lt;h1&gt;Alice rendered&lt;/h1&gt;\n      &lt;/Route&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<p>Two cases:</p>\n<ol>\n<li>If the <code>someCondition</code> is false, only the second one will render. OK.</li>\n<li>If it’s true, both will render. We don’t want this to happen, i.e. we wish to render only first one.</li>\n</ol>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>We need a construct that renders only the first matching <code>Route</code>.</p>\n<p>Technically, we can iterate over the nodes using <code>for</code> a loop, <code>break</code> on route match. Or something similar.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>React Router v5 provides the <code>Switch</code> component which does exactly this.\nExample - using code from above:</p>\n<pre><code class=\"language-jsx\">import { Switch } from &quot;react-router-dom&quot;;\n\nfunction App() {\n  return (\n    &lt;Switch&gt;\n      {someCondition &amp;&amp; (\n        &lt;Route path=&quot;/alice&quot;&gt;\n          &lt;h1&gt;Alice rendered someCondition&lt;/h1&gt;\n          &lt;&gt;...&lt;/&gt;\n        &lt;/Route&gt;\n      )}\n\n      &lt;Route path=&quot;/alice&quot;&gt;\n        &lt;h1&gt;Alice rendered&lt;/h1&gt;\n      &lt;/Route&gt;\n    &lt;/Switch&gt;\n  );\n}\n</code></pre>\n<p>This will select only the first matching child.</p>\n<p>Note: Use only <code>Route</code> as children of <code>Switch</code>. Using general react nodes can cause confusion as they match with <code>/</code>.</p>\n",
      "id": 84
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/275_Nested_routes.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/275_Nested_routes.html",
      "content": "# 275. Nested routes\nCreated Sunday 25 September 2022\n\n- This is much simpler than it sounds.\n- React Router can handle nested routes (e.g. `/welcome/get-started`) too.\n\n- To do so, just set the `Route.path` prop as the whole route, i.e. `/welcome/get-started`.\n\n## What\n1. `Route` components can be nested within one another. Example:\n\t```jsx\n\tfunction App() {\n\t\treturn (\n\t\t  <Route path=\"/alice\">\n\t\t\t<Route path=\"/alice/bob\" /> <!-- will be rendered on URL /alice/bob -->\n\t\t  </Route>\n\t  );\n\t}\n\t```\n\tAs of now, nested `Route`s are \"dumb\", i.e. they don't remember their ancestor. Example:\n\t```jsx\n\tfunction App() {\n\t\treturn (\n\t\t  <Route path=\"/alice\">\n\t\t\t<Route path=\"/bob\" /> <!-- won't work on URL: /alice/bob -->\n\t\t\t<!-- doesn't \"know\" who the parent is -->\n\t\t  </Route>\n\t  );\n\t}\n\t```\n\t**In short, the absolute `path` (i.e. URI from root) has to used at all places.**\n3. The nested `Route`s inside a `Route` *don't* have to be semantically nested. Example - this is OK:\n\t```jsx\n\tfunction App() {\n\t  return (\n\t\t  <Route path=\"/welcome\">\n\t\t\t<Route path=\"/products\" /> <!-- not semantically nested but allowed -->\n\t\t  </Route>\n\t  );\n\t}\n\t```\n4. If a `Route` doesn't match, none of it's children are rendered, even if they match. Example - consider the URL is `/products`:\n\t```jsx\n\tfunction App() {\n\t  return (\n\t\t  <Route path=\"/welcome\"> <!-- doesn't match -->\n\t\t\t<Route path=\"/products\" /> <!-- matches with URL, but not rendered, as parent does't match -->\n\t\t  </Route>\n\t  );\n\t}\n\t```",
      "html": "<h1 id=\"275.-nested-routes\">275. Nested routes <a class=\"heading-anchor-permalink\" href=\"#275.-nested-routes\">#</a></h1>\n<p>Created Sunday 25 September 2022</p>\n<ul>\n<li>\n<p>This is much simpler than it sounds.</p>\n</li>\n<li>\n<p>React Router can handle nested routes (e.g. <code>/welcome/get-started</code>) too.</p>\n</li>\n<li>\n<p>To do so, just set the <code>Route.path</code> prop as the whole route, i.e. <code>/welcome/get-started</code>.</p>\n</li>\n</ul>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<ol>\n<li><code>Route</code> components can be nested within one another. Example:<pre><code class=\"language-jsx\">function App() {\n\treturn (\n\t  &lt;Route path=&quot;/alice&quot;&gt;\n\t\t&lt;Route path=&quot;/alice/bob&quot; /&gt; &lt;!-- will be rendered on URL /alice/bob --&gt;\n\t  &lt;/Route&gt;\n  );\n}\n</code></pre>\nAs of now, nested <code>Route</code>s are “dumb”, i.e. they don’t remember their ancestor. Example:<pre><code class=\"language-jsx\">function App() {\n\treturn (\n\t  &lt;Route path=&quot;/alice&quot;&gt;\n\t\t&lt;Route path=&quot;/bob&quot; /&gt; &lt;!-- won't work on URL: /alice/bob --&gt;\n\t\t&lt;!-- doesn't &quot;know&quot; who the parent is --&gt;\n\t  &lt;/Route&gt;\n  );\n}\n</code></pre>\n<strong>In short, the absolute <code>path</code> (i.e. URI from root) has to used at all places.</strong></li>\n<li>The nested <code>Route</code>s inside a <code>Route</code> <em>don’t</em> have to be semantically nested. Example - this is OK:<pre><code class=\"language-jsx\">function App() {\n  return (\n\t  &lt;Route path=&quot;/welcome&quot;&gt;\n\t\t&lt;Route path=&quot;/products&quot; /&gt; &lt;!-- not semantically nested but allowed --&gt;\n\t  &lt;/Route&gt;\n  );\n}\n</code></pre>\n</li>\n<li>If a <code>Route</code> doesn’t match, none of it’s children are rendered, even if they match. Example - consider the URL is <code>/products</code>:<pre><code class=\"language-jsx\">function App() {\n  return (\n\t  &lt;Route path=&quot;/welcome&quot;&gt; &lt;!-- doesn't match --&gt;\n\t\t&lt;Route path=&quot;/products&quot; /&gt; &lt;!-- matches with URL, but not rendered, as parent does't match --&gt;\n\t  &lt;/Route&gt;\n  );\n}\n</code></pre>\n</li>\n</ol>\n",
      "id": 85
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/276_Redirecting_the_user.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/276_Redirecting_the_user.html",
      "content": "# 276. Redirecting_the_user\nCreated Sunday 25 September 2022\n\n## Situation\nWe want to redirect a user when they reach a certain URL.\n\n## Why\nJust needed.\n\n## How\n-\n\n## What\nUse the `Redirect` component of React Router.\n```jsx\nimport { Redirect, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <>\n      <Route path=\"/\" exact>\n        <Redirect to=\"/login\"/>\n      </Route>\n      \n\t  <Route path=\"/login\">\n        ...\n      </Route>\n    </>\n  );\n}\n```\nHere, if the user is at `/`, they automatically get redirected to `/login`. The `exact` is needed to prevent an infinite loop because `\\login` matches both `Route`s.",
      "html": "<h1 id=\"276.-redirecting_the_user\">276. Redirecting_the_user <a class=\"heading-anchor-permalink\" href=\"#276.-redirecting_the_user\">#</a></h1>\n<p>Created Sunday 25 September 2022</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>We want to redirect a user when they reach a certain URL.</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Just needed.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<ul>\n<li></li>\n</ul>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Use the <code>Redirect</code> component of React Router.</p>\n<pre><code class=\"language-jsx\">import { Redirect, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Route path=&quot;/&quot; exact&gt;\n        &lt;Redirect to=&quot;/login&quot;/&gt;\n      &lt;/Route&gt;\n      \n\t  &lt;Route path=&quot;/login&quot;&gt;\n        ...\n      &lt;/Route&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<p>Here, if the user is at <code>/</code>, they automatically get redirected to <code>/login</code>. The <code>exact</code> is needed to prevent an infinite loop because <code>\\login</code> matches both <code>Route</code>s.</p>\n",
      "id": 86
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/277_272_Dynamic_Routes.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/277_272_Dynamic_Routes.html",
      "content": "# 277.272 Dynamic Routes\nCreated Sunday 25 September 2022\n\nReact Router allows for dynamic routes, to allow for something like `github.com/sanjarcode` to be generalized as `github.com/:username`.\n\nThis `:paramName` syntax is used inside `Route.path`.\n\nExample:\n```jsx\nfunction App() {\n  return (\n    <>\n      <Route path=\"/\" exact>\n        Landing page\n      </Route>\n\t  <Route path=\"/:username\">\n        Your page\n      </Route>\n    </>\n  );\n}\n```\nOf course, we don't have the value of username here.\nLet's get it.\n\n\n## Accessing dynamic params\n- Dynamic params of a `Route` are made available to all descendant components. All get the same params, irrespective of depth.\n- To access them, use the `useParams` hook inside a descendant component.\n- One can have a mix of dynamic and non-dynamic route nodes. e.g. things like `/home/:username`, `/:username/:repository` or `/:username/settings` are all OK.\n- One dynamic param can match only one node of the route, i.e. `/users/:name` won't match `/users/1/sanjar` because `:name` cannot match two nodes `1` and `sanjar`.\n\nNote: only descendants of a dynamic `Route` (i.e. a `Route` with a dynamic `path` props) can access dynamic params, the dynamic `Route` component itself cannot.\n\n- The dynamic params are made available (using `useParams`) as an object. keys being name of dynamic param and values being the value as a `string`.\n\nExample:\n```jsx\nfunction App() {\n\tconsole.log(useParams()); // won't work, blank {}. Reason: only descendants can access dynamic params\n\treturn (\n      <Route path=\"/:username\" exact>\n        <AppChild />\n      </Route>\n  );\n}\n\nfunction AppChild() {\n\tconsole.log(useParams()); // will work\n\treturn null;\n}\n```\n\n\n## Notes (edge case)\n- If a descendant has multiple dynamic `Route` ancestors, the nearest ancestor dictates the dynamic route names (i.e. accessed params key names). Values remain the same of course.\n    Example:\n\t```jsx\n\tfunction App() {\n\t\tconsole.log(useParams()); // won't work, blank {}. Reason: only descendants can access dynamic params\n\t\treturn (\n\t      <Route path=\"/:username\" exact>\n\t\t\t<AppChild /> <!-- gets username -->\n\t\t    <Route path=\"/:usernameX\" exact>\n\t\t        <AppChild /> <!-- gets usernameX -->\n\t\t    </Route>\n\t\t    <AppChild /> <!-- gets username -->\n\t      </Route>\n\t  );\n\t}\n\t\n\tfunction AppChild() {\n\t\tconsole.log(useParams()); // will work\n\t\treturn null;\n\t}\n\t```\n\tIf possible, reuse a dynamic route param when setting a nested `Route` to avoid confusion. Example:\n\t```jsx\n\tfunction App() {\n\t\treturn (\n\t      <Route path=\"/quotes/:quoteId\" exact>\n\t        <AppChild />\n\t      </Route>\n\t  );\n\t}\n\t\n\tfunction AppChild() {\n\t\tconst { quoteId } = useParams();\n\t\t\n\t\treturn (\n\t\t      <Route path={`/quotes/${quoteId}/comments`} exact>\n\t\t\t    <!-- this is a static routes set dynamically, instead of using dynamic routes again-->\n\t\t\t\t<AppChildChild />\n\t\t      </Route>\n\t\t  );\n\t}\n\t```",
      "html": "<h1 id=\"277.272-dynamic-routes\">277.272 Dynamic Routes <a class=\"heading-anchor-permalink\" href=\"#277.272-dynamic-routes\">#</a></h1>\n<p>Created Sunday 25 September 2022</p>\n<p>React Router allows for dynamic routes, to allow for something like <code>github.com/sanjarcode</code> to be generalized as <code>github.com/:username</code>.</p>\n<p>This <code>:paramName</code> syntax is used inside <code>Route.path</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-jsx\">function App() {\n  return (\n    &lt;&gt;\n      &lt;Route path=&quot;/&quot; exact&gt;\n        Landing page\n      &lt;/Route&gt;\n\t  &lt;Route path=&quot;/:username&quot;&gt;\n        Your page\n      &lt;/Route&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<p>Of course, we don’t have the value of username here.\nLet’s get it.</p>\n<h2 id=\"accessing-dynamic-params\">Accessing dynamic params <a class=\"heading-anchor-permalink\" href=\"#accessing-dynamic-params\">#</a></h2>\n<ul>\n<li>Dynamic params of a <code>Route</code> are made available to all descendant components. All get the same params, irrespective of depth.</li>\n<li>To access them, use the <code>useParams</code> hook inside a descendant component.</li>\n<li>One can have a mix of dynamic and non-dynamic route nodes. e.g. things like <code>/home/:username</code>, <code>/:username/:repository</code> or <code>/:username/settings</code> are all OK.</li>\n<li>One dynamic param can match only one node of the route, i.e. <code>/users/:name</code> won’t match <code>/users/1/sanjar</code> because <code>:name</code> cannot match two nodes <code>1</code> and <code>sanjar</code>.</li>\n</ul>\n<p>Note: only descendants of a dynamic <code>Route</code> (i.e. a <code>Route</code> with a dynamic <code>path</code> props) can access dynamic params, the dynamic <code>Route</code> component itself cannot.</p>\n<ul>\n<li>The dynamic params are made available (using <code>useParams</code>) as an object. keys being name of dynamic param and values being the value as a <code>string</code>.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-jsx\">function App() {\n\tconsole.log(useParams()); // won't work, blank {}. Reason: only descendants can access dynamic params\n\treturn (\n      &lt;Route path=&quot;/:username&quot; exact&gt;\n        &lt;AppChild /&gt;\n      &lt;/Route&gt;\n  );\n}\n\nfunction AppChild() {\n\tconsole.log(useParams()); // will work\n\treturn null;\n}\n</code></pre>\n<h2 id=\"notes-(edge-case)\">Notes (edge case) <a class=\"heading-anchor-permalink\" href=\"#notes-(edge-case)\">#</a></h2>\n<ul>\n<li>If a descendant has multiple dynamic <code>Route</code> ancestors, the nearest ancestor dictates the dynamic route names (i.e. accessed params key names). Values remain the same of course.\nExample:<pre><code class=\"language-jsx\">function App() {\n\tconsole.log(useParams()); // won't work, blank {}. Reason: only descendants can access dynamic params\n\treturn (\n      &lt;Route path=&quot;/:username&quot; exact&gt;\n\t\t&lt;AppChild /&gt; &lt;!-- gets username --&gt;\n\t    &lt;Route path=&quot;/:usernameX&quot; exact&gt;\n\t        &lt;AppChild /&gt; &lt;!-- gets usernameX --&gt;\n\t    &lt;/Route&gt;\n\t    &lt;AppChild /&gt; &lt;!-- gets username --&gt;\n      &lt;/Route&gt;\n  );\n}\n\nfunction AppChild() {\n\tconsole.log(useParams()); // will work\n\treturn null;\n}\n</code></pre>\nIf possible, reuse a dynamic route param when setting a nested <code>Route</code> to avoid confusion. Example:<pre><code class=\"language-jsx\">function App() {\n\treturn (\n      &lt;Route path=&quot;/quotes/:quoteId&quot; exact&gt;\n        &lt;AppChild /&gt;\n      &lt;/Route&gt;\n  );\n}\n\nfunction AppChild() {\n\tconst { quoteId } = useParams();\n\t\n\treturn (\n\t      &lt;Route path={`/quotes/${quoteId}/comments`} exact&gt;\n\t\t    &lt;!-- this is a static routes set dynamically, instead of using dynamic routes again--&gt;\n\t\t\t&lt;AppChildChild /&gt;\n\t      &lt;/Route&gt;\n\t  );\n}\n</code></pre>\n</li>\n</ul>\n",
      "id": 87
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/283_Adding_a_not_found_page.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/283_Adding_a_not_found_page.html",
      "content": "# 284. Adding a not found page\nCreated Sunday 25 September 2022\n\nAdd a `Route` with path as `*` (wildcard) as last child of a `Switch`. This makes sure that it renders only if no other route does.",
      "html": "<h1 id=\"284.-adding-a-not-found-page\">284. Adding a not found page <a class=\"heading-anchor-permalink\" href=\"#284.-adding-a-not-found-page\">#</a></h1>\n<p>Created Sunday 25 September 2022</p>\n<p>Add a <code>Route</code> with path as <code>*</code> (wildcard) as last child of a <code>Switch</code>. This makes sure that it renders only if no other route does.</p>\n",
      "id": 88
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/284_Programmatic_navigation.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/284_Programmatic_navigation.html",
      "content": "# 284. Programmatic navigation\nCreated Sunday 25 September 2022\n\nAlso known as imperative navigation.\n\n# Why\nNavigate when a button is clicked. Or more generally, navigate programmatically.\n\n\n## How\nSimple, use the native History API.\nBut it'll be helpful if React Router instance knows about such navigation.\nOptionally, save/load/retain some state and run a callback function.\n\n\n## What\n- React Router has a `useHistory` hook that returns a 'History' object that's in sync with the router.\n- The history object has many useful functions, such as:\n\t1. `push(newPath)` - navigates page and pushes the new path as browser history, allowing for the navigation buttons (forward/back) to work. Note: `push` has nothing to do with appending to nested routes.\n\t2. `replace(newPath)` - navigates page but doesn't make any changes to the history.\n\t3. `goForward()` - programmatically activate the forward navigation button.\n\t4. `goBack` - programmatically activate the back navigation button.\n\nExample:\n```jsx\nimport { useHistory } from 'react-router-dom';\n\nfunction App() {\n  const history = useHistory();\n  \n  const onClickHandler = () => history.push(\"/welcome/bingo\");\n  \n  return (\n    <button onClick={onClickHandler}>Click me</button>\n  );\n}\n```\n\n## Note\n1. The page re-renders on navigation, always. Even if the new URL is the same as the current one, or we use `history.replace()`. FIXME(from what level does the re-render happen, from `index.js`?)\n2. The `useHistory` returned object works on the URI alone, not the URL. If you wish to go to an external site, programmatically, use the native JS `window.location.replace` with \"https://\" (or \"https://\" or \"ftp://\" etc) as string prefix.\n\tExample:\n\t```jsx\n\tconst onClickHandler = () => window.location.replace(\"https://google.com\"); // works\n\t\n\tconst onClickHandler = () => window.location.replace(\"google.com\"); // won't work, will change URI only\n\t```\n\tReason: Navigating to an external site will ALWAYS reload the page, and thus, React Router has got nothing to (and cannot) do with such \"external\" navigation.",
      "html": "<h1 id=\"284.-programmatic-navigation\">284. Programmatic navigation <a class=\"heading-anchor-permalink\" href=\"#284.-programmatic-navigation\">#</a></h1>\n<p>Created Sunday 25 September 2022</p>\n<p>Also known as imperative navigation.</p>\n<h1 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h1>\n<p>Navigate when a button is clicked. Or more generally, navigate programmatically.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Simple, use the native History API.\nBut it’ll be helpful if React Router instance knows about such navigation.\nOptionally, save/load/retain some state and run a callback function.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<ul>\n<li>React Router has a <code>useHistory</code> hook that returns a ‘History’ object that’s in sync with the router.</li>\n<li>The history object has many useful functions, such as:\n<ol>\n<li><code>push(newPath)</code> - navigates page and pushes the new path as browser history, allowing for the navigation buttons (forward/back) to work. Note: <code>push</code> has nothing to do with appending to nested routes.</li>\n<li><code>replace(newPath)</code> - navigates page but doesn’t make any changes to the history.</li>\n<li><code>goForward()</code> - programmatically activate the forward navigation button.</li>\n<li><code>goBack</code> - programmatically activate the back navigation button.</li>\n</ol>\n</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-jsx\">import { useHistory } from 'react-router-dom';\n\nfunction App() {\n  const history = useHistory();\n  \n  const onClickHandler = () =&gt; history.push(&quot;/welcome/bingo&quot;);\n  \n  return (\n    &lt;button onClick={onClickHandler}&gt;Click me&lt;/button&gt;\n  );\n}\n</code></pre>\n<h2 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h2>\n<ol>\n<li>The page re-renders on navigation, always. Even if the new URL is the same as the current one, or we use <code>history.replace()</code>. FIXME(from what level does the re-render happen, from <code>index.js</code>?)</li>\n<li>The <code>useHistory</code> returned object works on the URI alone, not the URL. If you wish to go to an external site, programmatically, use the native JS <code>window.location.replace</code> with “https://” (or “https://” or “ftp://” etc) as string prefix.\nExample:<pre><code class=\"language-jsx\">const onClickHandler = () =&gt; window.location.replace(&quot;https://google.com&quot;); // works\n\nconst onClickHandler = () =&gt; window.location.replace(&quot;google.com&quot;); // won't work, will change URI only\n</code></pre>\nReason: Navigating to an external site will ALWAYS reload the page, and thus, React Router has got nothing to (and cannot) do with such “external” navigation.</li>\n</ol>\n",
      "id": 89
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/285_Prompt_before_navigation.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/285_Prompt_before_navigation.html",
      "content": "# 285. Prompt before navigation\nCreated Monday 26 September 2022\n\n## Situation\nShow a prompt, triggered on navigation. \n\ne.g. when the user tries to navigate away (using forward/backward buttons or otherwise) from an unfinished form.\n\n## Why\n-\n\n## How\nReact Router may be using an \"onURLChange\" event listener.\n\n\n## What\nReact Router provides the `Prompt` component for showing a prompt.\nThe component takes two props:\n1. `when` - a boolean. If true, then a \"prompt\" is shown on navigation.\n2. `message` - a function that must return a `string`. This string will be shown on the prompt. Additionally, the function gives access to a \"location\" as the param, of course.\n\nExample:\n```jsx\nfunction App() {\n  return (\n    <>\n      <Prompt when={true} message={() => \"Leave the page?\"} />\n      <Link to=\"/welcome\">Navigate</Link>\n    </>\n  );\n}\n```\n\nSee more [examples](https://github.com/exemplar-codes/react-router-demo/tree/prompt_component).",
      "html": "<h1 id=\"285.-prompt-before-navigation\">285. Prompt before navigation <a class=\"heading-anchor-permalink\" href=\"#285.-prompt-before-navigation\">#</a></h1>\n<p>Created Monday 26 September 2022</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Show a prompt, triggered on navigation.</p>\n<p>e.g. when the user tries to navigate away (using forward/backward buttons or otherwise) from an unfinished form.</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<ul>\n<li></li>\n</ul>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>React Router may be using an “onURLChange” event listener.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>React Router provides the <code>Prompt</code> component for showing a prompt.\nThe component takes two props:</p>\n<ol>\n<li><code>when</code> - a boolean. If true, then a “prompt” is shown on navigation.</li>\n<li><code>message</code> - a function that must return a <code>string</code>. This string will be shown on the prompt. Additionally, the function gives access to a “location” as the param, of course.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-jsx\">function App() {\n  return (\n    &lt;&gt;\n      &lt;Prompt when={true} message={() =&gt; &quot;Leave the page?&quot;} /&gt;\n      &lt;Link to=&quot;/welcome&quot;&gt;Navigate&lt;/Link&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<p>See more <a href=\"https://github.com/exemplar-codes/react-router-demo/tree/prompt_component\">examples</a>.</p>\n",
      "id": 90
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/286_Working_with_Query_Params.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/286_Working_with_Query_Params.html",
      "content": "# 286. Working with Query Params\nCreated Saturday 01 October 2022\n\nQuery params have no affect on matching criteria.\n- They are however, _available_ via React Router.\n- In short, we need to _read_ qparams and do whatever we want with them. e.g. inside `useEffect`, for example.\n\n## Why\nWeb standard.\n\n\n## How\nReact Router can read/write query params. Implemented using the `location` object, perhaps.\n\n## What\nAccess them on and do what you want.\n\n### 1. Reading query params\nWe need to read the URL and then parse the query string.\n1. We need to use `useLocation` hook (provided by React Router) to read the URL.\n2. Then we pass the query params from step 1 into native JS `URLSearchParams`'s constructor.\n3. Finally we extract the query param value from the `URLSearchParams` object using it's `.get` function.\n\nNote: accessed query params are strings.\n\nExample\n```jsx\nimport { useLocation } from 'react-router-dom';\n\n// URI: ?age=2\nfunction App() {\n\tconst location = useLocation();\n\n\tconst qparams = new URLSearchParams(location.search);\n\n\tconst age = qparams.get('age'); // we get 'age' as string, '2'\n\t\n\treturn <h1>Age: {age}</h1>;\n}\n```\nNote that URL params are accessible before page load, since URL determine the page (even in case of React Router, FIXME: (really, always??)).\n\n### 2. Writing to query params\nWe used the `useHistory` hook to navigate to a different path.\nIt also works with query params.\nThere are two ways to do this:\n- Set the string yourself, i.e.`history.push(\"..../?age=2\")` or inside `Link`(e.g. `Link to=\"/welcome?age=2\">`.\n- Use `URLSearchParams` to create the query string, and push the formed string to `history.push()`. To create the query string, we also need the path, and so `useLocation` is also needed.\n\nExample (manual string creation):\n```jsx\nimport { useHistory } from 'react-router-dom';\n\nfunction App() {\n\tconst history = useHistory();\n\t\n\tconst onClickHandler = () => {\n\t\thistory.push(\"/list?sort=asc\");\n\t};\n\n\treturn <button>Sort asc</button>; // clicking will add '?sort=asc' to the URL\n}\n```\n\nExample (proper string creation):\n```jsx\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nfunction App() {\n  const history = useHistory();\n  const location = useLocation();\n\n  const onClickHandler = () => {\n    const qParamBuilder = new URLSearchParams();\n    \n    qParamBuilder.set(\"avatarEmoji\", \"😼\");\n\n    const updatedURL = location.pathname + \"?\" + qParamBuilder.toString();\n    \n    history.push(updatedURL); // clicking will add '?sort=asc' to the URL\n  };\n\n  return <button onClick={onClickHandler}>Sort asc</button>;\n}\n\n```\n\nNote: \n- The page re-renders on navigate, even if only query params are being (potentially) updated.\n- We don't have to worry about ending `/`. For the full URL, just add `\"?\"` + `URLSearchParams.toString()`.\n\n\nConcrete examples - [read](https://github.com/exemplar-codes/react-router-practice/commit/b21696a8fe8879ba6ef16e51cd16e263d70b55a3), [write](https://github.com/exemplar-codes/react-router-practice/commit/555aa078dab004549a4ce10683dd904a312664f6)",
      "html": "<h1 id=\"286.-working-with-query-params\">286. Working with Query Params <a class=\"heading-anchor-permalink\" href=\"#286.-working-with-query-params\">#</a></h1>\n<p>Created Saturday 01 October 2022</p>\n<p>Query params have no affect on matching criteria.</p>\n<ul>\n<li>They are however, <em>available</em> via React Router.</li>\n<li>In short, we need to <em>read</em> qparams and do whatever we want with them. e.g. inside <code>useEffect</code>, for example.</li>\n</ul>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Web standard.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>React Router can read/write query params. Implemented using the <code>location</code> object, perhaps.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Access them on and do what you want.</p>\n<h3 id=\"1.-reading-query-params\">1. Reading query params <a class=\"heading-anchor-permalink\" href=\"#1.-reading-query-params\">#</a></h3>\n<p>We need to read the URL and then parse the query string.</p>\n<ol>\n<li>We need to use <code>useLocation</code> hook (provided by React Router) to read the URL.</li>\n<li>Then we pass the query params from step 1 into native JS <code>URLSearchParams</code>'s constructor.</li>\n<li>Finally we extract the query param value from the <code>URLSearchParams</code> object using it’s <code>.get</code> function.</li>\n</ol>\n<p>Note: accessed query params are strings.</p>\n<p>Example</p>\n<pre><code class=\"language-jsx\">import { useLocation } from 'react-router-dom';\n\n// URI: ?age=2\nfunction App() {\n\tconst location = useLocation();\n\n\tconst qparams = new URLSearchParams(location.search);\n\n\tconst age = qparams.get('age'); // we get 'age' as string, '2'\n\t\n\treturn &lt;h1&gt;Age: {age}&lt;/h1&gt;;\n}\n</code></pre>\n<p>Note that URL params are accessible before page load, since URL determine the page (even in case of React Router, FIXME: (really, always??)).</p>\n<h3 id=\"2.-writing-to-query-params\">2. Writing to query params <a class=\"heading-anchor-permalink\" href=\"#2.-writing-to-query-params\">#</a></h3>\n<p>We used the <code>useHistory</code> hook to navigate to a different path.\nIt also works with query params.\nThere are two ways to do this:</p>\n<ul>\n<li>Set the string yourself, i.e.<code>history.push(&quot;..../?age=2&quot;)</code> or inside <code>Link</code>(e.g. <code>Link to=&quot;/welcome?age=2&quot;&gt;</code>.</li>\n<li>Use <code>URLSearchParams</code> to create the query string, and push the formed string to <code>history.push()</code>. To create the query string, we also need the path, and so <code>useLocation</code> is also needed.</li>\n</ul>\n<p>Example (manual string creation):</p>\n<pre><code class=\"language-jsx\">import { useHistory } from 'react-router-dom';\n\nfunction App() {\n\tconst history = useHistory();\n\t\n\tconst onClickHandler = () =&gt; {\n\t\thistory.push(&quot;/list?sort=asc&quot;);\n\t};\n\n\treturn &lt;button&gt;Sort asc&lt;/button&gt;; // clicking will add '?sort=asc' to the URL\n}\n</code></pre>\n<p>Example (proper string creation):</p>\n<pre><code class=\"language-jsx\">import { useHistory, useLocation } from &quot;react-router-dom&quot;;\n\nfunction App() {\n  const history = useHistory();\n  const location = useLocation();\n\n  const onClickHandler = () =&gt; {\n    const qParamBuilder = new URLSearchParams();\n    \n    qParamBuilder.set(&quot;avatarEmoji&quot;, &quot;😼&quot;);\n\n    const updatedURL = location.pathname + &quot;?&quot; + qParamBuilder.toString();\n    \n    history.push(updatedURL); // clicking will add '?sort=asc' to the URL\n  };\n\n  return &lt;button onClick={onClickHandler}&gt;Sort asc&lt;/button&gt;;\n}\n\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>The page re-renders on navigate, even if only query params are being (potentially) updated.</li>\n<li>We don’t have to worry about ending <code>/</code>. For the full URL, just add <code>&quot;?&quot;</code> + <code>URLSearchParams.toString()</code>.</li>\n</ul>\n<p>Concrete examples - <a href=\"https://github.com/exemplar-codes/react-router-practice/commit/b21696a8fe8879ba6ef16e51cd16e263d70b55a3\">read</a>, <a href=\"https://github.com/exemplar-codes/react-router-practice/commit/555aa078dab004549a4ce10683dd904a312664f6\">write</a></p>\n",
      "id": 91
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/288_Writing_more_flexible_Routing_code.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/288_Writing_more_flexible_Routing_code.html",
      "content": "# 288. Writing more flexible Routing code\nCreated Sunday 02 October 2022\n\n## Why\n- We've been using hardcoded routes in the [practice app](https://github.com/exemplar-codes/react-router-practice). This is of course, not a good thing.\n- Note that React Router still needs absolute URLs at all places (`Route.path`, `Link.to`), that doesn't change and is not a problem.\n- We just want to minimize hardcoded stuff.\n\n\n## How\nIf there was a way to get the URL for the parent `Route` in a component, we could use that to create URL to be used in the component (as React Router needs absolute paths at all times).\n\nThis way, even if we want to change the name of a `Route` higher up in the hierarchy, it would have no effect on any other `Route`s (above or below level).\n\nAdditionally, we can store each path node as a string variable, so we don't have to touch UI code, at all, even if route name changes.\n\n## What\nThe `useRouteMatch` hook provides an object that contains the \"matched\" URL of the parent `Route`, and other info. We use it to create URLs.\n\nExample:\n```jsx\nimport { Route } from 'react-router-dom';\n\nfunction App() {\n\treturn <Route path=\"/welcome\"><Child/></Route>;\n}\n\nfunction Child {\n\tconst match = useRouteMatch();\n\t\n\treturn <><h1>Previous route: {match.url}</h1></>;\n}\n```\n\n## Path object instead of string (optional)\nWe are not hardcoding strings now, but we are still creating strings using `+`  or string interpolation.\n\nThere is a better way.\n\nAll the places where we have supplied strings, i.e. `Link.to`, `NavLink.to`, `Route.path`, `useHistory().push()` also accept an object, instead of a string. This object will be used to automatically create a string.\n\nExample:\n```jsx\n<Link to={{ search: \"sort=true\" }}>Sort</Link>;\n\n<Link to={{ pathname: \"/welcome\" }}>Welcome page</Link> // replace URI\n\nconst match = useMatchParams();\n<Link to={{ pathname: match.url + \"/welcome\" }}>Welcome page</Link>\n\n<Link to={{ pathname: \"/welcome\", search: \"userid=2\" }}>Welcome page</Link>\n\n\n\nconst history = useHistory();\n\nconst onClickHandler = () => history.push({ search: \"sort=true\" });\n\nconst onClickHandler = () => history.push({ pathname: \"/welcome\", search: \"sort=true\" });\n```\n\n[Demo example](https://github.com/exemplar-codes/react-router-demo/commit/d1504734fdce1b56f5451510aff8798f6ab2af5b), [Concrete example](https://github.com/exemplar-codes/react-router-practice/commit/dab486262673816e4a4779b715e82f96a1ecd2a8)\n\n## Note\n1. When creating paths using `useRouteMatch().url` and remaining path, `\"/\"` must be added in between.\n2. While specifying route as object, the `pathname` still needs a prefix `/`. But having a `?` for query params is optional (has no effect).\n3. `useRouteMatch()` also has the dynamic URL skeleton used by the parent, as well as the actual URL (which we have used), the dynamic path params object and also a boolean called `isExact` to know if the parent had been matched \"exactly\" ([code](https://github.com/exemplar-codes/react-router-demo/commit/b673946f50d8b2de846c0cd72fd39a86db68c39a)).",
      "html": "<h1 id=\"288.-writing-more-flexible-routing-code\">288. Writing more flexible Routing code <a class=\"heading-anchor-permalink\" href=\"#288.-writing-more-flexible-routing-code\">#</a></h1>\n<p>Created Sunday 02 October 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<ul>\n<li>We’ve been using hardcoded routes in the <a href=\"https://github.com/exemplar-codes/react-router-practice\">practice app</a>. This is of course, not a good thing.</li>\n<li>Note that React Router still needs absolute URLs at all places (<code>Route.path</code>, <code>Link.to</code>), that doesn’t change and is not a problem.</li>\n<li>We just want to minimize hardcoded stuff.</li>\n</ul>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>If there was a way to get the URL for the parent <code>Route</code> in a component, we could use that to create URL to be used in the component (as React Router needs absolute paths at all times).</p>\n<p>This way, even if we want to change the name of a <code>Route</code> higher up in the hierarchy, it would have no effect on any other <code>Route</code>s (above or below level).</p>\n<p>Additionally, we can store each path node as a string variable, so we don’t have to touch UI code, at all, even if route name changes.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>The <code>useRouteMatch</code> hook provides an object that contains the “matched” URL of the parent <code>Route</code>, and other info. We use it to create URLs.</p>\n<p>Example:</p>\n<pre><code class=\"language-jsx\">import { Route } from 'react-router-dom';\n\nfunction App() {\n\treturn &lt;Route path=&quot;/welcome&quot;&gt;&lt;Child/&gt;&lt;/Route&gt;;\n}\n\nfunction Child {\n\tconst match = useRouteMatch();\n\t\n\treturn &lt;&gt;&lt;h1&gt;Previous route: {match.url}&lt;/h1&gt;&lt;/&gt;;\n}\n</code></pre>\n<h2 id=\"path-object-instead-of-string-(optional)\">Path object instead of string (optional) <a class=\"heading-anchor-permalink\" href=\"#path-object-instead-of-string-(optional)\">#</a></h2>\n<p>We are not hardcoding strings now, but we are still creating strings using <code>+</code>  or string interpolation.</p>\n<p>There is a better way.</p>\n<p>All the places where we have supplied strings, i.e. <code>Link.to</code>, <code>NavLink.to</code>, <code>Route.path</code>, <code>useHistory().push()</code> also accept an object, instead of a string. This object will be used to automatically create a string.</p>\n<p>Example:</p>\n<pre><code class=\"language-jsx\">&lt;Link to={{ search: &quot;sort=true&quot; }}&gt;Sort&lt;/Link&gt;;\n\n&lt;Link to={{ pathname: &quot;/welcome&quot; }}&gt;Welcome page&lt;/Link&gt; // replace URI\n\nconst match = useMatchParams();\n&lt;Link to={{ pathname: match.url + &quot;/welcome&quot; }}&gt;Welcome page&lt;/Link&gt;\n\n&lt;Link to={{ pathname: &quot;/welcome&quot;, search: &quot;userid=2&quot; }}&gt;Welcome page&lt;/Link&gt;\n\n\n\nconst history = useHistory();\n\nconst onClickHandler = () =&gt; history.push({ search: &quot;sort=true&quot; });\n\nconst onClickHandler = () =&gt; history.push({ pathname: &quot;/welcome&quot;, search: &quot;sort=true&quot; });\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/react-router-demo/commit/d1504734fdce1b56f5451510aff8798f6ab2af5b\">Demo example</a>, <a href=\"https://github.com/exemplar-codes/react-router-practice/commit/dab486262673816e4a4779b715e82f96a1ecd2a8\">Concrete example</a></p>\n<h2 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h2>\n<ol>\n<li>When creating paths using <code>useRouteMatch().url</code> and remaining path, <code>&quot;/&quot;</code> must be added in between.</li>\n<li>While specifying route as object, the <code>pathname</code> still needs a prefix <code>/</code>. But having a <code>?</code> for query params is optional (has no effect).</li>\n<li><code>useRouteMatch()</code> also has the dynamic URL skeleton used by the parent, as well as the actual URL (which we have used), the dynamic path params object and also a boolean called <code>isExact</code> to know if the parent had been matched “exactly” (<a href=\"https://github.com/exemplar-codes/react-router-demo/commit/b673946f50d8b2de846c0cd72fd39a86db68c39a\">code</a>).</li>\n</ol>\n",
      "id": 92
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/289_v5_Summary.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/289_v5_Summary.html",
      "content": "# 289 v5 Summary\nCreated Sunday 02 October 2022\n\n0. Principle - change URL, everything else will happen automatically.\n\n1. Routing constructs:\n\t1. There should be a root `BrowserRouter` parent.\n\t2. `Route` with `path` does conditional rendering w.r.t URL.\n\t3. Matching criteria is `url.hasPrefix(route)`.\n\t4. `Switch` for first matching render. `Route` has `exact` prop for exact match.\n\n2. Links:\n\t1. `<Link to=\"\"></Link>`. Prevent reload.\n\t2. `<NavLink to=\"\" classes=\"\"></Navlink>` gets highlighted when `to` is the same as current URL.\n   \n3. Read URL:\n\t1. Pathname - `useLocation` hook. `useLocation().pathname`.\n\t2. Dynamic path - `useParam` hook\n\t3. Query params, again `useLocation().search` into `URLSearchParams`.\n\n4. Write to URL:\n\t1. `useHistory` for navigation.\n\t2. `useHistory` + `\"?\"` + `URLSearchParams.toString()` for query params.\n\n5. Path strings - use strings or pass an object `{pathname: \"\", search: \"\"}`\n",
      "html": "<h1 id=\"289-v5-summary\">289 v5 Summary <a class=\"heading-anchor-permalink\" href=\"#289-v5-summary\">#</a></h1>\n<p>Created Sunday 02 October 2022</p>\n<ol start=\"0\">\n<li>\n<p>Principle - change URL, everything else will happen automatically.</p>\n</li>\n<li>\n<p>Routing constructs:</p>\n<ol>\n<li>There should be a root <code>BrowserRouter</code> parent.</li>\n<li><code>Route</code> with <code>path</code> does conditional rendering w.r.t URL.</li>\n<li>Matching criteria is <code>url.hasPrefix(route)</code>.</li>\n<li><code>Switch</code> for first matching render. <code>Route</code> has <code>exact</code> prop for exact match.</li>\n</ol>\n</li>\n<li>\n<p>Links:</p>\n<ol>\n<li><code>&lt;Link to=&quot;&quot;&gt;&lt;/Link&gt;</code>. Prevent reload.</li>\n<li><code>&lt;NavLink to=&quot;&quot; classes=&quot;&quot;&gt;&lt;/Navlink&gt;</code> gets highlighted when <code>to</code> is the same as current URL.</li>\n</ol>\n</li>\n<li>\n<p>Read URL:</p>\n<ol>\n<li>Pathname - <code>useLocation</code> hook. <code>useLocation().pathname</code>.</li>\n<li>Dynamic path - <code>useParam</code> hook</li>\n<li>Query params, again <code>useLocation().search</code> into <code>URLSearchParams</code>.</li>\n</ol>\n</li>\n<li>\n<p>Write to URL:</p>\n<ol>\n<li><code>useHistory</code> for navigation.</li>\n<li><code>useHistory</code> + <code>&quot;?&quot;</code> + <code>URLSearchParams.toString()</code> for query params.</li>\n</ol>\n</li>\n<li>\n<p>Path strings - use strings or pass an object <code>{pathname: &quot;&quot;, search: &quot;&quot;}</code></p>\n</li>\n</ol>\n",
      "id": 93
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/290_Upgrading_to_React_Router_v6.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/290_Upgrading_to_React_Router_v6.html",
      "content": "# 291. Upgrading to React Router v6\nCreated Sunday 02 October 2022\n\nWe learned about React Router v5 until now. It is significantly popular.\n\nChanges:\n1. v5.`Switch` is replaced by v6.`Routes` (plural).\n2. `Route`s cannot be used in isolation, they must have a parent `Routes`. Ancestors are not enough.\n3. Routing criteria has change it chooses the most appropriate route, i.e. specificity matters (and so `exact` has been deprecated) and wildcards are ignored if a specific matching route exists. <details><summary>More about the criteria (inside `Routes`)</summary>\n\t<ol>\n\t\t<li>Literal path</li>\n\t\t<li>Dynamic path</li>\n\t\t<li>Wildcard</li>\n\t</ol>\n   </details>\n4. Due to mandatory nature of `Routes` and new matching criteria, order of `Route`s is irrelevant.\n5. v5.`Route` content are now passed as a prop (called `element`), and not as children.\n6. `NavLink.activeClassName` has been deprecated. Instead, `style`/`className` prop must be used, which in addition to string/object(as usual), accept a function as prop, whose first param is `{isActive}`. This can be used to set the styles conditionally.\n\t```jsx\n\tfunction App() {\n\t  return (\n\t    <NavLink className={({ isActive }) => (isActive ? \"active\" : \"\")}>\n\t      Welcome\n\t    </NavLink>\n\t  );\n\t}\n\t```\n\nCode examples (points 1-6) - [here](https://github.com/exemplar-codes/react-router-demo-v6).\n\nFIXME: read, understand and clarify.\n7. v5.`Redirect` is replaced by v6.`Navigate`. `Navigate` pushes the path to URL by default. Use the `replace` boolean prop to disable this behavior.\n8. Nested `Route`s work only if the ancestor allows it, e.g. using a wildcard.\n9. Paths should be relative to parent.\n10. `Route` can have `Route` children. This is an alternative way to specify nested routes. When using this, we need to specify where a `Route` child should be rendered, using `Outlet` component provided by v6.\n11. v5.`useHistory` is replaced by v6.`useNavigate` for programmatic navigation. \n\t1. Push - `useNavigate()(path)`\n\t2. Replace - `useNavigate()(path, {replace: true})`\n\t3. Forward - `useNavigate()(positiveNumber)`. `1` for forward step.\n\t4. Backward - `useNavigate()(negativeNumber)`. `-1` for backward step.\n\t5. Refresh - `useNavigate()(0)`.\n12. `Prompt` is not supported in v6. Solution: Create own Prompt component or use v5.",
      "html": "<h1 id=\"291.-upgrading-to-react-router-v6\">291. Upgrading to React Router v6 <a class=\"heading-anchor-permalink\" href=\"#291.-upgrading-to-react-router-v6\">#</a></h1>\n<p>Created Sunday 02 October 2022</p>\n<p>We learned about React Router v5 until now. It is significantly popular.</p>\n<p>Changes:</p>\n<ol>\n<li>v5.<code>Switch</code> is replaced by v6.<code>Routes</code> (plural).</li>\n<li><code>Route</code>s cannot be used in isolation, they must have a parent <code>Routes</code>. Ancestors are not enough.</li>\n<li>Routing criteria has change it chooses the most appropriate route, i.e. specificity matters (and so <code>exact</code> has been deprecated) and wildcards are ignored if a specific matching route exists. <details><summary>More about the criteria (inside <code>Routes</code>)</summary> <ol>\n \t<li>Literal path</li>\n \t<li>Dynamic path</li>\n \t<li>Wildcard</li>\n </ol>\n</details>\n</li>\n<li>Due to mandatory nature of <code>Routes</code> and new matching criteria, order of <code>Route</code>s is irrelevant.</li>\n<li>v5.<code>Route</code> content are now passed as a prop (called <code>element</code>), and not as children.</li>\n<li><code>NavLink.activeClassName</code> has been deprecated. Instead, <code>style</code>/<code>className</code> prop must be used, which in addition to string/object(as usual), accept a function as prop, whose first param is <code>{isActive}</code>. This can be used to set the styles conditionally.<pre><code class=\"language-jsx\">function App() {\n  return (\n    &lt;NavLink className={({ isActive }) =&gt; (isActive ? &quot;active&quot; : &quot;&quot;)}&gt;\n      Welcome\n    &lt;/NavLink&gt;\n  );\n}\n</code></pre>\n</li>\n</ol>\n<p>Code examples (points 1-6) - <a href=\"https://github.com/exemplar-codes/react-router-demo-v6\">here</a>.</p>\n<p>FIXME: read, understand and clarify.\n7. v5.<code>Redirect</code> is replaced by v6.<code>Navigate</code>. <code>Navigate</code> pushes the path to URL by default. Use the <code>replace</code> boolean prop to disable this behavior.\n8. Nested <code>Route</code>s work only if the ancestor allows it, e.g. using a wildcard.\n9. Paths should be relative to parent.\n10. <code>Route</code> can have <code>Route</code> children. This is an alternative way to specify nested routes. When using this, we need to specify where a <code>Route</code> child should be rendered, using <code>Outlet</code> component provided by v6.\n11. v5.<code>useHistory</code> is replaced by v6.<code>useNavigate</code> for programmatic navigation.\n1. Push - <code>useNavigate()(path)</code>\n2. Replace - <code>useNavigate()(path, {replace: true})</code>\n3. Forward - <code>useNavigate()(positiveNumber)</code>. <code>1</code> for forward step.\n4. Backward - <code>useNavigate()(negativeNumber)</code>. <code>-1</code> for backward step.\n5. Refresh - <code>useNavigate()(0)</code>.\n12. <code>Prompt</code> is not supported in v6. Solution: Create own Prompt component or use v5.</p>\n",
      "id": 94
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/292_v6_4_SKIPPED.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/292_v6_4_SKIPPED.html",
      "content": "# 292. React Router v6.4\nCreated Sunday 02 October 2022\n\nDon't need to go so deep, I'll forget anyway.",
      "html": "<h1 id=\"292.-react-router-v6.4\">292. React Router v6.4 <a class=\"heading-anchor-permalink\" href=\"#292.-react-router-v6.4\">#</a></h1>\n<p>Created Sunday 02 October 2022</p>\n<p>Don’t need to go so deep, I’ll forget anyway.</p>\n",
      "id": 95
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/294_Module_Introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/294_Module_Introduction.html",
      "content": "# 294. Module Introduction\nCreated Saturday 8 October 2022\n\nUp to this point, we consumed our React apps on `localhost`. This is of course, important and needed for development.\n\nBut for consumption, we need to publish and expose our React app to the world.",
      "html": "<h1 id=\"294.-module-introduction\">294. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#294.-module-introduction\">#</a></h1>\n<p>Created Saturday 8 October 2022</p>\n<p>Up to this point, we consumed our React apps on <code>localhost</code>. This is of course, important and needed for development.</p>\n<p>But for consumption, we need to publish and expose our React app to the world.</p>\n",
      "id": 96
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/295_Deployment_steps.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/295_Deployment_steps.html",
      "content": "# 295. Deployment steps\nCreated Saturday 8 October 2022\n\nAt the very minimum, we need to:\n- Generate the HTML, CSS and JS needed of our app. This is also known as the \"build\" process for the app.\n- Make them accessible through a server.\n\nBut, practically, there are more steps needed for a performant deployment. These steps are:\n1. Test code - automated or otherwise.\n2. Optimize code - make file sizes as small as possible.\n3. Build - execute pre-written scripts to generate HTML, CSS and JS.\n4. Deploy - place the production files on a server.\n5. Configuration - configure the server for SPA friendly routing.",
      "html": "<h1 id=\"295.-deployment-steps\">295. Deployment steps <a class=\"heading-anchor-permalink\" href=\"#295.-deployment-steps\">#</a></h1>\n<p>Created Saturday 8 October 2022</p>\n<p>At the very minimum, we need to:</p>\n<ul>\n<li>Generate the HTML, CSS and JS needed of our app. This is also known as the “build” process for the app.</li>\n<li>Make them accessible through a server.</li>\n</ul>\n<p>But, practically, there are more steps needed for a performant deployment. These steps are:</p>\n<ol>\n<li>Test code - automated or otherwise.</li>\n<li>Optimize code - make file sizes as small as possible.</li>\n<li>Build - execute pre-written scripts to generate HTML, CSS and JS.</li>\n<li>Deploy - place the production files on a server.</li>\n<li>Configuration - configure the server for SPA friendly routing.</li>\n</ol>\n",
      "id": 97
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/296_Adding_Lazy_loading.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/296_Adding_Lazy_loading.html",
      "content": "# 296. Adding Lazy loading\nCreated Saturday 29 October 2022\n\n\n## Why\nSplitting code according to routes/pages/section or otherwise to reduce initial bundle size.\n\nIn other words, load stuff only when it's needed, i.e. lazy loading. This is implemented via \"code-splitting\".\n\n\n## How\nThere are many constructs to specify lazy-loading in HTML, CSS, JavaScript and React.\n\n- In React, entities (components, images, etc) are _loaded_ using `import`. And because the `import`s are usually done at file-level, outside of any function, it is effectively \"eager loading\" that we're doing.\n- Conditional rendering of components, using bools or via routing doesn't help here, because even if a component (the function) isn't going to be rendered, `import`ing it will execute contents of it's file, thereby executing it's `import`s. This cascades further to all its dependencies. Example (`NestedComponent` is not rendered but still loaded`):\n```jsx\nimport NestedComponent from '...'; // crux of the problem.\n\nexport default function App() {\n  const isFetching = ...;\n  \n  return \n\t<>\n\t  ...\n\t  {!isFetching && <NestedComponent />}\n\t  ...\n\t</>;\n}\n```\n- This cascading effect is useful though, because if loading of a component is prevented, all it's dependencies are also prevented from loading.\n\nTo solve this issue, we need to prevent native `import` of entities we wish to load \"lazily\".\n\n\n## What\nTo specify lazy loading in React, replace the `import` like so.\n```jsx\n// import NestedComponent from '.../path';\nconst NestedComponent = React.lazy(() => import('.../path'));\n```\nDoing this alone won't work. Reason: Dynamic import, i.e. `import()`, returns a `Promise` and so can be in the \"pending\" state.\n\nConsequently, we need to provide a fallback UI (e.g. a loading spinner) which will be rendered when the lazily loaded component is being downloaded.\n\nAll this is done via the `Suspense` component provided by React, which accepts the fallback UI via the `fallback` prop.\n\n```jsx\nconst NestedComponent = React.lazy(() => import('.../path'));\n\nexport default function App() {\n  const isFetching = ...;\n  \n  return \n\t<>\n\t  ...\n\t  {!isFetching && (\n\t    <Suspense fallback={<div>Loading...</div>}>\n\t\t  <NestedComponent />\n\t    </Suspense>\n\t  )}\n\t  ...\n\t</>;\n}\n```\n\nOne can lazy load any number of entities.\n\nAbout `Suspense`:\n- It's used in the JSX of a component that uses lazy loaded entities.\n- The lazy component needs to be nested within it. It can be used at depth w.r.t the lazy component, either as a parent or ancestor.\n\nFIXME, questions:\n1. There's no way to associate `Suspense` with a lazy component, even if there are multiple lazy dependencies. In other words, each JSX block effectively has just one `Suspense`, and thus, custom fallback UIs for each cannot be specified.\n2. Is their a way to associate a `Suspense` with lazy entity?\n\n## Advice\nLazy loading is optional for small apps, but it's almost compulsory for large apps.\n\n[See full code example](https://github.com/exemplar-codes/react-router-practice/tree/lazy_loading)",
      "html": "<h1 id=\"296.-adding-lazy-loading\">296. Adding Lazy loading <a class=\"heading-anchor-permalink\" href=\"#296.-adding-lazy-loading\">#</a></h1>\n<p>Created Saturday 29 October 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Splitting code according to routes/pages/section or otherwise to reduce initial bundle size.</p>\n<p>In other words, load stuff only when it’s needed, i.e. lazy loading. This is implemented via “code-splitting”.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>There are many constructs to specify lazy-loading in HTML, CSS, JavaScript and React.</p>\n<ul>\n<li>In React, entities (components, images, etc) are <em>loaded</em> using <code>import</code>. And because the <code>import</code>s are usually done at file-level, outside of any function, it is effectively “eager loading” that we’re doing.</li>\n<li>Conditional rendering of components, using bools or via routing doesn’t help here, because even if a component (the function) isn’t going to be rendered, <code>import</code>ing it will execute contents of it’s file, thereby executing it’s <code>import</code>s. This cascades further to all its dependencies. Example (<code>NestedComponent</code> is not rendered but still loaded`):</li>\n</ul>\n<pre><code class=\"language-jsx\">import NestedComponent from '...'; // crux of the problem.\n\nexport default function App() {\n  const isFetching = ...;\n  \n  return \n\t&lt;&gt;\n\t  ...\n\t  {!isFetching &amp;&amp; &lt;NestedComponent /&gt;}\n\t  ...\n\t&lt;/&gt;;\n}\n</code></pre>\n<ul>\n<li>This cascading effect is useful though, because if loading of a component is prevented, all it’s dependencies are also prevented from loading.</li>\n</ul>\n<p>To solve this issue, we need to prevent native <code>import</code> of entities we wish to load “lazily”.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>To specify lazy loading in React, replace the <code>import</code> like so.</p>\n<pre><code class=\"language-jsx\">// import NestedComponent from '.../path';\nconst NestedComponent = React.lazy(() =&gt; import('.../path'));\n</code></pre>\n<p>Doing this alone won’t work. Reason: Dynamic import, i.e. <code>import()</code>, returns a <code>Promise</code> and so can be in the “pending” state.</p>\n<p>Consequently, we need to provide a fallback UI (e.g. a loading spinner) which will be rendered when the lazily loaded component is being downloaded.</p>\n<p>All this is done via the <code>Suspense</code> component provided by React, which accepts the fallback UI via the <code>fallback</code> prop.</p>\n<pre><code class=\"language-jsx\">const NestedComponent = React.lazy(() =&gt; import('.../path'));\n\nexport default function App() {\n  const isFetching = ...;\n  \n  return \n\t&lt;&gt;\n\t  ...\n\t  {!isFetching &amp;&amp; (\n\t    &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n\t\t  &lt;NestedComponent /&gt;\n\t    &lt;/Suspense&gt;\n\t  )}\n\t  ...\n\t&lt;/&gt;;\n}\n</code></pre>\n<p>One can lazy load any number of entities.</p>\n<p>About <code>Suspense</code>:</p>\n<ul>\n<li>It’s used in the JSX of a component that uses lazy loaded entities.</li>\n<li>The lazy component needs to be nested within it. It can be used at depth w.r.t the lazy component, either as a parent or ancestor.</li>\n</ul>\n<p>FIXME, questions:</p>\n<ol>\n<li>There’s no way to associate <code>Suspense</code> with a lazy component, even if there are multiple lazy dependencies. In other words, each JSX block effectively has just one <code>Suspense</code>, and thus, custom fallback UIs for each cannot be specified.</li>\n<li>Is their a way to associate a <code>Suspense</code> with lazy entity?</li>\n</ol>\n<h2 id=\"advice\">Advice <a class=\"heading-anchor-permalink\" href=\"#advice\">#</a></h2>\n<p>Lazy loading is optional for small apps, but it’s almost compulsory for large apps.</p>\n<p><a href=\"https://github.com/exemplar-codes/react-router-practice/tree/lazy_loading\">See full code example</a></p>\n",
      "id": 98
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/297_Building_the_code_for_production.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/297_Building_the_code_for_production.html",
      "content": "# 297. Building the code for production\nCreated Sunday 30 October 2022\n\n## Why\n- We use `Node.js` as a runtime for our development, and libraries. These are not directly executable in a browser.\n- Also, we don't use all parts of React or libraries we used to build our app. So it doesn't make sense to ship parts which are not needed.\n\nSo, we \"build\" the app code. This generates optimized client side code that can be placed on a server for consumption by browsers.\n\nNote: \n- This \"optimization\" done on \"build\" is configured by default by React and libraries, and refers to bundle size optimization, not the performance of what the code does. Things like `useMemo`, `React.memo`, app architecture need to be done separately.\n- The build step will automatically generate multiple `.js` and `.css` files for each of the lazy loaded entities.\n\n\n## How\nNot important now.\n\n\n## What\nTo build a React app created with `create-react-app`, run `npm run build` from root the app folder. The generated files are kept in `/build` folder. It's not best not to edit them, at all.\n\nOf course, one can edit things like index.html, favicon, robots.txt in the `public` folder before building the code.\n\nContents of `/build` folder are kept on the server, as is.",
      "html": "<h1 id=\"297.-building-the-code-for-production\">297. Building the code for production <a class=\"heading-anchor-permalink\" href=\"#297.-building-the-code-for-production\">#</a></h1>\n<p>Created Sunday 30 October 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<ul>\n<li>We use <code>Node.js</code> as a runtime for our development, and libraries. These are not directly executable in a browser.</li>\n<li>Also, we don’t use all parts of React or libraries we used to build our app. So it doesn’t make sense to ship parts which are not needed.</li>\n</ul>\n<p>So, we “build” the app code. This generates optimized client side code that can be placed on a server for consumption by browsers.</p>\n<p>Note:</p>\n<ul>\n<li>This “optimization” done on “build” is configured by default by React and libraries, and refers to bundle size optimization, not the performance of what the code does. Things like <code>useMemo</code>, <code>React.memo</code>, app architecture need to be done separately.</li>\n<li>The build step will automatically generate multiple <code>.js</code> and <code>.css</code> files for each of the lazy loaded entities.</li>\n</ul>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Not important now.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>To build a React app created with <code>create-react-app</code>, run <code>npm run build</code> from root the app folder. The generated files are kept in <code>/build</code> folder. It’s not best not to edit them, at all.</p>\n<p>Of course, one can edit things like index.html, favicon, robots.txt in the <code>public</code> folder before building the code.</p>\n<p>Contents of <code>/build</code> folder are kept on the server, as is.</p>\n",
      "id": 99
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/298_Getting_started_with_deployment.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/298_Getting_started_with_deployment.html",
      "content": "# 298. Getting started with deployment\nCreated Sunday 30 October 2022\n\n## Situation\nWe have the \"built\" client side code. How do we make it available to everyone on the Internet using a domain (aka link)?\n\nWell, at the very least, we need a \"static site host\" - a server which serves static content (this server side code is generally provided by the server provider).\n\nNote: all SPAs (single page applications) are static sites, i.e. they don't include any server side code. The \"build\" step for an SPA (made using any library) generates only client side code - HTML, CSS, JavaScript and some assets (images, audio, video, txt etc).\n\n## Why\nNeed of deployment is obvious.\n\n\n## How\nPlace the client side files on a static site host.\n\n\n## What - firebase\nAny hosting service can be used - AWS S3, Google Cloud App Engine, Firebase etc.\n\nNote: We are using Firebase backend for the quotes-app, but this doesn't mean we have to use Firebase for hosting too.\n\nWe'll be using Firebase. Steps:\n1. Install `firebase-tools` globally on development computer using `npm`, by running `npm install -g firebase-tools`.\n2. Login using the CLI by running `firebase login`, this will open a browser window and ask for permission.\n3. Configure Firebase settings for the app, by running `firebase init` in the app folder. Firebase CLI will ask some questions now - select hosting service, `/build` as the public directory (this means - where is the client side code stored), select the Firebase project to be used for hosting (or create one), say \"yes\" to \"configure as a single-page app, rewrite all URLs to `/index.html`\", say \"no\" to \"overwrite index.html\".\n4. To deploy, run `firebase deploy`. The app link copied from here.",
      "html": "<h1 id=\"298.-getting-started-with-deployment\">298. Getting started with deployment <a class=\"heading-anchor-permalink\" href=\"#298.-getting-started-with-deployment\">#</a></h1>\n<p>Created Sunday 30 October 2022</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>We have the “built” client side code. How do we make it available to everyone on the Internet using a domain (aka link)?</p>\n<p>Well, at the very least, we need a “static site host” - a server which serves static content (this server side code is generally provided by the server provider).</p>\n<p>Note: all SPAs (single page applications) are static sites, i.e. they don’t include any server side code. The “build” step for an SPA (made using any library) generates only client side code - HTML, CSS, JavaScript and some assets (images, audio, video, txt etc).</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Need of deployment is obvious.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Place the client side files on a static site host.</p>\n<h2 id=\"what---firebase\">What - firebase <a class=\"heading-anchor-permalink\" href=\"#what---firebase\">#</a></h2>\n<p>Any hosting service can be used - AWS S3, Google Cloud App Engine, Firebase etc.</p>\n<p>Note: We are using Firebase backend for the quotes-app, but this doesn’t mean we have to use Firebase for hosting too.</p>\n<p>We’ll be using Firebase. Steps:</p>\n<ol>\n<li>Install <code>firebase-tools</code> globally on development computer using <code>npm</code>, by running <code>npm install -g firebase-tools</code>.</li>\n<li>Login using the CLI by running <code>firebase login</code>, this will open a browser window and ask for permission.</li>\n<li>Configure Firebase settings for the app, by running <code>firebase init</code> in the app folder. Firebase CLI will ask some questions now - select hosting service, <code>/build</code> as the public directory (this means - where is the client side code stored), select the Firebase project to be used for hosting (or create one), say “yes” to &quot;configure as a single-page app, rewrite all URLs to <code>/index.html</code>&quot;, say “no” to “overwrite index.html”.</li>\n<li>To deploy, run <code>firebase deploy</code>. The app link copied from here.</li>\n</ol>\n",
      "id": 100
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/299_Exploring_routing_issues_and_finishing_deployment.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/299_Exploring_routing_issues_and_finishing_deployment.html",
      "content": "# 298. Exploring routing issues and finishing deployment\nCreated Sunday 30 October 2022\n\n## Situation\nLet's consider a typical visit to our website (that uses client side routing) by a user:\n- Assume the first request URL is `/` (i.e. your domain, without any path specified). Our static hosting server will provide the bundle files - HTML, CSS, JS and assets. If we are using lazy loading, the server provides the home page bundle.\n- The website loads successfully.\n- The user clicks on a button that routes them to, say `/path1`. Because we are using `React Router`, it detects the URL change, and renders (directly or by downloading lazy entities) the corresponding view.\n- OK, works fine.\n\nBut what if the user directly enters a path in the URL bar? The server will receive a request for `/path1`, consequently, it will try to find a file named `path1.html`, which is actually absent since our website is a single page app, and we only have one shell (i.e. `/` - `index.html`).\n\nThe server will respond with a 404 error.\n\nThis is not good.\n\nWe should be able to load pages directly by path entered by the user as well.\n\nThe problem isn't with `react-router` or any app code, it's with the server code. \n\nSolution - configure the server to ignore all request URL paths and treat them as `/`.\n\nThis time, when the user runs requests `/path1`, the server receives a request with URL `/path1`, but it ignores it and sends back website code for `/`, which it successfully can. The browser receives the code, but `/path1` URL is persisted in the browser. When the JavaScript code runs, `react-router` notices `/path1` and renders the corresponding view. Success.\n\n\n## Why\nServers, by default, treat URL paths as location for files. This can be an issue for an SPA using client side routing. Because SPAs don't actually have files for different pages.\n\nThis can result in 404 errors. Thus, one needs to configure hosting servers for SPA to ignore paths.\n\n\n## How\nThe simplest way, is to have server side code with a single route defined - `/*` for the bundle code.\n\n\n## What\nMost static site ask or have an option to specify if the app is an SPA.\n\n\n## Question - lazy loading\nQ: If the server responds to only one end point, how does one request for component that needs to be lazy loaded?\nA: Firebase seems to work apps that use lazy loading, after hosting as SPA code. And most other services do too. \n\nMy guess, it's something like this. The server side code actually has 2 _types_ of routes:\n- \"page\" routes - there's only 1 for SPAs - (`/(?!assets).*` - returns the app bundle files, or the \"main\" bundle files if app uses lazy loading)\n- \"asset\" routes - can be multiple for SPA or MPA - `/assets/:asset_name` - returns requested assets like CSS, JS, images, audio, text.\n\nWhen a user makes a path request, it's mostly of the \"page\" type, so they get the main bundle, `react-router` kicks in and makes \"asset\" requests for the lazy entities, and they are fetched.\n\nSee (Browser DevTool > Network tab screenshot):\n- Initial load ![Initial load](../../../../assets/299_Exploring_routing_issues_and_finishing_deployment-image-1-4dcfb7af.png)\n- Lazy loaded page ![Lazy loaded page](../../../../assets/299_Exploring_routing_issues_and_finishing_deployment-image-2-4dcfb7af.png)",
      "html": "<h1 id=\"298.-exploring-routing-issues-and-finishing-deployment\">298. Exploring routing issues and finishing deployment <a class=\"heading-anchor-permalink\" href=\"#298.-exploring-routing-issues-and-finishing-deployment\">#</a></h1>\n<p>Created Sunday 30 October 2022</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Let’s consider a typical visit to our website (that uses client side routing) by a user:</p>\n<ul>\n<li>Assume the first request URL is <code>/</code> (i.e. your domain, without any path specified). Our static hosting server will provide the bundle files - HTML, CSS, JS and assets. If we are using lazy loading, the server provides the home page bundle.</li>\n<li>The website loads successfully.</li>\n<li>The user clicks on a button that routes them to, say <code>/path1</code>. Because we are using <code>React Router</code>, it detects the URL change, and renders (directly or by downloading lazy entities) the corresponding view.</li>\n<li>OK, works fine.</li>\n</ul>\n<p>But what if the user directly enters a path in the URL bar? The server will receive a request for <code>/path1</code>, consequently, it will try to find a file named <code>path1.html</code>, which is actually absent since our website is a single page app, and we only have one shell (i.e. <code>/</code> - <code>index.html</code>).</p>\n<p>The server will respond with a 404 error.</p>\n<p>This is not good.</p>\n<p>We should be able to load pages directly by path entered by the user as well.</p>\n<p>The problem isn’t with <code>react-router</code> or any app code, it’s with the server code.</p>\n<p>Solution - configure the server to ignore all request URL paths and treat them as <code>/</code>.</p>\n<p>This time, when the user runs requests <code>/path1</code>, the server receives a request with URL <code>/path1</code>, but it ignores it and sends back website code for <code>/</code>, which it successfully can. The browser receives the code, but <code>/path1</code> URL is persisted in the browser. When the JavaScript code runs, <code>react-router</code> notices <code>/path1</code> and renders the corresponding view. Success.</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Servers, by default, treat URL paths as location for files. This can be an issue for an SPA using client side routing. Because SPAs don’t actually have files for different pages.</p>\n<p>This can result in 404 errors. Thus, one needs to configure hosting servers for SPA to ignore paths.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>The simplest way, is to have server side code with a single route defined - <code>/*</code> for the bundle code.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Most static site ask or have an option to specify if the app is an SPA.</p>\n<h2 id=\"question---lazy-loading\">Question - lazy loading <a class=\"heading-anchor-permalink\" href=\"#question---lazy-loading\">#</a></h2>\n<p>Q: If the server responds to only one end point, how does one request for component that needs to be lazy loaded?\nA: Firebase seems to work apps that use lazy loading, after hosting as SPA code. And most other services do too.</p>\n<p>My guess, it’s something like this. The server side code actually has 2 <em>types</em> of routes:</p>\n<ul>\n<li>“page” routes - there’s only 1 for SPAs - (<code>/(?!assets).*</code> - returns the app bundle files, or the “main” bundle files if app uses lazy loading)</li>\n<li>“asset” routes - can be multiple for SPA or MPA - <code>/assets/:asset_name</code> - returns requested assets like CSS, JS, images, audio, text.</li>\n</ul>\n<p>When a user makes a path request, it’s mostly of the “page” type, so they get the main bundle, <code>react-router</code> kicks in and makes “asset” requests for the lazy entities, and they are fetched.</p>\n<p>See (Browser DevTool &gt; Network tab screenshot):</p>\n<ul>\n<li>Initial load <img src=\"../../../../assets/299_Exploring_routing_issues_and_finishing_deployment-image-1-4dcfb7af.png\" alt=\"Initial load\"></li>\n<li>Lazy loaded page <img src=\"../../../../assets/299_Exploring_routing_issues_and_finishing_deployment-image-2-4dcfb7af.png\" alt=\"Lazy loaded page\"></li>\n</ul>\n",
      "id": 101
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/301_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/301_Module_introduction.html",
      "content": "# 301. Module introduction\nCreated Monday 31 October 2022\n\nIn this section:\n- How authentication works\n- Implementing user authentication\n- Auth persistence and auto logout\n\nProject code: https://github.com/exemplar-codes/react-auth-basic-practice",
      "html": "<h1 id=\"301.-module-introduction\">301. Module introduction <a class=\"heading-anchor-permalink\" href=\"#301.-module-introduction\">#</a></h1>\n<p>Created Monday 31 October 2022</p>\n<p>In this section:</p>\n<ul>\n<li>How authentication works</li>\n<li>Implementing user authentication</li>\n<li>Auth persistence and auto logout</li>\n</ul>\n<p>Project code: <a href=\"https://github.com/exemplar-codes/react-auth-basic-practice\">https://github.com/exemplar-codes/react-auth-basic-practice</a></p>\n",
      "id": 102
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/302_What_How_and_Why.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/302_What_How_and_Why.html",
      "content": "# 302. What, How and Why?\nCreated Monday 31 October 2022\n\n## Why\nSecurity\n\n\n## What\n- Authentication just means signup/login.\n- Technically, authentication is a way to restrict access to resources. \n- In web apps, it's used to restrict access to pages (via links) or data (via API requests to our server).\nExample - email login, bank account login, or any other login for that matter.\n\n\n## How\nAssuming we have our user account already made, the authentication process is simple:\n1. Login - send login _credentials_ which the server can verify. If we provide correct credentials, we get some unique _data_ generated by the server.\n2. Access - this \"data\" (from step 1) is added to all subsequent requests to the server, in order to access protected content.\n\nNote that from an app functionality point of view, the only thing that matters is _access_ (step 2 with or without \"data\"). But if step 2 doesn't have \"data\", it could be by anyone, which is not secure. Step 1 (login) establishes security of step 2 (access).\n\n\n## Implementation approaches for web authentication\nTwo approaches are:\n1. **Server-side sessions** - on login, i.e. successful credential verification of a client, the server generates, stores and sends back a \"session data\" to the client. This \"data\" is sent (along with the request payload) by the client and verified (basic equality check) by the server for all subsequent requests. The server may regenerate this \"session data\" at any time, but this doesn't affect the flow at all.\n2. **Authentication tokens** - uses authentication property of asymmetric encryption. On login, i.e. successful credential verification of a client, the server generates and sends back a \"token\" to the client. BUT, it does not store the \"token\". This \"token\" is sent (along with the request payload) by the client and verified (using ~public private key match) by the server for all subsequent requests. The server may regenerate this \"token\" at any time, but this doesn't affect the flow at all.\n\n1 is suitable if all requests (SPA/pages, content, data) are made to the same server. But if an app uses multiple servers (decoupled backend), then it's not so suitable (Why?? the client can have multiple server-side tokens, one for each server).\n\nWhat to do - all backend services should be decoupled from each other (WTF? That's what I wrote above!)\n\nFIXME: server-side sessions and authentication tokens use equality(symmetric) and asymmetric encryption for security. They have nothing to do with coupled, decoupled backends! See [this](https://dev.to/thecodearcher/what-really-is-the-difference-between-session-and-token-based-authentication-2o39#:~:text=both%20methods%20can%20be%20used%20interchangeably%20or%20together%20to%20create%20a%20hybrid%20system.%20).\n\n\n### Comparison\n- [Fireship - Session vs Token Authentication in 100 Seconds](https://www.youtube.com/watch?v=UBUNrFtufWo&ab_channel=Fireship)\n- Session approach will need the server to be stateful (i.e. store session files), while tokens don't have any server overhead (storage).\n- Session approach allows for individually (based on user info) set session parameters, while tokens are more general.\n\n\n### Vulnerability\nAn attacker can easily impersonate a legitimate user stealing the \"session data/auth token\", or in CSRF, XSS attacks. Sessions are protected from CSRF by most frontend libraries/frameworks.",
      "html": "<h1 id=\"302.-what%2C-how-and-why%3F\">302. What, How and Why? <a class=\"heading-anchor-permalink\" href=\"#302.-what%2C-how-and-why%3F\">#</a></h1>\n<p>Created Monday 31 October 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Security</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<ul>\n<li>Authentication just means signup/login.</li>\n<li>Technically, authentication is a way to restrict access to resources.</li>\n<li>In web apps, it’s used to restrict access to pages (via links) or data (via API requests to our server).\nExample - email login, bank account login, or any other login for that matter.</li>\n</ul>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Assuming we have our user account already made, the authentication process is simple:</p>\n<ol>\n<li>Login - send login <em>credentials</em> which the server can verify. If we provide correct credentials, we get some unique <em>data</em> generated by the server.</li>\n<li>Access - this “data” (from step 1) is added to all subsequent requests to the server, in order to access protected content.</li>\n</ol>\n<p>Note that from an app functionality point of view, the only thing that matters is <em>access</em> (step 2 with or without “data”). But if step 2 doesn’t have “data”, it could be by anyone, which is not secure. Step 1 (login) establishes security of step 2 (access).</p>\n<h2 id=\"implementation-approaches-for-web-authentication\">Implementation approaches for web authentication <a class=\"heading-anchor-permalink\" href=\"#implementation-approaches-for-web-authentication\">#</a></h2>\n<p>Two approaches are:</p>\n<ol>\n<li><strong>Server-side sessions</strong> - on login, i.e. successful credential verification of a client, the server generates, stores and sends back a “session data” to the client. This “data” is sent (along with the request payload) by the client and verified (basic equality check) by the server for all subsequent requests. The server may regenerate this “session data” at any time, but this doesn’t affect the flow at all.</li>\n<li><strong>Authentication tokens</strong> - uses authentication property of asymmetric encryption. On login, i.e. successful credential verification of a client, the server generates and sends back a “token” to the client. BUT, it does not store the “token”. This “token” is sent (along with the request payload) by the client and verified (using ~public private key match) by the server for all subsequent requests. The server may regenerate this “token” at any time, but this doesn’t affect the flow at all.</li>\n</ol>\n<p>1 is suitable if all requests (SPA/pages, content, data) are made to the same server. But if an app uses multiple servers (decoupled backend), then it’s not so suitable (Why?? the client can have multiple server-side tokens, one for each server).</p>\n<p>What to do - all backend services should be decoupled from each other (WTF? That’s what I wrote above!)</p>\n<p>FIXME: server-side sessions and authentication tokens use equality(symmetric) and asymmetric encryption for security. They have nothing to do with coupled, decoupled backends! See <a href=\"https://dev.to/thecodearcher/what-really-is-the-difference-between-session-and-token-based-authentication-2o39#:~:text=both%20methods%20can%20be%20used%20interchangeably%20or%20together%20to%20create%20a%20hybrid%20system.%20\">this</a>.</p>\n<h3 id=\"comparison\">Comparison <a class=\"heading-anchor-permalink\" href=\"#comparison\">#</a></h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=UBUNrFtufWo&amp;ab_channel=Fireship\">Fireship - Session vs Token Authentication in 100 Seconds</a></li>\n<li>Session approach will need the server to be stateful (i.e. store session files), while tokens don’t have any server overhead (storage).</li>\n<li>Session approach allows for individually (based on user info) set session parameters, while tokens are more general.</li>\n</ul>\n<h3 id=\"vulnerability\">Vulnerability <a class=\"heading-anchor-permalink\" href=\"#vulnerability\">#</a></h3>\n<p>An attacker can easily impersonate a legitimate user stealing the “session data/auth token”, or in CSRF, XSS attacks. Sessions are protected from CSRF by most frontend libraries/frameworks.</p>\n",
      "id": 103
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/303_Adding_user_signup.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/303_Adding_user_signup.html",
      "content": "# 303. Adding user sign up\nCreated Saturday 19 November 2022\n\nWe'll be using Firebase's authentication feature as the backend for authorization.\n\n## Firebase setup\n1. Open (or create) a Firebase project.\n2. Go to Authentication and click 'Get started'.\n3. Choose a provider, we're using email/password for now.\n4. Enable the provider. Leave the _passwordless_ option disabled.\n\nThen, get the API key:\n1. Go to the project's page.\n2. Click the gear icon in the sidebar, click \"Project settings\"\n3. Copy the string with label \"Web API key\".\n\nThis API key is needed to access Firebase Authentication's REST API.",
      "html": "<h1 id=\"303.-adding-user-sign-up\">303. Adding user sign up <a class=\"heading-anchor-permalink\" href=\"#303.-adding-user-sign-up\">#</a></h1>\n<p>Created Saturday 19 November 2022</p>\n<p>We’ll be using Firebase’s authentication feature as the backend for authorization.</p>\n<h2 id=\"firebase-setup\">Firebase setup <a class=\"heading-anchor-permalink\" href=\"#firebase-setup\">#</a></h2>\n<ol>\n<li>Open (or create) a Firebase project.</li>\n<li>Go to Authentication and click ‘Get started’.</li>\n<li>Choose a provider, we’re using email/password for now.</li>\n<li>Enable the provider. Leave the <em>passwordless</em> option disabled.</li>\n</ol>\n<p>Then, get the API key:</p>\n<ol>\n<li>Go to the project’s page.</li>\n<li>Click the gear icon in the sidebar, click “Project settings”</li>\n<li>Copy the string with label “Web API key”.</li>\n</ol>\n<p>This API key is needed to access Firebase Authentication’s REST API.</p>\n",
      "id": 104
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/304_Three_basic_flows.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/304_Three_basic_flows.html",
      "content": "# 304. Three basic flows\nCreated Sunday 20 November 2022\n\n## Code - sign up, sign in, access protected content/server-action\n1. Create a global state (I'm using Context API), to store the token and \"loggedIn\" derived state. Also include a `setToken` function.\n2. Three actions are possible now:\n\t1. Sign up - get the credentials from a form, send the email and password, and if there are no errors, store the received auth token(called `idToken` in Firebase Auth). This token will need to be included in all subsequent requests after login (sign up may be considered login, assuming there's no bot verification, for simplicity).\n\t2. Login - get the creds, send them. There's no need to use the token, since credentials are enough. But do update the stored token, as it may have expired.\n\t3. Access protected resource - include the token in all requests for protected content/server-actions. The server may be instructed to return the token in every response, so token expiry doesn't trigger a need to re-login.\n\nThe location of token in the request is decided by the backend creator. Most common locations are:\n1. In the `request.body` \n2. In `request.headers.Authorization` (value will be `Bearer {token}`).\n3. As a query string, e.g. `[link]?token=[token]`.\n\nIn any case, using HTTPS is very important for all auth traffic, atleast.\n\nCode: from [here](https://github.com/exemplar-codes/react-auth-basic-practice/commit/96512287b1f38a41e8c3d0ab808d070fcc45ce60) to [here](https://github.com/exemplar-codes/react-auth-basic-practice/commit/9b0b3398668295488292e0494df6f18b38b95ff3).",
      "html": "<h1 id=\"304.-three-basic-flows\">304. Three basic flows <a class=\"heading-anchor-permalink\" href=\"#304.-three-basic-flows\">#</a></h1>\n<p>Created Sunday 20 November 2022</p>\n<h2 id=\"code---sign-up%2C-sign-in%2C-access-protected-content%2Fserver-action\">Code - sign up, sign in, access protected content/server-action <a class=\"heading-anchor-permalink\" href=\"#code---sign-up%2C-sign-in%2C-access-protected-content%2Fserver-action\">#</a></h2>\n<ol>\n<li>Create a global state (I’m using Context API), to store the token and “loggedIn” derived state. Also include a <code>setToken</code> function.</li>\n<li>Three actions are possible now:\n<ol>\n<li>Sign up - get the credentials from a form, send the email and password, and if there are no errors, store the received auth token(called <code>idToken</code> in Firebase Auth). This token will need to be included in all subsequent requests after login (sign up may be considered login, assuming there’s no bot verification, for simplicity).</li>\n<li>Login - get the creds, send them. There’s no need to use the token, since credentials are enough. But do update the stored token, as it may have expired.</li>\n<li>Access protected resource - include the token in all requests for protected content/server-actions. The server may be instructed to return the token in every response, so token expiry doesn’t trigger a need to re-login.</li>\n</ol>\n</li>\n</ol>\n<p>The location of token in the request is decided by the backend creator. Most common locations are:</p>\n<ol>\n<li>In the <code>request.body</code></li>\n<li>In <code>request.headers.Authorization</code> (value will be <code>Bearer {token}</code>).</li>\n<li>As a query string, e.g. <code>[link]?token=[token]</code>.</li>\n</ol>\n<p>In any case, using HTTPS is very important for all auth traffic, atleast.</p>\n<p>Code: from <a href=\"https://github.com/exemplar-codes/react-auth-basic-practice/commit/96512287b1f38a41e8c3d0ab808d070fcc45ce60\">here</a> to <a href=\"https://github.com/exemplar-codes/react-auth-basic-practice/commit/9b0b3398668295488292e0494df6f18b38b95ff3\">here</a>.</p>\n",
      "id": 105
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/309_Polishing_the_UI_redirects.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/309_Polishing_the_UI_redirects.html",
      "content": "# 309. Polishing the UI - redirects\nCreated Sunday 20 November 2022\n\n## Polishing the UI - redirects after successful signup, sign in, sign out\n- Redirects - redirect the user to the home page on successful sign up, log in. Also redirect them to the  and login page on logout. Using the `useHistory` hook.\n\n[See code](https://github.com/exemplar-codes/react-auth-basic-practice/commit/f4c387815a6f6aa97b5589ac08ba44951924fbe9)",
      "html": "<h1 id=\"309.-polishing-the-ui---redirects\">309. Polishing the UI - redirects <a class=\"heading-anchor-permalink\" href=\"#309.-polishing-the-ui---redirects\">#</a></h1>\n<p>Created Sunday 20 November 2022</p>\n<h2 id=\"polishing-the-ui---redirects-after-successful-signup%2C-sign-in%2C-sign-out\">Polishing the UI - redirects after successful signup, sign in, sign out <a class=\"heading-anchor-permalink\" href=\"#polishing-the-ui---redirects-after-successful-signup%2C-sign-in%2C-sign-out\">#</a></h2>\n<ul>\n<li>Redirects - redirect the user to the home page on successful sign up, log in. Also redirect them to the  and login page on logout. Using the <code>useHistory</code> hook.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/react-auth-basic-practice/commit/f4c387815a6f6aa97b5589ac08ba44951924fbe9\">See code</a></p>\n",
      "id": 106
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/310_Logout.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/310_Logout.html",
      "content": "# 310. Logout\nCreated Sunday 20 November 2022\n\n## Logout procedure\nThe server, in case of auth tokens, doesn't care about the login state of the user. This means  that there's no need to send a request when the user logs out.\n\nSo, just reset the token to be empty, and we're done.\n\n[See code](https://github.com/exemplar-codes/react-auth-basic-practice/commit/78f744857ce71f75b59346ffcaa587c69afe48b8)",
      "html": "<h1 id=\"310.-logout\">310. Logout <a class=\"heading-anchor-permalink\" href=\"#310.-logout\">#</a></h1>\n<p>Created Sunday 20 November 2022</p>\n<h2 id=\"logout-procedure\">Logout procedure <a class=\"heading-anchor-permalink\" href=\"#logout-procedure\">#</a></h2>\n<p>The server, in case of auth tokens, doesn’t care about the login state of the user. This means  that there’s no need to send a request when the user logs out.</p>\n<p>So, just reset the token to be empty, and we’re done.</p>\n<p><a href=\"https://github.com/exemplar-codes/react-auth-basic-practice/commit/78f744857ce71f75b59346ffcaa587c69afe48b8\">See code</a></p>\n",
      "id": 107
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/311_Protected_pages.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/311_Protected_pages.html",
      "content": "# 311. Protected pages\nCreated Sunday 20 November 2022\n\n## Situation\nWhen the user is not logged in, they shouldn't be able to access the change password page, which they can do now, by manually changing the URL.\n\n## Solution\nWe need something like \"navigation guards\". It's a fancy term where the routes are dynamic based on logged in status. Basically, we render protected pages only if they are logged in.\n\nGeneralizing this, one can set different guarding criteria for all parts of the app.\n\nNote, it's good to redirect (or show a message) if the user tries to access a protected page.\n\n## Note\n\"Navigation guards\" are implemented on the client side, and, technically speaking, they can be disabled/changed. But we don't need to worry about this, since the user will still need to send the auth token to access protected content/data.\n\nIn any case, one should never rely on client side code for security.\n\n[See code](https://github.com/exemplar-codes/react-auth-basic-practice/commit/04d47ed555dd3d897492f0cfe5fd91d89c292cee)",
      "html": "<h1 id=\"311.-protected-pages\">311. Protected pages <a class=\"heading-anchor-permalink\" href=\"#311.-protected-pages\">#</a></h1>\n<p>Created Sunday 20 November 2022</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>When the user is not logged in, they shouldn’t be able to access the change password page, which they can do now, by manually changing the URL.</p>\n<h2 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h2>\n<p>We need something like “navigation guards”. It’s a fancy term where the routes are dynamic based on logged in status. Basically, we render protected pages only if they are logged in.</p>\n<p>Generalizing this, one can set different guarding criteria for all parts of the app.</p>\n<p>Note, it’s good to redirect (or show a message) if the user tries to access a protected page.</p>\n<h2 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h2>\n<p>“Navigation guards” are implemented on the client side, and, technically speaking, they can be disabled/changed. But we don’t need to worry about this, since the user will still need to send the auth token to access protected content/data.</p>\n<p>In any case, one should never rely on client side code for security.</p>\n<p><a href=\"https://github.com/exemplar-codes/react-auth-basic-practice/commit/04d47ed555dd3d897492f0cfe5fd91d89c292cee\">See code</a></p>\n",
      "id": 108
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/312. Persisting login state.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/312. Persisting login state.html",
      "content": "# 312. Persisting login state\nCreated Sunday 27 November 2022\n\n## Why\nIt's a major hassle to log in to a website every time one visits. The problem only becomes worse because most applications today are web applications.\n\nIt would be great if the user just had to log in once, and all subsequent visits (even when the browser was re-opened) would just store this login state.\n\n## How\n- During a visit, auth tokens are stored on the client side. \n- Also, they don't change on every visit, depends on the web app though.\n\nThese two facts imply that saving the auth token (to disk - i.e. browser controller storage) would not be such a security problem, since an attacker can steal the auth tokens during a visit anyway, if they have direct access to the computer.\n\nSome safety measures:\n1. We can make this more secure(? is it \"more\") by having the browser encrypt the auth tokens before saving them to disk, so no other local app on the user's device can use them. They'll only be available inside the browser. This doesn't concern the web app developer, though.\n2. Of course, one can enforce a time limit like 20 days, when the user would have to log in manually. This time limit could be baked into the auth token itself, so that the server doesn't have to store anything.\n\nThe **sign-up/log-in/use flow** is something like this:\n1. The user signs up/ logs in - we persist the received auth token and the expiry datetime (if any). We also save the token in web app's RAM (e.g. Redux store).\n2. For all subsequent requests, we send the auth token from the Redux store. The server responds. Three cases are possible here:\n\t1. The token remains the same - the server just sends the same token back or an indicator saying it has not changed. We do nothing, just continue.\n\t2. The token has changed - the server will provide the new token in the response. We update the token stored in disk (`localStorage`). We also update the Redux store.\n\t3. The server responds with indication to manually log in, for example by sending an empty token. In this case we reset both the `localStorage` and Redux and start the flow from the beginning.\n3. The user continues using the app, then closes the browser/tab or refreshes.\n4. When the user visits the site again, we see if the persisted token has:\n\t- Not expired - we initialize the token from `localStorage` to the Redux store. And the flow starts again.\n\t- Expired - we remove the token from `localStorage`. When the app loads, Redux is not able to find any stored token, so the flow starts again. But this time, the user needs to log in manually.\n\n**Logout flow** - Just remove/clear the token from `localStorage`. Show a timed \"You've logged out toast/notification\" if you want.\n\nNote - the expiry time of a token is somewhat ambiguous:\n1. It could mean *when* the token will change *next* (and the server won't send the new token without manual login).\n2. Or. It could mean that the token can change between requests, but the expiry refers to the need for manual login.\nHowever, this doesn't concern the web app developer. Just assume the token can change frequently without need for login, both cases are handled.\n\n## What\nOne can simply use `localStorage`, or some other storage. \nNote - tokens kept in `localStorage` are vulnerable to XSS attacks. But XSS attacks are a huge problem anyway for a web app.\n\n## Demo\nWe are going to use the `localStorage` to save the auth token.",
      "html": "<h1 id=\"312.-persisting-login-state\">312. Persisting login state <a class=\"heading-anchor-permalink\" href=\"#312.-persisting-login-state\">#</a></h1>\n<p>Created Sunday 27 November 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>It’s a major hassle to log in to a website every time one visits. The problem only becomes worse because most applications today are web applications.</p>\n<p>It would be great if the user just had to log in once, and all subsequent visits (even when the browser was re-opened) would just store this login state.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<ul>\n<li>During a visit, auth tokens are stored on the client side.</li>\n<li>Also, they don’t change on every visit, depends on the web app though.</li>\n</ul>\n<p>These two facts imply that saving the auth token (to disk - i.e. browser controller storage) would not be such a security problem, since an attacker can steal the auth tokens during a visit anyway, if they have direct access to the computer.</p>\n<p>Some safety measures:</p>\n<ol>\n<li>We can make this more secure(? is it “more”) by having the browser encrypt the auth tokens before saving them to disk, so no other local app on the user’s device can use them. They’ll only be available inside the browser. This doesn’t concern the web app developer, though.</li>\n<li>Of course, one can enforce a time limit like 20 days, when the user would have to log in manually. This time limit could be baked into the auth token itself, so that the server doesn’t have to store anything.</li>\n</ol>\n<p>The <strong>sign-up/log-in/use flow</strong> is something like this:</p>\n<ol>\n<li>The user signs up/ logs in - we persist the received auth token and the expiry datetime (if any). We also save the token in web app’s RAM (e.g. Redux store).</li>\n<li>For all subsequent requests, we send the auth token from the Redux store. The server responds. Three cases are possible here:\n<ol>\n<li>The token remains the same - the server just sends the same token back or an indicator saying it has not changed. We do nothing, just continue.</li>\n<li>The token has changed - the server will provide the new token in the response. We update the token stored in disk (<code>localStorage</code>). We also update the Redux store.</li>\n<li>The server responds with indication to manually log in, for example by sending an empty token. In this case we reset both the <code>localStorage</code> and Redux and start the flow from the beginning.</li>\n</ol>\n</li>\n<li>The user continues using the app, then closes the browser/tab or refreshes.</li>\n<li>When the user visits the site again, we see if the persisted token has:\n<ul>\n<li>Not expired - we initialize the token from <code>localStorage</code> to the Redux store. And the flow starts again.</li>\n<li>Expired - we remove the token from <code>localStorage</code>. When the app loads, Redux is not able to find any stored token, so the flow starts again. But this time, the user needs to log in manually.</li>\n</ul>\n</li>\n</ol>\n<p><strong>Logout flow</strong> - Just remove/clear the token from <code>localStorage</code>. Show a timed “You’ve logged out toast/notification” if you want.</p>\n<p>Note - the expiry time of a token is somewhat ambiguous:</p>\n<ol>\n<li>It could mean <em>when</em> the token will change <em>next</em> (and the server won’t send the new token without manual login).</li>\n<li>Or. It could mean that the token can change between requests, but the expiry refers to the need for manual login.\nHowever, this doesn’t concern the web app developer. Just assume the token can change frequently without need for login, both cases are handled.</li>\n</ol>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>One can simply use <code>localStorage</code>, or some other storage.\nNote - tokens kept in <code>localStorage</code> are vulnerable to XSS attacks. But XSS attacks are a huge problem anyway for a web app.</p>\n<h2 id=\"demo\">Demo <a class=\"heading-anchor-permalink\" href=\"#demo\">#</a></h2>\n<p>We are going to use the <code>localStorage</code> to save the auth token.</p>\n",
      "id": 109
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/313. Auto-logout.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/22_Adding_authentication_to_React_apps/313. Auto-logout.html",
      "content": "# 313. Auto logout\nCreated Sunday 27 November 2022\n\n## Why\nWe need to log the user out:\n1. Visits the app but token has already expired.\n2. Token expires during app use.\n\n## How\nThe two cases:\n1. **Visits the app but token has already expired** - We can check this when the app starts, and reset all auth related data, effectively logging them out. Of course, this will happen fast, so it will appear as if the user has never logged in, good.\n2. **Token expires during app use** - we need to create a timer (using `setTimeout`). Also, we need to take care that there's always just one auto logout timer at all times. For example - when the app starts(assume token has not expired), the timer is initialized. The user now logs out (manually) and logs back in, which will create a new timer. The old timer is till there, and will cause premature log out. This can be solved by saving the timer in a state (`useState`)  and clearing it when token renews, the user logs out. The very last timer, i.e. on app close (like tab closed/window closed) is killed with the tab/window being closed.\n\nSee code - [start](https://github.com/exemplar-codes/react-auth-basic-practice/commit/8db81f06493c327e8ba94fd6145053187102ecf5) to [finish](https://github.com/exemplar-codes/react-auth-basic-practice/commit/b3a14b19b976a096166fad0ad705b953d565d0a7).",
      "html": "<h1 id=\"313.-auto-logout\">313. Auto logout <a class=\"heading-anchor-permalink\" href=\"#313.-auto-logout\">#</a></h1>\n<p>Created Sunday 27 November 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>We need to log the user out:</p>\n<ol>\n<li>Visits the app but token has already expired.</li>\n<li>Token expires during app use.</li>\n</ol>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>The two cases:</p>\n<ol>\n<li><strong>Visits the app but token has already expired</strong> - We can check this when the app starts, and reset all auth related data, effectively logging them out. Of course, this will happen fast, so it will appear as if the user has never logged in, good.</li>\n<li><strong>Token expires during app use</strong> - we need to create a timer (using <code>setTimeout</code>). Also, we need to take care that there’s always just one auto logout timer at all times. For example - when the app starts(assume token has not expired), the timer is initialized. The user now logs out (manually) and logs back in, which will create a new timer. The old timer is till there, and will cause premature log out. This can be solved by saving the timer in a state (<code>useState</code>)  and clearing it when token renews, the user logs out. The very last timer, i.e. on app close (like tab closed/window closed) is killed with the tab/window being closed.</li>\n</ol>\n<p>See code - <a href=\"https://github.com/exemplar-codes/react-auth-basic-practice/commit/8db81f06493c327e8ba94fd6145053187102ecf5\">start</a> to <a href=\"https://github.com/exemplar-codes/react-auth-basic-practice/commit/b3a14b19b976a096166fad0ad705b953d565d0a7\">finish</a>.</p>\n",
      "id": 110
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/316_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/316_Module_introduction.html",
      "content": "# 316. Intro to Next.js\nCreated Sunday 27 November 2022\n\nWe'll go over Next.js, going moderately deep into it's concepts and syntax.",
      "html": "<h1 id=\"316.-intro-to-next.js\">316. Intro to Next.js <a class=\"heading-anchor-permalink\" href=\"#316.-intro-to-next.js\">#</a></h1>\n<p>Created Sunday 27 November 2022</p>\n<p>We’ll go over Next.js, going moderately deep into it’s concepts and syntax.</p>\n",
      "id": 111
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/317_What_is_Next_js.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/317_What_is_Next_js.html",
      "content": "# 317. What is Next.js?\nCreated Tuesday 6 December 2022\n\n[Next.js](https://nextjs.org/) is a fullstack(front-end heavy) framework for building large scale web apps.\n- [Next.js in 100 seconds](https://www.youtube.com/watch?v=Sklc_fQBmcs&ab_channel=Fireship)\n- It builds up on React, or in other words, it is React + framework rules + helper libraries to do common tasks needed for \"production\" scale web apps.\n- In short, it eases in the development of React apps. This is because React is not opinionated and so it can be difficult to work with different libraries coherently.\n![](../../../../../assets/317_What_is_Next_js-image-1-c9bfacde.png)\n",
      "html": "<h1 id=\"317.-what-is-next.js%3F\">317. What is Next.js? <a class=\"heading-anchor-permalink\" href=\"#317.-what-is-next.js%3F\">#</a></h1>\n<p>Created Tuesday 6 December 2022</p>\n<p><a href=\"https://nextjs.org/\">Next.js</a> is a fullstack(front-end heavy) framework for building large scale web apps.</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=Sklc_fQBmcs&amp;ab_channel=Fireship\">Next.js in 100 seconds</a></li>\n<li>It builds up on React, or in other words, it is React + framework rules + helper libraries to do common tasks needed for “production” scale web apps.</li>\n<li>In short, it eases in the development of React apps. This is because React is not opinionated and so it can be difficult to work with different libraries coherently.\n<img src=\"../../../../../assets/317_What_is_Next_js-image-1-c9bfacde.png\" alt=\"\"></li>\n</ul>\n",
      "id": 112
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/318_1st_key_feature_SSR.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/318_1st_key_feature_SSR.html",
      "content": "# 318. 1st key feature: SSR\nCreated Tuesday 6 December 2022\n\nThe most important feature of Next.js: Server-side rendering (SSR) - helps with SEO and first-load performance.\n\n## Why\nIn an pure SPA, an empty shell (something like `<div id=\"root\" />`) is sent as the HTML on first load. When the JavaScript finished downloading, it builds up the markup dynamically and styles are also applied. This has two major drawbacks:\n1. **Search Engine Optimization/Discovery** - almost all search engines can primarily only recognize static HTML documents and crawl using the links present in them. As the SPA is an empty shell, i.e. no discoverable or crawlable content, it is ignored by search engines. This is a serious issue for public web apps, since finding things and customer traffic are important.\n2. **First contentful load (wait time is long)** - since SPA's are mostly empty markup that are built dynamically by JavaScript, it can hinder first load. There are two aspects to it:\n\t1. **Downloading large bundle of SPA** - since SPA's want to minimize content requests to the server, the whole app, generally (assuming minimum code splittling), is bundled into a single file, which it too big. This means the first load will take a relatively long time, which is very bad a UX and users will simply exit the app.\n\t2. **Late first data request** - even if a bundle is small and the SPA loads fast, \"data\" still has to be fetched from the server. This \"fetch\" request will only be run *after* the SPA has loaded properly. So total time = HTML/CSS download + bundle download + \"data\" fetch. Whereas a static site would just have HTML/CSS/vanillaJS download.\n\n*Pure SPA first page*\n![](../../../../../assets/318_1st_key_feature_SSR-image-1-c9bfacde.png)\n\n\n## How\nAll these issues are solved using a technique called server-side rendering (SSR). The key is to send a full markup page imbued with data instead of an empty SPA shell. All issues are solved:\n1. SEO - bots get the complete markup they want.\n2. Native load times - the browser gets a full page (with data) on first request. In the meantime, the SPA bundle download finishes. All subsequent interactions happen exactly like a pure SPA, which we want of course, coz no reloads/latency (the original reason for making an SPA).\n\n*SSR first page*\n![](../../../../../assets/318_1st_key_feature_SSR-image-2-c9bfacde.png)\n\n**Catch**: Of course, we need to generate the first page at run-time on the server, in other words a static-server/CDN is not enough at all. We can solve this partially by pre-rendering pages and caching them on a CDN using some smart heuristic/strategy, atleast for fast changing public pages.\n\n**Should all apps use SSR**: SSR is good. But it is *not very useful* for:\n1. Private pages, assuming SEO is the major goal.\n2. High frequency app, say a B2B/non-public dashboard where speed (think pre-rendering) doesn't matter.\n3. For small apps which have a lot of private pages, don't need SEO and pre-rendering won't be noticeable.\n\n**Assumptions**\n1. Sending pre-rendered \"first\" pages is fast - i.e. server (Node.js in case of Next) can quickly build markup (at request time), comparable or much faster than a layout engine does in a client browser.\n2. Our first data requests (data to be imbued into markup) are fast enough from a backend performance perspective. e.g. if the server itself has to make many requests externally, then the point of SSR is set moot. This could be solved by incrementally pre-rendering most requested pages (or some other heuristic), this is called ISR (incremental server rendering).\n\n\n## What\nWe make components just like in any SPA, since the app will behave exactly like a usual SPA.\n\nEssentially, the only difference is that on first page request, we *mock* \"requests\" that a SPA would make on the client, directly (FIXME: lame headless browser?) on the server. This gives us both the markup (for search bots) and initial data (fast first contentful load).\n\nBecause the SSR process is for first load only, and essentially optional, an app written in Next.js (or any SSR app) can still be deployed with almost no changes using a static-server/CDN. SEO and first load won't be good, but it's certainly better than nothing. In other words, an SSR app falls back to behaving like a pure SPA if it's kept on a static server.\n\nThe code is very simple:\n```\nexport const Component = ...; // makes request and all\n\nexport requestMocker = ...; // get data from database and mock them as response\n```\nThe SSR runtime will run the request page's component in context of the `requestMocker` to generate markup. If we are running in SPA mode (i.e. on a static server), this simply does not take place.\n",
      "html": "<h1 id=\"318.-1st-key-feature%3A-ssr\">318. 1st key feature: SSR <a class=\"heading-anchor-permalink\" href=\"#318.-1st-key-feature%3A-ssr\">#</a></h1>\n<p>Created Tuesday 6 December 2022</p>\n<p>The most important feature of Next.js: Server-side rendering (SSR) - helps with SEO and first-load performance.</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>In an pure SPA, an empty shell (something like <code>&lt;div id=&quot;root&quot; /&gt;</code>) is sent as the HTML on first load. When the JavaScript finished downloading, it builds up the markup dynamically and styles are also applied. This has two major drawbacks:</p>\n<ol>\n<li><strong>Search Engine Optimization/Discovery</strong> - almost all search engines can primarily only recognize static HTML documents and crawl using the links present in them. As the SPA is an empty shell, i.e. no discoverable or crawlable content, it is ignored by search engines. This is a serious issue for public web apps, since finding things and customer traffic are important.</li>\n<li><strong>First contentful load (wait time is long)</strong> - since SPA’s are mostly empty markup that are built dynamically by JavaScript, it can hinder first load. There are two aspects to it:\n<ol>\n<li><strong>Downloading large bundle of SPA</strong> - since SPA’s want to minimize content requests to the server, the whole app, generally (assuming minimum code splittling), is bundled into a single file, which it too big. This means the first load will take a relatively long time, which is very bad a UX and users will simply exit the app.</li>\n<li><strong>Late first data request</strong> - even if a bundle is small and the SPA loads fast, “data” still has to be fetched from the server. This “fetch” request will only be run <em>after</em> the SPA has loaded properly. So total time = HTML/CSS download + bundle download + “data” fetch. Whereas a static site would just have HTML/CSS/vanillaJS download.</li>\n</ol>\n</li>\n</ol>\n<p><em>Pure SPA first page</em>\n<img src=\"../../../../../assets/318_1st_key_feature_SSR-image-1-c9bfacde.png\" alt=\"\"></p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>All these issues are solved using a technique called server-side rendering (SSR). The key is to send a full markup page imbued with data instead of an empty SPA shell. All issues are solved:</p>\n<ol>\n<li>SEO - bots get the complete markup they want.</li>\n<li>Native load times - the browser gets a full page (with data) on first request. In the meantime, the SPA bundle download finishes. All subsequent interactions happen exactly like a pure SPA, which we want of course, coz no reloads/latency (the original reason for making an SPA).</li>\n</ol>\n<p><em>SSR first page</em>\n<img src=\"../../../../../assets/318_1st_key_feature_SSR-image-2-c9bfacde.png\" alt=\"\"></p>\n<p><strong>Catch</strong>: Of course, we need to generate the first page at run-time on the server, in other words a static-server/CDN is not enough at all. We can solve this partially by pre-rendering pages and caching them on a CDN using some smart heuristic/strategy, atleast for fast changing public pages.</p>\n<p><strong>Should all apps use SSR</strong>: SSR is good. But it is <em>not very useful</em> for:</p>\n<ol>\n<li>Private pages, assuming SEO is the major goal.</li>\n<li>High frequency app, say a B2B/non-public dashboard where speed (think pre-rendering) doesn’t matter.</li>\n<li>For small apps which have a lot of private pages, don’t need SEO and pre-rendering won’t be noticeable.</li>\n</ol>\n<p><strong>Assumptions</strong></p>\n<ol>\n<li>Sending pre-rendered “first” pages is fast - i.e. server (Node.js in case of Next) can quickly build markup (at request time), comparable or much faster than a layout engine does in a client browser.</li>\n<li>Our first data requests (data to be imbued into markup) are fast enough from a backend performance perspective. e.g. if the server itself has to make many requests externally, then the point of SSR is set moot. This could be solved by incrementally pre-rendering most requested pages (or some other heuristic), this is called ISR (incremental server rendering).</li>\n</ol>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>We make components just like in any SPA, since the app will behave exactly like a usual SPA.</p>\n<p>Essentially, the only difference is that on first page request, we <em>mock</em> “requests” that a SPA would make on the client, directly (FIXME: lame headless browser?) on the server. This gives us both the markup (for search bots) and initial data (fast first contentful load).</p>\n<p>Because the SSR process is for first load only, and essentially optional, an app written in Next.js (or any SSR app) can still be deployed with almost no changes using a static-server/CDN. SEO and first load won’t be good, but it’s certainly better than nothing. In other words, an SSR app falls back to behaving like a pure SPA if it’s kept on a static server.</p>\n<p>The code is very simple:</p>\n<pre><code>export const Component = ...; // makes request and all\n\nexport requestMocker = ...; // get data from database and mock them as response\n</code></pre>\n<p>The SSR runtime will run the request page’s component in context of the <code>requestMocker</code> to generate markup. If we are running in SPA mode (i.e. on a static server), this simply does not take place.</p>\n",
      "id": 113
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/319_2nd_key_feature_simplifed_routing_file-based.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/319_2nd_key_feature_simplifed_routing_file-based.html",
      "content": "# 319. 2nd key feature: simplified routing - file-based\nCreated Tuesday 6 December 2022\n\n## Situation\nIn a simple HTML, CSS and JS website. We create pages whose name is the same as the request route, which are sent to the client when we receive a request for the route. Simple.\n\n\n## Why\nidk, it's intuitive perhaps.\n\n\n## How\nNext.js, does the same, on the first request. For this, the framework has a file-based routing mechanism, i.e. we create pages whose name matches the routes a user can request.\n\nWhen the first request is received, the SSR process (which runs on the backend) locates the page from the request route and pre-renders it with the relevant data, before sending it.\n\nAfter the initial load on the client, the app follows a standard client-side routing approach.\n\n\n## What\nAll pages, in Next.js, are kept in the `pages` folder. The name of the file in `pages` indicate the route it'll be pre-rendered for.\n\nTo specify nested routes, we basically make a folder, with the children pages (routes) being files or folders (for more nesting, if needed).\n\n![](../../../../../assets/319_2nd_key_feature_simplifed_routing_file-based-image-1-c9bfacde.png)\n\n**Opinion**: The whole SSR experience can be optimized, maybe in some cases, if we do code-splitting along with SSR, which can be used to reduce bundle size.\n",
      "html": "<h1 id=\"319.-2nd-key-feature%3A-simplified-routing---file-based\">319. 2nd key feature: simplified routing - file-based <a class=\"heading-anchor-permalink\" href=\"#319.-2nd-key-feature%3A-simplified-routing---file-based\">#</a></h1>\n<p>Created Tuesday 6 December 2022</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>In a simple HTML, CSS and JS website. We create pages whose name is the same as the request route, which are sent to the client when we receive a request for the route. Simple.</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>idk, it’s intuitive perhaps.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Next.js, does the same, on the first request. For this, the framework has a file-based routing mechanism, i.e. we create pages whose name matches the routes a user can request.</p>\n<p>When the first request is received, the SSR process (which runs on the backend) locates the page from the request route and pre-renders it with the relevant data, before sending it.</p>\n<p>After the initial load on the client, the app follows a standard client-side routing approach.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>All pages, in Next.js, are kept in the <code>pages</code> folder. The name of the file in <code>pages</code> indicate the route it’ll be pre-rendered for.</p>\n<p>To specify nested routes, we basically make a folder, with the children pages (routes) being files or folders (for more nesting, if needed).</p>\n<p><img src=\"../../../../../assets/319_2nd_key_feature_simplifed_routing_file-based-image-1-c9bfacde.png\" alt=\"\"></p>\n<p><strong>Opinion</strong>: The whole SSR experience can be optimized, maybe in some cases, if we do code-splitting along with SSR, which can be used to reduce bundle size.</p>\n",
      "id": 114
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/320_3rd_key_feature_fullstack_utilities.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/1_Basic_Info/320_3rd_key_feature_fullstack_utilities.html",
      "content": "# 320. 3rd key feature - fullstack utilities\nCreated Tuesday 6 December 2022\n\n- Next.js allows us to add standalone backend code (like caching, database interactions, authentication) in the same codebase, seamlessly, especially API endpoints.\n- In addition, Next.js provides some constructs to do this easily.\n\n![](../../../../../assets/320_3rd_key_feature_fullstack_utilities-image-1-c9bfacde.png)\n",
      "html": "<h1 id=\"320.-3rd-key-feature---fullstack-utilities\">320. 3rd key feature - fullstack utilities <a class=\"heading-anchor-permalink\" href=\"#320.-3rd-key-feature---fullstack-utilities\">#</a></h1>\n<p>Created Tuesday 6 December 2022</p>\n<ul>\n<li>Next.js allows us to add standalone backend code (like caching, database interactions, authentication) in the same codebase, seamlessly, especially API endpoints.</li>\n<li>In addition, Next.js provides some constructs to do this easily.</li>\n</ul>\n<p><img src=\"../../../../../assets/320_3rd_key_feature_fullstack_utilities-image-1-c9bfacde.png\" alt=\"\"></p>\n",
      "id": 115
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/2_Project_setup_and_first_page/321_Creating_a_new_Next_app.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/2_Project_setup_and_first_page/321_Creating_a_new_Next_app.html",
      "content": "# 321. Creating a new Next app\nCreated Tuesday 6 December 2022\n\n## Steps\n1. Install Node.js\n2. Install `create-next-app`, globally.\n3. Run `create-next-app appNameHere` in the terminal.\nOr do something equivalent.",
      "html": "<h1 id=\"321.-creating-a-new-next-app\">321. Creating a new Next app <a class=\"heading-anchor-permalink\" href=\"#321.-creating-a-new-next-app\">#</a></h1>\n<p>Created Tuesday 6 December 2022</p>\n<h2 id=\"steps\">Steps <a class=\"heading-anchor-permalink\" href=\"#steps\">#</a></h2>\n<ol>\n<li>Install Node.js</li>\n<li>Install <code>create-next-app</code>, globally.</li>\n<li>Run <code>create-next-app appNameHere</code> in the terminal.\nOr do something equivalent.</li>\n</ol>\n",
      "id": 116
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/2_Project_setup_and_first_page/322_Analyzing_Next_app_project_structure.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/2_Project_setup_and_first_page/322_Analyzing_Next_app_project_structure.html",
      "content": "# 322. Analyzing Next app project structure\nCreated Tuesday 6 December 2022\n\n[Project link](https://github.com/exemplar-codes/nextjs-first-tutorial)\n\nThree important folders are:\n1. `pages` most important. File-based routing is done from here. It also has an `api` folder, which is also a route, but doesn't contain UI components.\n2. `public` - static assets like images, icons. It does not have an `index.html`, since it's generated by the SSR process and is different for different routes.\n3. `styles` - for style files, optional.",
      "html": "<h1 id=\"322.-analyzing-next-app-project-structure\">322. Analyzing Next app project structure <a class=\"heading-anchor-permalink\" href=\"#322.-analyzing-next-app-project-structure\">#</a></h1>\n<p>Created Tuesday 6 December 2022</p>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-tutorial\">Project link</a></p>\n<p>Three important folders are:</p>\n<ol>\n<li><code>pages</code> most important. File-based routing is done from here. It also has an <code>api</code> folder, which is also a route, but doesn’t contain UI components.</li>\n<li><code>public</code> - static assets like images, icons. It does not have an <code>index.html</code>, since it’s generated by the SSR process and is different for different routes.</li>\n<li><code>styles</code> - for style files, optional.</li>\n</ol>\n",
      "id": 117
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/2_Project_setup_and_first_page/323_Adding_first_pages.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/2_Project_setup_and_first_page/323_Adding_first_pages.html",
      "content": "# 323. Adding first pages\nCreated Wednesday 7 December 2022\n\n- We can delete `pages/api` if it's not being used.\n- Leave the `pages/_app.js` file as is.\n- The `/` route maps to `pages/index.js`.\n\n[Unneeded files](https://github.com/exemplar-codes/nextjs-first-tutorial/commit/9aa1ac2f8adc3ae482bd03f583757686cb67776c) and [first page](https://github.com/exemplar-codes/nextjs-first-tutorial/commit/3086abacd064aa121d7ec583b72ce7356a15ab09)",
      "html": "<h1 id=\"323.-adding-first-pages\">323. Adding first pages <a class=\"heading-anchor-permalink\" href=\"#323.-adding-first-pages\">#</a></h1>\n<p>Created Wednesday 7 December 2022</p>\n<ul>\n<li>We can delete <code>pages/api</code> if it’s not being used.</li>\n<li>Leave the <code>pages/_app.js</code> file as is.</li>\n<li>The <code>/</code> route maps to <code>pages/index.js</code>.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-tutorial/commit/9aa1ac2f8adc3ae482bd03f583757686cb67776c\">Unneeded files</a> and <a href=\"https://github.com/exemplar-codes/nextjs-first-tutorial/commit/3086abacd064aa121d7ec583b72ce7356a15ab09\">first page</a></p>\n",
      "id": 118
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/3_Nested_and_dynamic_pages/324_Nested_paths_and_pages.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/3_Nested_and_dynamic_pages/324_Nested_paths_and_pages.html",
      "content": "# 324. Nested paths and pages\nCreated Wednesday 7 December 2022\n\n## Nesting paths syntax\nExamples (request route <=> file in `pages/`):\n1. `/` <=> `index.js`\n2. `/hello` <=> `hello.js`\n3. `/hello` <=> `hello/index.js`\n4. `/hello/en` <=>`hello/en.js`\n\n\\#2 and \\#3 are almost equivalent ways to do the same thing. But \\#3 is the approach used by Next.js for nested routes.\n\nIn other words, folders aren't pages, but they are used to specify nesting, with the `folderName/index.js` file mapping to `/folderName`.\n\n\n## Page components\n- All (`.js*`) files inside `pages` are pages.\n- Every page is simply a React component. So no special changes in the code.\n- The only requirement is that we need to `default` export the page component.\n- Also, name of the component doesn't have to be same as the file name. It can be any valid React component name.\n\n### Examples\n`pages/index.js`\n```jsx\n// our-domain.com\n\nfunction HomePage() {\n\treturn <h1>Home page</h1>;\n}\n\nexport default HomePage;\n```\n\n`pages/new.js`\n```jsx\n// our-domain.com/news\n\nfunction AllNewsPage() {\n\treturn <h1>News page</h1>;\n}\n\nexport default AllNewsPage;\n```\n\n`pages/help/en.js`\n```jsx\n// our-domain.com/help/en\n\nfunction HelpPageEnglish() {\n\treturn <h1>Help page page</h1>;\n}\n\nexport default HelpPageEnglish;\n```\n\nNotes: \n1. There's no need to export `React` in files, Next.js has it autoloaded, which is how most React app projects are configured.\n2. Components that are not pages, i.e used by page components should be kept out of `/pages`, for example kept in a `/components` folder. This avoids confusion in development and in routing. (FIXME, is it an error if they are in `/pages`?). See [code](https://github.com/exemplar-codes/nextjs-first-tutorial/commit/10e01472c5bfe2365e0bfc65a6ddb8a2ef571aba).\n\n## Starting the dev server\nRun `npm run dev` and go to `localhost:3000` (most probably) to see the web app.\n\n[Nested routes code](https://github.com/exemplar-codes/nextjs-first-tutorial/commit/9568530962a034d500a82e753fb9c82b36d8a631)",
      "html": "<h1 id=\"324.-nested-paths-and-pages\">324. Nested paths and pages <a class=\"heading-anchor-permalink\" href=\"#324.-nested-paths-and-pages\">#</a></h1>\n<p>Created Wednesday 7 December 2022</p>\n<h2 id=\"nesting-paths-syntax\">Nesting paths syntax <a class=\"heading-anchor-permalink\" href=\"#nesting-paths-syntax\">#</a></h2>\n<p>Examples (request route &lt;=&gt; file in <code>pages/</code>):</p>\n<ol>\n<li><code>/</code> &lt;=&gt; <code>index.js</code></li>\n<li><code>/hello</code> &lt;=&gt; <code>hello.js</code></li>\n<li><code>/hello</code> &lt;=&gt; <code>hello/index.js</code></li>\n<li><code>/hello/en</code> &lt;=&gt;<code>hello/en.js</code></li>\n</ol>\n<p>#2 and #3 are almost equivalent ways to do the same thing. But #3 is the approach used by Next.js for nested routes.</p>\n<p>In other words, folders aren’t pages, but they are used to specify nesting, with the <code>folderName/index.js</code> file mapping to <code>/folderName</code>.</p>\n<h2 id=\"page-components\">Page components <a class=\"heading-anchor-permalink\" href=\"#page-components\">#</a></h2>\n<ul>\n<li>All (<code>.js*</code>) files inside <code>pages</code> are pages.</li>\n<li>Every page is simply a React component. So no special changes in the code.</li>\n<li>The only requirement is that we need to <code>default</code> export the page component.</li>\n<li>Also, name of the component doesn’t have to be same as the file name. It can be any valid React component name.</li>\n</ul>\n<h3 id=\"examples\">Examples <a class=\"heading-anchor-permalink\" href=\"#examples\">#</a></h3>\n<p><code>pages/index.js</code></p>\n<pre><code class=\"language-jsx\">// our-domain.com\n\nfunction HomePage() {\n\treturn &lt;h1&gt;Home page&lt;/h1&gt;;\n}\n\nexport default HomePage;\n</code></pre>\n<p><code>pages/new.js</code></p>\n<pre><code class=\"language-jsx\">// our-domain.com/news\n\nfunction AllNewsPage() {\n\treturn &lt;h1&gt;News page&lt;/h1&gt;;\n}\n\nexport default AllNewsPage;\n</code></pre>\n<p><code>pages/help/en.js</code></p>\n<pre><code class=\"language-jsx\">// our-domain.com/help/en\n\nfunction HelpPageEnglish() {\n\treturn &lt;h1&gt;Help page page&lt;/h1&gt;;\n}\n\nexport default HelpPageEnglish;\n</code></pre>\n<p>Notes:</p>\n<ol>\n<li>There’s no need to export <code>React</code> in files, Next.js has it autoloaded, which is how most React app projects are configured.</li>\n<li>Components that are not pages, i.e used by page components should be kept out of <code>/pages</code>, for example kept in a <code>/components</code> folder. This avoids confusion in development and in routing. (FIXME, is it an error if they are in <code>/pages</code>?). See <a href=\"https://github.com/exemplar-codes/nextjs-first-tutorial/commit/10e01472c5bfe2365e0bfc65a6ddb8a2ef571aba\">code</a>.</li>\n</ol>\n<h2 id=\"starting-the-dev-server\">Starting the dev server <a class=\"heading-anchor-permalink\" href=\"#starting-the-dev-server\">#</a></h2>\n<p>Run <code>npm run dev</code> and go to <code>localhost:3000</code> (most probably) to see the web app.</p>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-tutorial/commit/9568530962a034d500a82e753fb9c82b36d8a631\">Nested routes code</a></p>\n",
      "id": 119
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/3_Nested_and_dynamic_pages/325_Creating_dynamic_pages_with_parameters.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/3_Nested_and_dynamic_pages/325_Creating_dynamic_pages_with_parameters.html",
      "content": "# 325. Creating dynamic pages with parameters\nCreated Wednesday 7 December 2022\n\n## Situation\nSuppose we need a page like `/users/{username}` where the `username` is dynamic.\n\nCreating files like `/users/sanjar.js`, `/users/mike.js` and so on for all possible usernames would not be practical.\n\n\n## Why\nWe need something like a dynamic route, and a way to use it with file-based routing.\n\n\n## How\nNext.js has a simple solution. Use square brackets for of the route parameter part of the route.\n- Skeleton - `pages/pageName/[id].js` which routes to `pageName/{id}`.\n\nExamples (request route <=> file in `pages/`):\n- `/{id}` - `[id].js`\n- `/news/{newsId}` - `/news/[newsId].js`\n- `/users/{id}/details` - `/users/[id]/details.js` (yes, dynamic routes can have child routes and so can be used as folder names).\n\n\n## What\nThere's no special code needed for this feature. [See code](https://github.com/exemplar-codes/nextjs-first-tutorial/commit/4b41e163dbf3291e809eb2fe8b2a0fd396969723)\n\nAccessing the route param is crucial for most pages, especially for data fetching during a pre-render.\n\nNext.js being a framework, has routing functionality (`next/router`) built into it.\n\n### Reading the route param\nThe route param is read using the `useRouter` hook provided by Next. It returns an object with shape \n```js\n{ \n  query: { [routeParamName]: '_routeParamValue_' }\n}\n```\n\nExample - `news/[newsId].js` page:\n```jsx\nimport { useRouter } from 'next/router';\n\nexport default NewsDetail()\n{\n\tconst router = useRouter();\n\t\n\tconst id = router.query.newsId; // IMPORTANT: same name as used in file name\n\n\tconst newsDetails = ...; // fetch data from backend, if needed\n\n\treturn <div>...</div>;\n}\n```\n\n[Accessing dynamic route params - code](https://github.com/exemplar-codes/nextjs-first-tutorial/commit/5d9ec2136c1676d927f4f0b5f07b73b5227af514)",
      "html": "<h1 id=\"325.-creating-dynamic-pages-with-parameters\">325. Creating dynamic pages with parameters <a class=\"heading-anchor-permalink\" href=\"#325.-creating-dynamic-pages-with-parameters\">#</a></h1>\n<p>Created Wednesday 7 December 2022</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Suppose we need a page like <code>/users/{username}</code> where the <code>username</code> is dynamic.</p>\n<p>Creating files like <code>/users/sanjar.js</code>, <code>/users/mike.js</code> and so on for all possible usernames would not be practical.</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>We need something like a dynamic route, and a way to use it with file-based routing.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Next.js has a simple solution. Use square brackets for of the route parameter part of the route.</p>\n<ul>\n<li>Skeleton - <code>pages/pageName/[id].js</code> which routes to <code>pageName/{id}</code>.</li>\n</ul>\n<p>Examples (request route &lt;=&gt; file in <code>pages/</code>):</p>\n<ul>\n<li><code>/{id}</code> - <code>[id].js</code></li>\n<li><code>/news/{newsId}</code> - <code>/news/[newsId].js</code></li>\n<li><code>/users/{id}/details</code> - <code>/users/[id]/details.js</code> (yes, dynamic routes can have child routes and so can be used as folder names).</li>\n</ul>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>There’s no special code needed for this feature. <a href=\"https://github.com/exemplar-codes/nextjs-first-tutorial/commit/4b41e163dbf3291e809eb2fe8b2a0fd396969723\">See code</a></p>\n<p>Accessing the route param is crucial for most pages, especially for data fetching during a pre-render.</p>\n<p>Next.js being a framework, has routing functionality (<code>next/router</code>) built into it.</p>\n<h3 id=\"reading-the-route-param\">Reading the route param <a class=\"heading-anchor-permalink\" href=\"#reading-the-route-param\">#</a></h3>\n<p>The route param is read using the <code>useRouter</code> hook provided by Next. It returns an object with shape</p>\n<pre><code class=\"language-js\">{ \n  query: { [routeParamName]: '_routeParamValue_' }\n}\n</code></pre>\n<p>Example - <code>news/[newsId].js</code> page:</p>\n<pre><code class=\"language-jsx\">import { useRouter } from 'next/router';\n\nexport default NewsDetail()\n{\n\tconst router = useRouter();\n\t\n\tconst id = router.query.newsId; // IMPORTANT: same name as used in file name\n\n\tconst newsDetails = ...; // fetch data from backend, if needed\n\n\treturn &lt;div&gt;...&lt;/div&gt;;\n}\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-tutorial/commit/5d9ec2136c1676d927f4f0b5f07b73b5227af514\">Accessing dynamic route params - code</a></p>\n",
      "id": 120
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/4_Links/326_Links.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/4_Links/326_Links.html",
      "content": "# 326. Links\nCreated Wednesday 7 December 2022\n\n## Why\nAn SSR app behaves exactly like an SPA after the first load, so we do need client side routing (CSR).\n\n\n## How\nNext.js provides CSR constructs.\n\n\n## What\nNext.js's provides a `Link` component that behaves exactly like React Router's `Link` component, i.e. a CSR link.\n\n- The `Link` uses `href` as the prop for link path .\n- `Link.href` should be an absolute path.\n\nCode example:\n```jsx\nimport Link from 'next/link';\n\nfunction MyArticles() \n{\n  /* some code here, if needed */  \n\n  return (\n    <div>\n\t  <ul>\n\t    <Link href=\"/next-js-is-good\">Next.js is good</Link>\n\t    <Link href=\"/next-js-fe-heavy\">Next.js is front end heavy</Link>\n      </ul>\n    </div>\n  );\n}\n\nexport default MyArticles;\n```\n\n- For external links or for a code-splitted SSR part of the app, simply use an HTML `a` tag.\n- It's not styled as a link, perhaps to avoid confusion with HTML `a` tag.\n\n[Code](https://github.com/exemplar-codes/nextjs-first-tutorial/commit/89347c85d0516a1269daa78b3ca0d7bc8dab744e)",
      "html": "<h1 id=\"326.-links\">326. Links <a class=\"heading-anchor-permalink\" href=\"#326.-links\">#</a></h1>\n<p>Created Wednesday 7 December 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>An SSR app behaves exactly like an SPA after the first load, so we do need client side routing (CSR).</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Next.js provides CSR constructs.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Next.js’s provides a <code>Link</code> component that behaves exactly like React Router’s <code>Link</code> component, i.e. a CSR link.</p>\n<ul>\n<li>The <code>Link</code> uses <code>href</code> as the prop for link path .</li>\n<li><code>Link.href</code> should be an absolute path.</li>\n</ul>\n<p>Code example:</p>\n<pre><code class=\"language-jsx\">import Link from 'next/link';\n\nfunction MyArticles() \n{\n  /* some code here, if needed */  \n\n  return (\n    &lt;div&gt;\n\t  &lt;ul&gt;\n\t    &lt;Link href=&quot;/next-js-is-good&quot;&gt;Next.js is good&lt;/Link&gt;\n\t    &lt;Link href=&quot;/next-js-fe-heavy&quot;&gt;Next.js is front end heavy&lt;/Link&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default MyArticles;\n</code></pre>\n<ul>\n<li>For external links or for a code-splitted SSR part of the app, simply use an HTML <code>a</code> tag.</li>\n<li>It’s not styled as a link, perhaps to avoid confusion with HTML <code>a</code> tag.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-tutorial/commit/89347c85d0516a1269daa78b3ca0d7bc8dab744e\">Code</a></p>\n",
      "id": 121
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/328_Onwards_to_a_bigger_project.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/328_Onwards_to_a_bigger_project.html",
      "content": "# 328. Onwards to a bigger project\nCreated Wednesday 7 December 2022\n\nWe are going to explore Next.js further by working on a more realistic and larger project.\n\nThis is a \"Meetup\" app with venues and their details. Most of the components to be used in pages already exist in the sample project, since they are standard React components and won't help in our exploration of learning Next.\n\nWe'll:\n1. Store the data in a database and add backend code.\n2. Fetch data for a detail page both at time of pre-rendering and in SPA mode.\n3. Build APIs for sending/receiving data.\n4. Learn how to blend frontend and backend code in Next\n   \nWe'll practice and explore Next.js using this project.\n\n[Project link - React Meetups](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial)",
      "html": "<h1 id=\"328.-onwards-to-a-bigger-project\">328. Onwards to a bigger project <a class=\"heading-anchor-permalink\" href=\"#328.-onwards-to-a-bigger-project\">#</a></h1>\n<p>Created Wednesday 7 December 2022</p>\n<p>We are going to explore Next.js further by working on a more realistic and larger project.</p>\n<p>This is a “Meetup” app with venues and their details. Most of the components to be used in pages already exist in the sample project, since they are standard React components and won’t help in our exploration of learning Next.</p>\n<p>We’ll:</p>\n<ol>\n<li>Store the data in a database and add backend code.</li>\n<li>Fetch data for a detail page both at time of pre-rendering and in SPA mode.</li>\n<li>Build APIs for sending/receiving data.</li>\n<li>Learn how to blend frontend and backend code in Next</li>\n</ol>\n<p>We’ll practice and explore Next.js using this project.</p>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial\">Project link - React Meetups</a></p>\n",
      "id": 122
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/331_Outputting_a_List_of_meetups.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/331_Outputting_a_List_of_meetups.html",
      "content": "# 331. Outputting a List of meetups\nCreated Wednesday 14 December 2022\n\n- Used a component kept outside `/pages`, nothing surprising.\n- SSR works by default, didn't have to specify anything. The HTML was generated and returned on client request.\n\n[Code](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/1e899436d57da64738ad08297bcd69d279bd685d)",
      "html": "<h1 id=\"331.-outputting-a-list-of-meetups\">331. Outputting a List of meetups <a class=\"heading-anchor-permalink\" href=\"#331.-outputting-a-list-of-meetups\">#</a></h1>\n<p>Created Wednesday 14 December 2022</p>\n<ul>\n<li>Used a component kept outside <code>/pages</code>, nothing surprising.</li>\n<li>SSR works by default, didn’t have to specify anything. The HTML was generated and returned on client request.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/1e899436d57da64738ad08297bcd69d279bd685d\">Code</a></p>\n",
      "id": 123
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/332_The_app_js_file_and_layout_wrapper.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/332_The_app_js_file_and_layout_wrapper.html",
      "content": "# 332. The `_app.js` file and layout wrapper\nCreated Wednesday 14 December 2022\n\n## Why\nThere are many scenarios where we might want to control or wrap the whole app in a component.\n\nIt could be useful for _global_:\n- Wrappers - layout, authentication wrapper, contexts, Redux's wrapper etc.\n- Code -  code that runs for all pages from a single place.\n  \n\n## How\nLet the user control the root component of the app. This way both code and UI (wrappers) can be added globally.\n\n\n## What\nNext.js exposes a simple way to wrap the whole app.\n\nAn optional `/pages/_app.js` file can be added which is supposed to be component that takes in two props named `Component` and `pageProps`, and returns the `Component` with `pageProps` as its prop.\n\n- `_app.js` is present in the `create-next-app` scaffold, and deleting it is not an error.\n\nDefault `_app.js`:\n```jsx\nfunction MyApp({Component, pageProps}) {\n\treturn <Component {...pageProps} />;\n}\n\nexport default MyApp;\n```\n\nAdding global (to all pages) layout, modify `_app.js` to be:\n```jsx\nimport Layout from '../components/path_to_layout_file';\n\nfunction MyApp({Component, pageProps}) {\n  return <Layout>\n\t\t  <Component {...pageProps} />\n\t\t </Layout>;\n}\n\nexport default MyApp;\n```\n\nNote: `_app.js` does is a helper page, and so does not take part in filename-routing (it still applies to all pages anyway).\n\n[Code - app-wide navbar](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/7020d006a5e22595b764213023efd2ee1d8a8101)\n\nNote: A `router` prop is also passed to the component by Next.js, which is an object that contains the path, queryParam etc. This is because we cannot use `useRouter` here (why though, idk - FIXME). This may be used to conditionally alter/select layouts, page title, metadata etc based on route - which is better than doing it at each page.\n\n## Extras - global styles\n- Next.js recommends we put all \"to be applied globally styles\" inside the `_app.js` file only.\n- CSS, SCSS and modules (for both) are supported by default in a  `create-next-app` app.\n- All styles except in `_app.js_` will be scoped to the `default export` component in the file.\n\nMore info on styles, see the [docs](https://nextjs.org/docs/basic-features/built-in-css-support).",
      "html": "<h1 id=\"332.-the-_app.js-file-and-layout-wrapper\">332. The <code>_app.js</code> file and layout wrapper <a class=\"heading-anchor-permalink\" href=\"#332.-the-_app.js-file-and-layout-wrapper\">#</a></h1>\n<p>Created Wednesday 14 December 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>There are many scenarios where we might want to control or wrap the whole app in a component.</p>\n<p>It could be useful for <em>global</em>:</p>\n<ul>\n<li>Wrappers - layout, authentication wrapper, contexts, Redux’s wrapper etc.</li>\n<li>Code -  code that runs for all pages from a single place.</li>\n</ul>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Let the user control the root component of the app. This way both code and UI (wrappers) can be added globally.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Next.js exposes a simple way to wrap the whole app.</p>\n<p>An optional <code>/pages/_app.js</code> file can be added which is supposed to be component that takes in two props named <code>Component</code> and <code>pageProps</code>, and returns the <code>Component</code> with <code>pageProps</code> as its prop.</p>\n<ul>\n<li><code>_app.js</code> is present in the <code>create-next-app</code> scaffold, and deleting it is not an error.</li>\n</ul>\n<p>Default <code>_app.js</code>:</p>\n<pre><code class=\"language-jsx\">function MyApp({Component, pageProps}) {\n\treturn &lt;Component {...pageProps} /&gt;;\n}\n\nexport default MyApp;\n</code></pre>\n<p>Adding global (to all pages) layout, modify <code>_app.js</code> to be:</p>\n<pre><code class=\"language-jsx\">import Layout from '../components/path_to_layout_file';\n\nfunction MyApp({Component, pageProps}) {\n  return &lt;Layout&gt;\n\t\t  &lt;Component {...pageProps} /&gt;\n\t\t &lt;/Layout&gt;;\n}\n\nexport default MyApp;\n</code></pre>\n<p>Note: <code>_app.js</code> does is a helper page, and so does not take part in filename-routing (it still applies to all pages anyway).</p>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/7020d006a5e22595b764213023efd2ee1d8a8101\">Code - app-wide navbar</a></p>\n<p>Note: A <code>router</code> prop is also passed to the component by Next.js, which is an object that contains the path, queryParam etc. This is because we cannot use <code>useRouter</code> here (why though, idk - FIXME). This may be used to conditionally alter/select layouts, page title, metadata etc based on route - which is better than doing it at each page.</p>\n<h2 id=\"extras---global-styles\">Extras - global styles <a class=\"heading-anchor-permalink\" href=\"#extras---global-styles\">#</a></h2>\n<ul>\n<li>Next.js recommends we put all “to be applied globally styles” inside the <code>_app.js</code> file only.</li>\n<li>CSS, SCSS and modules (for both) are supported by default in a  <code>create-next-app</code> app.</li>\n<li>All styles except in <code>_app.js_</code> will be scoped to the <code>default export</code> component in the file.</li>\n</ul>\n<p>More info on styles, see the <a href=\"https://nextjs.org/docs/basic-features/built-in-css-support\">docs</a>.</p>\n",
      "id": 124
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/333_Programmatic_navigation.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/5_Onwards_to_a_bigger_project/333_Programmatic_navigation.html",
      "content": "# 333. Programmatic navigation\nCreated Wednesday 14 December 2022\n\n## Why\nCSR programmatic navigation, since Next.js behaves just like an SPA after initial app load.\n\n\n## How\nSomething like React Router's `.push()` (and other functions) would do.\n\n\n## What\nNext's `useRouter` hook (the object it returns on invocation) has methods to do programmatic navigation (CSR - without reload).\n\nExample (can be done in reusable components or inside `/pages` - doesn't matter):\n```jsx\nimport { useRouter } from 'next/router';\n\nfunction MyPageOrComponent({id}) {\n\tconst router = useRouter();\n\n\tconst clickHandler = () => router.push(`/thing/${id}`);\n\n\treturn <div>\n\t\t\t<button onClick={clickHandler}>Go to thing {id}</button>\n\t\t   </div>;\n}\n```\n\n[Code - programmatic navigation](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/6981816e7c80c1fdf00e18dbe3d9af66d5a073ce)\n\nNote - it is not a problem if we use `next` hooks and other features in components (i.e. non page ones). I thought it would be an issue if one wanted to use components from a Next app directly in a React app (without Next). But this is not a valid objection, since one would have to add stuff like `react-router` to implement CSR in a pure React project, because:\n1. It (CSR routing) is not a standard.\n2. There are many routing libraries.\n3. React is a library, not a framework, and so it will always contain other code from libraries, and copying code from one React project to another which is differently configured (or uses different libraries) is not a practical idea (FIXME: OK, but to what extent is this idea helpful/doable?).",
      "html": "<h1 id=\"333.-programmatic-navigation\">333. Programmatic navigation <a class=\"heading-anchor-permalink\" href=\"#333.-programmatic-navigation\">#</a></h1>\n<p>Created Wednesday 14 December 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>CSR programmatic navigation, since Next.js behaves just like an SPA after initial app load.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Something like React Router’s <code>.push()</code> (and other functions) would do.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Next’s <code>useRouter</code> hook (the object it returns on invocation) has methods to do programmatic navigation (CSR - without reload).</p>\n<p>Example (can be done in reusable components or inside <code>/pages</code> - doesn’t matter):</p>\n<pre><code class=\"language-jsx\">import { useRouter } from 'next/router';\n\nfunction MyPageOrComponent({id}) {\n\tconst router = useRouter();\n\n\tconst clickHandler = () =&gt; router.push(`/thing/${id}`);\n\n\treturn &lt;div&gt;\n\t\t\t&lt;button onClick={clickHandler}&gt;Go to thing {id}&lt;/button&gt;\n\t\t   &lt;/div&gt;;\n}\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/6981816e7c80c1fdf00e18dbe3d9af66d5a073ce\">Code - programmatic navigation</a></p>\n<p>Note - it is not a problem if we use <code>next</code> hooks and other features in components (i.e. non page ones). I thought it would be an issue if one wanted to use components from a Next app directly in a React app (without Next). But this is not a valid objection, since one would have to add stuff like <code>react-router</code> to implement CSR in a pure React project, because:</p>\n<ol>\n<li>It (CSR routing) is not a standard.</li>\n<li>There are many routing libraries.</li>\n<li>React is a library, not a framework, and so it will always contain other code from libraries, and copying code from one React project to another which is differently configured (or uses different libraries) is not a practical idea (FIXME: OK, but to what extent is this idea helpful/doable?).</li>\n</ol>\n",
      "id": 125
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/6_Prerendering_and_related_constructs/335_How_pre-rendering_works_and_problems_we_face.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/6_Prerendering_and_related_constructs/335_How_pre-rendering_works_and_problems_we_face.html",
      "content": "# 335. How pre-rendering works and problems we face\nCreated Saturday 17 December 2022\n\n- Pre-rendering in the context of SPAs means that we ship atleast some markup in our UI response.\n- This is the most popular reason for using Next.js\n\nPre-rendering is not an absolute term, and lies on a spectrum. 3 levels of it are:\n1. No pre-rendering - empty SPA shell, completely hyrdated on the client side. Example - plain React app.\n2. Some pre-rendering - some parts are present in the UI, others are hydrated on the client side. Next.js apps\n3. Full pre-rendering - all (as much as possible) parts of the requested page are already there in markup.\n\n> **Next.js allows us to do all 3, but the default behavior is \\#3 (full pre-rendering).**\n\nIt is important to note that choosing a pre-rendering level depends on the web page, audience, data velocity etc.\n\nNext.js provides us with 3 constructs, which may be used to change the level of pre-rendering and the time (build time or request time) it is carried out, for a *given page*.\n\n1. SSG - Static Site Generation - build page at \"build time\".\n2. SSR - Server Side Rendering - build page at every request.\n3. ISR - Incremental Server Rendering - build the page every 't' seconds, or some other criteria.\n\n## SSG (Static Site Generation)\nThis is a pre-rendering mechanism, where the server builds the page at \"build time\".\n\nIn Next.js, the `getStaticProps` function is used for SSG. \n\nIt is a function that runs at build time (so, on the server - things like filesystem, databases are all available) and returns some \"props\" that become available to the page component. Thus, files are generated and can be used as server responses.\n\nIt is only available for pages. To use it export (normal not `default`) a function named `getStaticProps` in the page file.\n\nNote that using SSG (or `getStaticProps`) doesn't mean one *has to* hydrate the whole page on build time. For example, if you have a fetch (or `useEffect`) request inside the component, it will be ignored by Next.js (since it pre-renders the first snapshot returned by the page component), but will still run on the client. Of course, this also means that the resulting changes won't be there in the pre-rendered UI, which is may or may not be OK.\n\n## SSR (Server Side Rendering)\nThis is a pre-rendering mechanism, where the server builds the page on each request.\n\n**This is the \"default\" in Next.js**. One doesn't need to actually specify/code anything to enable this, the page component is enough. However, if one needs to run some server side code (for authentication, DB lookup etc), there is a way to do it - the `getServerSideProps` function.\n\nIt behaves similar to `getStaticProps`, but runs for every request. Additionally, it also receives the request and response objects as its parameters, and so can be used for authentication, responding with a status code etc.\n\nIt is only available for pages. To use it export a function named `getServerSideProps` in the page file.\n\nSSR, like SSG, also doesn't mean all data has to there that the page uses, i.e. the page could hydrate parts of it on the client.\n\n## ISR\nFor medium-low velocity data, we may wish to rebuild our site in, say, 10 seconds. This pre-rendering technique is called Increment Static Regeneration (ISR).\n\nThis can be achieved using the `getStaticProps` function. \n\nOf course, we'd need a running server for this to happen.\n\nTo do this, add a `revalidate` attribute in the object returned by `getStaticProps`, value being the time to re-build, in seconds.\n\nIn simple words, the data is not older than `t` seconds.\n\nExample:\n```js\nexport const MyPage = ({someProp}) => { ... };\n\nexport async function getStaticProps() {\n  return {\n\tprops: {...},\n\trevalidate: 10\n  }\n}\n```\n[Code example](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/93c7b7deb8b45b21172f46012eec56e7b250e9a1)\n\n\n## Important thing about pre-rendering in Next.js\nNext.js pre-renders only the first snapshot of the page component. This means that `useEffect` and other stuff will be completely ignored by Next.js. `getStaticProps` or`getServerSideProps` will work as usual, since they are run before the component is executed for pre-rendering.\n\nThis is safe though, from a functionality point of view, since Next.js will still properly include and bundle `useEffect` and other logic that it ignores in pre-rendering.\n\n\n## Pre-rendering in Next.js, in a nutshell\n- **Page-wise mechanism** - SSG/SSR/ISR is decided for each page (by marked by existence of `getStaticProps`/`getServerSideProp`, and is therefore not a global setting (i.e. for all pages).\n- **Default behavior** - Again, re-emphasizing that Next.js's default behavior is pre-rendering on every request, even if there's no `getServerSideProps` for the page.\n- **First snapshot only** - Only the first snapshot of the page component is considered for pre-rendering. So things like `useEffect` are ignored for pre-rendering. They are still included in the the bundle though. Because `get*Props` functions run before pre-rendering, they are always included. Example - [useEffect ignored](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/15abe08c666afbfb956ec906e244765a7fd0d1c9), [getStaticProps works fine](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/54f9dce6154cb7abaf3de710a622f5a660e8647f)\n- **Server side code remains hidden from client** - Both `getStaticProps` and `getServerSideProps` are a server-side construct. They are not shipped to the client, so it's safe to do sensitive computations here.\n\nNote: \n1. Using client side code (for example - browser APIs or React UI constructs like hooks) inside `getStaticProps` or `getServerSideProps` is an error, since they are purely server side constructs.\n2. Both functions can be `async`. There are no changes required in the page component, since the component is run only when the pre-rendering function completes/promise resolves.",
      "html": "<h1 id=\"335.-how-pre-rendering-works-and-problems-we-face\">335. How pre-rendering works and problems we face <a class=\"heading-anchor-permalink\" href=\"#335.-how-pre-rendering-works-and-problems-we-face\">#</a></h1>\n<p>Created Saturday 17 December 2022</p>\n<ul>\n<li>Pre-rendering in the context of SPAs means that we ship atleast some markup in our UI response.</li>\n<li>This is the most popular reason for using Next.js</li>\n</ul>\n<p>Pre-rendering is not an absolute term, and lies on a spectrum. 3 levels of it are:</p>\n<ol>\n<li>No pre-rendering - empty SPA shell, completely hyrdated on the client side. Example - plain React app.</li>\n<li>Some pre-rendering - some parts are present in the UI, others are hydrated on the client side. Next.js apps</li>\n<li>Full pre-rendering - all (as much as possible) parts of the requested page are already there in markup.</li>\n</ol>\n<blockquote>\n<p><strong>Next.js allows us to do all 3, but the default behavior is #3 (full pre-rendering).</strong></p>\n</blockquote>\n<p>It is important to note that choosing a pre-rendering level depends on the web page, audience, data velocity etc.</p>\n<p>Next.js provides us with 3 constructs, which may be used to change the level of pre-rendering and the time (build time or request time) it is carried out, for a <em>given page</em>.</p>\n<ol>\n<li>SSG - Static Site Generation - build page at “build time”.</li>\n<li>SSR - Server Side Rendering - build page at every request.</li>\n<li>ISR - Incremental Server Rendering - build the page every ‘t’ seconds, or some other criteria.</li>\n</ol>\n<h2 id=\"ssg-(static-site-generation)\">SSG (Static Site Generation) <a class=\"heading-anchor-permalink\" href=\"#ssg-(static-site-generation)\">#</a></h2>\n<p>This is a pre-rendering mechanism, where the server builds the page at “build time”.</p>\n<p>In Next.js, the <code>getStaticProps</code> function is used for SSG.</p>\n<p>It is a function that runs at build time (so, on the server - things like filesystem, databases are all available) and returns some “props” that become available to the page component. Thus, files are generated and can be used as server responses.</p>\n<p>It is only available for pages. To use it export (normal not <code>default</code>) a function named <code>getStaticProps</code> in the page file.</p>\n<p>Note that using SSG (or <code>getStaticProps</code>) doesn’t mean one <em>has to</em> hydrate the whole page on build time. For example, if you have a fetch (or <code>useEffect</code>) request inside the component, it will be ignored by Next.js (since it pre-renders the first snapshot returned by the page component), but will still run on the client. Of course, this also means that the resulting changes won’t be there in the pre-rendered UI, which is may or may not be OK.</p>\n<h2 id=\"ssr-(server-side-rendering)\">SSR (Server Side Rendering) <a class=\"heading-anchor-permalink\" href=\"#ssr-(server-side-rendering)\">#</a></h2>\n<p>This is a pre-rendering mechanism, where the server builds the page on each request.</p>\n<p><strong>This is the “default” in Next.js</strong>. One doesn’t need to actually specify/code anything to enable this, the page component is enough. However, if one needs to run some server side code (for authentication, DB lookup etc), there is a way to do it - the <code>getServerSideProps</code> function.</p>\n<p>It behaves similar to <code>getStaticProps</code>, but runs for every request. Additionally, it also receives the request and response objects as its parameters, and so can be used for authentication, responding with a status code etc.</p>\n<p>It is only available for pages. To use it export a function named <code>getServerSideProps</code> in the page file.</p>\n<p>SSR, like SSG, also doesn’t mean all data has to there that the page uses, i.e. the page could hydrate parts of it on the client.</p>\n<h2 id=\"isr\">ISR <a class=\"heading-anchor-permalink\" href=\"#isr\">#</a></h2>\n<p>For medium-low velocity data, we may wish to rebuild our site in, say, 10 seconds. This pre-rendering technique is called Increment Static Regeneration (ISR).</p>\n<p>This can be achieved using the <code>getStaticProps</code> function.</p>\n<p>Of course, we’d need a running server for this to happen.</p>\n<p>To do this, add a <code>revalidate</code> attribute in the object returned by <code>getStaticProps</code>, value being the time to re-build, in seconds.</p>\n<p>In simple words, the data is not older than <code>t</code> seconds.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">export const MyPage = ({someProp}) =&gt; { ... };\n\nexport async function getStaticProps() {\n  return {\n\tprops: {...},\n\trevalidate: 10\n  }\n}\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/93c7b7deb8b45b21172f46012eec56e7b250e9a1\">Code example</a></p>\n<h2 id=\"important-thing-about-pre-rendering-in-next.js\">Important thing about pre-rendering in Next.js <a class=\"heading-anchor-permalink\" href=\"#important-thing-about-pre-rendering-in-next.js\">#</a></h2>\n<p>Next.js pre-renders only the first snapshot of the page component. This means that <code>useEffect</code> and other stuff will be completely ignored by Next.js. <code>getStaticProps</code> or<code>getServerSideProps</code> will work as usual, since they are run before the component is executed for pre-rendering.</p>\n<p>This is safe though, from a functionality point of view, since Next.js will still properly include and bundle <code>useEffect</code> and other logic that it ignores in pre-rendering.</p>\n<h2 id=\"pre-rendering-in-next.js%2C-in-a-nutshell\">Pre-rendering in Next.js, in a nutshell <a class=\"heading-anchor-permalink\" href=\"#pre-rendering-in-next.js%2C-in-a-nutshell\">#</a></h2>\n<ul>\n<li><strong>Page-wise mechanism</strong> - SSG/SSR/ISR is decided for each page (by marked by existence of <code>getStaticProps</code>/<code>getServerSideProp</code>, and is therefore not a global setting (i.e. for all pages).</li>\n<li><strong>Default behavior</strong> - Again, re-emphasizing that Next.js’s default behavior is pre-rendering on every request, even if there’s no <code>getServerSideProps</code> for the page.</li>\n<li><strong>First snapshot only</strong> - Only the first snapshot of the page component is considered for pre-rendering. So things like <code>useEffect</code> are ignored for pre-rendering. They are still included in the the bundle though. Because <code>get*Props</code> functions run before pre-rendering, they are always included. Example - <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/15abe08c666afbfb956ec906e244765a7fd0d1c9\">useEffect ignored</a>, <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/54f9dce6154cb7abaf3de710a622f5a660e8647f\">getStaticProps works fine</a></li>\n<li><strong>Server side code remains hidden from client</strong> - Both <code>getStaticProps</code> and <code>getServerSideProps</code> are a server-side construct. They are not shipped to the client, so it’s safe to do sensitive computations here.</li>\n</ul>\n<p>Note:</p>\n<ol>\n<li>Using client side code (for example - browser APIs or React UI constructs like hooks) inside <code>getStaticProps</code> or <code>getServerSideProps</code> is an error, since they are purely server side constructs.</li>\n<li>Both functions can be <code>async</code>. There are no changes required in the page component, since the component is run only when the pre-rendering function completes/promise resolves.</li>\n</ol>\n",
      "id": 126
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/6_Prerendering_and_related_constructs/338_More_about_SSR_with_getServerSideProps.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/6_Prerendering_and_related_constructs/338_More_about_SSR_with_getServerSideProps.html",
      "content": "# 338. More about SSR with `getServerSideProps`\nCreated Sunday 18 December 2022\n\n## General details\n- We know that `getServerSideProps` is the way to do SSR in Next.js. It runs on every request.\n- It returns an object with a `props` attribute whose value is an object of props to be consumed by the page component. Example:\n```js\nexport default function MyPage({name}) {\n  return ...;\n}\n\nexport function getServerSideProps() {\n  // run server side code\n  \n  return {\n    props: { name: 'Sanjar' }\n  };\n}\n```\n- Returning `revalidate` does not work with `getServerSideProps`, since SSR, by definition runs on each request.\n\n\n## \"context\" parameter\n`getServerSideProps`'s first parameter is called \"context\".\n\nIt's an object that has many useful attributes, like:\n1. **Dynamic route params** - an object with dynamic attributes as attributes and their values as strings. Examples params (page, request URL --> param):\n   - `/pages/[id].js`, `/sanjar` --> `{ id: 'sanjar' }`\n   - `/pages/help/[verb].js`, `/help/turning-off` --> `{ verb: 'turning-off' }`\n   - `/pages/[country]/[name].js`, `/in/sanjar` --> `{ country: 'in', name: 'sanjar' }`.\n   \n\tCode example (`/pages/help/[verb].js` and `/help/cleaning`):\n ```js\n export default...// page component here\n\n export function getServerSideProps(context) {\n   const params = context.params;\n   const verb = params.verb; // `cleaning`\n\n   // run server side code\n   \n   return { props: {...} };\n }\n ```\n2. **Request, response** - Since `getServerSideProps` runs for each request, it has access to the [request](https://nodejs.org/api/http.html#http_class_http_incomingmessage) and [response](https://nodejs.org/api/http.html#http_class_http_serverresponse) HTTP params, similar to Express.js. Both are present in the 'context' parameter of `getServerSideProps`. Example:\n```js\n// page component\n\nexport function getServerSideProps(context) {\n\tconst { req, res } = context;\n\t\n\t// run server side code\n\t\n\treturn { props: ... };\n}\n```\n\tCan we respond with the response object?? Probably not. FIXME\n3. **Query params** - `query`, an object representing the query string, including dynamic route parameters. All values are strings. Examples:\n\t- `/pages/help.js` with URL `/help?chatId=23` --> `{ chatId: '23'}`\n\t- `/pages/[user].js` with URL `/sanjar?admin=yes` --> `{ admin: 'yes', user: 'sanjar'}`\n4. **Cookies** - the request object has an additional attribute, called `cookies`, which is an object with string keys mapping to string values of cookies.\n\n\n## Return value\nThe function must return a non-empty *object*. Attributes:\n1. `props` - props for the page component, must be an object. So `{ props: {} }` is the minimal return value.\n2. `notFound` - boolean. True returns the 404 page.\n3. `redirect` - send a redirect response. Shape - `{ destination: string, permanent: boolean }`. Destination can be internal or external. For old HTTP clients, send a `statusCode` attribute, and omit `permanent`.\n\n[Simple code example](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/87f32ea191fa16e12e7641cd7ecea0489b452e4a)\n[More realistic code example](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/d1dc8dca87e80711d3d2782b767c9fb975f0ef65)\n\n## When to use SSR\nPrefer SSG, then ISR if it's possible - if data velocity is slow, or the page doesn't need real time updates, like a blog.\n\nUse SSR - data velocity is high (for a dashboard page, for example) or need access to request and/or response object.",
      "html": "<h1 id=\"338.-more-about-ssr-with-getserversideprops\">338. More about SSR with <code>getServerSideProps</code> <a class=\"heading-anchor-permalink\" href=\"#338.-more-about-ssr-with-getserversideprops\">#</a></h1>\n<p>Created Sunday 18 December 2022</p>\n<h2 id=\"general-details\">General details <a class=\"heading-anchor-permalink\" href=\"#general-details\">#</a></h2>\n<ul>\n<li>We know that <code>getServerSideProps</code> is the way to do SSR in Next.js. It runs on every request.</li>\n<li>It returns an object with a <code>props</code> attribute whose value is an object of props to be consumed by the page component. Example:</li>\n</ul>\n<pre><code class=\"language-js\">export default function MyPage({name}) {\n  return ...;\n}\n\nexport function getServerSideProps() {\n  // run server side code\n  \n  return {\n    props: { name: 'Sanjar' }\n  };\n}\n</code></pre>\n<ul>\n<li>Returning <code>revalidate</code> does not work with <code>getServerSideProps</code>, since SSR, by definition runs on each request.</li>\n</ul>\n<h2 id=\"%E2%80%9Ccontext%E2%80%9D-parameter\">“context” parameter <a class=\"heading-anchor-permalink\" href=\"#%E2%80%9Ccontext%E2%80%9D-parameter\">#</a></h2>\n<p><code>getServerSideProps</code>'s first parameter is called “context”.</p>\n<p>It’s an object that has many useful attributes, like:</p>\n<ol>\n<li>\n<p><strong>Dynamic route params</strong> - an object with dynamic attributes as attributes and their values as strings. Examples params (page, request URL --&gt; param):</p>\n<ul>\n<li><code>/pages/[id].js</code>, <code>/sanjar</code> --&gt; <code>{ id: 'sanjar' }</code></li>\n<li><code>/pages/help/[verb].js</code>, <code>/help/turning-off</code> --&gt; <code>{ verb: 'turning-off' }</code></li>\n<li><code>/pages/[country]/[name].js</code>, <code>/in/sanjar</code> --&gt; <code>{ country: 'in', name: 'sanjar' }</code>.</li>\n</ul>\n<p>Code example (<code>/pages/help/[verb].js</code> and <code>/help/cleaning</code>):</p>\n</li>\n</ol>\n<pre><code class=\"language-js\">export default...// page component here\n\nexport function getServerSideProps(context) {\n  const params = context.params;\n  const verb = params.verb; // `cleaning`\n\n  // run server side code\n  \n  return { props: {...} };\n}\n</code></pre>\n<ol start=\"2\">\n<li><strong>Request, response</strong> - Since <code>getServerSideProps</code> runs for each request, it has access to the <a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\">request</a> and <a href=\"https://nodejs.org/api/http.html#http_class_http_serverresponse\">response</a> HTTP params, similar to Express.js. Both are present in the ‘context’ parameter of <code>getServerSideProps</code>. Example:</li>\n</ol>\n<pre><code class=\"language-js\">// page component\n\nexport function getServerSideProps(context) {\n\tconst { req, res } = context;\n\t\n\t// run server side code\n\t\n\treturn { props: ... };\n}\n</code></pre>\n<pre><code>Can we respond with the response object?? Probably not. FIXME\n</code></pre>\n<ol start=\"3\">\n<li><strong>Query params</strong> - <code>query</code>, an object representing the query string, including dynamic route parameters. All values are strings. Examples:\n<ul>\n<li><code>/pages/help.js</code> with URL <code>/help?chatId=23</code> --&gt; <code>{ chatId: '23'}</code></li>\n<li><code>/pages/[user].js</code> with URL <code>/sanjar?admin=yes</code> --&gt; <code>{ admin: 'yes', user: 'sanjar'}</code></li>\n</ul>\n</li>\n<li><strong>Cookies</strong> - the request object has an additional attribute, called <code>cookies</code>, which is an object with string keys mapping to string values of cookies.</li>\n</ol>\n<h2 id=\"return-value\">Return value <a class=\"heading-anchor-permalink\" href=\"#return-value\">#</a></h2>\n<p>The function must return a non-empty <em>object</em>. Attributes:</p>\n<ol>\n<li><code>props</code> - props for the page component, must be an object. So <code>{ props: {} }</code> is the minimal return value.</li>\n<li><code>notFound</code> - boolean. True returns the 404 page.</li>\n<li><code>redirect</code> - send a redirect response. Shape - <code>{ destination: string, permanent: boolean }</code>. Destination can be internal or external. For old HTTP clients, send a <code>statusCode</code> attribute, and omit <code>permanent</code>.</li>\n</ol>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/87f32ea191fa16e12e7641cd7ecea0489b452e4a\">Simple code example</a>\n<a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/d1dc8dca87e80711d3d2782b767c9fb975f0ef65\">More realistic code example</a></p>\n<h2 id=\"when-to-use-ssr\">When to use SSR <a class=\"heading-anchor-permalink\" href=\"#when-to-use-ssr\">#</a></h2>\n<p>Prefer SSG, then ISR if it’s possible - if data velocity is slow, or the page doesn’t need real time updates, like a blog.</p>\n<p>Use SSR - data velocity is high (for a dashboard page, for example) or need access to request and/or response object.</p>\n",
      "id": 127
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/6_Prerendering_and_related_constructs/339_SSG_for_dynamic_routes_getStaticPaths.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/6_Prerendering_and_related_constructs/339_SSG_for_dynamic_routes_getStaticPaths.html",
      "content": "# 399. SSG for dynamic routes- `getStaticPaths`\nCreated Sunday 18 December 2022\n\n\n## Why (situation)\nWe have a page with dynamic routes. But it's not that high velocity or variable data (for example the dynamic routes are movie names, and not something like social media post ID) \n\nSome of these routes are popular. So, we wish to build pages them before hand, i.e. we want to do SSG.\n\nAlso, we have a the list of popular movie names.\n\nThere are several problems:\n1. Technically, issue with `getStaticProps` is that it runs only once, for a route.\n2. We may not have \"all\" possible movie names. But we also don't want to do SSR (assume we don't have a very capable server).\n\nSo, SSG for dynamic routes. Also, we may not have a complete list of possible routes during build time.\n\n\n## How\nThe solution is to run `getStaticProps` for all the dynamic routes that we want, for the given page.\n\nFor problem \\#2, we could run `getStaticProps` on \"request time\" for movie names that weren't on our list, and store (like other SSG pages) the generated pages. So kind of a \"memoized one time SSR\".\n\n\n## What\nNext.js solves this problem, of SSG with dynamic routes, with the `getStaticPaths` function.\n\nSimilar to `getStaticProps` or `getServerSideProps`, it should be added (`expor`ted normally, technically speaking) page file.\n\nWithout `getStaticPaths`, the idea of a route param inside `getStaticProps` is moot, since it is run on build time, when no request exists.\n\nWith `getStaticPaths`, the \"context\" parameter in `getStaticProps` has a `param` attribute which is an object containing the dynamic route params. **Note**, this is not an array.\n\n### Parameters\nFirst one called \"context\". Contains the dynamic route param - again, an object exactly like `getServerSideProps`'s \"context.param\".\n\n### Return value\nThe function must return an object with two things:\n1. `paths` - an array with objects of shape `{ params: {paramOne: string, paramSecond: string, ... } }`.  Same as `getServerSideProps`'s \"context.param\".\n2. `fallback` - boolean or the string `blocking`.\n\t- `false` - indicates that all paths have been listed. Returns 404 page for unlisted paths.\n\t- `true` - indicates that not all possible route params paths have been listed. On requests with a *new* unlisted path, Next.js responds to the client with a 'fallback' UI, but continues processing on the server - `getStaticProps` will be run with the requested route, cache the generated page and return it to the client, who will now see a fully loaded page. **In short, it's like `fallback.true` + new page returned**.\n\t- `'blocking'` - exactly like `true`, but instead of immediately returning a fallback page, responds only when the new unlisted route page is ready.\n\nNote - in case of `fallback: 'blocking'`, `getStaticProps` runs once and the page component runs once. But in case of `fallback: true`, the component run once to generate the fallback UI (which is returned immediately to the client), then `getStaticProps` runs and then again the page component runs (this time with props).\n\nCode examples - [`fallback:false`](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/57e80c86440f6345c43c51c3d524977fea72be6a), [`fallback:true`](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/3a8211464d693382f8f3214cd0b0655f75a00032), [`fallback:'blocking'`](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/91630a3607d47db45c7d3f37aaa649925e1e8806)\n\n### Fallback pages\n- The fallback page (used when `getStaticPaths` returns `fallback:true`) is specified inside the page component itself.\n- To check if the page component is being run to generate fallback page, use `useRouter().isFallback`, which is a boolean.\n- If `isFallback` is true, the UI returned by the page component is the fallback page.\n\nExample:\n```js\nexport default function MyPage() {\n  const router = useRouter();\n  if(router.isFallback) {\n    return <MyLoadingSpinnerFallbackUI />; \n  }\n\n  // page code\n  \n  return <...>; // return page UI as usual\n}\n\nexport function getStaticProps() {\n  //\n  return ...;\n}\n\nexport function getStaticPaths() {\n  return { paths: [], fallback: true}; // or 'blocking'\n}\n```\n\nNote: If `isFallback` is true, the page's props will be empty (as `getStaticProps` has been skipped to generate the UI). It will be available in the second run of the component, of course.\n\n## Updating pages generated due to by `fallback: true` and `fallback: 'blocking'`\nBoth options are still a part of SSG, and hence they don't automatically update the pages they may have generated for unlisted routes.\n\nTo do so, use ISR, no special code required. i.e. in addition to returning `fallback` from `getStaticPaths`, also return `revalidate` from `getStaticProps`.\n\n\nNote: In any scenario, `getStaticPaths` runs only once - when the server is initialized. (FIXME, just confirm once)",
      "html": "<h1 id=\"399.-ssg-for-dynamic-routes--getstaticpaths\">399. SSG for dynamic routes- <code>getStaticPaths</code> <a class=\"heading-anchor-permalink\" href=\"#399.-ssg-for-dynamic-routes--getstaticpaths\">#</a></h1>\n<p>Created Sunday 18 December 2022</p>\n<h2 id=\"why-(situation)\">Why (situation) <a class=\"heading-anchor-permalink\" href=\"#why-(situation)\">#</a></h2>\n<p>We have a page with dynamic routes. But it’s not that high velocity or variable data (for example the dynamic routes are movie names, and not something like social media post ID)</p>\n<p>Some of these routes are popular. So, we wish to build pages them before hand, i.e. we want to do SSG.</p>\n<p>Also, we have a the list of popular movie names.</p>\n<p>There are several problems:</p>\n<ol>\n<li>Technically, issue with <code>getStaticProps</code> is that it runs only once, for a route.</li>\n<li>We may not have “all” possible movie names. But we also don’t want to do SSR (assume we don’t have a very capable server).</li>\n</ol>\n<p>So, SSG for dynamic routes. Also, we may not have a complete list of possible routes during build time.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>The solution is to run <code>getStaticProps</code> for all the dynamic routes that we want, for the given page.</p>\n<p>For problem #2, we could run <code>getStaticProps</code> on “request time” for movie names that weren’t on our list, and store (like other SSG pages) the generated pages. So kind of a “memoized one time SSR”.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Next.js solves this problem, of SSG with dynamic routes, with the <code>getStaticPaths</code> function.</p>\n<p>Similar to <code>getStaticProps</code> or <code>getServerSideProps</code>, it should be added (<code>expor</code>ted normally, technically speaking) page file.</p>\n<p>Without <code>getStaticPaths</code>, the idea of a route param inside <code>getStaticProps</code> is moot, since it is run on build time, when no request exists.</p>\n<p>With <code>getStaticPaths</code>, the “context” parameter in <code>getStaticProps</code> has a <code>param</code> attribute which is an object containing the dynamic route params. <strong>Note</strong>, this is not an array.</p>\n<h3 id=\"parameters\">Parameters <a class=\"heading-anchor-permalink\" href=\"#parameters\">#</a></h3>\n<p>First one called “context”. Contains the dynamic route param - again, an object exactly like <code>getServerSideProps</code>'s “context.param”.</p>\n<h3 id=\"return-value\">Return value <a class=\"heading-anchor-permalink\" href=\"#return-value\">#</a></h3>\n<p>The function must return an object with two things:</p>\n<ol>\n<li><code>paths</code> - an array with objects of shape <code>{ params: {paramOne: string, paramSecond: string, ... } }</code>.  Same as <code>getServerSideProps</code>'s “context.param”.</li>\n<li><code>fallback</code> - boolean or the string <code>blocking</code>.\n<ul>\n<li><code>false</code> - indicates that all paths have been listed. Returns 404 page for unlisted paths.</li>\n<li><code>true</code> - indicates that not all possible route params paths have been listed. On requests with a <em>new</em> unlisted path, Next.js responds to the client with a ‘fallback’ UI, but continues processing on the server - <code>getStaticProps</code> will be run with the requested route, cache the generated page and return it to the client, who will now see a fully loaded page. <strong>In short, it’s like <code>fallback.true</code> + new page returned</strong>.</li>\n<li><code>'blocking'</code> - exactly like <code>true</code>, but instead of immediately returning a fallback page, responds only when the new unlisted route page is ready.</li>\n</ul>\n</li>\n</ol>\n<p>Note - in case of <code>fallback: 'blocking'</code>, <code>getStaticProps</code> runs once and the page component runs once. But in case of <code>fallback: true</code>, the component run once to generate the fallback UI (which is returned immediately to the client), then <code>getStaticProps</code> runs and then again the page component runs (this time with props).</p>\n<p>Code examples - <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/57e80c86440f6345c43c51c3d524977fea72be6a\"><code>fallback:false</code></a>, <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/3a8211464d693382f8f3214cd0b0655f75a00032\"><code>fallback:true</code></a>, <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/91630a3607d47db45c7d3f37aaa649925e1e8806\"><code>fallback:'blocking'</code></a></p>\n<h3 id=\"fallback-pages\">Fallback pages <a class=\"heading-anchor-permalink\" href=\"#fallback-pages\">#</a></h3>\n<ul>\n<li>The fallback page (used when <code>getStaticPaths</code> returns <code>fallback:true</code>) is specified inside the page component itself.</li>\n<li>To check if the page component is being run to generate fallback page, use <code>useRouter().isFallback</code>, which is a boolean.</li>\n<li>If <code>isFallback</code> is true, the UI returned by the page component is the fallback page.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-js\">export default function MyPage() {\n  const router = useRouter();\n  if(router.isFallback) {\n    return &lt;MyLoadingSpinnerFallbackUI /&gt;; \n  }\n\n  // page code\n  \n  return &lt;...&gt;; // return page UI as usual\n}\n\nexport function getStaticProps() {\n  //\n  return ...;\n}\n\nexport function getStaticPaths() {\n  return { paths: [], fallback: true}; // or 'blocking'\n}\n</code></pre>\n<p>Note: If <code>isFallback</code> is true, the page’s props will be empty (as <code>getStaticProps</code> has been skipped to generate the UI). It will be available in the second run of the component, of course.</p>\n<h2 id=\"updating-pages-generated-due-to-by-fallback%3A-true-and-fallback%3A-'blocking'\">Updating pages generated due to by <code>fallback: true</code> and <code>fallback: 'blocking'</code> <a class=\"heading-anchor-permalink\" href=\"#updating-pages-generated-due-to-by-fallback%3A-true-and-fallback%3A-'blocking'\">#</a></h2>\n<p>Both options are still a part of SSG, and hence they don’t automatically update the pages they may have generated for unlisted routes.</p>\n<p>To do so, use ISR, no special code required. i.e. in addition to returning <code>fallback</code> from <code>getStaticPaths</code>, also return <code>revalidate</code> from <code>getStaticProps</code>.</p>\n<p>Note: In any scenario, <code>getStaticPaths</code> runs only once - when the server is initialized. (FIXME, just confirm once)</p>\n",
      "id": 128
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/341_Introducing_API_Routes.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/341_Introducing_API_Routes.html",
      "content": "# 341. Introducing API Routes\nCreated Monday 19 December 2022\n\n## Why\nFor adding server-side code (via endpoints).\n\n\n## How (does it work)\nObvious. Next.js runs on the server, so it's server side code. Adding more is easy.\n\n\n## What (how to use API routes - syntax etc)\nAPI endpoints can be made by creating one (`export default`) function per file (endpoint will correspond with file-name based routing). The function will be given access to request and response objects, as params.\n\n1. To differentiate file-based routing for pages and server-side code files, endpoint files should be placed inside `pages/api`. \n2. They will be accessible by the URI `/api/remaining_path`. \n3. Just like with pages, API files can use square bracket notation in their name for dynamic route params.\n\n- Next.js has implemented request-response code via the default `http` Node.js package. It does not use Express.\n- API route code is not available to clients. Hence, we can do sensitive computations here like authentication etc. It stays and runs on the server only.\n- Obviously, API endpoints don't work on React components or other UI aspects of the app.\n\n\n- Client side code can use relative URL notation instead of absolute stuff like the domain name, since the UI server and web app (backend) server is the same.\n\nExample\n```js\n// file `pages/api/new-meetup.js`, endpoint `/api/new-meetup`\n\nexport default myHandlerFunc(req, res) {\n  if(req.method === \"POST\") {\n    const data = req.body; // body of HTTP request\n\n\tconst { title, image, address, description } = data;\n\n\t// pseudocode below, assume data validation is not needed.\n\tconst id = generateUniqueId()l;\n\tdb.addToTable('meetups', {id, title, image, image, address, description});\n\tres.send({message: \"new meetup added\", id: id});\n\t\n  }\n  else\n    res.send({message: \"Should be a POST request\"}).status(404);\n}\n```\n",
      "html": "<h1 id=\"341.-introducing-api-routes\">341. Introducing API Routes <a class=\"heading-anchor-permalink\" href=\"#341.-introducing-api-routes\">#</a></h1>\n<p>Created Monday 19 December 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>For adding server-side code (via endpoints).</p>\n<h2 id=\"how-(does-it-work)\">How (does it work) <a class=\"heading-anchor-permalink\" href=\"#how-(does-it-work)\">#</a></h2>\n<p>Obvious. Next.js runs on the server, so it’s server side code. Adding more is easy.</p>\n<h2 id=\"what-(how-to-use-api-routes---syntax-etc)\">What (how to use API routes - syntax etc) <a class=\"heading-anchor-permalink\" href=\"#what-(how-to-use-api-routes---syntax-etc)\">#</a></h2>\n<p>API endpoints can be made by creating one (<code>export default</code>) function per file (endpoint will correspond with file-name based routing). The function will be given access to request and response objects, as params.</p>\n<ol>\n<li>To differentiate file-based routing for pages and server-side code files, endpoint files should be placed inside <code>pages/api</code>.</li>\n<li>They will be accessible by the URI <code>/api/remaining_path</code>.</li>\n<li>Just like with pages, API files can use square bracket notation in their name for dynamic route params.</li>\n</ol>\n<ul>\n<li>\n<p>Next.js has implemented request-response code via the default <code>http</code> Node.js package. It does not use Express.</p>\n</li>\n<li>\n<p>API route code is not available to clients. Hence, we can do sensitive computations here like authentication etc. It stays and runs on the server only.</p>\n</li>\n<li>\n<p>Obviously, API endpoints don’t work on React components or other UI aspects of the app.</p>\n</li>\n<li>\n<p>Client side code can use relative URL notation instead of absolute stuff like the domain name, since the UI server and web app (backend) server is the same.</p>\n</li>\n</ul>\n<p>Example</p>\n<pre><code class=\"language-js\">// file `pages/api/new-meetup.js`, endpoint `/api/new-meetup`\n\nexport default myHandlerFunc(req, res) {\n  if(req.method === &quot;POST&quot;) {\n    const data = req.body; // body of HTTP request\n\n\tconst { title, image, address, description } = data;\n\n\t// pseudocode below, assume data validation is not needed.\n\tconst id = generateUniqueId()l;\n\tdb.addToTable('meetups', {id, title, image, image, address, description});\n\tres.send({message: &quot;new meetup added&quot;, id: id});\n\t\n  }\n  else\n    res.send({message: &quot;Should be a POST request&quot;}).status(404);\n}\n</code></pre>\n",
      "id": 129
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/342_Working_with_MongoDB.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/342_Working_with_MongoDB.html",
      "content": "# 342. Working with MongoDB\nCreated Friday 23 December 2022\n\nWe'll use a MongoDB database. Instead of setting up a local instance, we'll use the MongoDB Atlas product, where we can set up a DB in the cloud and it offers a free tier that's sufficient for our use case here. \n\n1. Create an account\n2. Create a project if none exist.\n3. Create a database - select free plan, add a DB user, add current IP address if prompted.\n4. Prepare to connect - install the Node package \"mongodb\" in the project. On the instance page (mongodb.com), click \"Connect\" and copy the string it presents. Also, make sure the current IP address has been added to the list.\n5. Connect - In the API route file, import the `MongoClient` function from the \"mongo\" package, one of many functions.\n   \n   \n## Mongo DB notes\n### 1. **Connect to the server**\nFirst copy the skeleton link provided by MongoDB site/local database URL. We need to pass in username password separated by colon.\n\nConnecting is an async operation, obviously.\n```js\nimport { MongoClient } from 'mongo';\n\nasync function handler() {\n\tconst username = \"myUserName1233\", password = \"zyfsPassworrd\";\n\tconst client = await MongoClient.connect(`mongodb+srv://${username}:${password}@cluster0.somethinxyz.mongodb.net`);\n\tconst db = client.db(); // sync op\n}\n```\n### 2. **Access a collection (aka table)**. \nIt's a synchronous operation. The collection will be created if it does not exist.\n```js\n// assuming db variable from above\nconst meetupCollection = db.collection(\"meetups\");\n```\n### 3. Query/mutate a collection\nAll query/mutate ops are async, and may fail.\n```js\nconst allRows = await myCollection.find().toArray(); // get all rows, with all their entities\n\nconst allRowsJustNames = await myCollection.find({}, {name: 1}).toArray(); // get all rows, only with 'name' entity\n\nconst selectedRow = await myCollection.find({}, {_id: value_here}); // get row with _id of value\n\nconst result = await myUsersCollection.insertOne({ name: 'Sanjar', country: 'IN' });\n```\n- The `.toArray()` is important (FIXME: but why?)\n- MongoDB adds a `_id` property automatically to a new row (object). \n- A problem with `_id` value is not \"JSON serializable\". It's a good idea to convert the value to a string, using `.toString()` before using it (on the client or server side). It must be converted back to original type for interaction with MongoDB, however. This can be done using the `ObjectId(_id_as_string)` function provided by MongoDB.\n### 4. Closing the connection\n```js\nclient.close();\n```\n(FIXME - is this an async operation? It doesn't matter on client side code, anyway)\n\nNote\n1. `mongo` package is meant to be run only on servers, and not the browser. So use it only inside server side code - `getStaticProps`, `getServerSideProps`, API routes etc.",
      "html": "<h1 id=\"342.-working-with-mongodb\">342. Working with MongoDB <a class=\"heading-anchor-permalink\" href=\"#342.-working-with-mongodb\">#</a></h1>\n<p>Created Friday 23 December 2022</p>\n<p>We’ll use a MongoDB database. Instead of setting up a local instance, we’ll use the MongoDB Atlas product, where we can set up a DB in the cloud and it offers a free tier that’s sufficient for our use case here.</p>\n<ol>\n<li>Create an account</li>\n<li>Create a project if none exist.</li>\n<li>Create a database - select free plan, add a DB user, add current IP address if prompted.</li>\n<li>Prepare to connect - install the Node package “mongodb” in the project. On the instance page (<a href=\"http://mongodb.com\">mongodb.com</a>), click “Connect” and copy the string it presents. Also, make sure the current IP address has been added to the list.</li>\n<li>Connect - In the API route file, import the <code>MongoClient</code> function from the “mongo” package, one of many functions.</li>\n</ol>\n<h2 id=\"mongo-db-notes\">Mongo DB notes <a class=\"heading-anchor-permalink\" href=\"#mongo-db-notes\">#</a></h2>\n<h3 id=\"1.-connect-to-the-server\">1. <strong>Connect to the server</strong> <a class=\"heading-anchor-permalink\" href=\"#1.-connect-to-the-server\">#</a></h3>\n<p>First copy the skeleton link provided by MongoDB site/local database URL. We need to pass in username password separated by colon.</p>\n<p>Connecting is an async operation, obviously.</p>\n<pre><code class=\"language-js\">import { MongoClient } from 'mongo';\n\nasync function handler() {\n\tconst username = &quot;myUserName1233&quot;, password = &quot;zyfsPassworrd&quot;;\n\tconst client = await MongoClient.connect(`mongodb+srv://${username}:${password}@cluster0.somethinxyz.mongodb.net`);\n\tconst db = client.db(); // sync op\n}\n</code></pre>\n<h3 id=\"2.-access-a-collection-(aka-table).\">2. <strong>Access a collection (aka table)</strong>. <a class=\"heading-anchor-permalink\" href=\"#2.-access-a-collection-(aka-table).\">#</a></h3>\n<p>It’s a synchronous operation. The collection will be created if it does not exist.</p>\n<pre><code class=\"language-js\">// assuming db variable from above\nconst meetupCollection = db.collection(&quot;meetups&quot;);\n</code></pre>\n<h3 id=\"3.-query%2Fmutate-a-collection\">3. Query/mutate a collection <a class=\"heading-anchor-permalink\" href=\"#3.-query%2Fmutate-a-collection\">#</a></h3>\n<p>All query/mutate ops are async, and may fail.</p>\n<pre><code class=\"language-js\">const allRows = await myCollection.find().toArray(); // get all rows, with all their entities\n\nconst allRowsJustNames = await myCollection.find({}, {name: 1}).toArray(); // get all rows, only with 'name' entity\n\nconst selectedRow = await myCollection.find({}, {_id: value_here}); // get row with _id of value\n\nconst result = await myUsersCollection.insertOne({ name: 'Sanjar', country: 'IN' });\n</code></pre>\n<ul>\n<li>The <code>.toArray()</code> is important (FIXME: but why?)</li>\n<li>MongoDB adds a <code>_id</code> property automatically to a new row (object).</li>\n<li>A problem with <code>_id</code> value is not “JSON serializable”. It’s a good idea to convert the value to a string, using <code>.toString()</code> before using it (on the client or server side). It must be converted back to original type for interaction with MongoDB, however. This can be done using the <code>ObjectId(_id_as_string)</code> function provided by MongoDB.</li>\n</ul>\n<h3 id=\"4.-closing-the-connection\">4. Closing the connection <a class=\"heading-anchor-permalink\" href=\"#4.-closing-the-connection\">#</a></h3>\n<pre><code class=\"language-js\">client.close();\n</code></pre>\n<p>(FIXME - is this an async operation? It doesn’t matter on client side code, anyway)</p>\n<p>Note</p>\n<ol>\n<li><code>mongo</code> package is meant to be run only on servers, and not the browser. So use it only inside server side code - <code>getStaticProps</code>, <code>getServerSideProps</code>, API routes etc.</li>\n</ol>\n",
      "id": 130
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/343_Continuing_with_the_project.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/343_Continuing_with_the_project.html",
      "content": "# 343. Continuing with the project\nCreated Sunday 25 December 2022\n\n- Add UI code to do a HTTP POST call to the server. [Code](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/23a9c01fd1b17093a81e4708038528fae2f57fb6)\n- Add code to store data received from client, in the MongoDB instance. For this we need to communicate with the instance. [Code](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/81f2476549b2d6958641bc45751198ccfe5cb112)\n- Add code to `/pages/index.js` in `getStaticProps` to fetch meetups. Note, we don't need to create an API endpoint like `api/meetups` and the call it from the client side code. It will work fine, but it has several issues - why are we making a server call for something that should come pre-rendered. Also, it makes no sense to call the endpoint from `getStaticProps` either, since we are already at the server - why call our-self (server)! ?\n- We get an error - we can only return JSON serializable data as props, from `getStaticProps`. The source of the error is the `_id` attribute contained in each element of returned meetup array, whose value is not JSON serializable. To solve this, convert it to a string (`.toString`) before returning from `getStaticProps`. [Code](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/4f57ec46ed6ad4dd7d52554b7b906262d333b7c1)\n- In the details page. Fetch all meetup ids to be used in `getStaticPaths`. [Code](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/9394e8ea8a148e583090a8d2873e249fe07fb5a6)\n- Add code to get the meetup details for the current path (during static generation) in `getStaticProps`. For this, we use the **`findOne`** function (provided by MongoDB) and pass the `_id` criteria with value first converted into the required format using the **`ObjectId`** function (provided by MongoDB). We needed this conversion since we were stored and worked with the \"\\_id\" as a string. [Code](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/cbf7ccab55aa8ffab69b653d569bf4cd283d437b)",
      "html": "<h1 id=\"343.-continuing-with-the-project\">343. Continuing with the project <a class=\"heading-anchor-permalink\" href=\"#343.-continuing-with-the-project\">#</a></h1>\n<p>Created Sunday 25 December 2022</p>\n<ul>\n<li>Add UI code to do a HTTP POST call to the server. <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/23a9c01fd1b17093a81e4708038528fae2f57fb6\">Code</a></li>\n<li>Add code to store data received from client, in the MongoDB instance. For this we need to communicate with the instance. <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/81f2476549b2d6958641bc45751198ccfe5cb112\">Code</a></li>\n<li>Add code to <code>/pages/index.js</code> in <code>getStaticProps</code> to fetch meetups. Note, we don’t need to create an API endpoint like <code>api/meetups</code> and the call it from the client side code. It will work fine, but it has several issues - why are we making a server call for something that should come pre-rendered. Also, it makes no sense to call the endpoint from <code>getStaticProps</code> either, since we are already at the server - why call our-self (server)! ?</li>\n<li>We get an error - we can only return JSON serializable data as props, from <code>getStaticProps</code>. The source of the error is the <code>_id</code> attribute contained in each element of returned meetup array, whose value is not JSON serializable. To solve this, convert it to a string (<code>.toString</code>) before returning from <code>getStaticProps</code>. <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/4f57ec46ed6ad4dd7d52554b7b906262d333b7c1\">Code</a></li>\n<li>In the details page. Fetch all meetup ids to be used in <code>getStaticPaths</code>. <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/9394e8ea8a148e583090a8d2873e249fe07fb5a6\">Code</a></li>\n<li>Add code to get the meetup details for the current path (during static generation) in <code>getStaticProps</code>. For this, we use the <strong><code>findOne</code></strong> function (provided by MongoDB) and pass the <code>_id</code> criteria with value first converted into the required format using the <strong><code>ObjectId</code></strong> function (provided by MongoDB). We needed this conversion since we were stored and worked with the “_id” as a string. <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/cbf7ccab55aa8ffab69b653d569bf4cd283d437b\">Code</a></li>\n</ul>\n",
      "id": 131
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/344_More_about_API_routes.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/7_API_Routes/344_More_about_API_routes.html",
      "content": "# 343. More about API routes\nCreated Sunday 25 December 2022\n\n1. \"**JSON serializable\" props** - we can only return JSON serializable data as props from `getStaticProps`, `getServerSideProps`.\n2. **Fetch API** - `fetch` can be used by server side code too, thanks to Next.js.\n3. **Bundle safety** - Code imported in a page file used by server side code (`getStaticProps`, `getServerSideProps` etc) will not be included in the client side bundle. So it's safe to do any computation here.\n4. **Endpoint handlers and logic separation** - A good idea is to store the server side code (to get meetups from MongoDB) somewhere outside of `pages`, and use that function inside `pages/index.js`. This is similar to storing shared components outside of `pages`. One can also simply write the server side code (to get meetups) directly inside `getStaticProps`, but that's against DRY, assuming we need to fetch all meetups at multiple places in our server side code.",
      "html": "<h1 id=\"343.-more-about-api-routes\">343. More about API routes <a class=\"heading-anchor-permalink\" href=\"#343.-more-about-api-routes\">#</a></h1>\n<p>Created Sunday 25 December 2022</p>\n<ol>\n<li>&quot;<strong>JSON serializable&quot; props</strong> - we can only return JSON serializable data as props from <code>getStaticProps</code>, <code>getServerSideProps</code>.</li>\n<li><strong>Fetch API</strong> - <code>fetch</code> can be used by server side code too, thanks to Next.js.</li>\n<li><strong>Bundle safety</strong> - Code imported in a page file used by server side code (<code>getStaticProps</code>, <code>getServerSideProps</code> etc) will not be included in the client side bundle. So it’s safe to do any computation here.</li>\n<li><strong>Endpoint handlers and logic separation</strong> - A good idea is to store the server side code (to get meetups from MongoDB) somewhere outside of <code>pages</code>, and use that function inside <code>pages/index.js</code>. This is similar to storing shared components outside of <code>pages</code>. One can also simply write the server side code (to get meetups) directly inside <code>getStaticProps</code>, but that’s against DRY, assuming we need to fetch all meetups at multiple places in our server side code.</li>\n</ol>\n",
      "id": 132
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/8_Deploying_Nextjs_projects/346_Adding_head_Metadata.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/8_Deploying_Nextjs_projects/346_Adding_head_Metadata.html",
      "content": "# 346. Adding \"head\" Metadata\nCreated Sunday 25 December 2022\n\n\n## Why\nAdd dynamic page title and metadata inside HTML `head` tag.\n\nIt is important:\n1. Generally - tab name, accessibility, semantic web.\n2. SEO - one of the most important reason Next.js is used. The `head` tag is responsible for:\n\t1. Search result title - `title` tag. Also add a `<meta name=\"title\" />` with the value same as `title`.\n\t2. Search result description - `<meta name=\"description\" />` tag.\n\t3. Other meta tags, used for SEO, promotion, counting CTR (click-through-rate).\n\nExample - code:\n```HTML\n<head>\n  <title>Academind</title>\n  <meta name=\"title\" content=\"Academind\" />\n  <meta\n    name=\"description\"\n    content=\"Academind offers hundreds of coding tutorials ...\"\n  />\n</head>\n```\n\nExample - output:\n![](../../../../../assets/346_Adding_head_Metadata-image-1-6ec3ba2b.png)\n\n\n## How\nUse a React portal to add stuff to the `head` tag.\n\n\n## What\nNext.js has a `Head` component that does exactly this. It portals it's children to the HTML `head` tag.\n\nIt can be used in any UI component (including non-page components and non-pre rendered UI), just remember to add `title` and/or `meta` tags as children.\n\n```js\nimport Head from 'next/head';\n\nexport default MyPage() {\n  return (\n    <>\n\t  <Head>\n\t\t<title>Home page</title>\n\t\t<meta name=\"page destination\" content=\"Home page\" />\n\t\t<meta name=\"language\" content=\"en-us\" />\n\t  </Head>\n\t  <div></div>\n\t</>\n  );\n}\n```\n[Code example](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/e40ee3fcd3bffd6129c75a9484d5fffe4c147aed)\n\n- As said, `Head` can be used in any UI component, including non-page and/or non-pre-rendered ones. [Code example - set tab title dynamically on the client](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/f492bc5b7a208956bdf1509b368aaa81255cfb48).\n- If the UI tree has multiple `Head`, the final `head` tag is the result of additively combining all `Head` nodes in pre-order traversal fashion, with newer `Head` instances overriding existing tags. [Code - multiple `Head` components](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/396df5f48d6aa5083e684c68cfe9d86413a5a5b1)\n- DRY - we can add `Head` component in `pages/_app.js` and conditionally set the children of `Head` based on the `router` prop that the \"root\" component has access to. Evaluation order for multiple `Head` still holds, so it would be easy to add a custom `Head` if at all needed. [Code](https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/e5a7d5d90f8b0e03ce1fd14cc8eb63a321558e6c)\n",
      "html": "<h1 id=\"346.-adding-%E2%80%9Chead%E2%80%9D-metadata\">346. Adding “head” Metadata <a class=\"heading-anchor-permalink\" href=\"#346.-adding-%E2%80%9Chead%E2%80%9D-metadata\">#</a></h1>\n<p>Created Sunday 25 December 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Add dynamic page title and metadata inside HTML <code>head</code> tag.</p>\n<p>It is important:</p>\n<ol>\n<li>Generally - tab name, accessibility, semantic web.</li>\n<li>SEO - one of the most important reason Next.js is used. The <code>head</code> tag is responsible for:\n<ol>\n<li>Search result title - <code>title</code> tag. Also add a <code>&lt;meta name=&quot;title&quot; /&gt;</code> with the value same as <code>title</code>.</li>\n<li>Search result description - <code>&lt;meta name=&quot;description&quot; /&gt;</code> tag.</li>\n<li>Other meta tags, used for SEO, promotion, counting CTR (click-through-rate).</li>\n</ol>\n</li>\n</ol>\n<p>Example - code:</p>\n<pre><code class=\"language-HTML\">&lt;head&gt;\n  &lt;title&gt;Academind&lt;/title&gt;\n  &lt;meta name=&quot;title&quot; content=&quot;Academind&quot; /&gt;\n  &lt;meta\n    name=&quot;description&quot;\n    content=&quot;Academind offers hundreds of coding tutorials ...&quot;\n  /&gt;\n&lt;/head&gt;\n</code></pre>\n<p>Example - output:\n<img src=\"../../../../../assets/346_Adding_head_Metadata-image-1-6ec3ba2b.png\" alt=\"\"></p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Use a React portal to add stuff to the <code>head</code> tag.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Next.js has a <code>Head</code> component that does exactly this. It portals it’s children to the HTML <code>head</code> tag.</p>\n<p>It can be used in any UI component (including non-page components and non-pre rendered UI), just remember to add <code>title</code> and/or <code>meta</code> tags as children.</p>\n<pre><code class=\"language-js\">import Head from 'next/head';\n\nexport default MyPage() {\n  return (\n    &lt;&gt;\n\t  &lt;Head&gt;\n\t\t&lt;title&gt;Home page&lt;/title&gt;\n\t\t&lt;meta name=&quot;page destination&quot; content=&quot;Home page&quot; /&gt;\n\t\t&lt;meta name=&quot;language&quot; content=&quot;en-us&quot; /&gt;\n\t  &lt;/Head&gt;\n\t  &lt;div&gt;&lt;/div&gt;\n\t&lt;/&gt;\n  );\n}\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/e40ee3fcd3bffd6129c75a9484d5fffe4c147aed\">Code example</a></p>\n<ul>\n<li>As said, <code>Head</code> can be used in any UI component, including non-page and/or non-pre-rendered ones. <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/f492bc5b7a208956bdf1509b368aaa81255cfb48\">Code example - set tab title dynamically on the client</a>.</li>\n<li>If the UI tree has multiple <code>Head</code>, the final <code>head</code> tag is the result of additively combining all <code>Head</code> nodes in pre-order traversal fashion, with newer <code>Head</code> instances overriding existing tags. <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/396df5f48d6aa5083e684c68cfe9d86413a5a5b1\">Code - multiple <code>Head</code> components</a></li>\n<li>DRY - we can add <code>Head</code> component in <code>pages/_app.js</code> and conditionally set the children of <code>Head</code> based on the <code>router</code> prop that the “root” component has access to. Evaluation order for multiple <code>Head</code> still holds, so it would be easy to add a custom <code>Head</code> if at all needed. <a href=\"https://github.com/exemplar-codes/nextjs-first-realistic-tutorial/commit/e5a7d5d90f8b0e03ce1fd14cc8eb63a321558e6c\">Code</a></li>\n</ul>\n",
      "id": 133
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/8_Deploying_Nextjs_projects/347_Deploying_Nextjs_projects.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/23_Intro_to_Next_js/8_Deploying_Nextjs_projects/347_Deploying_Nextjs_projects.html",
      "content": "# 347. Deploying Next.js projects\nCreated Sunday 25 December 2022\n\n## Building - manual\n1. Copy the project code to a server.\n2. Run `npm run build`.\n3. To start Next.js server `npm start`\n\nThat's it.\n\nMentioning this in case I want to deploy manually, using Amazon EC2 (or something similar).\n\nOf course, Next.js is a fullstack framework, so we need a dynamic server. But, if all we want is SSG - no unseen dynamic route SSG, ISR, SSR or API routes, a static server will suffice. In this case all we need is `.next` folder generated after the build. \n\nFIXME - how to up a static server for a Next project? Do it later.\n\n\n## Build, deploy and basic CI/CD - Vercel\nThere are many options when it comes to deploying a Next.js project.\n\nWe'll use [Vercel](https://vercel.com/) -  a hosting provider. It's the same company that created Next.js.\n\nTo deploy:\n1. Upload the code to GitHub (or any other Git provider)\n2. Log in to Vercel, and connect the GitHub repo with Vercel.\n3. Enable Network access for all IP addresses - in MongoDB, because Vercel server will now communicate with it, instead of our dev machine.\n4. Deploy the project, add environment variables (from `.env` file - as it is absent from the code).\n\nAlso - any changes to the `main` branch will trigger a build on Vercel.\n\nThere are many more features on Vercel.",
      "html": "<h1 id=\"347.-deploying-next.js-projects\">347. Deploying Next.js projects <a class=\"heading-anchor-permalink\" href=\"#347.-deploying-next.js-projects\">#</a></h1>\n<p>Created Sunday 25 December 2022</p>\n<h2 id=\"building---manual\">Building - manual <a class=\"heading-anchor-permalink\" href=\"#building---manual\">#</a></h2>\n<ol>\n<li>Copy the project code to a server.</li>\n<li>Run <code>npm run build</code>.</li>\n<li>To start Next.js server <code>npm start</code></li>\n</ol>\n<p>That’s it.</p>\n<p>Mentioning this in case I want to deploy manually, using Amazon EC2 (or something similar).</p>\n<p>Of course, Next.js is a fullstack framework, so we need a dynamic server. But, if all we want is SSG - no unseen dynamic route SSG, ISR, SSR or API routes, a static server will suffice. In this case all we need is <code>.next</code> folder generated after the build.</p>\n<p>FIXME - how to up a static server for a Next project? Do it later.</p>\n<h2 id=\"build%2C-deploy-and-basic-ci%2Fcd---vercel\">Build, deploy and basic CI/CD - Vercel <a class=\"heading-anchor-permalink\" href=\"#build%2C-deploy-and-basic-ci%2Fcd---vercel\">#</a></h2>\n<p>There are many options when it comes to deploying a Next.js project.</p>\n<p>We’ll use <a href=\"https://vercel.com/\">Vercel</a> -  a hosting provider. It’s the same company that created Next.js.</p>\n<p>To deploy:</p>\n<ol>\n<li>Upload the code to GitHub (or any other Git provider)</li>\n<li>Log in to Vercel, and connect the GitHub repo with Vercel.</li>\n<li>Enable Network access for all IP addresses - in MongoDB, because Vercel server will now communicate with it, instead of our dev machine.</li>\n<li>Deploy the project, add environment variables (from <code>.env</code> file - as it is absent from the code).</li>\n</ol>\n<p>Also - any changes to the <code>main</code> branch will trigger a build on Vercel.</p>\n<p>There are many more features on Vercel.</p>\n",
      "id": 134
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/24_Animating_React_apps_DEFERRING.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/24_Animating_React_apps_DEFERRING.html",
      "content": "",
      "html": "",
      "id": 135
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_Hooks_DEFERRING.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_Hooks_DEFERRING.html",
      "content": "",
      "html": "",
      "id": 136
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/369_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/369_Module_introduction.html",
      "content": "# 369. Module introduction\nCreated Saturday 14 January 2023\n\n- This bonus section is about replacing Redux with React Context API + hooks.\n- This is optional, and using Redux is fine.",
      "html": "<h1 id=\"369.-module-introduction\">369. Module introduction <a class=\"heading-anchor-permalink\" href=\"#369.-module-introduction\">#</a></h1>\n<p>Created Saturday 14 January 2023</p>\n<ul>\n<li>This bonus section is about replacing Redux with React Context API + hooks.</li>\n<li>This is optional, and using Redux is fine.</li>\n</ul>\n",
      "id": 137
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/371_Why_would_you_replace_Redux.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/371_Why_would_you_replace_Redux.html",
      "content": "# 371. Why would you replace Redux\nCreated Saturday 14 January 2023\n\n## Demo project for this section\n[Demo project for this section](https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/)\n\nThis uses Redux because some data is needed by two different \"pages\", and using a global state is an easy and good solution.\n\n\n## Why do it\n1. Smaller bundle - don't have to bundle Redux. This may not be applicable to large apps, since their bundle is quite large anyway, and the reduction will be insignificant.\n2. Learn less - maybe you don't want to learn an extra library and it's opinions.\n3. Less boilerplate - Redux has some boilerplate and \"opinions\". This could be annoying to some developers.\n4. Stay within core React - maybe you don't want to use 3rd party libraries as much as possible.\n5. Explore - you simply want to explore how to manage global state without prop-drilling.\n\nWe are going to see two different approaches to do this. One of them is a good one, but the other may not be great for all use-cases.",
      "html": "<h1 id=\"371.-why-would-you-replace-redux\">371. Why would you replace Redux <a class=\"heading-anchor-permalink\" href=\"#371.-why-would-you-replace-redux\">#</a></h1>\n<p>Created Saturday 14 January 2023</p>\n<h2 id=\"demo-project-for-this-section\">Demo project for this section <a class=\"heading-anchor-permalink\" href=\"#demo-project-for-this-section\">#</a></h2>\n<p><a href=\"https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/\">Demo project for this section</a></p>\n<p>This uses Redux because some data is needed by two different “pages”, and using a global state is an easy and good solution.</p>\n<h2 id=\"why-do-it\">Why do it <a class=\"heading-anchor-permalink\" href=\"#why-do-it\">#</a></h2>\n<ol>\n<li>Smaller bundle - don’t have to bundle Redux. This may not be applicable to large apps, since their bundle is quite large anyway, and the reduction will be insignificant.</li>\n<li>Learn less - maybe you don’t want to learn an extra library and it’s opinions.</li>\n<li>Less boilerplate - Redux has some boilerplate and “opinions”. This could be annoying to some developers.</li>\n<li>Stay within core React - maybe you don’t want to use 3rd party libraries as much as possible.</li>\n<li>Explore - you simply want to explore how to manage global state without prop-drilling.</li>\n</ol>\n<p>We are going to see two different approaches to do this. One of them is a good one, but the other may not be great for all use-cases.</p>\n",
      "id": 138
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/372_Alternative__using_the_Context_API.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/372_Alternative__using_the_Context_API.html",
      "content": "# 372: Alternative: Using the Context API\nCreated Saturday 14 January 2023\n\n## Approach 1\nLet's start with approach \\#1. For this we'll use the Context API.\nLet's add the code. Here's the [change](https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/tree/441b9578f944293c8adf11d4d508ca135a6a8d4a\n).\n\nThis *replacement* was easy.\n\nWhat's the issue with this approach.\n1. **Bad performance** - [Technically](https://github.com/facebook/react/issues/14110#issuecomment-448074060), the Context API is meant (FIXME: source?) for low-frequency and \"mostly global\" updates. In our demo project, switching favorites is a high-frequency update. Examples of low-frequency changes - theme, settings. The reason for this is that the Context API is neither optimized nor meant to observe nested changes in it's state. Consequently, it will re-render every component, even if the change was a nested one affecting only one component, which may lead to bad performance. **So**, use the Context API if state changes of an app are low-frequency, \"most global\" or if the app is small in size.\n2. **Un-opinionated nature** - Redux being opinionated is good for very large apps/stores which may have their middlewares (or some other construct like that). Of course, stuff like reducers and action become more important for maintaining a consistent structure to interact with the store.\n3. **Dev tool for debugging** - as of now, Redux allows time-travel debugging and a nice UI for it. No such tools exist for the Context API, as far as I know.\n   \n   BUT, there's still, a non-Redux alternative for global state management. ",
      "html": "<h1 id=\"372%3A-alternative%3A-using-the-context-api\">372: Alternative: Using the Context API <a class=\"heading-anchor-permalink\" href=\"#372%3A-alternative%3A-using-the-context-api\">#</a></h1>\n<p>Created Saturday 14 January 2023</p>\n<h2 id=\"approach-1\">Approach 1 <a class=\"heading-anchor-permalink\" href=\"#approach-1\">#</a></h2>\n<p>Let’s start with approach #1. For this we’ll use the Context API.\nLet’s add the code. Here’s the <a href=\"https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/tree/441b9578f944293c8adf11d4d508ca135a6a8d4a\">change</a>.</p>\n<p>This <em>replacement</em> was easy.</p>\n<p>What’s the issue with this approach.</p>\n<ol>\n<li>\n<p><strong>Bad performance</strong> - <a href=\"https://github.com/facebook/react/issues/14110#issuecomment-448074060\">Technically</a>, the Context API is meant (FIXME: source?) for low-frequency and “mostly global” updates. In our demo project, switching favorites is a high-frequency update. Examples of low-frequency changes - theme, settings. The reason for this is that the Context API is neither optimized nor meant to observe nested changes in it’s state. Consequently, it will re-render every component, even if the change was a nested one affecting only one component, which may lead to bad performance. <strong>So</strong>, use the Context API if state changes of an app are low-frequency, “most global” or if the app is small in size.</p>\n</li>\n<li>\n<p><strong>Un-opinionated nature</strong> - Redux being opinionated is good for very large apps/stores which may have their middlewares (or some other construct like that). Of course, stuff like reducers and action become more important for maintaining a consistent structure to interact with the store.</p>\n</li>\n<li>\n<p><strong>Dev tool for debugging</strong> - as of now, Redux allows time-travel debugging and a nice UI for it. No such tools exist for the Context API, as far as I know.</p>\n<p>BUT, there’s still, a non-Redux alternative for global state management.</p>\n</li>\n</ol>\n",
      "id": 139
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/375_Alternative__Custom_hook_as_a_Store.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/25_Replacing_Redux_with_React_hooks/375_Alternative__Custom_hook_as_a_Store.html",
      "content": "# 375. Alternative: Custom hook as a store\nCreated Sunday 15 January 2023\n\nContinuing with the [existing code](https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/tree/441b9578f944293c8adf11d4d508ca135a6a8d4a\n).\n\n## Alternative 2\nWe'll build a global state management solution without Redux or React-Redux or the Context API.\n\nWe'll only use custom hooks.\n\nCode:\n1. Creating the store solution - https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/commit/57b252df68cd147cddf235b0b8ef707aaeaa6680\n2. Using it - https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/commit/c35c3400f69e5e50258e507bf173466f78f97c38\n\nExplanation (this was really hard to wrap mind around, code wise, but the idea is simple).\n1. We have 3 simple scoped variables in a file. We make changes to these variables. So they exist only once in the lifetime of our app. Reason: the variables are initialized only once, when something is imported from the file for the first time.\n2. We manage all data in these three variables.\n3. We expose a simple dispatch function that changes the global state, using the 'equals' sign. FIXME (why? BTW, doesn't work otherwise)\n4. Optimize update to relevant parts - we create and store a so called _listener_ for each instance of the custom hook. When the global state is changed, we run this listeners, causing re-renders for all components that use the hook. Others component don't re-render, atleast not directly, as it should be.\n5. Some more optimization, in usage code using `React.memo`. [Code](https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/commit/c1c0daf3d6f1738ff7ae55380a1eb711ee92f00b)\n6. Remaining code is obvious.\n\n## Lessons and observations\n1. This is different from Redux, in that Redux has custom JavaScript only. Here, we stayed within the React ecosystem.\n2. React hooks are a very powerful concept. When used properly, it feels like a custom version of React.\n3. Using Redux is fine, but such a custom hook may be used if the goal is to minimize the bundle at a bytes level.\n\n\n## Conclusion\nThis section was OK, but it was too hairy for a demo. I'll stop here, I'm confident I can code this up if the situation demands. Here's the [code - ZIP file](![](/assets/replace-redux-06-bonus-multiple-slices.zip)) for multi-slice implementation of this demo project.\n\n\\_TAG_: skipped at the end, not the best use of my time + I'm late.\n",
      "html": "<h1 id=\"375.-alternative%3A-custom-hook-as-a-store\">375. Alternative: Custom hook as a store <a class=\"heading-anchor-permalink\" href=\"#375.-alternative%3A-custom-hook-as-a-store\">#</a></h1>\n<p>Created Sunday 15 January 2023</p>\n<p>Continuing with the <a href=\"https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/tree/441b9578f944293c8adf11d4d508ca135a6a8d4a\">existing code</a>.</p>\n<h2 id=\"alternative-2\">Alternative 2 <a class=\"heading-anchor-permalink\" href=\"#alternative-2\">#</a></h2>\n<p>We’ll build a global state management solution without Redux or React-Redux or the Context API.</p>\n<p>We’ll only use custom hooks.</p>\n<p>Code:</p>\n<ol>\n<li>Creating the store solution - <a href=\"https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/commit/57b252df68cd147cddf235b0b8ef707aaeaa6680\">https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/commit/57b252df68cd147cddf235b0b8ef707aaeaa6680</a></li>\n<li>Using it - <a href=\"https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/commit/c35c3400f69e5e50258e507bf173466f78f97c38\">https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/commit/c35c3400f69e5e50258e507bf173466f78f97c38</a></li>\n</ol>\n<p>Explanation (this was really hard to wrap mind around, code wise, but the idea is simple).</p>\n<ol>\n<li>We have 3 simple scoped variables in a file. We make changes to these variables. So they exist only once in the lifetime of our app. Reason: the variables are initialized only once, when something is imported from the file for the first time.</li>\n<li>We manage all data in these three variables.</li>\n<li>We expose a simple dispatch function that changes the global state, using the ‘equals’ sign. FIXME (why? BTW, doesn’t work otherwise)</li>\n<li>Optimize update to relevant parts - we create and store a so called <em>listener</em> for each instance of the custom hook. When the global state is changed, we run this listeners, causing re-renders for all components that use the hook. Others component don’t re-render, atleast not directly, as it should be.</li>\n<li>Some more optimization, in usage code using <code>React.memo</code>. <a href=\"https://github.com/exemplar-codes/replacing-redux-with-context-and-hooks/commit/c1c0daf3d6f1738ff7ae55380a1eb711ee92f00b\">Code</a></li>\n<li>Remaining code is obvious.</li>\n</ol>\n<h2 id=\"lessons-and-observations\">Lessons and observations <a class=\"heading-anchor-permalink\" href=\"#lessons-and-observations\">#</a></h2>\n<ol>\n<li>This is different from Redux, in that Redux has custom JavaScript only. Here, we stayed within the React ecosystem.</li>\n<li>React hooks are a very powerful concept. When used properly, it feels like a custom version of React.</li>\n<li>Using Redux is fine, but such a custom hook may be used if the goal is to minimize the bundle at a bytes level.</li>\n</ol>\n<h2 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h2>\n<p>This section was OK, but it was too hairy for a demo. I’ll stop here, I’m confident I can code this up if the situation demands. Here’s the <a href=\"!%5B%5D(/assets/replace-redux-06-bonus-multiple-slices.zip)\">code - ZIP file</a> for multi-slice implementation of this demo project.</p>\n<p>_TAG_: skipped at the end, not the best use of my time + I’m late.</p>\n",
      "id": 140
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/384_Module_Introduction.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/384_Module_Introduction.html",
      "content": "# 384. Module Introduction\nCreated Wednesday 4 January 2023\n\nThis course section is about *automated* testing of React apps.\n\n- Automated tests are not a replacement for manual testing or QA\n- They are a very important aspect of app development, especially if the app is very large.\n\nIn this course section, we'll learn about:\n1. What testing is, in app development.\n2. How to test React apps - some libraries and tools.\n\nNote: this is a very brief introduction.",
      "html": "<h1 id=\"384.-module-introduction\">384. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#384.-module-introduction\">#</a></h1>\n<p>Created Wednesday 4 January 2023</p>\n<p>This course section is about <em>automated</em> testing of React apps.</p>\n<ul>\n<li>Automated tests are not a replacement for manual testing or QA</li>\n<li>They are a very important aspect of app development, especially if the app is very large.</li>\n</ul>\n<p>In this course section, we’ll learn about:</p>\n<ol>\n<li>What testing is, in app development.</li>\n<li>How to test React apps - some libraries and tools.</li>\n</ol>\n<p>Note: this is a very brief introduction.</p>\n",
      "id": 141
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/385_What_is_testing_and_Why.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/385_What_is_testing_and_Why.html",
      "content": "# 385. What is testing and Why?\nCreated Wednesday 4 January 2023\n\n- We *have* done testing in this course, but it manual testing.\n- Manual testing is not scalable, at all. It's also error prone.\n\n## Why\nThe sole goal of automated testing to increase confidence, by detecting regressions (FIXME, sole?). That's it.\n\nA regression is said to have occurred if the code breaks when some changes are made to it, and it was working fine previously. Example - we made a change to a core UI component that is not backwards compatible, which broke some feature which used this component.\n\nIn a medium to large sized app, it's not practical to manually check every feature/page/flow/combination for every change we make to our code.\n\nBy detecting regressions (by writing automated tests), we:\n1. **Save time and effort** - We can fix issues as soon as they show up. This saves us a lot of time, as compared to detecting an issue later where we may need to debug/re-write code at all places that used this buggy part.\n2. **Gives us confidence** - we have confidence that, atleast, minor bugs are not present in our codebase.\n3. **Makes experimenting easy** - we can try out changes to our code without worrying about unknown regressions, because we can detect them.\n4. **Generate data about code quality/architecture** - we generate useful data that might be kept in mind when making future changes.\n5. **Learn how to write good code** - consequence of \\#4.\n\n![](../../../../assets/385_What_is_testing_and_Why-image-1-46f7245e.png)\n\n\n## How\n- An automated test is just code that checks our app code. Yeah, kind of meta, but very useful.\n- We poke the system mimicking possible user events, and make sure the effects are how they should be.\n- We can test small isolated parts, as well as whole flows.\n\n\n## What (details)\n\"Automated testing\" is a very broad definition in software development. The way it is done varies w.r.t the domain, criticality of app etc.\n\nExamples:\n1. Frontend web apps - we need a sample browser, where we automatically load, mimick events and see the result by inspecting the DOM.\n2. Backend web apps - we need a server running in test mode, where we mimick incoming requests and database reads/writes and verify if everything went OK.\n\nWe need 4 tools to do automated testing:\n1. Environment simulator - headless browser, inspected VM. We simulate the whole lifecycle of the app here, including setup, mimicking events, results etc.\n2. Environment inspector - DOM APIs, OS level inspector. We inspect changes, results for events that we mimick.\n3. Assertion tool - compare resultant environment values with ideal values, to see if they match, strictly or loosely. This is kind of a library/syntax-sugar thing, so we don't have to write stuff from scratch.\n4. Test runner - a tool that runs various tests and creates/prints reports of what failed/succeeded. This tool also understands/specifies how tests are written - e.g. files, suites, clauses and single tests.\n",
      "html": "<h1 id=\"385.-what-is-testing-and-why%3F\">385. What is testing and Why? <a class=\"heading-anchor-permalink\" href=\"#385.-what-is-testing-and-why%3F\">#</a></h1>\n<p>Created Wednesday 4 January 2023</p>\n<ul>\n<li>We <em>have</em> done testing in this course, but it manual testing.</li>\n<li>Manual testing is not scalable, at all. It’s also error prone.</li>\n</ul>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>The sole goal of automated testing to increase confidence, by detecting regressions (FIXME, sole?). That’s it.</p>\n<p>A regression is said to have occurred if the code breaks when some changes are made to it, and it was working fine previously. Example - we made a change to a core UI component that is not backwards compatible, which broke some feature which used this component.</p>\n<p>In a medium to large sized app, it’s not practical to manually check every feature/page/flow/combination for every change we make to our code.</p>\n<p>By detecting regressions (by writing automated tests), we:</p>\n<ol>\n<li><strong>Save time and effort</strong> - We can fix issues as soon as they show up. This saves us a lot of time, as compared to detecting an issue later where we may need to debug/re-write code at all places that used this buggy part.</li>\n<li><strong>Gives us confidence</strong> - we have confidence that, atleast, minor bugs are not present in our codebase.</li>\n<li><strong>Makes experimenting easy</strong> - we can try out changes to our code without worrying about unknown regressions, because we can detect them.</li>\n<li><strong>Generate data about code quality/architecture</strong> - we generate useful data that might be kept in mind when making future changes.</li>\n<li><strong>Learn how to write good code</strong> - consequence of #4.</li>\n</ol>\n<p><img src=\"../../../../assets/385_What_is_testing_and_Why-image-1-46f7245e.png\" alt=\"\"></p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<ul>\n<li>An automated test is just code that checks our app code. Yeah, kind of meta, but very useful.</li>\n<li>We poke the system mimicking possible user events, and make sure the effects are how they should be.</li>\n<li>We can test small isolated parts, as well as whole flows.</li>\n</ul>\n<h2 id=\"what-(details)\">What (details) <a class=\"heading-anchor-permalink\" href=\"#what-(details)\">#</a></h2>\n<p>“Automated testing” is a very broad definition in software development. The way it is done varies w.r.t the domain, criticality of app etc.</p>\n<p>Examples:</p>\n<ol>\n<li>Frontend web apps - we need a sample browser, where we automatically load, mimick events and see the result by inspecting the DOM.</li>\n<li>Backend web apps - we need a server running in test mode, where we mimick incoming requests and database reads/writes and verify if everything went OK.</li>\n</ol>\n<p>We need 4 tools to do automated testing:</p>\n<ol>\n<li>Environment simulator - headless browser, inspected VM. We simulate the whole lifecycle of the app here, including setup, mimicking events, results etc.</li>\n<li>Environment inspector - DOM APIs, OS level inspector. We inspect changes, results for events that we mimick.</li>\n<li>Assertion tool - compare resultant environment values with ideal values, to see if they match, strictly or loosely. This is kind of a library/syntax-sugar thing, so we don’t have to write stuff from scratch.</li>\n<li>Test runner - a tool that runs various tests and creates/prints reports of what failed/succeeded. This tool also understands/specifies how tests are written - e.g. files, suites, clauses and single tests.</li>\n</ol>\n",
      "id": 142
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/386_Understanding_different_kinds_of_tests.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/386_Understanding_different_kinds_of_tests.html",
      "content": "# 386. Understanding different kinds of tests\nCreated Wednesday 4 January 2023\n\nTests in software development, including automated tests, can be classified on various parameters.\n\nHere, we're talking about **automated tests** only.\n\n## Types of automated tests\nBased on scope/scale of the test.\n| Name        | Scope                                                           | Typical count | Importance     | Effort needed |\n| ----------- | --------------------------------------------------------------- | ------------- | -------------- | ------------- |\n| Unit        | individual building blocks tested in isolation                  | 100s - 1000s  | Most important | Less          |\n| Integration | combination of building blocks (that interact or work together) | 10s           | Important      | High          |\n| End-to-End  | complete flow, or the whole app itself.                         | < 10          | Less important      | Very high     |\n\nNote: the 3 terms are loosely defined.\n\n### 1. Unit tests (details)\nThese tests test the smallest possible building blocks. Examples - functions, UI components like buttons, i18n text components, that are used at many places.\n\nThey are considered to be the most important - based on the general assumption that if small parts are fine, the larger parts will also be OK.\n\n### 2. Integration tests (details)\nHere, we test a combination of multiple building blocks. Example - a page that has both a table and a search box, to test if the search functionality updates the table properly.\n\n### 3. End-to-End tests (details)\nHere, we test a complete app flow or a large feature. They take a lot of effort to write, and can require updates over time. \n\nThey are important, but can also be done manually (partially).\n\nIf a feature is large and complex but doesn't have a lot of possible combinations, it may be better to just do manual testing.",
      "html": "<h1 id=\"386.-understanding-different-kinds-of-tests\">386. Understanding different kinds of tests <a class=\"heading-anchor-permalink\" href=\"#386.-understanding-different-kinds-of-tests\">#</a></h1>\n<p>Created Wednesday 4 January 2023</p>\n<p>Tests in software development, including automated tests, can be classified on various parameters.</p>\n<p>Here, we’re talking about <strong>automated tests</strong> only.</p>\n<h2 id=\"types-of-automated-tests\">Types of automated tests <a class=\"heading-anchor-permalink\" href=\"#types-of-automated-tests\">#</a></h2>\n<p>Based on scope/scale of the test.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Scope</th>\n<th>Typical count</th>\n<th>Importance</th>\n<th>Effort needed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unit</td>\n<td>individual building blocks tested in isolation</td>\n<td>100s - 1000s</td>\n<td>Most important</td>\n<td>Less</td>\n</tr>\n<tr>\n<td>Integration</td>\n<td>combination of building blocks (that interact or work together)</td>\n<td>10s</td>\n<td>Important</td>\n<td>High</td>\n</tr>\n<tr>\n<td>End-to-End</td>\n<td>complete flow, or the whole app itself.</td>\n<td>&lt; 10</td>\n<td>Less important</td>\n<td>Very high</td>\n</tr>\n</tbody>\n</table>\n<p>Note: the 3 terms are loosely defined.</p>\n<h3 id=\"1.-unit-tests-(details)\">1. Unit tests (details) <a class=\"heading-anchor-permalink\" href=\"#1.-unit-tests-(details)\">#</a></h3>\n<p>These tests test the smallest possible building blocks. Examples - functions, UI components like buttons, i18n text components, that are used at many places.</p>\n<p>They are considered to be the most important - based on the general assumption that if small parts are fine, the larger parts will also be OK.</p>\n<h3 id=\"2.-integration-tests-(details)\">2. Integration tests (details) <a class=\"heading-anchor-permalink\" href=\"#2.-integration-tests-(details)\">#</a></h3>\n<p>Here, we test a combination of multiple building blocks. Example - a page that has both a table and a search box, to test if the search functionality updates the table properly.</p>\n<h3 id=\"3.-end-to-end-tests-(details)\">3. End-to-End tests (details) <a class=\"heading-anchor-permalink\" href=\"#3.-end-to-end-tests-(details)\">#</a></h3>\n<p>Here, we test a complete app flow or a large feature. They take a lot of effort to write, and can require updates over time.</p>\n<p>They are important, but can also be done manually (partially).</p>\n<p>If a feature is large and complex but doesn’t have a lot of possible combinations, it may be better to just do manual testing.</p>\n",
      "id": 143
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/387_What_to_Test_and_How_to_Test.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/387_What_to_Test_and_How_to_Test.html",
      "content": "# 387. What to Test and How to Test\nCreated Wednesday 4 January 2023\n\nIt is important to have clarity about what we should test and how to do it, from an intention POV.\n\n## What to test\n - For unit tests - have small focused tests that test only one thing, small build blocks like functions/components.\n\n## How to test\n- Handle success scenario(s) with clear reason\n- Handle error scenario(s) with clear reason\n- Handle rare/impossible/out-of-range scenarios with clear reason",
      "html": "<h1 id=\"387.-what-to-test-and-how-to-test\">387. What to Test and How to Test <a class=\"heading-anchor-permalink\" href=\"#387.-what-to-test-and-how-to-test\">#</a></h1>\n<p>Created Wednesday 4 January 2023</p>\n<p>It is important to have clarity about what we should test and how to do it, from an intention POV.</p>\n<h2 id=\"what-to-test\">What to test <a class=\"heading-anchor-permalink\" href=\"#what-to-test\">#</a></h2>\n<ul>\n<li>For unit tests - have small focused tests that test only one thing, small build blocks like functions/components.</li>\n</ul>\n<h2 id=\"how-to-test\">How to test <a class=\"heading-anchor-permalink\" href=\"#how-to-test\">#</a></h2>\n<ul>\n<li>Handle success scenario(s) with clear reason</li>\n<li>Handle error scenario(s) with clear reason</li>\n<li>Handle rare/impossible/out-of-range scenarios with clear reason</li>\n</ul>\n",
      "id": 144
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/388_Understanding_the_Techinical_setup_and_tools_involved.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/388_Understanding_the_Techinical_setup_and_tools_involved.html",
      "content": "# 388. Understanding the Technical setup and tools involved\nCreated Wednesday 4 January 2023\n\nAs mentioned earlier, we need 4 tools:\n1. Environment simulator\n2. Environment inspector\n3. Assertion tool\n4. Test runner\n\nWe will be using the following tools to test React apps:\n1. Jest - general purpose JavaScript test runner and assertion library\n2. React-Testing-Library - renderer and inspector for React apps\n\n`create-react-app` has both set up by default.",
      "html": "<h1 id=\"388.-understanding-the-technical-setup-and-tools-involved\">388. Understanding the Technical setup and tools involved <a class=\"heading-anchor-permalink\" href=\"#388.-understanding-the-technical-setup-and-tools-involved\">#</a></h1>\n<p>Created Wednesday 4 January 2023</p>\n<p>As mentioned earlier, we need 4 tools:</p>\n<ol>\n<li>Environment simulator</li>\n<li>Environment inspector</li>\n<li>Assertion tool</li>\n<li>Test runner</li>\n</ol>\n<p>We will be using the following tools to test React apps:</p>\n<ol>\n<li>Jest - general purpose JavaScript test runner and assertion library</li>\n<li>React-Testing-Library - renderer and inspector for React apps</li>\n</ol>\n<p><code>create-react-app</code> has both set up by default.</p>\n",
      "id": 145
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/389_Running_a_first_test.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/389_Running_a_first_test.html",
      "content": "# 389. Running a first test\nCreated Wednesday 4 January 2023\n\nLet's start with a fresh React app bootstrapped using `create-react-app`. [Link](git@github.com:exemplar-codes/testing-react-apps-first-tutorial.git)\n\n1. **Basic setup** - `setupTests.js` does some basic setup - import needed packages.\n2. **Test files** - The convention is to the name the test file the same as code file, but with a `.test.js*` extension. Example - `Button.jsx`'s test file should be named `Button.test.jsx`.\n3. **Basic pattern of a test** - Write the test, steps being - *Arrange* (simulate), *Act*(do something, like mimick events), *Assert* (inspect and assert).\n```js\nimport { render, screen } from \"@testing-library/react\";\nimport App from \"./App\";\n\ntest(\"renders learn react link\", () => {\n  render(<App />); // simulate\n\n  // do something - mimick events\n\n  const linkElement = screen.getByText(/learn react/i); // inspect\n\n  expect(linkElement).toBeInTheDocument(); // assert\n});\n```\n4. **Running the test(s)** - Run all tests using `npm test`, this will run all `.test.js*` files. It generates a report - successes/failures/errors. For selected file(s) pass the path/pattern.\n\n![](../../../../assets/389_Running_a_first_test-image-1-46f7245e.png)\n",
      "html": "<h1 id=\"389.-running-a-first-test\">389. Running a first test <a class=\"heading-anchor-permalink\" href=\"#389.-running-a-first-test\">#</a></h1>\n<p>Created Wednesday 4 January 2023</p>\n<p>Let’s start with a fresh React app bootstrapped using <code>create-react-app</code>. <a href=\"git@github.com:exemplar-codes/testing-react-apps-first-tutorial.git\">Link</a></p>\n<ol>\n<li><strong>Basic setup</strong> - <code>setupTests.js</code> does some basic setup - import needed packages.</li>\n<li><strong>Test files</strong> - The convention is to the name the test file the same as code file, but with a <code>.test.js*</code> extension. Example - <code>Button.jsx</code>'s test file should be named <code>Button.test.jsx</code>.</li>\n<li><strong>Basic pattern of a test</strong> - Write the test, steps being - <em>Arrange</em> (simulate), <em>Act</em>(do something, like mimick events), <em>Assert</em> (inspect and assert).</li>\n</ol>\n<pre><code class=\"language-js\">import { render, screen } from &quot;@testing-library/react&quot;;\nimport App from &quot;./App&quot;;\n\ntest(&quot;renders learn react link&quot;, () =&gt; {\n  render(&lt;App /&gt;); // simulate\n\n  // do something - mimick events\n\n  const linkElement = screen.getByText(/learn react/i); // inspect\n\n  expect(linkElement).toBeInTheDocument(); // assert\n});\n</code></pre>\n<ol start=\"4\">\n<li><strong>Running the test(s)</strong> - Run all tests using <code>npm test</code>, this will run all <code>.test.js*</code> files. It generates a report - successes/failures/errors. For selected file(s) pass the path/pattern.</li>\n</ol>\n<p><img src=\"../../../../assets/389_Running_a_first_test-image-1-46f7245e.png\" alt=\"\"></p>\n",
      "id": 146
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/390_Writing_our_first_test.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/390_Writing_our_first_test.html",
      "content": "# 390. Writing our first test\nCreated Wednesday 4 January 2023\n\nAdvice: It's a good practice to write tests as close as possible to the actual code. Example - write tests for a button component in it's own file, instead of testing it in an integration/E2E/app wide test.\n\n## How (constructs and intent)\n### Jest\n- **`test()`** - basic testing unit where assertions are done. aka \"test\"\n- **`expect()`** - used for assertion.\n- **`describe()`** - nesting construct. aka \"test suite\". Not for asserting.\n \n### RTL (React Testing Library)\n- **`render()`** - renders components, virtually of course.\n- **`screen()`** - current state of the virtually rendered UI.\n- Inspectors are functions that grab elements from the virtual UI. They are of 3 types:\n\t- **`get*`** - get an element immediately. throws an error on not found. Maid - immediately get. Use - check existence. Example - `getByText`, `getAllByText`.\n\t- **`query*`** - same as `*get` except it doesn't throw an error on not found. Maid - ask politely. Use - check nonexistence.\n\t- **`find*`** - get element asynchronously (i.e. poll the UI until element is found), returns a promise for on found/not-found. Maid - go on a quest. Use - check eventual existence/nonexistence, e.g. list appears only when API call succeeds.\n\n\n## What (details)\n### Jest\nNo need to import, as these are globally auto-loaded (thanks to `setupTests.js`).\n - **`test`**\n\t - Syntax - `test('some text', assertionCallback)`. \n\t\t```jsx\n\t\timport HomePage from './some_path';\n\t\ttest('shows text hello on home page', () => {\n\t\t\t// Arrange\n\t\t\n\t\t\t// Act\n\t\t\n\t\t\t// Assert, the focus of `test`\n\t\t});\n\t\t```\n\t- Default pass - A test with no assertions \"passes\" by default.\n\t\t```jsx\n\t\ttest('some text here', () => {}); // pass\n\n\t\t// still, need to have both arguments.\n\t\ttest(); // fail\n\t\ttest('some text here'); // fail\n\t\t```\n - **`expect`**\n\t - Syntax - `expect(realValue).myMatcherHere(idealValue)`. \n\t - Argument may be of any type - a JS variable or UI element. \n\t - A matcher may have no argument.\n\t - Negative/complement  - `expect(realValue).not.myMatcherHere(idealValue)` for complement. Example:\n\t\t```jsx\n\t\t// assert presence/existence\n\t\t// const helloElement = screen.getByText('Hello World!'); throws error\n\t\tconst helloElement = screen.getByText('Hello World!');\n\t\texpect(helloElement).toBeInTheDocument();\n\t\t\n\t\t// assert absence\n\t\t// const helloElement = screen.getByText('Hello World!'); throws error\n\t\tconst byeElement = screen.queryByText('Bye World!');\n\t\texpect(byeElement).not.toBeInTheDocument();\n\t\t```\n- **`describe`**\n\t- Syntax - `describe('text here', callbackFunc)`\n\t- Default pass - A suite with no assertions \"passes\" by default.\n\t\t```jsx\n\t\tdescribe('some text here', () => {}); // pass\n\n\n\t\t// still, need to have both arguments.\n\t\tdescribe(); // fail\n\t\tdescribe('some text here'); // fail\n\t\t```\n\n\n### RTL (React Testing Library)\nThese need to be imported in each test file.\n- **`render`** - `render(<ComponentOrEquivalentJSX />)`. Non default import from `@testing-library/react`.\n- **`screen`** - `screen.inspectorFunc()`. Non default import from `@testing-library/react`.\n- About inspectors:\n\t- All inspectors have two modes -  return a single or multiple elements (as an array). e.g. `getByText` returns a single element, whereas `getAllByText` returns an array of elements. \n\t- RTL will through an error if `getByText` is used and there are multiple matches.\n\t- `*ByText`'s non-strict inspection - `*ByText` takes an object as second argument where we can specify if we want to do an `exact` match or not. e.g. `getByText('hello', {exact: false})`. The default is `exact:true`.",
      "html": "<h1 id=\"390.-writing-our-first-test\">390. Writing our first test <a class=\"heading-anchor-permalink\" href=\"#390.-writing-our-first-test\">#</a></h1>\n<p>Created Wednesday 4 January 2023</p>\n<p>Advice: It’s a good practice to write tests as close as possible to the actual code. Example - write tests for a button component in it’s own file, instead of testing it in an integration/E2E/app wide test.</p>\n<h2 id=\"how-(constructs-and-intent)\">How (constructs and intent) <a class=\"heading-anchor-permalink\" href=\"#how-(constructs-and-intent)\">#</a></h2>\n<h3 id=\"jest\">Jest <a class=\"heading-anchor-permalink\" href=\"#jest\">#</a></h3>\n<ul>\n<li><strong><code>test()</code></strong> - basic testing unit where assertions are done. aka “test”</li>\n<li><strong><code>expect()</code></strong> - used for assertion.</li>\n<li><strong><code>describe()</code></strong> - nesting construct. aka “test suite”. Not for asserting.</li>\n</ul>\n<h3 id=\"rtl-(react-testing-library)\">RTL (React Testing Library) <a class=\"heading-anchor-permalink\" href=\"#rtl-(react-testing-library)\">#</a></h3>\n<ul>\n<li><strong><code>render()</code></strong> - renders components, virtually of course.</li>\n<li><strong><code>screen()</code></strong> - current state of the virtually rendered UI.</li>\n<li>Inspectors are functions that grab elements from the virtual UI. They are of 3 types:\n<ul>\n<li><strong><code>get*</code></strong> - get an element immediately. throws an error on not found. Maid - immediately get. Use - check existence. Example - <code>getByText</code>, <code>getAllByText</code>.</li>\n<li><strong><code>query*</code></strong> - same as <code>*get</code> except it doesn’t throw an error on not found. Maid - ask politely. Use - check nonexistence.</li>\n<li><strong><code>find*</code></strong> - get element asynchronously (i.e. poll the UI until element is found), returns a promise for on found/not-found. Maid - go on a quest. Use - check eventual existence/nonexistence, e.g. list appears only when API call succeeds.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"what-(details)\">What (details) <a class=\"heading-anchor-permalink\" href=\"#what-(details)\">#</a></h2>\n<h3 id=\"jest-2\">Jest <a class=\"heading-anchor-permalink\" href=\"#jest-2\">#</a></h3>\n<p>No need to import, as these are globally auto-loaded (thanks to <code>setupTests.js</code>).</p>\n<ul>\n<li><strong><code>test</code></strong>\n<ul>\n<li>Syntax - <code>test('some text', assertionCallback)</code>.<pre><code class=\"language-jsx\">import HomePage from './some_path';\ntest('shows text hello on home page', () =&gt; {\n\t// Arrange\n\n\t// Act\n\n\t// Assert, the focus of `test`\n});\n</code></pre>\n</li>\n<li>Default pass - A test with no assertions “passes” by default.<pre><code class=\"language-jsx\">test('some text here', () =&gt; {}); // pass\n\n// still, need to have both arguments.\ntest(); // fail\ntest('some text here'); // fail\n</code></pre>\n</li>\n</ul>\n</li>\n<li><strong><code>expect</code></strong>\n<ul>\n<li>Syntax - <code>expect(realValue).myMatcherHere(idealValue)</code>.</li>\n<li>Argument may be of any type - a JS variable or UI element.</li>\n<li>A matcher may have no argument.</li>\n<li>Negative/complement  - <code>expect(realValue).not.myMatcherHere(idealValue)</code> for complement. Example:<pre><code class=\"language-jsx\">// assert presence/existence\n// const helloElement = screen.getByText('Hello World!'); throws error\nconst helloElement = screen.getByText('Hello World!');\nexpect(helloElement).toBeInTheDocument();\n\n// assert absence\n// const helloElement = screen.getByText('Hello World!'); throws error\nconst byeElement = screen.queryByText('Bye World!');\nexpect(byeElement).not.toBeInTheDocument();\n</code></pre>\n</li>\n</ul>\n</li>\n<li><strong><code>describe</code></strong>\n<ul>\n<li>Syntax - <code>describe('text here', callbackFunc)</code></li>\n<li>Default pass - A suite with no assertions “passes” by default.<pre><code class=\"language-jsx\">describe('some text here', () =&gt; {}); // pass\n\n\n// still, need to have both arguments.\ndescribe(); // fail\ndescribe('some text here'); // fail\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rtl-(react-testing-library)-2\">RTL (React Testing Library) <a class=\"heading-anchor-permalink\" href=\"#rtl-(react-testing-library)-2\">#</a></h3>\n<p>These need to be imported in each test file.</p>\n<ul>\n<li><strong><code>render</code></strong> - <code>render(&lt;ComponentOrEquivalentJSX /&gt;)</code>. Non default import from <code>@testing-library/react</code>.</li>\n<li><strong><code>screen</code></strong> - <code>screen.inspectorFunc()</code>. Non default import from <code>@testing-library/react</code>.</li>\n<li>About inspectors:\n<ul>\n<li>All inspectors have two modes -  return a single or multiple elements (as an array). e.g. <code>getByText</code> returns a single element, whereas <code>getAllByText</code> returns an array of elements.</li>\n<li>RTL will through an error if <code>getByText</code> is used and there are multiple matches.</li>\n<li><code>*ByText</code>'s non-strict inspection - <code>*ByText</code> takes an object as second argument where we can specify if we want to do an <code>exact</code> match or not. e.g. <code>getByText('hello', {exact: false})</code>. The default is <code>exact:true</code>.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 147
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/391_Grouping_tests_together_with_test_suites.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/391_Grouping_tests_together_with_test_suites.html",
      "content": "# 391. Grouping tests together with test suites\nCreated Thursday 5 January 2023\n\n## Why\nTesting suites are a way to organize tests in a codebase into logical units - e.g. all tests for a feature/component/cases.\n\n\n## How\n- Nesting, as usual. \n- Multiple files. Keep tests isolated and close to their actual code, as much as possible.\n\n\n## What\nThe `describe` function is used to create test suites.\nExample:\n```js\ndescribe('Greeting component', () => {\n\ttest('renders Hello World! text', () => {\n\t\tconst helloElement = screen.getByText('Hello World!');\n\t\texpect(helloElement).toBeInTheDocument();\n\t});\n})\n\ndescribe('Greeting component', () => {\n\ttest('renders Hello World! text', () => {\n\t\tconst helloElement = screen.getByText('Hello World!');\n\t\texpect(helloElement).toBeInTheDocument();\n\t});\n\n\ttest('renders Hello World! text', () => {\n\t\tconst helloElement = screen.getByText('Hello World!');\n\t\texpect(helloElement).toBeInTheDocument();\n\t});\n})\n```\nRules\n1. Both suites/tests can have setup code.\n2. Only a test can do assertions.\nNesting:\n1. A file can have any number of suites/tests.\n2. A test cannot have suite/test.\n3. A suite can have `test`s or other suites.\n\n**Simply said**, suites are meant to be containers, whereas tests are meant for assertions. That's the intent, but both are allowed to do any other computation like render, inspect.",
      "html": "<h1 id=\"391.-grouping-tests-together-with-test-suites\">391. Grouping tests together with test suites <a class=\"heading-anchor-permalink\" href=\"#391.-grouping-tests-together-with-test-suites\">#</a></h1>\n<p>Created Thursday 5 January 2023</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Testing suites are a way to organize tests in a codebase into logical units - e.g. all tests for a feature/component/cases.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<ul>\n<li>Nesting, as usual.</li>\n<li>Multiple files. Keep tests isolated and close to their actual code, as much as possible.</li>\n</ul>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>The <code>describe</code> function is used to create test suites.\nExample:</p>\n<pre><code class=\"language-js\">describe('Greeting component', () =&gt; {\n\ttest('renders Hello World! text', () =&gt; {\n\t\tconst helloElement = screen.getByText('Hello World!');\n\t\texpect(helloElement).toBeInTheDocument();\n\t});\n})\n\ndescribe('Greeting component', () =&gt; {\n\ttest('renders Hello World! text', () =&gt; {\n\t\tconst helloElement = screen.getByText('Hello World!');\n\t\texpect(helloElement).toBeInTheDocument();\n\t});\n\n\ttest('renders Hello World! text', () =&gt; {\n\t\tconst helloElement = screen.getByText('Hello World!');\n\t\texpect(helloElement).toBeInTheDocument();\n\t});\n})\n</code></pre>\n<p>Rules</p>\n<ol>\n<li>Both suites/tests can have setup code.</li>\n<li>Only a test can do assertions.\nNesting:</li>\n<li>A file can have any number of suites/tests.</li>\n<li>A test cannot have suite/test.</li>\n<li>A suite can have <code>test</code>s or other suites.</li>\n</ol>\n<p><strong>Simply said</strong>, suites are meant to be containers, whereas tests are meant for assertions. That’s the intent, but both are allowed to do any other computation like render, inspect.</p>\n",
      "id": 148
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/392_Testing_user_interaction_and_state.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/392_Testing_user_interaction_and_state.html",
      "content": "# 392. Testing user interaction and state\nCreated Saturday 7 January 2023\n\nTo test interaction, let's [add](https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/4015547edaba1723de41bba4ca255f5c07bcc2a0) some state, for realism.\n\n## Interaction\nWe can interact using the `userEvent` object available as a default import from the `@testing-library/user-event` package.\n\nIt contains many events - click, scroll etc. The syntax for click is `userEvent.click(myButtonElement)`. FIXME: It's a synchronous operation, here atleast, is this always the case. [Code](https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/1542ecea9755848f75c31548fb17ac5ae6125d7a).\n\nHaving a stateful component didn't need any special treatment. FIXME: how to observe state?\n\nFIXME: I [can](https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/08c221f7cc39d93f8f82045a80bfc23861cc60d6) click the element directly, just like vanilla JS.\n1. Is this discouraged?\n2. How is it different from `userEvent`?\n3. Potentially direct actions (like scroll, keyboard) - direct in the sense that they are not focused for a particular element seems easier with `userEvent`, but it be done using `document` element as well - what are the differences?\n\nSome observations:\n- Test for all possibilities - Taking into account all possibilities that make sense is very important. [Code](https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/cb458d36c1966488f202984d9336be3b8b4ed448)\n- There may be multiple matchers which could be used interchangeably for a given scenario. [Code](https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/3fbd25bd74e10fb8f92e02a3b9a6cfbf68d7200d)\n- Use proper (tight) inspectors - when checking for presence, use `get` instead of `query`. Both would give the same result, the `get` is better as it'll raise an error. [Code](https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/4ab5948505af3b935d1fbc3cb94c773e063aea34). FIXME: really, why not be silent and not raise errors - the report will mention failure anyway.",
      "html": "<h1 id=\"392.-testing-user-interaction-and-state\">392. Testing user interaction and state <a class=\"heading-anchor-permalink\" href=\"#392.-testing-user-interaction-and-state\">#</a></h1>\n<p>Created Saturday 7 January 2023</p>\n<p>To test interaction, let’s <a href=\"https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/4015547edaba1723de41bba4ca255f5c07bcc2a0\">add</a> some state, for realism.</p>\n<h2 id=\"interaction\">Interaction <a class=\"heading-anchor-permalink\" href=\"#interaction\">#</a></h2>\n<p>We can interact using the <code>userEvent</code> object available as a default import from the <code>@testing-library/user-event</code> package.</p>\n<p>It contains many events - click, scroll etc. The syntax for click is <code>userEvent.click(myButtonElement)</code>. FIXME: It’s a synchronous operation, here atleast, is this always the case. <a href=\"https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/1542ecea9755848f75c31548fb17ac5ae6125d7a\">Code</a>.</p>\n<p>Having a stateful component didn’t need any special treatment. FIXME: how to observe state?</p>\n<p>FIXME: I <a href=\"https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/08c221f7cc39d93f8f82045a80bfc23861cc60d6\">can</a> click the element directly, just like vanilla JS.</p>\n<ol>\n<li>Is this discouraged?</li>\n<li>How is it different from <code>userEvent</code>?</li>\n<li>Potentially direct actions (like scroll, keyboard) - direct in the sense that they are not focused for a particular element seems easier with <code>userEvent</code>, but it be done using <code>document</code> element as well - what are the differences?</li>\n</ol>\n<p>Some observations:</p>\n<ul>\n<li>Test for all possibilities - Taking into account all possibilities that make sense is very important. <a href=\"https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/cb458d36c1966488f202984d9336be3b8b4ed448\">Code</a></li>\n<li>There may be multiple matchers which could be used interchangeably for a given scenario. <a href=\"https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/3fbd25bd74e10fb8f92e02a3b9a6cfbf68d7200d\">Code</a></li>\n<li>Use proper (tight) inspectors - when checking for presence, use <code>get</code> instead of <code>query</code>. Both would give the same result, the <code>get</code> is better as it’ll raise an error. <a href=\"https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/4ab5948505af3b935d1fbc3cb94c773e063aea34\">Code</a>. FIXME: really, why not be silent and not raise errors - the report will mention failure anyway.</li>\n</ul>\n",
      "id": 149
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/393_Testing_Connected_Components.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/393_Testing_Connected_Components.html",
      "content": "# 393. Testing Connected Components\nCreated Sunday 8 January 2023\n\nI use a wrapper component inside `Greetings`, the current custom component.\n\nBUT, the tests still pass. The reason is that RTL still creates virtual UI for the whole component (that we're testing and `RTL.render`ing) tree (FIXME: I think it still keeps \"label\" that various subtrees are a different component). Simply said, the virtual UI is made for the whole app tree up-to the leaves (HTML elements). So, we don't need to change our tests, in this case, as the content remained the same.\n\nTechnically, this is fine. But one should test stuff near the actual code, as much as possible.\n\nHere, the wrapper was not a very heavy - UI wise, state wise or interaction wise, so it's fine.\n\n[Code](https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/66bd9b82fef058091af10c7b998914a7e9f1d5b8)\n\nFIXME:\n1. How to inspect at the component level, instead of text, role or some other native HTML way? Is it even possible with RTL? If yes/no, why?\n2. For testing a small change in a very big UI tree (since RTL renders the whole component tree by default), how to limit rendering children UI nodes, for performance and mocking that might be needed by descendants, the latter being more problematic, as it's not just about performance which could be ignored for once.",
      "html": "<h1 id=\"393.-testing-connected-components\">393. Testing Connected Components <a class=\"heading-anchor-permalink\" href=\"#393.-testing-connected-components\">#</a></h1>\n<p>Created Sunday 8 January 2023</p>\n<p>I use a wrapper component inside <code>Greetings</code>, the current custom component.</p>\n<p>BUT, the tests still pass. The reason is that RTL still creates virtual UI for the whole component (that we’re testing and <code>RTL.render</code>ing) tree (FIXME: I think it still keeps “label” that various subtrees are a different component). Simply said, the virtual UI is made for the whole app tree up-to the leaves (HTML elements). So, we don’t need to change our tests, in this case, as the content remained the same.</p>\n<p>Technically, this is fine. But one should test stuff near the actual code, as much as possible.</p>\n<p>Here, the wrapper was not a very heavy - UI wise, state wise or interaction wise, so it’s fine.</p>\n<p><a href=\"https://github.com/exemplar-codes/testing-react-apps-first-tutorial/commit/66bd9b82fef058091af10c7b998914a7e9f1d5b8\">Code</a></p>\n<p>FIXME:</p>\n<ol>\n<li>How to inspect at the component level, instead of text, role or some other native HTML way? Is it even possible with RTL? If yes/no, why?</li>\n<li>For testing a small change in a very big UI tree (since RTL renders the whole component tree by default), how to limit rendering children UI nodes, for performance and mocking that might be needed by descendants, the latter being more problematic, as it’s not just about performance which could be ignored for once.</li>\n</ol>\n",
      "id": 150
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/394_Testing_Asynchronous_Code.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/394_Testing_Asynchronous_Code.html",
      "content": "# 394. Testing Asynchronous Code\nCreated Sunday 8 January 2023\n\n### A note about inspectors\n- `*ByText`, which gets us a UI element containing the text.\n-  `*ByRole`, to inspect by tag. But it doesn't work with tag names directly, it uses \"roles\" - [MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#states_and_properties), [W3C](https://www.w3.org/TR/html-aria/#docconformance).\nFIXME: Why does RTL have a `*ByTagName`? [this](https://github.com/testing-library/react-testing-library/issues/853) is not very convincing. Find out.\n\n## Why\nWhy do we need to talk about async testing separately. Simply because `get*` and `query*` inspectors try to find the element instantly(soon as the virtual UI is ready). But elements dependent on async ops don't appear instantly.\n\n\n## How (async inspection works)\nThere's a delay/wait before the async UI elements (i.e. dependent on async ops) appear.\n\nThere are two (similar) ways to do inspection here:\n1. **Wait and check once** - Wait until a given time and check once.\n2. **Poll until a max time** - we poll the virtual UI until a max time bound.\n\nThey are essentially the same, \\#1 is the worst case scenario of \\#2.\n\n\n## What\nRTL's `find*` inspector polls the virtual UI, until a fixed time bound (1 second by default).\n\nWe can also manage the waiting/poll-bound time, [like so](https://github.com/exemplar-codes/testing-react-apps-first-tutorial/tree/b05bd19911e230a97a4570961dd664bee2636c2b) :\n```js\nconst listItems = await screen.findAllByRole(\n      \"listitem\",\n      {\n        /** exact etc */\n      },\n      {\n        /* wait options - default wait time is 1 second, can be changed */\n      }\n    ); // re-inspects virtual UI for specified wait conditions\n```",
      "html": "<h1 id=\"394.-testing-asynchronous-code\">394. Testing Asynchronous Code <a class=\"heading-anchor-permalink\" href=\"#394.-testing-asynchronous-code\">#</a></h1>\n<p>Created Sunday 8 January 2023</p>\n<h3 id=\"a-note-about-inspectors\">A note about inspectors <a class=\"heading-anchor-permalink\" href=\"#a-note-about-inspectors\">#</a></h3>\n<ul>\n<li><code>*ByText</code>, which gets us a UI element containing the text.</li>\n<li><code>*ByRole</code>, to inspect by tag. But it doesn’t work with tag names directly, it uses “roles” - <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#states_and_properties\">MDN</a>, <a href=\"https://www.w3.org/TR/html-aria/#docconformance\">W3C</a>.\nFIXME: Why does RTL have a <code>*ByTagName</code>? <a href=\"https://github.com/testing-library/react-testing-library/issues/853\">this</a> is not very convincing. Find out.</li>\n</ul>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Why do we need to talk about async testing separately. Simply because <code>get*</code> and <code>query*</code> inspectors try to find the element instantly(soon as the virtual UI is ready). But elements dependent on async ops don’t appear instantly.</p>\n<h2 id=\"how-(async-inspection-works)\">How (async inspection works) <a class=\"heading-anchor-permalink\" href=\"#how-(async-inspection-works)\">#</a></h2>\n<p>There’s a delay/wait before the async UI elements (i.e. dependent on async ops) appear.</p>\n<p>There are two (similar) ways to do inspection here:</p>\n<ol>\n<li><strong>Wait and check once</strong> - Wait until a given time and check once.</li>\n<li><strong>Poll until a max time</strong> - we poll the virtual UI until a max time bound.</li>\n</ol>\n<p>They are essentially the same, #1 is the worst case scenario of #2.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>RTL’s <code>find*</code> inspector polls the virtual UI, until a fixed time bound (1 second by default).</p>\n<p>We can also manage the waiting/poll-bound time, <a href=\"https://github.com/exemplar-codes/testing-react-apps-first-tutorial/tree/b05bd19911e230a97a4570961dd664bee2636c2b\">like so</a> :</p>\n<pre><code class=\"language-js\">const listItems = await screen.findAllByRole(\n      &quot;listitem&quot;,\n      {\n        /** exact etc */\n      },\n      {\n        /* wait options - default wait time is 1 second, can be changed */\n      }\n    ); // re-inspects virtual UI for specified wait conditions\n</code></pre>\n",
      "id": 151
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/395_Working_with_Mocks.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/395_Working_with_Mocks.html",
      "content": "# 395. Working with Mocks\nCreated Sunday 8 January 2023\n\n## Why/Situation\nThis is still not ideal:\n1. **Events not time** - working with hardcoded wait times, or with time instead of events is not good practice.\n2. **Network requests** - test suites should not contact the outside world, like at all.\n3. **Infrastructure cost** - if the test makes actual changes, e.g. making requests, mutating databases, cache, filesystems and other stuff, one has to maintain infrastructure just even for routine automated testing. This is not practical, especially since modern CI/CD pipelines run all tests for before each deployment.\n4. **DX** - if the test suite makes real network calls, every developer will need a powerful internet connection to work, which will be big pain, coz \n\t   1. Waiting\n\t   2. Very high internet bill.\n\t   3. Need for overpowered laptops. \n\n\n## How\nThere are two solutions:\n1. Mock external resources, as much as possible, at the client side itself. Problem - mocking is a client side responsibility.\n2. Have a dedicated testing server, that does the mocking. Less client side test code. Problem - dedicated server cost.\n\nHere (for this course), we'll mock everything on the client side itself, i.e. we'll to mock network calls only, since this is a React focused course.\n\nA simple way is to built in code, like `fetch`, `localStorage` etc. This paradigm is supported by Jest. Simply said, we override parts of the `window` object itself, e.g. `window.fetch`.\n\nObvious point - We want to test only the code we wrote, not other things - e.g. there's no need to test browser's `fetch` function, because it's assumed to be OK. Maybe the point Max was trying to make was that we should mock as little as possible - only parts that we are using in our app code.\n\n\n## What\n- For mocking functions, use `jest.fn()` - it returns a function. It's better to use this than have a normal custom function, since `jest.fn()` has additional properties.\n- We are using the `mockResolvedValueOnce` property that is used to mock an async function. Example:\n```jsx\ntest(\"renders posts if request succeeds - mocked\", async () => {\n    window.fetch = jest.fn();\n    window.fetch.mockResolvedValueOnce({\n      json: async () => [\n        {\n          userId: 1,\n          id: 1,\n          title:\n            \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n          body: \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\",\n        },\n      ],\n    }); // Keep mock consistent -  fetch returns an object than has an async function called `json`.\n\n    render(<MyAsyncComponent />);\n\n    const listItems = await screen.findAllByRole(\"listitem\");\n\n    expect(listItems).not.toHaveLength(0);\n  });\n```\n[Code](https://github.com/exemplar-codes/testing-react-apps-first-tutorial/tree/03c9b723f867a32dcdf917db6000707e1cdee466)",
      "html": "<h1 id=\"395.-working-with-mocks\">395. Working with Mocks <a class=\"heading-anchor-permalink\" href=\"#395.-working-with-mocks\">#</a></h1>\n<p>Created Sunday 8 January 2023</p>\n<h2 id=\"why%2Fsituation\">Why/Situation <a class=\"heading-anchor-permalink\" href=\"#why%2Fsituation\">#</a></h2>\n<p>This is still not ideal:</p>\n<ol>\n<li><strong>Events not time</strong> - working with hardcoded wait times, or with time instead of events is not good practice.</li>\n<li><strong>Network requests</strong> - test suites should not contact the outside world, like at all.</li>\n<li><strong>Infrastructure cost</strong> - if the test makes actual changes, e.g. making requests, mutating databases, cache, filesystems and other stuff, one has to maintain infrastructure just even for routine automated testing. This is not practical, especially since modern CI/CD pipelines run all tests for before each deployment.</li>\n<li><strong>DX</strong> - if the test suite makes real network calls, every developer will need a powerful internet connection to work, which will be big pain, coz\n1. Waiting\n2. Very high internet bill.\n3. Need for overpowered laptops.</li>\n</ol>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>There are two solutions:</p>\n<ol>\n<li>Mock external resources, as much as possible, at the client side itself. Problem - mocking is a client side responsibility.</li>\n<li>Have a dedicated testing server, that does the mocking. Less client side test code. Problem - dedicated server cost.</li>\n</ol>\n<p>Here (for this course), we’ll mock everything on the client side itself, i.e. we’ll to mock network calls only, since this is a React focused course.</p>\n<p>A simple way is to built in code, like <code>fetch</code>, <code>localStorage</code> etc. This paradigm is supported by Jest. Simply said, we override parts of the <code>window</code> object itself, e.g. <code>window.fetch</code>.</p>\n<p>Obvious point - We want to test only the code we wrote, not other things - e.g. there’s no need to test browser’s <code>fetch</code> function, because it’s assumed to be OK. Maybe the point Max was trying to make was that we should mock as little as possible - only parts that we are using in our app code.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<ul>\n<li>For mocking functions, use <code>jest.fn()</code> - it returns a function. It’s better to use this than have a normal custom function, since <code>jest.fn()</code> has additional properties.</li>\n<li>We are using the <code>mockResolvedValueOnce</code> property that is used to mock an async function. Example:</li>\n</ul>\n<pre><code class=\"language-jsx\">test(&quot;renders posts if request succeeds - mocked&quot;, async () =&gt; {\n    window.fetch = jest.fn();\n    window.fetch.mockResolvedValueOnce({\n      json: async () =&gt; [\n        {\n          userId: 1,\n          id: 1,\n          title:\n            &quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;,\n          body: &quot;quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto&quot;,\n        },\n      ],\n    }); // Keep mock consistent -  fetch returns an object than has an async function called `json`.\n\n    render(&lt;MyAsyncComponent /&gt;);\n\n    const listItems = await screen.findAllByRole(&quot;listitem&quot;);\n\n    expect(listItems).not.toHaveLength(0);\n  });\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/testing-react-apps-first-tutorial/tree/03c9b723f867a32dcdf917db6000707e1cdee466\">Code</a></p>\n",
      "id": 152
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/396. Summary_and_Further_Resources.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/396. Summary_and_Further_Resources.html",
      "content": "# 396. Summary and Further Resources\nCreated Sunday 8 January 2023\n\nThis module was only an introduction to testing in general and testing React apps specifically.\n\nThere are dedicated courses available for testing, testing React apps, and client side testing in general.\n\nAnyway, some resources are useful:\n1. Official [Jest](https://jestjs.io/) docs - Jest is a general JavaScript testing tool. Learn more about matchers, async testing, waiting, mocking and more etc.\n2. Official [React-Testing-Library](https://testing-library.com/docs/react-testing-library/intro) docs - aka RTL, is a testing tool specifically for React apps. Learn more about inspectors, firing user events, async testing, mocking etc. It also has extensions that can be installed with RTL - especially the [React-Hooks-Testing-Library](https://react-hooks-testing-library.com/) extension that is used for testing custom hooks.\n\nIt should be a development goal to test all code in an app.\n\n## Opinions on testing\n- [Guiding Principles of the React Testing Library](https://testing-library.com/docs/guiding-principles)\n- [Write tests. Not too many. Mostly integration.](https://kentcdodds.com/blog/write-tests)",
      "html": "<h1 id=\"396.-summary-and-further-resources\">396. Summary and Further Resources <a class=\"heading-anchor-permalink\" href=\"#396.-summary-and-further-resources\">#</a></h1>\n<p>Created Sunday 8 January 2023</p>\n<p>This module was only an introduction to testing in general and testing React apps specifically.</p>\n<p>There are dedicated courses available for testing, testing React apps, and client side testing in general.</p>\n<p>Anyway, some resources are useful:</p>\n<ol>\n<li>Official <a href=\"https://jestjs.io/\">Jest</a> docs - Jest is a general JavaScript testing tool. Learn more about matchers, async testing, waiting, mocking and more etc.</li>\n<li>Official <a href=\"https://testing-library.com/docs/react-testing-library/intro\">React-Testing-Library</a> docs - aka RTL, is a testing tool specifically for React apps. Learn more about inspectors, firing user events, async testing, mocking etc. It also has extensions that can be installed with RTL - especially the <a href=\"https://react-hooks-testing-library.com/\">React-Hooks-Testing-Library</a> extension that is used for testing custom hooks.</li>\n</ol>\n<p>It should be a development goal to test all code in an app.</p>\n<h2 id=\"opinions-on-testing\">Opinions on testing <a class=\"heading-anchor-permalink\" href=\"#opinions-on-testing\">#</a></h2>\n<ul>\n<li><a href=\"https://testing-library.com/docs/guiding-principles\">Guiding Principles of the React Testing Library</a></li>\n<li><a href=\"https://kentcdodds.com/blog/write-tests\">Write tests. Not too many. Mostly integration.</a></li>\n</ul>\n",
      "id": 153
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/5_Until_section_5.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/5_Until_section_5.html",
      "content": "# 5. Until section 5\nCreated Wednesday 16 February 2022\n\nI've already incorporated my learnings into the mental model.\nThere is something though.\n- Forms - React forms usually use `event.preventDefault()` for forms, and use two-way binding (for resetting value after submission) and use `onChange` with state for all arguments. This way, we store the blanks even after the form is submitted. This data is sent away using a REST API or something.",
      "html": "<h1 id=\"5.-until-section-5\">5. Until section 5 <a class=\"heading-anchor-permalink\" href=\"#5.-until-section-5\">#</a></h1>\n<p>Created Wednesday 16 February 2022</p>\n<p>I’ve already incorporated my learnings into the mental model.\nThere is something though.</p>\n<ul>\n<li>Forms - React forms usually use <code>event.preventDefault()</code> for forms, and use two-way binding (for resetting value after submission) and use <code>onChange</code> with state for all arguments. This way, we store the blanks even after the form is submitted. This data is sent away using a REST API or something.</li>\n</ul>\n",
      "id": 154
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/6_Styling_in_React_INCOMPLETE.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/6_Styling_in_React_INCOMPLETE.html",
      "content": "# 6. Styling in React\nCreated Wednesday 16 February 2022\n- [ ] in vault\n- Inline styles - done.\n- Global CSS file in component, done.\n- Styled-components: haven't (FIXME) understood nesting. Looks like invert specificity.\n- CSS modules - skipping for now. FIXME",
      "html": "<h1 id=\"6.-styling-in-react\">6. Styling in React <a class=\"heading-anchor-permalink\" href=\"#6.-styling-in-react\">#</a></h1>\n<p>Created Wednesday 16 February 2022</p>\n<ul>\n<li>[ ] in vault</li>\n<li>Inline styles - done.</li>\n<li>Global CSS file in component, done.</li>\n<li>Styled-components: haven’t (FIXME) understood nesting. Looks like invert specificity.</li>\n<li>CSS modules - skipping for now. FIXME</li>\n</ul>\n",
      "id": 155
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/7_Debugging_React_apps.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/7_Debugging_React_apps.html",
      "content": "# 7. Debugging React apps\nCreated Wednesday 16 February 2022\n - [ ] in vault\n\nDoing this now.\n\n### 3. Kinds of errors in React\n1. `npm start` does detect and show compilation errors in React projects. This is quite useful.\n2. Warnings and prop errors are not compilation errors, so they are shown in the `console` tab in devTool.\n3. Then there are logic errors like using bad `key` attribute for a list of components, which can make the order wrong.\n\n### 4. Working with the debugger in DevTools\n- When working with `create-react-app` created project and using `npm start`, JSX (or JS) files are available as is in the `Sources` tab in the DevTool. These files are of course not run by the browser, but they are in sync with the files being compiled and executed. So if a breakpoint is added somewhere in the React (JSX or JS) file, it will be a valid breakpoint.\n- This source <--> compiled files fast bridge is an awesome thing that should be used to the fullest.\n\n### 5. Using the React devTool\nThis a browser extension called `React Developer Tools`. They are available in both Chrome and Firefox, although Chrome is recommended.\n- Once the extension is installed. Two tabs called `Components` and `Profiles` are made available in the devTool tabs besides Console, Sources, Network etc.\n- `Components` shows the component tree of the app. It also has a cursor to locate React components directly by pointing to the UI.\n- We can also see/edit the following stuff for various components in the `Components` tab:\n\t- children\n\t- parents (dependent)\n\t- props\n\t- source code line.\n\t- hooks (aka lifecycle methods)\nThis is very useful to understand and locate components of an app, especially if it's not written by me.\n",
      "html": "<h1 id=\"7.-debugging-react-apps\">7. Debugging React apps <a class=\"heading-anchor-permalink\" href=\"#7.-debugging-react-apps\">#</a></h1>\n<p>Created Wednesday 16 February 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<p>Doing this now.</p>\n<h3 id=\"3.-kinds-of-errors-in-react\">3. Kinds of errors in React <a class=\"heading-anchor-permalink\" href=\"#3.-kinds-of-errors-in-react\">#</a></h3>\n<ol>\n<li><code>npm start</code> does detect and show compilation errors in React projects. This is quite useful.</li>\n<li>Warnings and prop errors are not compilation errors, so they are shown in the <code>console</code> tab in devTool.</li>\n<li>Then there are logic errors like using bad <code>key</code> attribute for a list of components, which can make the order wrong.</li>\n</ol>\n<h3 id=\"4.-working-with-the-debugger-in-devtools\">4. Working with the debugger in DevTools <a class=\"heading-anchor-permalink\" href=\"#4.-working-with-the-debugger-in-devtools\">#</a></h3>\n<ul>\n<li>When working with <code>create-react-app</code> created project and using <code>npm start</code>, JSX (or JS) files are available as is in the <code>Sources</code> tab in the DevTool. These files are of course not run by the browser, but they are in sync with the files being compiled and executed. So if a breakpoint is added somewhere in the React (JSX or JS) file, it will be a valid breakpoint.</li>\n<li>This source &lt;–&gt; compiled files fast bridge is an awesome thing that should be used to the fullest.</li>\n</ul>\n<h3 id=\"5.-using-the-react-devtool\">5. Using the React devTool <a class=\"heading-anchor-permalink\" href=\"#5.-using-the-react-devtool\">#</a></h3>\n<p>This a browser extension called <code>React Developer Tools</code>. They are available in both Chrome and Firefox, although Chrome is recommended.</p>\n<ul>\n<li>Once the extension is installed. Two tabs called <code>Components</code> and <code>Profiles</code> are made available in the devTool tabs besides Console, Sources, Network etc.</li>\n<li><code>Components</code> shows the component tree of the app. It also has a cursor to locate React components directly by pointing to the UI.</li>\n<li>We can also see/edit the following stuff for various components in the <code>Components</code> tab:\n<ul>\n<li>children</li>\n<li>parents (dependent)</li>\n<li>props</li>\n<li>source code line.</li>\n<li>hooks (aka lifecycle methods)\nThis is very useful to understand and locate components of an app, especially if it’s not written by me.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 156
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/8_Practice_Project.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/8_Practice_Project.html",
      "content": "# 8. Practice Project\nCreated Thursday 24 February 2022\n\nI created [this](https://github.com/exemplar-codes/todo_like_list) project. It has a modal too, my first one. Good project.",
      "html": "<h1 id=\"8.-practice-project\">8. Practice Project <a class=\"heading-anchor-permalink\" href=\"#8.-practice-project\">#</a></h1>\n<p>Created Thursday 24 February 2022</p>\n<p>I created <a href=\"https://github.com/exemplar-codes/todo_like_list\">this</a> project. It has a modal too, my first one. Good project.</p>\n",
      "id": 157
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/103_Fragments.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/103_Fragments.html",
      "content": "# 103. Fragments\nCreated Thursday 24 February 2022\n- [ ] in vault\n\n#### `div` soup\n- A function in JavaScript can ultimately return one object. This is OK, but leads to a not so good practice of wrapping sibling components in parent containers like `div`s, even if it is not needed.\n- This needs to be done in JSX, for JavaScript.\n- It leads to something known as \"`div` soup\", i.e. many nested `div` inside each other in the final HTML rendered on the page, which are neither needed and don't provide any semantic structure.\n<html></html>\nThe solution is to just create a wrapper component and return `prop.children` directly from it, without any JSX.\n\nThis hollow \"Wrapper\" component can then be easily used to wrap sibling components, without creating a \"`div` soup\". The Wrapper looks like this\":\n```js\n// no need to import React, as no JSX is used.\nfunction Wrapper(props) {\n  return props.children;\n}\n\nexport default Wrapper;\n```\nThis can be used like so:\n```jsx\nreturn (<Wrapper>\n\t\t  <div>...</div>\n\t\t  <MyComponent />\n\t\t</Wrapper>);\n```\n\n#### React fragment\nInstead of us always defining this hollow thing, React provides empty wrapper called \"fragment\".\nIt can be imported like so:\n```jsx\nimport React, {Fragment} from 'react';\nreturn (<Fragment>\n\t\t  <div>...</div>\n\t\t  <MyComponent />\n\t\t</Fragment>);\n```\n// OR to avoid explicit import:\n```jsx\nimport React from 'react';\nreturn <React.Fragment>\n\t\t  <div>...</div>\n\t\t  <MyComponent />\n\t\t</React.Fragment>);\n```\nbut the **best way** is using empty angled brackets (this needs some setup, and is already configured with `create-react-app`).\n```jsx\nimport React from 'react';\nreturn (<>\n\t\t  <div>...</div>\n\t\t  <MyComponents />\n\t\t</>);\n```",
      "html": "<h1 id=\"103.-fragments\">103. Fragments <a class=\"heading-anchor-permalink\" href=\"#103.-fragments\">#</a></h1>\n<p>Created Thursday 24 February 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h4 id=\"div-soup\"><code>div</code> soup <a class=\"heading-anchor-permalink\" href=\"#div-soup\">#</a></h4>\n<ul>\n<li>A function in JavaScript can ultimately return one object. This is OK, but leads to a not so good practice of wrapping sibling components in parent containers like <code>div</code>s, even if it is not needed.</li>\n<li>This needs to be done in JSX, for JavaScript.</li>\n<li>It leads to something known as &quot;<code>div</code> soup&quot;, i.e. many nested <code>div</code> inside each other in the final HTML rendered on the page, which are neither needed and don’t provide any semantic structure.</li>\n</ul>\n<html></html>\nThe solution is to just create a wrapper component and return `prop.children` directly from it, without any JSX.\n<p>This hollow “Wrapper” component can then be easily used to wrap sibling components, without creating a &quot;<code>div</code> soup&quot;. The Wrapper looks like this&quot;:</p>\n<pre><code class=\"language-js\">// no need to import React, as no JSX is used.\nfunction Wrapper(props) {\n  return props.children;\n}\n\nexport default Wrapper;\n</code></pre>\n<p>This can be used like so:</p>\n<pre><code class=\"language-jsx\">return (&lt;Wrapper&gt;\n\t\t  &lt;div&gt;...&lt;/div&gt;\n\t\t  &lt;MyComponent /&gt;\n\t\t&lt;/Wrapper&gt;);\n</code></pre>\n<h4 id=\"react-fragment\">React fragment <a class=\"heading-anchor-permalink\" href=\"#react-fragment\">#</a></h4>\n<p>Instead of us always defining this hollow thing, React provides empty wrapper called “fragment”.\nIt can be imported like so:</p>\n<pre><code class=\"language-jsx\">import React, {Fragment} from 'react';\nreturn (&lt;Fragment&gt;\n\t\t  &lt;div&gt;...&lt;/div&gt;\n\t\t  &lt;MyComponent /&gt;\n\t\t&lt;/Fragment&gt;);\n</code></pre>\n<p>// OR to avoid explicit import:</p>\n<pre><code class=\"language-jsx\">import React from 'react';\nreturn &lt;React.Fragment&gt;\n\t\t  &lt;div&gt;...&lt;/div&gt;\n\t\t  &lt;MyComponent /&gt;\n\t\t&lt;/React.Fragment&gt;);\n</code></pre>\n<p>but the <strong>best way</strong> is using empty angled brackets (this needs some setup, and is already configured with <code>create-react-app</code>).</p>\n<pre><code class=\"language-jsx\">import React from 'react';\nreturn (&lt;&gt;\n\t\t  &lt;div&gt;...&lt;/div&gt;\n\t\t  &lt;MyComponents /&gt;\n\t\t&lt;/&gt;);\n</code></pre>\n",
      "id": 158
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/105_Portals.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/105_Portals.html",
      "content": "# 105. Portals\nCreated Monday 28 February 2022\n- [ ] in vault\n\n### Why\nThis construct helps in placing the resultant HTML code at a syntactically better place then it would usually be rendered. The React code still remains at the same place, but the final place as HTML code is changed.\n\nEtymology: The HTML from the React code is placed (or \"portaled\") elsewhere.\n\n\n### How\nThe location of the component's invocation remains unaffected (meaning it remains at its functional place, irrespective of the target HTML position, and can have props too), but in the component file, the component function returns `ReactDOM.createPortal(<MyComponentJSX />, targetElement)` instead of just the `JSX`.\n\n- Note that the target element should be DOM node, i.e. the target element has to be added to `index.html`. So, it cannot be an element in a JS/JSX file.\n- `ReactDOM.createPortal` also returns a component, which can be used elsewhere.\n\n\nEffects (in comparison to un-portaled React code):\n1. Data/props - nothing changes, as the place of use of the components doesn't need to change, only the source file changed.\n2. Styles - remains the same. FIXME\n3. State - works unchanged.\n\nExample:\nThe code like this (i.e. at the source file):\n```jsx\nimport React from 'react';\n\nfunction MyComponent() {\n\treturn (<div>\n\t\t\t...\n\t\t\t</div>);\n};\n\nexport default MyComponent;\n```\nchanges to:\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction MyComponent {\n\treturn ReactDOM.createPortal(\n\t\t<div>\n\t\t...\n\t\t</div>\n\t), document.getElementById('portal-id');\n};\n\nexport default MyComponent;\n```\n\nThe place of use of the code doesn't get affected in any way.\n\n\n#### Where is this useful ?\nThis is useful for things that need to rendered outside of the code components, but is tied to them - like modals (which need state-flipper and other props, but should ideally be placed just beside the root `div` of the React app).\n\n\n### Note 1: Using a generic component for portaling stuff\nGenerally, when using a portal, there are 4 things:\n1. The content\n2. The generic component that will be portaled.\n3. Portal destination, generally marked by a static `div` with `id` at top app level.\n4. Invocation of the generic portal component, with content passed as prop/child.\n\nThe thing to note here is that there's no change to how this happens, as said on this page earlier.\n\n\n### Note 2: Adding multiple components to portal destination\n- Multiple components can be passed to the portal destination. This results in the components being appended after each other. For example, this is totally fine.\n```jsx\nimport ReactDOM from 'react-dom';\n\nconst portalDestination = document.getElementById('portal');\n\nfunction App() {\n\treturn <>\n\t\t{ReactDOM.createPortal(<div>Hello 1<div>, portalDestination)}\n\t\t{ReactDOM.createPortal(<div>Hello 2<div>, portalDestination)}\n\t</>;\n}\n```",
      "html": "<h1 id=\"105.-portals\">105. Portals <a class=\"heading-anchor-permalink\" href=\"#105.-portals\">#</a></h1>\n<p>Created Monday 28 February 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>This construct helps in placing the resultant HTML code at a syntactically better place then it would usually be rendered. The React code still remains at the same place, but the final place as HTML code is changed.</p>\n<p>Etymology: The HTML from the React code is placed (or “portaled”) elsewhere.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>The location of the component’s invocation remains unaffected (meaning it remains at its functional place, irrespective of the target HTML position, and can have props too), but in the component file, the component function returns <code>ReactDOM.createPortal(&lt;MyComponentJSX /&gt;, targetElement)</code> instead of just the <code>JSX</code>.</p>\n<ul>\n<li>Note that the target element should be DOM node, i.e. the target element has to be added to <code>index.html</code>. So, it cannot be an element in a JS/JSX file.</li>\n<li><code>ReactDOM.createPortal</code> also returns a component, which can be used elsewhere.</li>\n</ul>\n<p>Effects (in comparison to un-portaled React code):</p>\n<ol>\n<li>Data/props - nothing changes, as the place of use of the components doesn’t need to change, only the source file changed.</li>\n<li>Styles - remains the same. FIXME</li>\n<li>State - works unchanged.</li>\n</ol>\n<p>Example:\nThe code like this (i.e. at the source file):</p>\n<pre><code class=\"language-jsx\">import React from 'react';\n\nfunction MyComponent() {\n\treturn (&lt;div&gt;\n\t\t\t...\n\t\t\t&lt;/div&gt;);\n};\n\nexport default MyComponent;\n</code></pre>\n<p>changes to:</p>\n<pre><code class=\"language-jsx\">import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction MyComponent {\n\treturn ReactDOM.createPortal(\n\t\t&lt;div&gt;\n\t\t...\n\t\t&lt;/div&gt;\n\t), document.getElementById('portal-id');\n};\n\nexport default MyComponent;\n</code></pre>\n<p>The place of use of the code doesn’t get affected in any way.</p>\n<h4 id=\"where-is-this-useful-%3F\">Where is this useful ? <a class=\"heading-anchor-permalink\" href=\"#where-is-this-useful-%3F\">#</a></h4>\n<p>This is useful for things that need to rendered outside of the code components, but is tied to them - like modals (which need state-flipper and other props, but should ideally be placed just beside the root <code>div</code> of the React app).</p>\n<h3 id=\"note-1%3A-using-a-generic-component-for-portaling-stuff\">Note 1: Using a generic component for portaling stuff <a class=\"heading-anchor-permalink\" href=\"#note-1%3A-using-a-generic-component-for-portaling-stuff\">#</a></h3>\n<p>Generally, when using a portal, there are 4 things:</p>\n<ol>\n<li>The content</li>\n<li>The generic component that will be portaled.</li>\n<li>Portal destination, generally marked by a static <code>div</code> with <code>id</code> at top app level.</li>\n<li>Invocation of the generic portal component, with content passed as prop/child.</li>\n</ol>\n<p>The thing to note here is that there’s no change to how this happens, as said on this page earlier.</p>\n<h3 id=\"note-2%3A-adding-multiple-components-to-portal-destination\">Note 2: Adding multiple components to portal destination <a class=\"heading-anchor-permalink\" href=\"#note-2%3A-adding-multiple-components-to-portal-destination\">#</a></h3>\n<ul>\n<li>Multiple components can be passed to the portal destination. This results in the components being appended after each other. For example, this is totally fine.</li>\n</ul>\n<pre><code class=\"language-jsx\">import ReactDOM from 'react-dom';\n\nconst portalDestination = document.getElementById('portal');\n\nfunction App() {\n\treturn &lt;&gt;\n\t\t{ReactDOM.createPortal(&lt;div&gt;Hello 1&lt;div&gt;, portalDestination)}\n\t\t{ReactDOM.createPortal(&lt;div&gt;Hello 2&lt;div&gt;, portalDestination)}\n\t&lt;/&gt;;\n}\n</code></pre>\n",
      "id": 159
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/106_Refs.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/106_Refs.html",
      "content": "# 106. Refs\nCreated Friday 4 March 2022\n- [ ] in vault\n\n### Why\n- Refs (short for references) is a way to access DOM nodes directly in React. It is used to read, and rarely, write to DOM nodes. It is especially useful in forms where we need to read `input` elements for values on submission.\n- Usage 2: have state independent of re-renders.\n\n### How\nThere are 3 parts to the code:\n1. Declare the ref variable.\n2. Tag the ref variable to the HTML element being monitored (being \"referenced\" 👀).\n3. Write code that reads, writes to using the ref. Note, this should be outside of any JSX. WHY? FIXME.\n\n- The ref variable has a property called `current` whose value is an object with name-values being element attributes (including `value` for `input`s). In short all attributes are present in `refVariable.current`.\n![](../../../../assets/106_Refs-image-1-c154637e.png)\n- The ref variable can be read/written from/into, and this will reflect in the component on the page.\n\nHere's an example with the 3 code parts:\n```jsx\nimport React, { useRef } from 'react';\n\nfunction MyComponent {\n  const refVariable = useRef(); // 1 - no argument passed\n\n  const onSubmitHandler = () => {\n    event.preventDefault();\n    // 3 - reading/writing from/to the refVariable, and hence to the DOM\n\n\tgetFromRocket(refVariable.current.value);\n\n\trefVariable.current.value = ''; // clearing the input\n  }\n\nreturn (<div>\n\t\t  ...\n\t\t  <form>\n\t\t    <input ... ref={refVariable} /> <!-- 2 - HTML element tagged-->\n\t\t\t...\n\t\t\t</form>\n\t\t\t...\n        </div>);\n};\n\nexport default MyComponent;\n```\n- [Need and derivation](https://github.com/exemplar-codes/react-hello-world/tree/5a83a92598ad832fb882a43ede103946b9815458/src/Apps/UseRefDemo) of the `useRef` hook.\n\n### What\n- Note that using `useRef` does not re-render the page, unlike `useState` which does re-render.\n- The lifetime of the `useRef` variable is the same as the component's lifetime.\n- Although, the `useRef` variable can be used mutate the DOM, this must be avoided as much as possible (WHY? FIXME). Clearing `input` value is OK though, as we are not creating/deleting DOM nodes.\n\n\n#### Where are refs used ?\n- refs are very handy for forms or for reading stuff from the DOM.\n- refs have helped in eliminating state based input reading mechanisms that would change on every keystroke (using `onChange`). Using `useState` is also OK, but `useRef` is better suited here.\n",
      "html": "<h1 id=\"106.-refs\">106. Refs <a class=\"heading-anchor-permalink\" href=\"#106.-refs\">#</a></h1>\n<p>Created Friday 4 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<ul>\n<li>Refs (short for references) is a way to access DOM nodes directly in React. It is used to read, and rarely, write to DOM nodes. It is especially useful in forms where we need to read <code>input</code> elements for values on submission.</li>\n<li>Usage 2: have state independent of re-renders.</li>\n</ul>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>There are 3 parts to the code:</p>\n<ol>\n<li>Declare the ref variable.</li>\n<li>Tag the ref variable to the HTML element being monitored (being “referenced” 👀).</li>\n<li>Write code that reads, writes to using the ref. Note, this should be outside of any JSX. WHY? FIXME.</li>\n</ol>\n<ul>\n<li>The ref variable has a property called <code>current</code> whose value is an object with name-values being element attributes (including <code>value</code> for <code>input</code>s). In short all attributes are present in <code>refVariable.current</code>.\n<img src=\"../../../../assets/106_Refs-image-1-c154637e.png\" alt=\"\"></li>\n<li>The ref variable can be read/written from/into, and this will reflect in the component on the page.</li>\n</ul>\n<p>Here’s an example with the 3 code parts:</p>\n<pre><code class=\"language-jsx\">import React, { useRef } from 'react';\n\nfunction MyComponent {\n  const refVariable = useRef(); // 1 - no argument passed\n\n  const onSubmitHandler = () =&gt; {\n    event.preventDefault();\n    // 3 - reading/writing from/to the refVariable, and hence to the DOM\n\n\tgetFromRocket(refVariable.current.value);\n\n\trefVariable.current.value = ''; // clearing the input\n  }\n\nreturn (&lt;div&gt;\n\t\t  ...\n\t\t  &lt;form&gt;\n\t\t    &lt;input ... ref={refVariable} /&gt; &lt;!-- 2 - HTML element tagged--&gt;\n\t\t\t...\n\t\t\t&lt;/form&gt;\n\t\t\t...\n        &lt;/div&gt;);\n};\n\nexport default MyComponent;\n</code></pre>\n<ul>\n<li><a href=\"https://github.com/exemplar-codes/react-hello-world/tree/5a83a92598ad832fb882a43ede103946b9815458/src/Apps/UseRefDemo\">Need and derivation</a> of the <code>useRef</code> hook.</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<ul>\n<li>Note that using <code>useRef</code> does not re-render the page, unlike <code>useState</code> which does re-render.</li>\n<li>The lifetime of the <code>useRef</code> variable is the same as the component’s lifetime.</li>\n<li>Although, the <code>useRef</code> variable can be used mutate the DOM, this must be avoided as much as possible (WHY? FIXME). Clearing <code>input</code> value is OK though, as we are not creating/deleting DOM nodes.</li>\n</ul>\n<h4 id=\"where-are-refs-used-%3F\">Where are refs used ? <a class=\"heading-anchor-permalink\" href=\"#where-are-refs-used-%3F\">#</a></h4>\n<ul>\n<li>refs are very handy for forms or for reading stuff from the DOM.</li>\n<li>refs have helped in eliminating state based input reading mechanisms that would change on every keystroke (using <code>onChange</code>). Using <code>useState</code> is also OK, but <code>useRef</code> is better suited here.</li>\n</ul>\n",
      "id": 160
    },
    {
      "path": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/107_controlled_vs_uncontrolled_components.md",
      "url": "home/4_resource_itineraries/2_React_the_complete_guide/9_Fragments,_Portals,_Refs/107_controlled_vs_uncontrolled_components.html",
      "content": "# 107. Controlled and uncontrolled components\nCreated Saturday 5 March 2022\n- [ ] in vault\n\n**Note, this is about jargon.**\n\n#### Where is this applicable\nIn forms, mostly.\n\n#### What does controlled mean\n- Controlled components are React components where the state is controlled using React `useState` or a similar thing.\n- Uncontrolled components on the other hand, are components where the state controlled by the traditional DOM, not React code variables.\n\n##### Example\n- Uncontrolled: When using `input` HTML elements with `useRef`, it would be uncontrolled component as the `input` value is stored in the DOM as default `HTML` behavior, and not a part of state.\n- Controlled: This is a different implementation of the uncontrolled case. Here, if the`input` `value` was set to a state variable from `useState` and was actively being set/read from the `input` on `onChange`, this would be a \"controlled\" component.\n\n#### Differences between uncontrolled and controlled components\n- Controlled components are predictable because all state is there in the React (app) code instead of the DOM.\n- Uncontrolled components are not no predictable, because the state is actually stored in the DOM and has the life-cycle and properties of the DOM.\n- Controlled components actively track input in `form`s and can be used for active validation (i.e. without submission), this not possible with uncontrolled components.\n\nIn short, if `form` values are using a state from `useState` (or similar) it is controlled, otherwise uncontrolled.\n\n#### Good Practice\nReact developers recommend using controlled components for form elements. But it is not a hard and fast rule.\n\n\nFor more info, see: https://reactjs.org/docs/uncontrolled-components.html",
      "html": "<h1 id=\"107.-controlled-and-uncontrolled-components\">107. Controlled and uncontrolled components <a class=\"heading-anchor-permalink\" href=\"#107.-controlled-and-uncontrolled-components\">#</a></h1>\n<p>Created Saturday 5 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<p><strong>Note, this is about jargon.</strong></p>\n<h4 id=\"where-is-this-applicable\">Where is this applicable <a class=\"heading-anchor-permalink\" href=\"#where-is-this-applicable\">#</a></h4>\n<p>In forms, mostly.</p>\n<h4 id=\"what-does-controlled-mean\">What does controlled mean <a class=\"heading-anchor-permalink\" href=\"#what-does-controlled-mean\">#</a></h4>\n<ul>\n<li>Controlled components are React components where the state is controlled using React <code>useState</code> or a similar thing.</li>\n<li>Uncontrolled components on the other hand, are components where the state controlled by the traditional DOM, not React code variables.</li>\n</ul>\n<h5 id=\"example\">Example <a class=\"heading-anchor-permalink\" href=\"#example\">#</a></h5>\n<ul>\n<li>Uncontrolled: When using <code>input</code> HTML elements with <code>useRef</code>, it would be uncontrolled component as the <code>input</code> value is stored in the DOM as default <code>HTML</code> behavior, and not a part of state.</li>\n<li>Controlled: This is a different implementation of the uncontrolled case. Here, if the<code>input</code> <code>value</code> was set to a state variable from <code>useState</code> and was actively being set/read from the <code>input</code> on <code>onChange</code>, this would be a “controlled” component.</li>\n</ul>\n<h4 id=\"differences-between-uncontrolled-and-controlled-components\">Differences between uncontrolled and controlled components <a class=\"heading-anchor-permalink\" href=\"#differences-between-uncontrolled-and-controlled-components\">#</a></h4>\n<ul>\n<li>Controlled components are predictable because all state is there in the React (app) code instead of the DOM.</li>\n<li>Uncontrolled components are not no predictable, because the state is actually stored in the DOM and has the life-cycle and properties of the DOM.</li>\n<li>Controlled components actively track input in <code>form</code>s and can be used for active validation (i.e. without submission), this not possible with uncontrolled components.</li>\n</ul>\n<p>In short, if <code>form</code> values are using a state from <code>useState</code> (or similar) it is controlled, otherwise uncontrolled.</p>\n<h4 id=\"good-practice\">Good Practice <a class=\"heading-anchor-permalink\" href=\"#good-practice\">#</a></h4>\n<p>React developers recommend using controlled components for form elements. But it is not a hard and fast rule.</p>\n<p>For more info, see: <a href=\"https://reactjs.org/docs/uncontrolled-components.html\">https://reactjs.org/docs/uncontrolled-components.html</a></p>\n",
      "id": 161
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/0-Ashish-overview-RN/1-first-hour.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/0-Ashish-overview-RN/1-first-hour.html",
      "content": "- if you're serious (long term) - prefer RNCLI over ExpoGo.\n- Pages (web) <--> Screens (android)\n- Core component - View (non-scroll div), ScrollView (normal div) Text, Image. Docs are good.\n- ScrollView - \n\n\n## Styling in RN\n- Syntaxes:\n    1. inline\n    2. `StyleSheet`\n- Where to keep styles - there are two philosophies:\n    1. Too much use - move to global file. e.g. colors, card-wrapper. ESM import to use.\n    2. Local one time use - in same file.\n- Flex is there. Behaves a little diff from web, default direction is `column`.\n- Grid - there's no official grid.\n    - Workaround `FlatList` has a `numsColumns`\n    - Use flex with a little more deliberate styling.\n\n\n## Basic Components\n1. `View` props (most used) - `role`, `style`, `onClick` (`onPress`) event\n\t- do `flex-1` for full space. Otherwise it's invisible. Weird ritual, but fixes it? FIXME.\n2. `Text` - `numberOfLine` (auto ellipsize) auto, ellipsizeMode - head, tail, middle, clip. `selectionColor`\n3. `Image`\n    - accpets `source` as PNG only. If local do `require('../path_to_local')`. pass HTTPS url directly. PNG makes some sense since max size of mobile devices isn't very high.\n    - ImageWrapper Ashish made, that does `require` or no change by checking `url` links (`.startsWith()`)\n    - onLoad, and other image state handlers are present\n    - `srcSet`\n    - `blurRadius` prop - will blur the image.\n    - For background image - don't do `w-full` and position. But wrap your UI with `ImageBackground` RN component.\n\n\n## Button\n- For building own button, people use `TouchableOpacity` over `Button`\n- why? `Button` (like web `<button></button>`) picks platform button vs `TouchableOPacity` (`<div>` with `<button>` props) (custom button).\n- There are some components here:\n\t- `TouchableOpacity` - shows 'click' animation styling on press. Non platform button (but has animation).\n\t- `TouchableHighlight` - minimum animation (only BG color changes)\n\t- `TouchableOpacityWithoutFeedback` - doesn't show any animation on user press.\n\n## Switch\n- Philosophy - Core `Switch` is good enough.\n\n## Text-Input\n- Usual text input box.\n- Normal props are there.\n- Some props are are platform specific (i.e. will be ignored in other platform).\n- `type`, `numeric`, `autoCapitalize`, prop affects the keyboard input. Of course, won't work in Android keypad phone.\n- `visible-password` prop for password\n- Confirm button icon - don't know. FIXME\n\n\n## Dropdown\nNo native stable. Recommendation of packages to use.\n\n\n## Listings\n1. `ScrollView` - ok, but no virtualization. `.map` works. Not a listing component btw, just a scrollable view.\n\t- Supports both way (hori and verti) scroll ? FIXME\n\t- UX perspective - try to use your scroll on one axis only (vertical for phones, e.g.)\n1. `FlatList` - ScrollView with virtualization. data\n   - Meant for lists\n   - `map` doesn't work with this. Have to pass control over to it, using `data`, `renderItem`, `keyExtractor` props\n   - `extraData` can be used to `re-render` (motivation, how this came to be?)\n   - `snapToEnd` (scroll to end if in the middle, till a threshold)\n2. `SectionList` (example - contact list with A-Z)\n\t- data props -` [{sectionTitle, [{title}, {title}]}, {sectionTitle, [{title}, {title}]}]`\n\t- takes prop to vary header section UI and other things\n\t- Is virtualized by default. non-virtual variant does not exist.\n\t- sticky section header (when scrolled past) prop is there. But default value is different based on platform.\n3. `VirtualizedList`  - (`FlatList`'s base component). Not used on it's own/\n\nnote: prefer ScrollView for screen UI only, not listing.\n\n\n## Utility components\n1. `KeyboardAvoidingView` - when platform keyboard opens, move the view up (can configure). To use, just wrap the UI with this. Use the `behavior` prop (recommended).\n2. `SaveAreaView` - prevents overflow to Android system UI.\n3. `Alert` (system level Modal) - `text`, `onPress` and `style`\n4. `Modal` (custom level modal) - animationType, and other stuff. Provided out of the box. Android isn't that pretty, ios is good.\n5. `Pressable` - gesture detection (has more gesture that View.onPress or other usual things), like swap, zoom etc.\n\t- Is usually a wrapper to your UI\n\t- But can show `ripple` effect, sound effect etc. Props are there.\n\n\n\n\n\n\n# General RN\n## Platform specific code (`Platform`)\nIn some cases - RN recommends platform specific code.\n```jsx\nimport {Platform} from 'react-native';\n\nexport default function MyComponent() {\n\treturn \n\t<Text>{Platform.os === 'ios' ? 'On Apple' : 'Not on Apple'}</Text>\n}\n```\n\n\n## Knowledge of RN\n- Almost anything can be created by `View`, `TouchableOpacity`\n- Negative margin isn't supported on RN, as of now (Aug 2023).\n\n\n",
      "html": "<ul>\n<li>if you’re serious (long term) - prefer RNCLI over ExpoGo.</li>\n<li>Pages (web) &lt;–&gt; Screens (android)</li>\n<li>Core component - View (non-scroll div), ScrollView (normal div) Text, Image. Docs are good.</li>\n<li>ScrollView -</li>\n</ul>\n<h2 id=\"styling-in-rn\">Styling in RN <a class=\"heading-anchor-permalink\" href=\"#styling-in-rn\">#</a></h2>\n<ul>\n<li>Syntaxes:\n<ol>\n<li>inline</li>\n<li><code>StyleSheet</code></li>\n</ol>\n</li>\n<li>Where to keep styles - there are two philosophies:\n<ol>\n<li>Too much use - move to global file. e.g. colors, card-wrapper. ESM import to use.</li>\n<li>Local one time use - in same file.</li>\n</ol>\n</li>\n<li>Flex is there. Behaves a little diff from web, default direction is <code>column</code>.</li>\n<li>Grid - there’s no official grid.\n<ul>\n<li>Workaround <code>FlatList</code> has a <code>numsColumns</code></li>\n<li>Use flex with a little more deliberate styling.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"basic-components\">Basic Components <a class=\"heading-anchor-permalink\" href=\"#basic-components\">#</a></h2>\n<ol>\n<li><code>View</code> props (most used) - <code>role</code>, <code>style</code>, <code>onClick</code> (<code>onPress</code>) event\n<ul>\n<li>do <code>flex-1</code> for full space. Otherwise it’s invisible. Weird ritual, but fixes it? FIXME.</li>\n</ul>\n</li>\n<li><code>Text</code> - <code>numberOfLine</code> (auto ellipsize) auto, ellipsizeMode - head, tail, middle, clip. <code>selectionColor</code></li>\n<li><code>Image</code>\n<ul>\n<li>accpets <code>source</code> as PNG only. If local do <code>require('../path_to_local')</code>. pass HTTPS url directly. PNG makes some sense since max size of mobile devices isn’t very high.</li>\n<li>ImageWrapper Ashish made, that does <code>require</code> or no change by checking <code>url</code> links (<code>.startsWith()</code>)</li>\n<li>onLoad, and other image state handlers are present</li>\n<li><code>srcSet</code></li>\n<li><code>blurRadius</code> prop - will blur the image.</li>\n<li>For background image - don’t do <code>w-full</code> and position. But wrap your UI with <code>ImageBackground</code> RN component.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"button\">Button <a class=\"heading-anchor-permalink\" href=\"#button\">#</a></h2>\n<ul>\n<li>For building own button, people use <code>TouchableOpacity</code> over <code>Button</code></li>\n<li>why? <code>Button</code> (like web <code>&lt;button&gt;&lt;/button&gt;</code>) picks platform button vs <code>TouchableOPacity</code> (<code>&lt;div&gt;</code> with <code>&lt;button&gt;</code> props) (custom button).</li>\n<li>There are some components here:\n<ul>\n<li><code>TouchableOpacity</code> - shows ‘click’ animation styling on press. Non platform button (but has animation).</li>\n<li><code>TouchableHighlight</code> - minimum animation (only BG color changes)</li>\n<li><code>TouchableOpacityWithoutFeedback</code> - doesn’t show any animation on user press.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"switch\">Switch <a class=\"heading-anchor-permalink\" href=\"#switch\">#</a></h2>\n<ul>\n<li>Philosophy - Core <code>Switch</code> is good enough.</li>\n</ul>\n<h2 id=\"text-input\">Text-Input <a class=\"heading-anchor-permalink\" href=\"#text-input\">#</a></h2>\n<ul>\n<li>Usual text input box.</li>\n<li>Normal props are there.</li>\n<li>Some props are are platform specific (i.e. will be ignored in other platform).</li>\n<li><code>type</code>, <code>numeric</code>, <code>autoCapitalize</code>, prop affects the keyboard input. Of course, won’t work in Android keypad phone.</li>\n<li><code>visible-password</code> prop for password</li>\n<li>Confirm button icon - don’t know. FIXME</li>\n</ul>\n<h2 id=\"dropdown\">Dropdown <a class=\"heading-anchor-permalink\" href=\"#dropdown\">#</a></h2>\n<p>No native stable. Recommendation of packages to use.</p>\n<h2 id=\"listings\">Listings <a class=\"heading-anchor-permalink\" href=\"#listings\">#</a></h2>\n<ol>\n<li><code>ScrollView</code> - ok, but no virtualization. <code>.map</code> works. Not a listing component btw, just a scrollable view.\n<ul>\n<li>Supports both way (hori and verti) scroll ? FIXME</li>\n<li>UX perspective - try to use your scroll on one axis only (vertical for phones, e.g.)</li>\n</ul>\n</li>\n<li><code>FlatList</code> - ScrollView with virtualization. data\n<ul>\n<li>Meant for lists</li>\n<li><code>map</code> doesn’t work with this. Have to pass control over to it, using <code>data</code>, <code>renderItem</code>, <code>keyExtractor</code> props</li>\n<li><code>extraData</code> can be used to <code>re-render</code> (motivation, how this came to be?)</li>\n<li><code>snapToEnd</code> (scroll to end if in the middle, till a threshold)</li>\n</ul>\n</li>\n<li><code>SectionList</code> (example - contact list with A-Z)\n<ul>\n<li>data props -<code>[{sectionTitle, [{title}, {title}]}, {sectionTitle, [{title}, {title}]}]</code></li>\n<li>takes prop to vary header section UI and other things</li>\n<li>Is virtualized by default. non-virtual variant does not exist.</li>\n<li>sticky section header (when scrolled past) prop is there. But default value is different based on platform.</li>\n</ul>\n</li>\n<li><code>VirtualizedList</code>  - (<code>FlatList</code>'s base component). Not used on it’s own/</li>\n</ol>\n<p>note: prefer ScrollView for screen UI only, not listing.</p>\n<h2 id=\"utility-components\">Utility components <a class=\"heading-anchor-permalink\" href=\"#utility-components\">#</a></h2>\n<ol>\n<li><code>KeyboardAvoidingView</code> - when platform keyboard opens, move the view up (can configure). To use, just wrap the UI with this. Use the <code>behavior</code> prop (recommended).</li>\n<li><code>SaveAreaView</code> - prevents overflow to Android system UI.</li>\n<li><code>Alert</code> (system level Modal) - <code>text</code>, <code>onPress</code> and <code>style</code></li>\n<li><code>Modal</code> (custom level modal) - animationType, and other stuff. Provided out of the box. Android isn’t that pretty, ios is good.</li>\n<li><code>Pressable</code> - gesture detection (has more gesture that View.onPress or other usual things), like swap, zoom etc.\n<ul>\n<li>Is usually a wrapper to your UI</li>\n<li>But can show <code>ripple</code> effect, sound effect etc. Props are there.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"general-rn\">General RN <a class=\"heading-anchor-permalink\" href=\"#general-rn\">#</a></h1>\n<h2 id=\"platform-specific-code-(platform)\">Platform specific code (<code>Platform</code>) <a class=\"heading-anchor-permalink\" href=\"#platform-specific-code-(platform)\">#</a></h2>\n<p>In some cases - RN recommends platform specific code.</p>\n<pre><code class=\"language-jsx\">import {Platform} from 'react-native';\n\nexport default function MyComponent() {\n\treturn \n\t&lt;Text&gt;{Platform.os === 'ios' ? 'On Apple' : 'Not on Apple'}&lt;/Text&gt;\n}\n</code></pre>\n<h2 id=\"knowledge-of-rn\">Knowledge of RN <a class=\"heading-anchor-permalink\" href=\"#knowledge-of-rn\">#</a></h2>\n<ul>\n<li>Almost anything can be created by <code>View</code>, <code>TouchableOpacity</code></li>\n<li>Negative margin isn’t supported on RN, as of now (Aug 2023).</li>\n</ul>\n",
      "id": 162
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/0-Ashish-overview-RN/2-second-hour.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/0-Ashish-overview-RN/2-second-hour.html",
      "content": "## Navigation in React\nIt's done using - React Navigation (lib), a very popular lib (has become like de-facto).\n\nAn abstraction for 'simple' navigation. Since mobile apps doesn't have a construct of URLs.\n\nThe library introduces concepts like\n1. \"Screens\"\n2. \"name\" (analogue of URL/route used in ReactRouter). \"/\" is not something.\n3. \"Stack\" - it maintains a stack. analogue of History API (of web)\n4. Navigator (routes markup). Each element points to a screen component.\n\t- Supports individual (of course)\n\t- Supports groups too\n5. Programmatic navigation - hooks for it.\n\nSetup\n- Provider/wrapper - `Stack.Navigator`\n\nMore stuff\n1. Navigator can pass `initialParams` to the screen being rendered.\n2. Provides some default style for any screen.\n3. Screen can be provided with styles `screenOptions`\n4. Navigator markup supports two kind of children:\n    - Supports individual (of course)\n    - Supports groups too. Can be nested.\n5. Tab navigation - bottom tabs (e.g. Zomato bottom). `NavigationContainer`, `Tab.Navigator`, `Tab.Screen`\n\t- how to set up - directly use inside the Navigator (route markup), of course using a component prop.\n6. Drawer navigation - side bar (collapsible)\n\t- how to set up - directly use inside the Navigator (route markup), of course using a component prop.\n7. Other navs - there are other things.\n8. Combination of stuff - of course, can be done.",
      "html": "<h2 id=\"navigation-in-react\">Navigation in React <a class=\"heading-anchor-permalink\" href=\"#navigation-in-react\">#</a></h2>\n<p>It’s done using - React Navigation (lib), a very popular lib (has become like de-facto).</p>\n<p>An abstraction for ‘simple’ navigation. Since mobile apps doesn’t have a construct of URLs.</p>\n<p>The library introduces concepts like</p>\n<ol>\n<li>“Screens”</li>\n<li>“name” (analogue of URL/route used in ReactRouter). “/” is not something.</li>\n<li>“Stack” - it maintains a stack. analogue of History API (of web)</li>\n<li>Navigator (routes markup). Each element points to a screen component.\n<ul>\n<li>Supports individual (of course)</li>\n<li>Supports groups too</li>\n</ul>\n</li>\n<li>Programmatic navigation - hooks for it.</li>\n</ol>\n<p>Setup</p>\n<ul>\n<li>Provider/wrapper - <code>Stack.Navigator</code></li>\n</ul>\n<p>More stuff</p>\n<ol>\n<li>Navigator can pass <code>initialParams</code> to the screen being rendered.</li>\n<li>Provides some default style for any screen.</li>\n<li>Screen can be provided with styles <code>screenOptions</code></li>\n<li>Navigator markup supports two kind of children:\n<ul>\n<li>Supports individual (of course)</li>\n<li>Supports groups too. Can be nested.</li>\n</ul>\n</li>\n<li>Tab navigation - bottom tabs (e.g. Zomato bottom). <code>NavigationContainer</code>, <code>Tab.Navigator</code>, <code>Tab.Screen</code>\n<ul>\n<li>how to set up - directly use inside the Navigator (route markup), of course using a component prop.</li>\n</ul>\n</li>\n<li>Drawer navigation - side bar (collapsible)\n<ul>\n<li>how to set up - directly use inside the Navigator (route markup), of course using a component prop.</li>\n</ul>\n</li>\n<li>Other navs - there are other things.</li>\n<li>Combination of stuff - of course, can be done.</li>\n</ol>\n",
      "id": 163
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/0-Ashish-overview-RN/3-third-hour.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/0-Ashish-overview-RN/3-third-hour.html",
      "content": "better(as per Ashish) than max's course: https://codewithmosh.com/p/the-ultimate-react-native-course-part1",
      "html": "<p>better(as per Ashish) than max’s course: <a href=\"https://codewithmosh.com/p/the-ultimate-react-native-course-part1\">https://codewithmosh.com/p/the-ultimate-react-native-course-part1</a></p>\n",
      "id": 164
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/1-Prerequisites.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/1-Prerequisites.html",
      "content": "# 1. Prerequisites\nCreated Tue Nov 7, 2023 at 9:27 AM\n\nMust know basic\n- CSS - flex, positioning, misc properties\n- JS\n- React. We'll be using functional components and hooks here\n\nCourse assumes no existing knowledge about mobile dev",
      "html": "<h1 id=\"1.-prerequisites\">1. Prerequisites <a class=\"heading-anchor-permalink\" href=\"#1.-prerequisites\">#</a></h1>\n<p>Created Tue Nov 7, 2023 at 9:27 AM</p>\n<p>Must know basic</p>\n<ul>\n<li>CSS - flex, positioning, misc properties</li>\n<li>JS</li>\n<li>React. We’ll be using functional components and hooks here</li>\n</ul>\n<p>Course assumes no existing knowledge about mobile dev</p>\n",
      "id": 165
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/11-Logging.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/11-Logging.html",
      "content": "# 11. Logging\nCreated Tue Nov 7, 2023 at 9:02 AM\n\n- Logging is simple - console.log works\n- Logging slows down the app\n- Make sure to remove logs in prod, to prevent log caused slowdown",
      "html": "<h1 id=\"11.-logging\">11. Logging <a class=\"heading-anchor-permalink\" href=\"#11.-logging\">#</a></h1>\n<p>Created Tue Nov 7, 2023 at 9:02 AM</p>\n<ul>\n<li>Logging is simple - console.log works</li>\n<li>Logging slows down the app</li>\n<li>Make sure to remove logs in prod, to prevent log caused slowdown</li>\n</ul>\n",
      "id": 166
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/12-Debugging.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/12-Debugging.html",
      "content": "# 12. Debugging\nCreated Tue Nov 7, 2023 at 9:03 AM\n\n## Debug daemon - start and end\n- Starting the debug daemon - press Ctrl + M on the emulator, or shake the device (physical). Select 'Debug' from the options.\n- The default interface of daemon is the browser.\n- Closing - open developer options on device (emulator or physical), and select 'Stop Debugging'.\n\n## Browser\nRN has a debugger that can run in the browser\n\n1. Start the debug daemon, by press Ctrl + M on the emulator, or shake the device (physical). Select 'Debug' from the options\n2. Metro (`npm start`) terminal will now say that \"logs will be displayed elsewhere\". And a webpage will open.\n3. The webpage opens usually at \"localhost:8081\". Open the JS console of this page. Logs can now be seen here.\n\n- So console is one thing\n- The \"Sources\" tab also works in the browser, so `debugger;` statements and watch on exceptions can be used.\n- The network tab doesn't work, unfortunately\n\nThe webpage also shows the daemon connection status.\n\nTo end the browser debug session, click 'Stop debugging' from the webpage (localhost:8081).\n\n\n## Vscode\nInstall 'react-native-tools' vscode extension. This gives us Vscode debug configs for RN that we can use directly.\n\nTo use the debugger:\n1. Start the debug daemon, by press Ctrl + M on the emulator, or shake the device (physical). Select 'Debug' from the options\n2. Add some breakpoints in the code.\n3. Open 'Debug' from vscode Command Palette, select React Native > Attach to packager.\n4. If there's no debug config, a file will be created automatically with the config we selected. Just save it.\n5. In the Debug sidepanel, click the Play button. The app should now start and get stuck on the breakpoint (this might require some interaction with the app - via emulator/physical device).\n6. The Output panel of vscode should now be open. Logs, variables can be tracked, and code can be run.\n\nTo end the vscode debug session, click the detach (red plugs) icon in the debug toolbar (beside re-run icon). Control will now be back at the Metro terminal.\n\n## One at a time - browser or editor\n- The RN debug daemon can only work with one interface at once - either use the browser, or vscode, but not both. Fix: just detach the unnecessary interface via the browser or vscode detach.",
      "html": "<h1 id=\"12.-debugging\">12. Debugging <a class=\"heading-anchor-permalink\" href=\"#12.-debugging\">#</a></h1>\n<p>Created Tue Nov 7, 2023 at 9:03 AM</p>\n<h2 id=\"debug-daemon---start-and-end\">Debug daemon - start and end <a class=\"heading-anchor-permalink\" href=\"#debug-daemon---start-and-end\">#</a></h2>\n<ul>\n<li>Starting the debug daemon - press Ctrl + M on the emulator, or shake the device (physical). Select ‘Debug’ from the options.</li>\n<li>The default interface of daemon is the browser.</li>\n<li>Closing - open developer options on device (emulator or physical), and select ‘Stop Debugging’.</li>\n</ul>\n<h2 id=\"browser\">Browser <a class=\"heading-anchor-permalink\" href=\"#browser\">#</a></h2>\n<p>RN has a debugger that can run in the browser</p>\n<ol>\n<li>Start the debug daemon, by press Ctrl + M on the emulator, or shake the device (physical). Select ‘Debug’ from the options</li>\n<li>Metro (<code>npm start</code>) terminal will now say that “logs will be displayed elsewhere”. And a webpage will open.</li>\n<li>The webpage opens usually at “localhost:8081”. Open the JS console of this page. Logs can now be seen here.</li>\n</ol>\n<ul>\n<li>So console is one thing</li>\n<li>The “Sources” tab also works in the browser, so <code>debugger;</code> statements and watch on exceptions can be used.</li>\n<li>The network tab doesn’t work, unfortunately</li>\n</ul>\n<p>The webpage also shows the daemon connection status.</p>\n<p>To end the browser debug session, click ‘Stop debugging’ from the webpage (localhost:8081).</p>\n<h2 id=\"vscode\">Vscode <a class=\"heading-anchor-permalink\" href=\"#vscode\">#</a></h2>\n<p>Install ‘react-native-tools’ vscode extension. This gives us Vscode debug configs for RN that we can use directly.</p>\n<p>To use the debugger:</p>\n<ol>\n<li>Start the debug daemon, by press Ctrl + M on the emulator, or shake the device (physical). Select ‘Debug’ from the options</li>\n<li>Add some breakpoints in the code.</li>\n<li>Open ‘Debug’ from vscode Command Palette, select React Native &gt; Attach to packager.</li>\n<li>If there’s no debug config, a file will be created automatically with the config we selected. Just save it.</li>\n<li>In the Debug sidepanel, click the Play button. The app should now start and get stuck on the breakpoint (this might require some interaction with the app - via emulator/physical device).</li>\n<li>The Output panel of vscode should now be open. Logs, variables can be tracked, and code can be run.</li>\n</ol>\n<p>To end the vscode debug session, click the detach (red plugs) icon in the debug toolbar (beside re-run icon). Control will now be back at the Metro terminal.</p>\n<h2 id=\"one-at-a-time---browser-or-editor\">One at a time - browser or editor <a class=\"heading-anchor-permalink\" href=\"#one-at-a-time---browser-or-editor\">#</a></h2>\n<ul>\n<li>The RN debug daemon can only work with one interface at once - either use the browser, or vscode, but not both. Fix: just detach the unnecessary interface via the browser or vscode detach.</li>\n</ul>\n",
      "id": 167
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/13-Expo-publish.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/13-Expo-publish.html",
      "content": "# 13. Expo publish\nCreated Tue Nov 7, 2023 at 9:08 AM\n\n- It's common knowledge that publishing an app on marketplaces (Google Play or AppStore) is cumbersome, and impractical for development purposes.\n- Saving and sharing APKs is also cumbersome.\n  \nExpo makes this problem of sharing and trying out apps very easy.\nUsing Expo Publish, you can save apps and generate shareable link to try the app.\nThis works on real devices too.\n\nOf course, you'll need an Expo account, which is free.",
      "html": "<h1 id=\"13.-expo-publish\">13. Expo publish <a class=\"heading-anchor-permalink\" href=\"#13.-expo-publish\">#</a></h1>\n<p>Created Tue Nov 7, 2023 at 9:08 AM</p>\n<ul>\n<li>It’s common knowledge that publishing an app on marketplaces (Google Play or AppStore) is cumbersome, and impractical for development purposes.</li>\n<li>Saving and sharing APKs is also cumbersome.</li>\n</ul>\n<p>Expo makes this problem of sharing and trying out apps very easy.\nUsing Expo Publish, you can save apps and generate shareable link to try the app.\nThis works on real devices too.</p>\n<p>Of course, you’ll need an Expo account, which is free.</p>\n",
      "id": 168
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/2-Popular-apps-built-with-RN.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/2-Popular-apps-built-with-RN.html",
      "content": "# 1. Popular apps built with RN\nCreated Tue Nov 7, 2023 at 9:26 AM\n\nReact Native can be used to build serious mobile apps. \nOf course, if you want to build a first-person-shooter game, a real native app (Kotlin/Swift) would be preferable.\n\nSome popular high traffic apps built with RN\n- Facebook\n- Instagram\n- Pinterest\n- Skype\n- Uber Eats\n\n\n![](../../../../../assets/2-Popular-apps-built-with-RN-image-1-8e61879b.png)",
      "html": "<h1 id=\"1.-popular-apps-built-with-rn\">1. Popular apps built with RN <a class=\"heading-anchor-permalink\" href=\"#1.-popular-apps-built-with-rn\">#</a></h1>\n<p>Created Tue Nov 7, 2023 at 9:26 AM</p>\n<p>React Native can be used to build serious mobile apps.\nOf course, if you want to build a first-person-shooter game, a real native app (Kotlin/Swift) would be preferable.</p>\n<p>Some popular high traffic apps built with RN</p>\n<ul>\n<li>Facebook</li>\n<li>Instagram</li>\n<li>Pinterest</li>\n<li>Skype</li>\n<li>Uber Eats</li>\n</ul>\n<p><img src=\"../../../../../assets/2-Popular-apps-built-with-RN-image-1-8e61879b.png\" alt=\"\"></p>\n",
      "id": 169
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/3-What-is-React-Native.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/3-What-is-React-Native.html",
      "content": "# 3. What is React Native\nCreated Tue Nov 7, 2023 at 9:33 AM\n\n- React Native is a UI library for building native apps for various platforms with a single codebase.\n- Supported target platforms:\n\t1. Android\n\t2. iOS\n\t3. Web\n\t4. Windows\n- RN apps are native apps, not webviews.\n\tReact Native apps are native apps, meaning the app actually uses the environment's components and APIs. Example - for a container view, UIView would be used on iOS, Android.View on Android, and `div` on web.\n\n\tIn short, an RN apps is not a webview, like Apache Cordova.",
      "html": "<h1 id=\"3.-what-is-react-native\">3. What is React Native <a class=\"heading-anchor-permalink\" href=\"#3.-what-is-react-native\">#</a></h1>\n<p>Created Tue Nov 7, 2023 at 9:33 AM</p>\n<ul>\n<li>\n<p>React Native is a UI library for building native apps for various platforms with a single codebase.</p>\n</li>\n<li>\n<p>Supported target platforms:</p>\n<ol>\n<li>Android</li>\n<li>iOS</li>\n<li>Web</li>\n<li>Windows</li>\n</ol>\n</li>\n<li>\n<p>RN apps are native apps, not webviews.\nReact Native apps are native apps, meaning the app actually uses the environment’s components and APIs. Example - for a container view, UIView would be used on iOS, Android.View on Android, and <code>div</code> on web.</p>\n<p>In short, an RN apps is not a webview, like Apache Cordova.</p>\n</li>\n</ul>\n",
      "id": 170
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/4-Expo.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/4-Expo.html",
      "content": "# 4. Expo\nCreated Tue Nov 7, 2023 at 9:37 AM\n\n- Expo is a framework built on top of React Native. It provides a extra components and other utilities generally missing from React Native (since it's a library)\n- Expo is beginner friendly, and most problems of RNCLI (due to setup mistakes or otherwise) are taken care of, in Expo.\n\n- The alternative to expo is React Native CLI, which is the default way to start and build apps in React Native\n- One disadvantage of Expo is that you cannot use native code (Java/Kotlin/Swift) in the code. Only Javascript is allowed. RNCLI on the other hand, allows native code additions if you need it.\n- Project structure of Expo is simpler, since it doesn't have support (or folders) for native code.\n\nWe'll use Expo here. The project structure is simpler in Expo apps.\n\n![](../../../../../assets/4-Expo-image-1-8e61879b.png)",
      "html": "<h1 id=\"4.-expo\">4. Expo <a class=\"heading-anchor-permalink\" href=\"#4.-expo\">#</a></h1>\n<p>Created Tue Nov 7, 2023 at 9:37 AM</p>\n<ul>\n<li>\n<p>Expo is a framework built on top of React Native. It provides a extra components and other utilities generally missing from React Native (since it’s a library)</p>\n</li>\n<li>\n<p>Expo is beginner friendly, and most problems of RNCLI (due to setup mistakes or otherwise) are taken care of, in Expo.</p>\n</li>\n<li>\n<p>The alternative to expo is React Native CLI, which is the default way to start and build apps in React Native</p>\n</li>\n<li>\n<p>One disadvantage of Expo is that you cannot use native code (Java/Kotlin/Swift) in the code. Only Javascript is allowed. RNCLI on the other hand, allows native code additions if you need it.</p>\n</li>\n<li>\n<p>Project structure of Expo is simpler, since it doesn’t have support (or folders) for native code.</p>\n</li>\n</ul>\n<p>We’ll use Expo here. The project structure is simpler in Expo apps.</p>\n<p><img src=\"../../../../../assets/4-Expo-image-1-8e61879b.png\" alt=\"\"></p>\n",
      "id": 171
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/6-Development-setup.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/6-Development-setup.html",
      "content": "# 6. Development setup\nCreated Tue Nov 7, 2023 at 9:45 AM\n\n- Make sure `node` version >=18 (Tested with 18), and use `npm` only\n- Visit React Native official [set-up page](https://reactnative.dev/docs/environment-setup) and do the steps.\n- ~~Install [Expo](https://docs.expo.dev/get-started/installation/) on computer: `npm install -g expo`~~ `npx create-expo-app AppName` is enough\n- Install Expo on real phone - it's available on [app stores](https://play.google.com/store/apps/details?id=host.exp.exponent&pcampaignid=web_share)\n\n- vscode is fine as an editor. Helpful vscode plugins\n\t- React Native tools by [Microsoft](https://marketplace.visualstudio.com/items?itemName=msjsdiag.vscode-react-native)\n\t- React snippets by [EQuimper](https://marketplace.visualstudio.com/items?itemName=EQuimper.react-native-react-redux-snippets-for-es6-es7-version-standard)\n\n## General info\n- API levels vs Android version chart\n- Expo (especially Expo Go - i.e. device/emulator app) needs Internet by default. But can work [offline](https://stackoverflow.com/questions/50423562/running-expo-in-development-offline) by passing `--offline`",
      "html": "<h1 id=\"6.-development-setup\">6. Development setup <a class=\"heading-anchor-permalink\" href=\"#6.-development-setup\">#</a></h1>\n<p>Created Tue Nov 7, 2023 at 9:45 AM</p>\n<ul>\n<li>\n<p>Make sure <code>node</code> version &gt;=18 (Tested with 18), and use <code>npm</code> only</p>\n</li>\n<li>\n<p>Visit React Native official <a href=\"https://reactnative.dev/docs/environment-setup\">set-up page</a> and do the steps.</p>\n</li>\n<li>\n<p><s>Install <a href=\"https://docs.expo.dev/get-started/installation/\">Expo</a> on computer: <code>npm install -g expo</code></s> <code>npx create-expo-app AppName</code> is enough</p>\n</li>\n<li>\n<p>Install Expo on real phone - it’s available on <a href=\"https://play.google.com/store/apps/details?id=host.exp.exponent&amp;pcampaignid=web_share\">app stores</a></p>\n</li>\n<li>\n<p>vscode is fine as an editor. Helpful vscode plugins</p>\n<ul>\n<li>React Native tools by <a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.vscode-react-native\">Microsoft</a></li>\n<li>React snippets by <a href=\"https://marketplace.visualstudio.com/items?itemName=EQuimper.react-native-react-redux-snippets-for-es6-es7-version-standard\">EQuimper</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"general-info\">General info <a class=\"heading-anchor-permalink\" href=\"#general-info\">#</a></h2>\n<ul>\n<li>API levels vs Android version chart</li>\n<li>Expo (especially Expo Go - i.e. device/emulator app) needs Internet by default. But can work <a href=\"https://stackoverflow.com/questions/50423562/running-expo-in-development-offline\">offline</a> by passing <code>--offline</code></li>\n</ul>\n",
      "id": 172
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/7-First-app.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/7-First-app.html",
      "content": "# 7. First app\nCreated Tue Nov 7, 2023 at 9:54 AM\n\n- First (optional) - set up wireless debugging on physical device (Android)\n\t```sh\n\tadb pair 192.168.0.10x\n\t# enter code\n\tadb connect 192.168.0.10x\n\t```\n\t Needs to be done only once.\n\n- Creating the app (code)\n\t```sh\n\tnpx create DoneWithIt\n\tcd DoneWithIt\n\tnpm run android # automatically starts the first simulator in AVD (in standalone mode)\n\t```",
      "html": "<h1 id=\"7.-first-app\">7. First app <a class=\"heading-anchor-permalink\" href=\"#7.-first-app\">#</a></h1>\n<p>Created Tue Nov 7, 2023 at 9:54 AM</p>\n<ul>\n<li>\n<p>First (optional) - set up wireless debugging on physical device (Android)</p>\n<pre><code class=\"language-sh\">adb pair 192.168.0.10x\n# enter code\nadb connect 192.168.0.10x\n</code></pre>\n<p>Needs to be done only once.</p>\n</li>\n<li>\n<p>Creating the app (code)</p>\n<pre><code class=\"language-sh\">npx create DoneWithIt\ncd DoneWithIt\nnpm run android # automatically starts the first simulator in AVD (in standalone mode)\n</code></pre>\n</li>\n</ul>\n",
      "id": 173
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/8-Emulators.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/8-Emulators.html",
      "content": "# 8. Emulators\nCreated Tue Nov 14, 2023 at 2:01 PM\n\n## General\nTo test apps quickly, we use emulators provided by Android Studio/Xcode. They're not a replacement for \"testing\", but are essential for quick development.\n\nWhen RN runs, it provides some dev options inside the device (emulator/physical). This is activated by Pressing Ctrl + M (in emulator) or by shaking the device (for physical device). Options here include:\n1. 'Reload'\n2. 'Inspector' - Elements tree/styling inspector\n3. 'Debug' - Managing debug daemon\n\n## Android\nFor Android. Open Android Studio (no need to open a project), go to AVD and create a device.\n\n\nClose Android Studio/Xcode.\n\nTo start the app, need to run two terminals simultaneously.\n1. `npm start` - start Metro\n2. `npm run android` or `npm run ios` - install/update app on emulator by running \n\nIf any physical device are connected via adb, they'll also update without interfering with the emulator.\n\n## iOS\nFor iOS. Open the project in Xcode, go to platforms and create a device with Rosetta (on M1 laptops).\n\nClose Xcode.\n\nTo start the app, need to run two terminals simultaneously.\n1. `npm start` - start Metro\n2. `npm run ios` - install/update app on emulator by running\n\nIf any physical device are connected via adb, they'll also update without interfering with the emulator.\n\n\n## Windows\nTBD",
      "html": "<h1 id=\"8.-emulators\">8. Emulators <a class=\"heading-anchor-permalink\" href=\"#8.-emulators\">#</a></h1>\n<p>Created Tue Nov 14, 2023 at 2:01 PM</p>\n<h2 id=\"general\">General <a class=\"heading-anchor-permalink\" href=\"#general\">#</a></h2>\n<p>To test apps quickly, we use emulators provided by Android Studio/Xcode. They’re not a replacement for “testing”, but are essential for quick development.</p>\n<p>When RN runs, it provides some dev options inside the device (emulator/physical). This is activated by Pressing Ctrl + M (in emulator) or by shaking the device (for physical device). Options here include:</p>\n<ol>\n<li>‘Reload’</li>\n<li>‘Inspector’ - Elements tree/styling inspector</li>\n<li>‘Debug’ - Managing debug daemon</li>\n</ol>\n<h2 id=\"android\">Android <a class=\"heading-anchor-permalink\" href=\"#android\">#</a></h2>\n<p>For Android. Open Android Studio (no need to open a project), go to AVD and create a device.</p>\n<p>Close Android Studio/Xcode.</p>\n<p>To start the app, need to run two terminals simultaneously.</p>\n<ol>\n<li><code>npm start</code> - start Metro</li>\n<li><code>npm run android</code> or <code>npm run ios</code> - install/update app on emulator by running</li>\n</ol>\n<p>If any physical device are connected via adb, they’ll also update without interfering with the emulator.</p>\n<h2 id=\"ios\">iOS <a class=\"heading-anchor-permalink\" href=\"#ios\">#</a></h2>\n<p>For iOS. Open the project in Xcode, go to platforms and create a device with Rosetta (on M1 laptops).</p>\n<p>Close Xcode.</p>\n<p>To start the app, need to run two terminals simultaneously.</p>\n<ol>\n<li><code>npm start</code> - start Metro</li>\n<li><code>npm run ios</code> - install/update app on emulator by running</li>\n</ol>\n<p>If any physical device are connected via adb, they’ll also update without interfering with the emulator.</p>\n<h2 id=\"windows\">Windows <a class=\"heading-anchor-permalink\" href=\"#windows\">#</a></h2>\n<p>TBD</p>\n",
      "id": 174
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/1-Getting-started/index.html",
      "content": "# 1. Getting started\nCreated Sat Dec 30, 2023 at 1:12 PM\n\n## Topics\n1. Introduction\n2. Prerequisites\n3. How to Use This Course\n4. What is React Native\n5. Expo\n6. Setting Up the Development Environment\n7. Your First App\n8. Running on an iOS Simulator\n9. Running on an Android Emulator\n10. Running on a Device\n11. Logging\n12. Debugging in Chrome\n13. Debugging in VSCode\n14. Publishing\n15. Fixing the Auto Import Issue\n16. Source Code\n17. Follow Me Around\n18. Learning Paths\n",
      "html": "<h1 id=\"1.-getting-started\">1. Getting started <a class=\"heading-anchor-permalink\" href=\"#1.-getting-started\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:12 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Prerequisites</li>\n<li>How to Use This Course</li>\n<li>What is React Native</li>\n<li>Expo</li>\n<li>Setting Up the Development Environment</li>\n<li>Your First App</li>\n<li>Running on an iOS Simulator</li>\n<li>Running on an Android Emulator</li>\n<li>Running on a Device</li>\n<li>Logging</li>\n<li>Debugging in Chrome</li>\n<li>Debugging in VSCode</li>\n<li>Publishing</li>\n<li>Fixing the Auto Import Issue</li>\n<li>Source Code</li>\n<li>Follow Me Around</li>\n<li>Learning Paths</li>\n</ol>\n",
      "id": 175
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/1-Core-Components-and-APIs.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/1-Core-Components-and-APIs.html",
      "content": "# 1. Core Components and APIs\nCreated Tue Nov 14, 2023 at 11:26 PM\n\n## React remains the same\nReact code - JavaScript, JSX, props, state, hooks all behave as is on all platforms\n\n## RN constructs\nRN has 2 fundamental constructs:\n1. Core components - `Text`, `View` etc\n2. Core APIs - Keyboard, Camera, `Platform`\n\nJust like the web, these two help with making UIs and interacting with the device.\n\n## Context matters\nBut an important thing to keep in mind in RN is that it's targets multiple platforms, so a construct may be:\n1. \"Cross-platform\" - works the same in all platforms. Example - `View`, `Text`\n2. \"Platform-specific\" - works and behave differently in different platforms.",
      "html": "<h1 id=\"1.-core-components-and-apis\">1. Core Components and APIs <a class=\"heading-anchor-permalink\" href=\"#1.-core-components-and-apis\">#</a></h1>\n<p>Created Tue Nov 14, 2023 at 11:26 PM</p>\n<h2 id=\"react-remains-the-same\">React remains the same <a class=\"heading-anchor-permalink\" href=\"#react-remains-the-same\">#</a></h2>\n<p>React code - JavaScript, JSX, props, state, hooks all behave as is on all platforms</p>\n<h2 id=\"rn-constructs\">RN constructs <a class=\"heading-anchor-permalink\" href=\"#rn-constructs\">#</a></h2>\n<p>RN has 2 fundamental constructs:</p>\n<ol>\n<li>Core components - <code>Text</code>, <code>View</code> etc</li>\n<li>Core APIs - Keyboard, Camera, <code>Platform</code></li>\n</ol>\n<p>Just like the web, these two help with making UIs and interacting with the device.</p>\n<h2 id=\"context-matters\">Context matters <a class=\"heading-anchor-permalink\" href=\"#context-matters\">#</a></h2>\n<p>But an important thing to keep in mind in RN is that it’s targets multiple platforms, so a construct may be:</p>\n<ol>\n<li>“Cross-platform” - works the same in all platforms. Example - <code>View</code>, <code>Text</code></li>\n<li>“Platform-specific” - works and behave differently in different platforms.</li>\n</ol>\n",
      "id": 176
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/2-View.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/2-View.html",
      "content": "# 2. View\nCreated Tue Nov 14, 2023 at 11:25 PM\n\n## `View`\n- Most fundamental core component\n- Used for grouping nodes.\n- UI styling like padding, flex, border etc are applicable, of course.\n- Has `onPress` event handler.\n- It cannot render text (directly). Also, font styles on this don't work.\n\n```jsx\nimport { View } from 'react-native';\n\nfunction MyComponent() {\n  return <View></View>;\n}\n```\n\n- Optionally, has `nativeId` prop that can be used to [locate](https://stackoverflow.com/questions/52483374/can-i-use-the-prop-nativeid-to-locate-a-view-in-native-code) element in native module code (Kotlin).\n- Has many non-manual or special event handlers.\n\n## `SafeAreaView` (ios only)\n\n[Ready to use component](https://github.com/exemplar-codes/DoneWithIt/commit/29779a0cc1fa906b1c7f6eff4f43a6900d296354)\n\n- This is also a core component. Almost exactly like `View`.\n- Its used to prevent overflow of app UI into the system UI (top bar, navigation bar).\n- It only works for iOS, and is used to avoid the top notch for newer iPhones. For Android a hack needs to be done.\n\n- Use when: if the app UI for a screen is flowing onto system UI. Then wrap the component with `SafeAreaView`. That's it.\n\n- Should be used as a top level wrapper? By default, no.\n\t- Yes - if the app is intended to never flow into system UI. Wrapper is fine.\n\t- No - if app asymmetric behavior, i.e. has some screens that are intended to flow into system UI, then per screen wrapping should be done.\n\n- For Android, `SafeAreaView` behaves exactly like `View`. the workaround for overflow protection is `StatusBar.currentHeight`:\n\t```jsx\n\timport { StatusBar } from 'react-native';\n\t\n\treturn <View styles={{ marginTop: StatusBar.currentHeight }}></View>\n\t```\n\t This doesn't affect iOS though. So if the target is both Android and iOS, both `SafeAreaView` and `StatusBar.currentHeight` (conditional based `Platform`) are used.\n\n## `ScrollView`\nBy default `View` takes full width, but just content height. i.e. \"align stretch\" and \"justify start\".\n\nEven if content is too large, the `View` does not get a scroll bar, i.e. the extra content is just inaccessible.\n\n`ScrollView` is a core component that solves this problem.\n\nProps:\n- `contentContainerStyle` - for style. usual `styles` doesn't work.\n- Scroll direction - `horizontal`, `vertical` boolean props. Only one direction at a time. Default `vertical`\n\nMajor quirk and workaround:\n- By default, it takes the whole height (and whole width, like View). To fix the height issue, especially in horizontal mode, just wrap the `ScrollView` with a `View` and set `ScrollView`'s height to be \"100%\". Nice hack. [See code](https://github.com/exemplar-codes/DoneWithIt/commit/eedf8ca18bc2e352505c18a9c725284bc8b599da).\n\nEvents\n- `onScroll`: `e.nativeEvent.contentOffset` is {x, y} = scrolled distance. (initially 0, max=overflow_size). `.contentSize`, `.layoutMeasurement` is also available, which give the large vs fixed size, respectively.\n- `onContentSizeChange`: `e` = new size (a number)\n\nMethods (via ref):\n1. `ref.current.scrollTo({ x, y, animated: true })`\n2. `ref.current.scrollToEnd({animated})` - helpful since don't have to calculate ScrollView size manually. For start `scrollTo({ x: 0 })` would do.\n\nFIXME: for scroll in both directions, a normal (vertical) `ScrollView`  with each child being a `horizontal` a ScrollView works.\n\nScrollView is quite powerful, and has snapping capabilities too, see [docs](https://reactnative.dev/docs/scrollview#removeclippedsubviews)- the most essential being `snapToOffsets`",
      "html": "<h1 id=\"2.-view\">2. View <a class=\"heading-anchor-permalink\" href=\"#2.-view\">#</a></h1>\n<p>Created Tue Nov 14, 2023 at 11:25 PM</p>\n<h2 id=\"view\"><code>View</code> <a class=\"heading-anchor-permalink\" href=\"#view\">#</a></h2>\n<ul>\n<li>Most fundamental core component</li>\n<li>Used for grouping nodes.</li>\n<li>UI styling like padding, flex, border etc are applicable, of course.</li>\n<li>Has <code>onPress</code> event handler.</li>\n<li>It cannot render text (directly). Also, font styles on this don’t work.</li>\n</ul>\n<pre><code class=\"language-jsx\">import { View } from 'react-native';\n\nfunction MyComponent() {\n  return &lt;View&gt;&lt;/View&gt;;\n}\n</code></pre>\n<ul>\n<li>Optionally, has <code>nativeId</code> prop that can be used to <a href=\"https://stackoverflow.com/questions/52483374/can-i-use-the-prop-nativeid-to-locate-a-view-in-native-code\">locate</a> element in native module code (Kotlin).</li>\n<li>Has many non-manual or special event handlers.</li>\n</ul>\n<h2 id=\"safeareaview-(ios-only)\"><code>SafeAreaView</code> (ios only) <a class=\"heading-anchor-permalink\" href=\"#safeareaview-(ios-only)\">#</a></h2>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/29779a0cc1fa906b1c7f6eff4f43a6900d296354\">Ready to use component</a></p>\n<ul>\n<li>\n<p>This is also a core component. Almost exactly like <code>View</code>.</p>\n</li>\n<li>\n<p>Its used to prevent overflow of app UI into the system UI (top bar, navigation bar).</p>\n</li>\n<li>\n<p>It only works for iOS, and is used to avoid the top notch for newer iPhones. For Android a hack needs to be done.</p>\n</li>\n<li>\n<p>Use when: if the app UI for a screen is flowing onto system UI. Then wrap the component with <code>SafeAreaView</code>. That’s it.</p>\n</li>\n<li>\n<p>Should be used as a top level wrapper? By default, no.</p>\n<ul>\n<li>Yes - if the app is intended to never flow into system UI. Wrapper is fine.</li>\n<li>No - if app asymmetric behavior, i.e. has some screens that are intended to flow into system UI, then per screen wrapping should be done.</li>\n</ul>\n</li>\n<li>\n<p>For Android, <code>SafeAreaView</code> behaves exactly like <code>View</code>. the workaround for overflow protection is <code>StatusBar.currentHeight</code>:</p>\n<pre><code class=\"language-jsx\">import { StatusBar } from 'react-native';\n\nreturn &lt;View styles={{ marginTop: StatusBar.currentHeight }}&gt;&lt;/View&gt;\n</code></pre>\n<p>This doesn’t affect iOS though. So if the target is both Android and iOS, both <code>SafeAreaView</code> and <code>StatusBar.currentHeight</code> (conditional based <code>Platform</code>) are used.</p>\n</li>\n</ul>\n<h2 id=\"scrollview\"><code>ScrollView</code> <a class=\"heading-anchor-permalink\" href=\"#scrollview\">#</a></h2>\n<p>By default <code>View</code> takes full width, but just content height. i.e. “align stretch” and “justify start”.</p>\n<p>Even if content is too large, the <code>View</code> does not get a scroll bar, i.e. the extra content is just inaccessible.</p>\n<p><code>ScrollView</code> is a core component that solves this problem.</p>\n<p>Props:</p>\n<ul>\n<li><code>contentContainerStyle</code> - for style. usual <code>styles</code> doesn’t work.</li>\n<li>Scroll direction - <code>horizontal</code>, <code>vertical</code> boolean props. Only one direction at a time. Default <code>vertical</code></li>\n</ul>\n<p>Major quirk and workaround:</p>\n<ul>\n<li>By default, it takes the whole height (and whole width, like View). To fix the height issue, especially in horizontal mode, just wrap the <code>ScrollView</code> with a <code>View</code> and set <code>ScrollView</code>'s height to be “100%”. Nice hack. <a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/eedf8ca18bc2e352505c18a9c725284bc8b599da\">See code</a>.</li>\n</ul>\n<p>Events</p>\n<ul>\n<li><code>onScroll</code>: <code>e.nativeEvent.contentOffset</code> is {x, y} = scrolled distance. (initially 0, max=overflow_size). <code>.contentSize</code>, <code>.layoutMeasurement</code> is also available, which give the large vs fixed size, respectively.</li>\n<li><code>onContentSizeChange</code>: <code>e</code> = new size (a number)</li>\n</ul>\n<p>Methods (via ref):</p>\n<ol>\n<li><code>ref.current.scrollTo({ x, y, animated: true })</code></li>\n<li><code>ref.current.scrollToEnd({animated})</code> - helpful since don’t have to calculate ScrollView size manually. For start <code>scrollTo({ x: 0 })</code> would do.</li>\n</ol>\n<p>FIXME: for scroll in both directions, a normal (vertical) <code>ScrollView</code>  with each child being a <code>horizontal</code> a ScrollView works.</p>\n<p>ScrollView is quite powerful, and has snapping capabilities too, see <a href=\"https://reactnative.dev/docs/scrollview#removeclippedsubviews\">docs</a>- the most essential being <code>snapToOffsets</code></p>\n",
      "id": 177
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/3-Text.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/3-Text.html",
      "content": "# 3. Text\nCreated Tue Nov 14, 2023 at 11:25 PM\n\n- Used for rendering text\n- It's the second most important component of RN\n- Text is passed as content (child) freely.\n- Can have children nodes - Text or otherwise.\n- `onPress` event is available.\n\n&nbsp;\n\n- Accepts style props like `color`, `fontSize` etc.\n- `numberOfLines={1}` prop can be used for ellipsis. \n\t- Default value is 0 (no ellipsis)\n\t- Pass a width if ellipsis container is smaller than screen\n\t- [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode) is a helper prop for dot direction.\n\n```jsx\nimport { Text } from 'react-native';\n\nfunction MyComponent() {\n  return <Text>Hello, world</Text>;\n}\n```",
      "html": "<h1 id=\"3.-text\">3. Text <a class=\"heading-anchor-permalink\" href=\"#3.-text\">#</a></h1>\n<p>Created Tue Nov 14, 2023 at 11:25 PM</p>\n<ul>\n<li>Used for rendering text</li>\n<li>It’s the second most important component of RN</li>\n<li>Text is passed as content (child) freely.</li>\n<li>Can have children nodes - Text or otherwise.</li>\n<li><code>onPress</code> event is available.</li>\n</ul>\n<p> </p>\n<ul>\n<li>Accepts style props like <code>color</code>, <code>fontSize</code> etc.</li>\n<li><code>numberOfLines={1}</code> prop can be used for ellipsis.\n<ul>\n<li>Default value is 0 (no ellipsis)</li>\n<li>Pass a width if ellipsis container is smaller than screen</li>\n<li><a href=\"https://reactnative.dev/docs/text#ellipsizemode\"><code>ellipsizeMode</code></a> is a helper prop for dot direction.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-jsx\">import { Text } from 'react-native';\n\nfunction MyComponent() {\n  return &lt;Text&gt;Hello, world&lt;/Text&gt;;\n}\n</code></pre>\n",
      "id": 178
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/4-Image.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/4-Image.html",
      "content": "# 4. Image\nCreated Tue Nov 14, 2023 at 11:44 PM\n\n[Custom component for image - uncontrolled and controlled](https://github.com/exemplar-codes/DoneWithIt/commit/077c55daa028a7e15dae95d381e54533b293a414)\n## `<Image />`\n- Core component for rendering images\n- Can render both local and network images\n- `require()` is needed for network images\n\n```jsx\nimport { Image } from 'react-native';\n\nfunction MyComponent() {\n\n  // local image\n  <Image source={require(\"../flag.png\")} />;\n\n  // remote image - need to specify dimensions\n  <Image source={{ uri: 'https//site.com/flag', width: 200, height: 100 }} />\n}\n```\n\n- `source={{require(\"../flag.png\")}` for local image\n- `source={{ uri: \"http://\", width, height }` for external image. Or base64 encoded string equivalent.\n\n- `style` - used for specifying height, width of local images.\n- `blurRadius={2}` for blur effect. Very useful.\n- `alt` - description of image used for fallback\n- Does not have `onPress` event\n\n&nbsp;\n- [`resizeMode`](https://reactnative.dev/docs/image#resizemode) - used if fetched image is different from screen size.\n- `loadingIndicatorSource`, similar to `source`. Is used to show a image until the image loads\n- `onError = (event) => {event.error}` is available.\n\n## `<ImageBackground />`\nA core component for rendering an image in the background with `children` rendering in the foreground.\n\nUsage\n```jsx\nimport { ImageBackground } from \"react-native\";\n\n<ImageBackground \n  styles={{ flex: 1}}\n  source={require(\"../assets/Welcome.jpg\")}\n>\n\n  <View>Sign in</View>\n  <View>Sign up</View>\n  <View>Privacy policy</View>\n</ImageBackground>\n```",
      "html": "<h1 id=\"4.-image\">4. Image <a class=\"heading-anchor-permalink\" href=\"#4.-image\">#</a></h1>\n<p>Created Tue Nov 14, 2023 at 11:44 PM</p>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/077c55daa028a7e15dae95d381e54533b293a414\">Custom component for image - uncontrolled and controlled</a></p>\n<h2 id=\"%3Cimage-%2F%3E\"><code>&lt;Image /&gt;</code> <a class=\"heading-anchor-permalink\" href=\"#%3Cimage-%2F%3E\">#</a></h2>\n<ul>\n<li>Core component for rendering images</li>\n<li>Can render both local and network images</li>\n<li><code>require()</code> is needed for network images</li>\n</ul>\n<pre><code class=\"language-jsx\">import { Image } from 'react-native';\n\nfunction MyComponent() {\n\n  // local image\n  &lt;Image source={require(&quot;../flag.png&quot;)} /&gt;;\n\n  // remote image - need to specify dimensions\n  &lt;Image source={{ uri: 'https//site.com/flag', width: 200, height: 100 }} /&gt;\n}\n</code></pre>\n<ul>\n<li>\n<p><code>source={{require(&quot;../flag.png&quot;)}</code> for local image</p>\n</li>\n<li>\n<p><code>source={{ uri: &quot;http://&quot;, width, height }</code> for external image. Or base64 encoded string equivalent.</p>\n</li>\n<li>\n<p><code>style</code> - used for specifying height, width of local images.</p>\n</li>\n<li>\n<p><code>blurRadius={2}</code> for blur effect. Very useful.</p>\n</li>\n<li>\n<p><code>alt</code> - description of image used for fallback</p>\n</li>\n<li>\n<p>Does not have <code>onPress</code> event</p>\n</li>\n</ul>\n<p> </p>\n<ul>\n<li><a href=\"https://reactnative.dev/docs/image#resizemode\"><code>resizeMode</code></a> - used if fetched image is different from screen size.</li>\n<li><code>loadingIndicatorSource</code>, similar to <code>source</code>. Is used to show a image until the image loads</li>\n<li><code>onError = (event) =&gt; {event.error}</code> is available.</li>\n</ul>\n<h2 id=\"%3Cimagebackground-%2F%3E\"><code>&lt;ImageBackground /&gt;</code> <a class=\"heading-anchor-permalink\" href=\"#%3Cimagebackground-%2F%3E\">#</a></h2>\n<p>A core component for rendering an image in the background with <code>children</code> rendering in the foreground.</p>\n<p>Usage</p>\n<pre><code class=\"language-jsx\">import { ImageBackground } from &quot;react-native&quot;;\n\n&lt;ImageBackground \n  styles={{ flex: 1}}\n  source={require(&quot;../assets/Welcome.jpg&quot;)}\n&gt;\n\n  &lt;View&gt;Sign in&lt;/View&gt;\n  &lt;View&gt;Sign up&lt;/View&gt;\n  &lt;View&gt;Privacy policy&lt;/View&gt;\n&lt;/ImageBackground&gt;\n</code></pre>\n",
      "id": 179
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/5-Touchables.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/5-Touchables.html",
      "content": "# 5. Touchables\nCreated Wed Nov 15, 2023 at 12:08 AM\n\n- These are some wrapper core components meant to be clicked/tapped by the user\n- There are 3:\n\t1. `TouchableOpacity` - on tap, does whitening (opacity of content is reduced)\n\t2. `TouchableHighlight` - on tap, does darkening (background is darkened).\n\t3. `TouchableOpacityWithoutFeedback` -  on tap, no interaction Ui. Try to [avoid](https://reactnative.dev/docs/touchablewithoutfeedback) this unless necessary.\n\t4. `TouchableNativeFeedback` - on tap, animates acc to stock Android UI. Only available for Android.\n\t5. `Pressable` - [fine grained](https://reactnative.dev/docs/pressable) press events like `onPressIn`, `onPressout` etc. No interaction UI.\n- All have these events:\n\t- `onPress`\n\t- `onLongPress`\n- Btw, `View` has no `onPress` event",
      "html": "<h1 id=\"5.-touchables\">5. Touchables <a class=\"heading-anchor-permalink\" href=\"#5.-touchables\">#</a></h1>\n<p>Created Wed Nov 15, 2023 at 12:08 AM</p>\n<ul>\n<li>These are some wrapper core components meant to be clicked/tapped by the user</li>\n<li>There are 3:\n<ol>\n<li><code>TouchableOpacity</code> - on tap, does whitening (opacity of content is reduced)</li>\n<li><code>TouchableHighlight</code> - on tap, does darkening (background is darkened).</li>\n<li><code>TouchableOpacityWithoutFeedback</code> -  on tap, no interaction Ui. Try to <a href=\"https://reactnative.dev/docs/touchablewithoutfeedback\">avoid</a> this unless necessary.</li>\n<li><code>TouchableNativeFeedback</code> - on tap, animates acc to stock Android UI. Only available for Android.</li>\n<li><code>Pressable</code> - <a href=\"https://reactnative.dev/docs/pressable\">fine grained</a> press events like <code>onPressIn</code>, <code>onPressout</code> etc. No interaction UI.</li>\n</ol>\n</li>\n<li>All have these events:\n<ul>\n<li><code>onPress</code></li>\n<li><code>onLongPress</code></li>\n</ul>\n</li>\n<li>Btw, <code>View</code> has no <code>onPress</code> event</li>\n</ul>\n",
      "id": 180
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/6-Button.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/6-Button.html",
      "content": "# 6. Button\nCreated Wed Nov 15, 2023 at 12:32 AM\n\n- Core component for a button\n- This is a cross platform component\n- It renders differently, according to the usual Button UI of the platform. This is a good thing.\n\n```jsx\nimport { Button } from 'react-native';\n\n<Button title=\"Click me\" onPress={(e) => {}}/>\n```\n\n- `title=\"Click me\"`\n- `onPress`\n- `color=\"blue\"`",
      "html": "<h1 id=\"6.-button\">6. Button <a class=\"heading-anchor-permalink\" href=\"#6.-button\">#</a></h1>\n<p>Created Wed Nov 15, 2023 at 12:32 AM</p>\n<ul>\n<li>Core component for a button</li>\n<li>This is a cross platform component</li>\n<li>It renders differently, according to the usual Button UI of the platform. This is a good thing.</li>\n</ul>\n<pre><code class=\"language-jsx\">import { Button } from 'react-native';\n\n&lt;Button title=&quot;Click me&quot; onPress={(e) =&gt; {}}/&gt;\n</code></pre>\n<ul>\n<li><code>title=&quot;Click me&quot;</code></li>\n<li><code>onPress</code></li>\n<li><code>color=&quot;blue&quot;</code></li>\n</ul>\n",
      "id": 181
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/7-Alert.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/7-Alert.html",
      "content": "# 7. Alert\nCreated Wed Nov 15, 2023 at 12:37 AM\n\n- Used to display an alert popup (modal).\n- Cross platform component that renders platform's the native equivalent.\n\nThere are 3 variations.\n- Direct usage (just like web). No import needed. Shows text in a modal.\n\t```jsx\n\t<Button title=\"Delete\" onPress={() => alert(\"Deleting...\")} />\n\t```\n- API usage - buttons. Need to import `Alert`. Shows ctas with title and description.\n\t```jsx\n\timport { Alert } from 'react-native';\n\t\n\tconst onPressHandler = () => \n\t\tAlert.alert(\"my title\", \"description\", [\n\t\t\t{ text: \"Yes\", onPress: () => console.log('Yes tapped') }, // primary\n\t\t\t{ text: \"No\" , onPress: () => console.log('No  tapped') }]); // negative\n\t\t\t// more may be added, primary will render on the left, all else right.\n\t\t\t\n\t\n\t<Button title=\"Delete\" onPress={onPressHandler} />\n\t```\n- API usage - text input. Need to import `Alert`. Run callback if 'Ok' is pressed.\n\t```jsx\n\timport { Alert } from 'react-native';\n\t\n\tconst onPressHandler = () => \n\t\tAlert.prompt(\"my title\", \"description\",\n\t\t\t(enteredText) => console.log('Ok clicked', enteredText)\n\t\t);\n\n\t<Button title=\"Delete\" onPress={onPressHandler} />\n\t```\n\t```jsx\n\t// text with multiple CTAs.\n\timport { Alert } from 'react-native';\n\t\n\tconst onTextMultiCTA = () => \n\t\tAlert.prompt(\"my title\", \"description\",\n\t\t\t[\n\t\t\t { text: \"Do X\", onPress: (text) => console.log('X tapped', { text }) },\n\t\t\t { text: \"Do Y\", onPress: (text) => console.log('Y tapped', { text }) },\n\t\t\t { text: \"Do Z\", onPress: (text) => console.log('Z tapped', { text }) },\n\t\t\t]\n\t\t);\n\t```\n\n- `Alert.prompt` (text input) works only for iOS\n- All of these are APIs, so they can be called even without a UI, like in a `useEffect`.",
      "html": "<h1 id=\"7.-alert\">7. Alert <a class=\"heading-anchor-permalink\" href=\"#7.-alert\">#</a></h1>\n<p>Created Wed Nov 15, 2023 at 12:37 AM</p>\n<ul>\n<li>Used to display an alert popup (modal).</li>\n<li>Cross platform component that renders platform’s the native equivalent.</li>\n</ul>\n<p>There are 3 variations.</p>\n<ul>\n<li>\n<p>Direct usage (just like web). No import needed. Shows text in a modal.</p>\n<pre><code class=\"language-jsx\">&lt;Button title=&quot;Delete&quot; onPress={() =&gt; alert(&quot;Deleting...&quot;)} /&gt;\n</code></pre>\n</li>\n<li>\n<p>API usage - buttons. Need to import <code>Alert</code>. Shows ctas with title and description.</p>\n<pre><code class=\"language-jsx\">import { Alert } from 'react-native';\n\nconst onPressHandler = () =&gt; \n\tAlert.alert(&quot;my title&quot;, &quot;description&quot;, [\n\t\t{ text: &quot;Yes&quot;, onPress: () =&gt; console.log('Yes tapped') }, // primary\n\t\t{ text: &quot;No&quot; , onPress: () =&gt; console.log('No  tapped') }]); // negative\n\t\t// more may be added, primary will render on the left, all else right.\n\t\t\n\n&lt;Button title=&quot;Delete&quot; onPress={onPressHandler} /&gt;\n</code></pre>\n</li>\n<li>\n<p>API usage - text input. Need to import <code>Alert</code>. Run callback if ‘Ok’ is pressed.</p>\n<pre><code class=\"language-jsx\">import { Alert } from 'react-native';\n\nconst onPressHandler = () =&gt; \n\tAlert.prompt(&quot;my title&quot;, &quot;description&quot;,\n\t\t(enteredText) =&gt; console.log('Ok clicked', enteredText)\n\t);\n\n&lt;Button title=&quot;Delete&quot; onPress={onPressHandler} /&gt;\n</code></pre>\n<pre><code class=\"language-jsx\">// text with multiple CTAs.\nimport { Alert } from 'react-native';\n\nconst onTextMultiCTA = () =&gt; \n\tAlert.prompt(&quot;my title&quot;, &quot;description&quot;,\n\t\t[\n\t\t { text: &quot;Do X&quot;, onPress: (text) =&gt; console.log('X tapped', { text }) },\n\t\t { text: &quot;Do Y&quot;, onPress: (text) =&gt; console.log('Y tapped', { text }) },\n\t\t { text: &quot;Do Z&quot;, onPress: (text) =&gt; console.log('Z tapped', { text }) },\n\t\t]\n\t);\n</code></pre>\n</li>\n<li>\n<p><code>Alert.prompt</code> (text input) works only for iOS</p>\n</li>\n<li>\n<p>All of these are APIs, so they can be called even without a UI, like in a <code>useEffect</code>.</p>\n</li>\n</ul>\n",
      "id": 182
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/8-StyleSheet.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/8-StyleSheet.html",
      "content": "# 8. StyleSheet\nCreated Wed Nov 15, 2023 at 1:08 AM\n\n- RN core construct for reusing styles.\n- This is an alternative way to style in RN, in addition to the inline `style={{}}` prop.\n- The effect is the same as inline styles.\n`Stylesheet.create()` takes multiple style 'keys' that may be used.\n\n```jsx\nimport { StyleSheet } from 'react-native';\n\nconst myStyles = StyleSheet.create({ \n\tmySection: { marginTop: 24, padding: 16 },\n\tmyHeading: { color: \"blue\", fontSize: 48 }\n});\n\nfunction MyComponent() {\n\treturn <View>\n\t\t<View style={myStyles.mySection}>\n\t\t  <Text style={myStyles.myHeading}>Heading 1</Text>\n\t\t</View>\n\t\t\n\t\t<View style={myStyles.mySection}>\n\t\t  <Text style={myStyles.myHeading}>Heading 2</Text>\n\t\t</View>\n\t</View>;\n}\n```\n\n- Can be exported and reused in other files\n- Generally used outside the component function, since styles remain static, and conditional ones are created beforehand. Saves some re-render compute.\n\n\n## Why use StyleSheet\n1. Reuse aka DRY\n2. For style validation checks: 2nd level keys inside StyleSheet config are checked by RN, for typos.\n3. Leaves scope for internal RN optimization, if it's implemented in the library later.",
      "html": "<h1 id=\"8.-stylesheet\">8. StyleSheet <a class=\"heading-anchor-permalink\" href=\"#8.-stylesheet\">#</a></h1>\n<p>Created Wed Nov 15, 2023 at 1:08 AM</p>\n<ul>\n<li>RN core construct for reusing styles.</li>\n<li>This is an alternative way to style in RN, in addition to the inline <code>style={{}}</code> prop.</li>\n<li>The effect is the same as inline styles.\n<code>Stylesheet.create()</code> takes multiple style ‘keys’ that may be used.</li>\n</ul>\n<pre><code class=\"language-jsx\">import { StyleSheet } from 'react-native';\n\nconst myStyles = StyleSheet.create({ \n\tmySection: { marginTop: 24, padding: 16 },\n\tmyHeading: { color: &quot;blue&quot;, fontSize: 48 }\n});\n\nfunction MyComponent() {\n\treturn &lt;View&gt;\n\t\t&lt;View style={myStyles.mySection}&gt;\n\t\t  &lt;Text style={myStyles.myHeading}&gt;Heading 1&lt;/Text&gt;\n\t\t&lt;/View&gt;\n\t\t\n\t\t&lt;View style={myStyles.mySection}&gt;\n\t\t  &lt;Text style={myStyles.myHeading}&gt;Heading 2&lt;/Text&gt;\n\t\t&lt;/View&gt;\n\t&lt;/View&gt;;\n}\n</code></pre>\n<ul>\n<li>Can be exported and reused in other files</li>\n<li>Generally used outside the component function, since styles remain static, and conditional ones are created beforehand. Saves some re-render compute.</li>\n</ul>\n<h2 id=\"why-use-stylesheet\">Why use StyleSheet <a class=\"heading-anchor-permalink\" href=\"#why-use-stylesheet\">#</a></h2>\n<ol>\n<li>Reuse aka DRY</li>\n<li>For style validation checks: 2nd level keys inside StyleSheet config are checked by RN, for typos.</li>\n<li>Leaves scope for internal RN optimization, if it’s implemented in the library later.</li>\n</ol>\n",
      "id": 183
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/9-Platform.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/9-Platform.html",
      "content": "# 9. Platform\nCreated Wed Nov 15, 2023 at 1:19 AM\n\n- Used for getting platform value at runtime\n- Used when: suppose a font isn't available on Android, then a ternary with a fallback font would help.\n\n```jsx\nimport { Platform } from 'react-native';\n\nconst isAndroid = Platform.ios === 'android';\n```\n\n- Possible values are `'ios'`, `'android'`, `'windows'`, `'web'`\n\n---\n\n## Fixing app using `StatusBar` API\nConsider the following code:\n```jsx\nimport { View, Text } from \"react-native\";\n\nexport default function App() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        backgroundColor: \"#f00\",\n        alignItems: \"center\",\n      }}\n    >\n      <Text>Open up3 App.js to start working on your app!</Text>\n    </View>\n  );\n}\n```\n\nThe default behavior of RN apps is that they try to take up the whole screen space, including System UI. This is understandable since an app can work in fullscreen mode.\n\nThe code renders like this (Android on left, iOS on right).\nThere's no top bar safety/margin (both overflow to top bar)\n![](../../../../../assets/9-Platform-image-1-7b845a63.png)\n\nAfter using SafeAreaView (Android no change, iOS notch avoided):\n![](../../../../../assets/9-Platform-image-2-7b845a63.png)\n\nAfter using only padding (no SafeAreaView) `StatusBar.currentHeight`\nAndroid fixed, iOS broken:\n![](../../../../../assets/9-Platform-image-3-7b845a63.png)\n\nWith SafeAreaView and conditional Android margin of `StatusBar.currentHeight`. Both fixed:\n![](../../../../../assets/9-Platform-image-4-7b845a63.png)\n\nFinal code:\n```jsx\nimport { StatusBar, Text, Platform, SafeAreaView } from \"react-native\";\n\nexport default function App() {\n  return (\n    <SafeAreaView\n      style={{\n        flex: 1,\n        marginTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\n        backgroundColor: \"#f00\",\n        alignItems: \"center\",\n      }}\n    >\n      <Text>Open up3 App.js to start working on your app!</Text>\n    </SafeAreaView>\n  );\n}\n```",
      "html": "<h1 id=\"9.-platform\">9. Platform <a class=\"heading-anchor-permalink\" href=\"#9.-platform\">#</a></h1>\n<p>Created Wed Nov 15, 2023 at 1:19 AM</p>\n<ul>\n<li>Used for getting platform value at runtime</li>\n<li>Used when: suppose a font isn’t available on Android, then a ternary with a fallback font would help.</li>\n</ul>\n<pre><code class=\"language-jsx\">import { Platform } from 'react-native';\n\nconst isAndroid = Platform.ios === 'android';\n</code></pre>\n<ul>\n<li>Possible values are <code>'ios'</code>, <code>'android'</code>, <code>'windows'</code>, <code>'web'</code></li>\n</ul>\n<hr>\n<h2 id=\"fixing-app-using-statusbar-api\">Fixing app using <code>StatusBar</code> API <a class=\"heading-anchor-permalink\" href=\"#fixing-app-using-statusbar-api\">#</a></h2>\n<p>Consider the following code:</p>\n<pre><code class=\"language-jsx\">import { View, Text } from &quot;react-native&quot;;\n\nexport default function App() {\n  return (\n    &lt;View\n      style={{\n        flex: 1,\n        backgroundColor: &quot;#f00&quot;,\n        alignItems: &quot;center&quot;,\n      }}\n    &gt;\n      &lt;Text&gt;Open up3 App.js to start working on your app!&lt;/Text&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>\n<p>The default behavior of RN apps is that they try to take up the whole screen space, including System UI. This is understandable since an app can work in fullscreen mode.</p>\n<p>The code renders like this (Android on left, iOS on right).\nThere’s no top bar safety/margin (both overflow to top bar)\n<img src=\"../../../../../assets/9-Platform-image-1-7b845a63.png\" alt=\"\"></p>\n<p>After using SafeAreaView (Android no change, iOS notch avoided):\n<img src=\"../../../../../assets/9-Platform-image-2-7b845a63.png\" alt=\"\"></p>\n<p>After using only padding (no SafeAreaView) <code>StatusBar.currentHeight</code>\nAndroid fixed, iOS broken:\n<img src=\"../../../../../assets/9-Platform-image-3-7b845a63.png\" alt=\"\"></p>\n<p>With SafeAreaView and conditional Android margin of <code>StatusBar.currentHeight</code>. Both fixed:\n<img src=\"../../../../../assets/9-Platform-image-4-7b845a63.png\" alt=\"\"></p>\n<p>Final code:</p>\n<pre><code class=\"language-jsx\">import { StatusBar, Text, Platform, SafeAreaView } from &quot;react-native&quot;;\n\nexport default function App() {\n  return (\n    &lt;SafeAreaView\n      style={{\n        flex: 1,\n        marginTop: Platform.OS === &quot;android&quot; ? StatusBar.currentHeight : 0,\n        backgroundColor: &quot;#f00&quot;,\n        alignItems: &quot;center&quot;,\n      }}\n    &gt;\n      &lt;Text&gt;Open up3 App.js to start working on your app!&lt;/Text&gt;\n    &lt;/SafeAreaView&gt;\n  );\n}\n</code></pre>\n",
      "id": 184
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/2-Fundamental-concepts/index.html",
      "content": "# 2. Fundamental concepts\nCreated Sat Dec 30, 2023 at 1:11 PM\n\n## Topics\n1. Core Components and APIs\n2. View\n3. Text\n4. Image\n5. Touchables\n6. Button\n7. Alert\n8. StyleSheet\n9. Platform-specific Code\n",
      "html": "<h1 id=\"2.-fundamental-concepts\">2. Fundamental concepts <a class=\"heading-anchor-permalink\" href=\"#2.-fundamental-concepts\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:11 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Core Components and APIs</li>\n<li>View</li>\n<li>Text</li>\n<li>Image</li>\n<li>Touchables</li>\n<li>Button</li>\n<li>Alert</li>\n<li>StyleSheet</li>\n<li>Platform-specific Code</li>\n</ol>\n",
      "id": 185
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/10-Exercises.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/10-Exercises.html",
      "content": "# 10. Exercises\nCreated Thu Nov 16, 2023 at 2:15 AM\n\n## Tip - create a `app`/`src` folder\n- After initializing the project code with Expo.\n\t- Make an `src` or `app` folder and move important code there. This will be helpful if we eject from expo, create a new project with copied code, or move to a different tooling for RN. \n\t- Update `app.json` paths for moved files.\n\t- Move `/assets` into `src`\n- General structure of `src`\n\t- `assets`\n\t- `screens` (aka 'pages' in web)\n\t- `components`\n\n## Exercise 1 - WelcomeScreen\n![](../../../../../assets/10-Exercises-image-1-5fd022eb.png)\nLessons\n- Work with images, esp in the background\n- `width`/`height` for fixing dimensions as opposed to `basis`/`grow`/`shrink`\n\n[Code](https://github.com/exemplar-codes/DoneWithIt/commit/3219f8765c06e53c7a6964487a74b236205373a5)\n\n## Exercise 2 - ViewImageScreen\nLessons:\n- Prevent app UI overflow into system\n- Fixing image sizes (esp big to small) - `<Image resizeMethod=\"scale\" />`\n\n![](../../../../../assets/10-Exercises-image-2-5fd022eb.png)\n\n[Code](https://github.com/exemplar-codes/DoneWithIt/commit/08bfa59cc029fcd1fb2d7f5acc0de739e0bd654d)\n\n## Tip - enums, colors\nColors and enums, especially business logic ones should be stored in `/app/constants/`\n```jsx\n// product.js\nexport const ORDER_TYPES = {\n  PREPAID: 'prepaid',\n  COD: 'cash-on-delivery',\n}\n\nexport const PRODUCT_MODULES = {\n  EXPLORE: 'explore',\n  ORDER: 'order',\n  PAYMENT: 'payment',\n  HELP: 'help',\n  TRACK_ORDER: 'track-order'\n}\n```\n\n```jsx\nexport const COLORS = {\n  DARK: '#000000',\n  LIGHT: '#fffff',\n  PRIMARY: '#ff0000',\n  SECONDARY: '#0000ff',\n}\n```\n\nThis helps us:\n1. Avoid typo bugs, and provides auto-completes\n2. Some light documentation for variations of product\n3. Searching code faster, when a module or variation breaks",
      "html": "<h1 id=\"10.-exercises\">10. Exercises <a class=\"heading-anchor-permalink\" href=\"#10.-exercises\">#</a></h1>\n<p>Created Thu Nov 16, 2023 at 2:15 AM</p>\n<h2 id=\"tip---create-a-app%2Fsrc-folder\">Tip - create a <code>app</code>/<code>src</code> folder <a class=\"heading-anchor-permalink\" href=\"#tip---create-a-app%2Fsrc-folder\">#</a></h2>\n<ul>\n<li>After initializing the project code with Expo.\n<ul>\n<li>Make an <code>src</code> or <code>app</code> folder and move important code there. This will be helpful if we eject from expo, create a new project with copied code, or move to a different tooling for RN.</li>\n<li>Update <code>app.json</code> paths for moved files.</li>\n<li>Move <code>/assets</code> into <code>src</code></li>\n</ul>\n</li>\n<li>General structure of <code>src</code>\n<ul>\n<li><code>assets</code></li>\n<li><code>screens</code> (aka ‘pages’ in web)</li>\n<li><code>components</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"exercise-1---welcomescreen\">Exercise 1 - WelcomeScreen <a class=\"heading-anchor-permalink\" href=\"#exercise-1---welcomescreen\">#</a></h2>\n<p><img src=\"../../../../../assets/10-Exercises-image-1-5fd022eb.png\" alt=\"\">\nLessons</p>\n<ul>\n<li>Work with images, esp in the background</li>\n<li><code>width</code>/<code>height</code> for fixing dimensions as opposed to <code>basis</code>/<code>grow</code>/<code>shrink</code></li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/3219f8765c06e53c7a6964487a74b236205373a5\">Code</a></p>\n<h2 id=\"exercise-2---viewimagescreen\">Exercise 2 - ViewImageScreen <a class=\"heading-anchor-permalink\" href=\"#exercise-2---viewimagescreen\">#</a></h2>\n<p>Lessons:</p>\n<ul>\n<li>Prevent app UI overflow into system</li>\n<li>Fixing image sizes (esp big to small) - <code>&lt;Image resizeMethod=&quot;scale&quot; /&gt;</code></li>\n</ul>\n<p><img src=\"../../../../../assets/10-Exercises-image-2-5fd022eb.png\" alt=\"\"></p>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/08bfa59cc029fcd1fb2d7f5acc0de739e0bd654d\">Code</a></p>\n<h2 id=\"tip---enums%2C-colors\">Tip - enums, colors <a class=\"heading-anchor-permalink\" href=\"#tip---enums%2C-colors\">#</a></h2>\n<p>Colors and enums, especially business logic ones should be stored in <code>/app/constants/</code></p>\n<pre><code class=\"language-jsx\">// product.js\nexport const ORDER_TYPES = {\n  PREPAID: 'prepaid',\n  COD: 'cash-on-delivery',\n}\n\nexport const PRODUCT_MODULES = {\n  EXPLORE: 'explore',\n  ORDER: 'order',\n  PAYMENT: 'payment',\n  HELP: 'help',\n  TRACK_ORDER: 'track-order'\n}\n</code></pre>\n<pre><code class=\"language-jsx\">export const COLORS = {\n  DARK: '#000000',\n  LIGHT: '#fffff',\n  PRIMARY: '#ff0000',\n  SECONDARY: '#0000ff',\n}\n</code></pre>\n<p>This helps us:</p>\n<ol>\n<li>Avoid typo bugs, and provides auto-completes</li>\n<li>Some light documentation for variations of product</li>\n<li>Searching code faster, when a module or variation breaks</li>\n</ol>\n",
      "id": 186
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/2-Dimensions.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/2-Dimensions.html",
      "content": "# 2. Dimensions\nCreated Wed Nov 15, 2023 at 3:08 AM\n\n## Size units in RN\n1.  dp (density independent pixels) - `15`, number.\n2. Pixel - `'15px'`, string.\n3. Percentage (of parent) - `'50%'`, string.\n\n## Prefer dp for fixes sizes\n(FIXME: why?)\n![](../../../../../assets/2-Dimensions-image-1-5fd022eb.jpeg)\n## `Dimensions` API\n- Used to get dimensions of the screen.\n-  There are two args - `'screen'`(whole device) or `'window'` (space used by app).\n- on iOS, both screen/window return are the same value.\n- Con: the values don't update when device orientation is changed. They do change if the component re-renders.\n```jsx\nimport { Dimensions } from \"react-native\";\n\nexport default function App() {\n  console.log(Dimensions.get(\"window\"));\n  // { \"fontScale\": 1, \"height\": 780, \"scale\": 2.75, \"width\": 392.7  }\n\n  console.log(Dimensions.get(\"screen\"));\n  // { \"fontScale\": 1, \"height\": 808, \"scale\": 2.75, \"width\": 392.7 }\n\n  return null;\n}\n```",
      "html": "<h1 id=\"2.-dimensions\">2. Dimensions <a class=\"heading-anchor-permalink\" href=\"#2.-dimensions\">#</a></h1>\n<p>Created Wed Nov 15, 2023 at 3:08 AM</p>\n<h2 id=\"size-units-in-rn\">Size units in RN <a class=\"heading-anchor-permalink\" href=\"#size-units-in-rn\">#</a></h2>\n<ol>\n<li>dp (density independent pixels) - <code>15</code>, number.</li>\n<li>Pixel - <code>'15px'</code>, string.</li>\n<li>Percentage (of parent) - <code>'50%'</code>, string.</li>\n</ol>\n<h2 id=\"prefer-dp-for-fixes-sizes\">Prefer dp for fixes sizes <a class=\"heading-anchor-permalink\" href=\"#prefer-dp-for-fixes-sizes\">#</a></h2>\n<p>(FIXME: why?)\n<img src=\"../../../../../assets/2-Dimensions-image-1-5fd022eb.jpeg\" alt=\"\"></p>\n<h2 id=\"dimensions-api\"><code>Dimensions</code> API <a class=\"heading-anchor-permalink\" href=\"#dimensions-api\">#</a></h2>\n<ul>\n<li>Used to get dimensions of the screen.</li>\n<li>There are two args - <code>'screen'</code>(whole device) or <code>'window'</code> (space used by app).</li>\n<li>on iOS, both screen/window return are the same value.</li>\n<li>Con: the values don’t update when device orientation is changed. They do change if the component re-renders.</li>\n</ul>\n<pre><code class=\"language-jsx\">import { Dimensions } from &quot;react-native&quot;;\n\nexport default function App() {\n  console.log(Dimensions.get(&quot;window&quot;));\n  // { &quot;fontScale&quot;: 1, &quot;height&quot;: 780, &quot;scale&quot;: 2.75, &quot;width&quot;: 392.7  }\n\n  console.log(Dimensions.get(&quot;screen&quot;));\n  // { &quot;fontScale&quot;: 1, &quot;height&quot;: 808, &quot;scale&quot;: 2.75, &quot;width&quot;: 392.7 }\n\n  return null;\n}\n</code></pre>\n",
      "id": 187
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/3-Detecting-Orientation-Changes.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/3-Detecting-Orientation-Changes.html",
      "content": "# 3. Detecting Orientation Changes\nCreated Wed Nov 15, 2023 at 3:30 AM\n\nTo detect realtime orientation of the device, a hook [`useDeviceOrientation`](https://github.com/react-native-community/hooks#usedeviceorientation) is available. \n\nSteps to use:\n1. `npm install @react-native-community/hooks`\n2. Code\n\t```js\n\timport { useDeviceOrientation } from '@/react-native-community/hooks';\n\n\tfunction MyComponent() {\n\t  const orientationValue = useDeviceOrientation(); // 'portrait' | 'landscape'\n\n\t  return null;\n\t}\n\t```",
      "html": "<h1 id=\"3.-detecting-orientation-changes\">3. Detecting Orientation Changes <a class=\"heading-anchor-permalink\" href=\"#3.-detecting-orientation-changes\">#</a></h1>\n<p>Created Wed Nov 15, 2023 at 3:30 AM</p>\n<p>To detect realtime orientation of the device, a hook <a href=\"https://github.com/react-native-community/hooks#usedeviceorientation\"><code>useDeviceOrientation</code></a> is available.</p>\n<p>Steps to use:</p>\n<ol>\n<li><code>npm install @react-native-community/hooks</code></li>\n<li>Code<pre><code class=\"language-js\">import { useDeviceOrientation } from '@/react-native-community/hooks';\n\nfunction MyComponent() {\n  const orientationValue = useDeviceOrientation(); // 'portrait' | 'landscape'\n\n  return null;\n}\n</code></pre>\n</li>\n</ol>\n",
      "id": 188
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/4-Flexbox.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/4-Flexbox.html",
      "content": "# 4. Flexbox\nCreated Wed Nov 15, 2023 at 3:49 AM\n\n- Layout via Flexbox is available in RN\n- Flexbox styling is exactly like web (browser), except that the default `flexDirection` is \"column\"\n- All components have `display: 'flex'` already applied by default.\n- Flex style props\n\t- `flex`\n\t- `gap`\n\t- `flexDirection`\n\t- `flexBasic`\n\t- `flexGrow`\n\t- `flexShrink`\n- Since default `flexDirection` is column, a component's height by default is small (same as context). But app screens usually have to atleast be equal to device screen size - the fix is to use `flex: 1` (take all space).",
      "html": "<h1 id=\"4.-flexbox\">4. Flexbox <a class=\"heading-anchor-permalink\" href=\"#4.-flexbox\">#</a></h1>\n<p>Created Wed Nov 15, 2023 at 3:49 AM</p>\n<ul>\n<li>Layout via Flexbox is available in RN</li>\n<li>Flexbox styling is exactly like web (browser), except that the default <code>flexDirection</code> is “column”</li>\n<li>All components have <code>display: 'flex'</code> already applied by default.</li>\n<li>Flex style props\n<ul>\n<li><code>flex</code></li>\n<li><code>gap</code></li>\n<li><code>flexDirection</code></li>\n<li><code>flexBasic</code></li>\n<li><code>flexGrow</code></li>\n<li><code>flexShrink</code></li>\n</ul>\n</li>\n<li>Since default <code>flexDirection</code> is column, a component’s height by default is small (same as context). But app screens usually have to atleast be equal to device screen size - the fix is to use <code>flex: 1</code> (take all space).</li>\n</ul>\n",
      "id": 189
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/9-Absolute-and-Relative-Positioning.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/9-Absolute-and-Relative-Positioning.html",
      "content": "# 9. Absolute and Relative Positioning\nCreated Wed Nov 15, 2023 at 3:52 AM\n\n- Positioning components like web, via `position`  style key, is available in RN\n- Only two values are available - `'relative'` and `'absolute'`.\n- Default `position` of all components is `'relative'`\n- `top`, `right`, `bottom`, `left` style keys are available and work as usual (web)",
      "html": "<h1 id=\"9.-absolute-and-relative-positioning\">9. Absolute and Relative Positioning <a class=\"heading-anchor-permalink\" href=\"#9.-absolute-and-relative-positioning\">#</a></h1>\n<p>Created Wed Nov 15, 2023 at 3:52 AM</p>\n<ul>\n<li>Positioning components like web, via <code>position</code>  style key, is available in RN</li>\n<li>Only two values are available - <code>'relative'</code> and <code>'absolute'</code>.</li>\n<li>Default <code>position</code> of all components is <code>'relative'</code></li>\n<li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> style keys are available and work as usual (web)</li>\n</ul>\n",
      "id": 190
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/3_Layout/index.html",
      "content": "# 3. Layout\nCreated Sat Dec 30, 2023 at 1:09 PM\n\n## Topics\n1. Introduction\n2. Dimensions\n3. Detecting Orientation Changes\n4. Flexbox\n5. Flexbox- Direction\n6. Flexbox- justifyContent, alignItems and alignSelf\n7. Flexbox- flexWrap and alignContent\n8. Flexbox- flexBasis, flexGrow and flexShrink\n9. Absolute and Relative Positioning\n10. Exercises\n11. Building the Welcome Screen\n12. Building the View Image Screen\n13. Refactoring\n14. A Quick Note\n",
      "html": "<h1 id=\"3.-layout\">3. Layout <a class=\"heading-anchor-permalink\" href=\"#3.-layout\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:09 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Dimensions</li>\n<li>Detecting Orientation Changes</li>\n<li>Flexbox</li>\n<li>Flexbox- Direction</li>\n<li>Flexbox- justifyContent, alignItems and alignSelf</li>\n<li>Flexbox- flexWrap and alignContent</li>\n<li>Flexbox- flexBasis, flexGrow and flexShrink</li>\n<li>Absolute and Relative Positioning</li>\n<li>Exercises</li>\n<li>Building the Welcome Screen</li>\n<li>Building the View Image Screen</li>\n<li>Refactoring</li>\n<li>A Quick Note</li>\n</ol>\n",
      "id": 191
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/1-Introduction.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/1-Introduction.html",
      "content": "# 1. Introduction\nCreated Sun Nov 19, 2023 at 1:55 AM\n\n## `style` prop\n- Most core components accept `style` prop, which is the only way to style stuff in RN\n- The value of `style` is an object, or an instance of [`StyleSheet.create`](../2-Fundamental-concepts/8-StyleSheet.md)\n- `style` can also be an array of objects, with the successive objects overriding previously mentioned properties, in a merge-with-replacement fashion.\n\n## RN has no style inheritance\n- Styles are not inherited in RN.\n- Consequently, there's no need for specificity.\n\nA common way to ensure consistency, especially for font styling, is to create wrappers for core RN components.\n\nCommonly used style properties of the web are generally available in RN, at-least when it comes individual node styling.",
      "html": "<h1 id=\"1.-introduction\">1. Introduction <a class=\"heading-anchor-permalink\" href=\"#1.-introduction\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 1:55 AM</p>\n<h2 id=\"style-prop\"><code>style</code> prop <a class=\"heading-anchor-permalink\" href=\"#style-prop\">#</a></h2>\n<ul>\n<li>Most core components accept <code>style</code> prop, which is the only way to style stuff in RN</li>\n<li>The value of <code>style</code> is an object, or an instance of <a href=\"../2-Fundamental-concepts/8-StyleSheet.html\"><code>StyleSheet.create</code></a></li>\n<li><code>style</code> can also be an array of objects, with the successive objects overriding previously mentioned properties, in a merge-with-replacement fashion.</li>\n</ul>\n<h2 id=\"rn-has-no-style-inheritance\">RN has no style inheritance <a class=\"heading-anchor-permalink\" href=\"#rn-has-no-style-inheritance\">#</a></h2>\n<ul>\n<li>Styles are not inherited in RN.</li>\n<li>Consequently, there’s no need for specificity.</li>\n</ul>\n<p>A common way to ensure consistency, especially for font styling, is to create wrappers for core RN components.</p>\n<p>Commonly used style properties of the web are generally available in RN, at-least when it comes individual node styling.</p>\n",
      "id": 192
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/10-Exercises.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/10-Exercises.html",
      "content": "# 10. Exercises\nCreated Sun Nov 19, 2023 at 6:43 PM\n\n## 1. Custom button\n[Code](https://github.com/exemplar-codes/DoneWithIt/commit/2403e20fae6170356ef85fa04e0e6412d65efbcc)\n\n![](../../../../../assets/10-Exercises-image-1-6344953a.png)\n\n## 2. Improving the Welcome screen\n\n\n",
      "html": "<h1 id=\"10.-exercises\">10. Exercises <a class=\"heading-anchor-permalink\" href=\"#10.-exercises\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 6:43 PM</p>\n<h2 id=\"1.-custom-button\">1. Custom button <a class=\"heading-anchor-permalink\" href=\"#1.-custom-button\">#</a></h2>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/2403e20fae6170356ef85fa04e0e6412d65efbcc\">Code</a></p>\n<p><img src=\"../../../../../assets/10-Exercises-image-1-6344953a.png\" alt=\"\"></p>\n<h2 id=\"2.-improving-the-welcome-screen\">2. Improving the Welcome screen <a class=\"heading-anchor-permalink\" href=\"#2.-improving-the-welcome-screen\">#</a></h2>\n",
      "id": 193
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/2-Borders.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/2-Borders.html",
      "content": "# 2. Borders\nCreated Sun Nov 19, 2023 at 2:10 AM\n\n- there's no `border` shorthand. So at-least 1  (width) are needed.\n- style props\n\t- `borderWidth`\n\t- `borderColor`\n\t- `borderRadius` for rounding corners\n\t- Per side/corner props of above 3 - like `borderColorTop`\n\t- `borderStyle` - `solid` (default) | `dotted` | `dashed`\n\n[Code](https://github.com/exemplar-codes/DoneWithIt/commit/b0fe0442d25f5750bb166d2286b1d4a5a6d1355d)",
      "html": "<h1 id=\"2.-borders\">2. Borders <a class=\"heading-anchor-permalink\" href=\"#2.-borders\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 2:10 AM</p>\n<ul>\n<li>there’s no <code>border</code> shorthand. So at-least 1  (width) are needed.</li>\n<li>style props\n<ul>\n<li><code>borderWidth</code></li>\n<li><code>borderColor</code></li>\n<li><code>borderRadius</code> for rounding corners</li>\n<li>Per side/corner props of above 3 - like <code>borderColorTop</code></li>\n<li><code>borderStyle</code> - <code>solid</code> (default) | <code>dotted</code> | <code>dashed</code></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/b0fe0442d25f5750bb166d2286b1d4a5a6d1355d\">Code</a></p>\n",
      "id": 194
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/3-Shadows.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/3-Shadows.html",
      "content": "# 3. Shadows\nCreated Sun Nov 19, 2023 at 2:15 AM\n\nThis is platform specific. \niOS is good, has many properties.\nAndroid has just one property, and even that's not very effective.\n\n## iOS\nHave to apply at-least 3 properties:\n- `shadowColor`\n- `shadowOpacity`\n- `shadowOffset: {{ width: 10, height: 10 }}` - decides size and position of shadows for the box. By default only right and bottom sides have shadow. Negative values will render shadow on the opposite side (left, and top).\n\nMore properties:\n- `shadowRadius` - control blur. ~~rounding~~ (rounding is decided by original object, irrelevant).\n\n## Android\nAs said, not much can be done.\n\nThe shadow here is a four sided one. So, not a true 2-side shadow. \nColor is fixed (black with low opacity).\n\nProperties:\n- `elevation: 10` - size of shadow\n\nChanging the value doesn't do much, since a large number is essentially like background color.\nDoes not affect iOS.\n\n\n[Code](https://github.com/exemplar-codes/DoneWithIt/commit/b0fe0442d25f5750bb166d2286b1d4a5a6d1355d)",
      "html": "<h1 id=\"3.-shadows\">3. Shadows <a class=\"heading-anchor-permalink\" href=\"#3.-shadows\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 2:15 AM</p>\n<p>This is platform specific.\niOS is good, has many properties.\nAndroid has just one property, and even that’s not very effective.</p>\n<h2 id=\"ios\">iOS <a class=\"heading-anchor-permalink\" href=\"#ios\">#</a></h2>\n<p>Have to apply at-least 3 properties:</p>\n<ul>\n<li><code>shadowColor</code></li>\n<li><code>shadowOpacity</code></li>\n<li><code>shadowOffset: {{ width: 10, height: 10 }}</code> - decides size and position of shadows for the box. By default only right and bottom sides have shadow. Negative values will render shadow on the opposite side (left, and top).</li>\n</ul>\n<p>More properties:</p>\n<ul>\n<li><code>shadowRadius</code> - control blur. <s>rounding</s> (rounding is decided by original object, irrelevant).</li>\n</ul>\n<h2 id=\"android\">Android <a class=\"heading-anchor-permalink\" href=\"#android\">#</a></h2>\n<p>As said, not much can be done.</p>\n<p>The shadow here is a four sided one. So, not a true 2-side shadow.\nColor is fixed (black with low opacity).</p>\n<p>Properties:</p>\n<ul>\n<li><code>elevation: 10</code> - size of shadow</li>\n</ul>\n<p>Changing the value doesn’t do much, since a large number is essentially like background color.\nDoes not affect iOS.</p>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/b0fe0442d25f5750bb166d2286b1d4a5a6d1355d\">Code</a></p>\n",
      "id": 195
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/4-Paddings-and-Margins.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/4-Paddings-and-Margins.html",
      "content": "# 4. Paddings and Margins\nCreated Sun Nov 19, 2023 at 2:50 AM\n\nSame as web, including fixed (number), percentages (string) and 'auto' are allowed.\n\nShorthands like `paddingHorizontal`, `paddingVertical`, `marginHorizontal`, `marginVertical` are available.\n\n\n[Code](https://github.com/exemplar-codes/DoneWithIt/commit/1598c1618b154ee1a9dcbc94f34f667325aa9ece)",
      "html": "<h1 id=\"4.-paddings-and-margins\">4. Paddings and Margins <a class=\"heading-anchor-permalink\" href=\"#4.-paddings-and-margins\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 2:50 AM</p>\n<p>Same as web, including fixed (number), percentages (string) and ‘auto’ are allowed.</p>\n<p>Shorthands like <code>paddingHorizontal</code>, <code>paddingVertical</code>, <code>marginHorizontal</code>, <code>marginVertical</code> are available.</p>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/1598c1618b154ee1a9dcbc94f34f667325aa9ece\">Code</a></p>\n",
      "id": 196
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/5-Styling-Text.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/5-Styling-Text.html",
      "content": "# 5. Styling Text\nCreated Sun Nov 19, 2023 at 3:17 AM\n\n[Code](https://github.com/exemplar-codes/DoneWithIt/commit/b9fb64b5c92c0fcdbbb765e477b1a8ca2a81c8d2)\n\n## Style props\n- `color` string. Examples: `'red'`,  `'#ff0000'`\n- `fontWeight` - string. Examples: `'600'`, `'bold'`, `'normal'`. JS number won't work.\n- `fontSize` - number\n- `fontFamily`\n\nNote: these work with `Text` only. They won't have any effect if used on `View` etc.\n\n## Font family\niOS and Android have no common system fonts. So using `Platform` is non-optional.\n\n```jsx\n<Text styles={{ \n  fontFamily: Platform.OS === 'android' ? 'Roboto': 'Arial'\n}}>\n  Hello world\n</Text>\n```\n\nFonts:\n- Android - \"normal\" (aka \"Roboto\"), \"serif\", \"monospace\"\n- iOS - \"Helvetica\", \"Georgia\", \"Times New Roman\"\n\nFallbacks are not supported.\n\n## More style props\n- `textTransform` - `'capitalize'`, `'uppercase'`, `'lowercase'`\n- `textDecorationLine` - `'underline'`, `'line-through'`\n- `textAlign` - `'left'`, `'right'`, `'justify'`\n- `lineHeight` - number. Used to change space between lines of a paragraph.\n\n## Consistent text tip\nSince RN has no style inheritance, showing text consistently across the app is difficult if done via props (inline or via shared/global/external styles) - would be too much work, be anti-DRY and forgetful.\n\nThe solution is simple - create a wrapper that uses `<Text />` and prohibit direct usage of `<Text />`. This wrapper component can have the styles we want already set as default props.\n\nIn fact, most RN project devs create wrappers for most components, when:\n1. Styling needs to be consistent\n2. Cross-platform issues exist. This avoids using Platform API in the feature code (which is good)",
      "html": "<h1 id=\"5.-styling-text\">5. Styling Text <a class=\"heading-anchor-permalink\" href=\"#5.-styling-text\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 3:17 AM</p>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/b9fb64b5c92c0fcdbbb765e477b1a8ca2a81c8d2\">Code</a></p>\n<h2 id=\"style-props\">Style props <a class=\"heading-anchor-permalink\" href=\"#style-props\">#</a></h2>\n<ul>\n<li><code>color</code> string. Examples: <code>'red'</code>,  <code>'#ff0000'</code></li>\n<li><code>fontWeight</code> - string. Examples: <code>'600'</code>, <code>'bold'</code>, <code>'normal'</code>. JS number won’t work.</li>\n<li><code>fontSize</code> - number</li>\n<li><code>fontFamily</code></li>\n</ul>\n<p>Note: these work with <code>Text</code> only. They won’t have any effect if used on <code>View</code> etc.</p>\n<h2 id=\"font-family\">Font family <a class=\"heading-anchor-permalink\" href=\"#font-family\">#</a></h2>\n<p>iOS and Android have no common system fonts. So using <code>Platform</code> is non-optional.</p>\n<pre><code class=\"language-jsx\">&lt;Text styles={{ \n  fontFamily: Platform.OS === 'android' ? 'Roboto': 'Arial'\n}}&gt;\n  Hello world\n&lt;/Text&gt;\n</code></pre>\n<p>Fonts:</p>\n<ul>\n<li>Android - “normal” (aka “Roboto”), “serif”, “monospace”</li>\n<li>iOS - “Helvetica”, “Georgia”, “Times New Roman”</li>\n</ul>\n<p>Fallbacks are not supported.</p>\n<h2 id=\"more-style-props\">More style props <a class=\"heading-anchor-permalink\" href=\"#more-style-props\">#</a></h2>\n<ul>\n<li><code>textTransform</code> - <code>'capitalize'</code>, <code>'uppercase'</code>, <code>'lowercase'</code></li>\n<li><code>textDecorationLine</code> - <code>'underline'</code>, <code>'line-through'</code></li>\n<li><code>textAlign</code> - <code>'left'</code>, <code>'right'</code>, <code>'justify'</code></li>\n<li><code>lineHeight</code> - number. Used to change space between lines of a paragraph.</li>\n</ul>\n<h2 id=\"consistent-text-tip\">Consistent text tip <a class=\"heading-anchor-permalink\" href=\"#consistent-text-tip\">#</a></h2>\n<p>Since RN has no style inheritance, showing text consistently across the app is difficult if done via props (inline or via shared/global/external styles) - would be too much work, be anti-DRY and forgetful.</p>\n<p>The solution is simple - create a wrapper that uses <code>&lt;Text /&gt;</code> and prohibit direct usage of <code>&lt;Text /&gt;</code>. This wrapper component can have the styles we want already set as default props.</p>\n<p>In fact, most RN project devs create wrappers for most components, when:</p>\n<ol>\n<li>Styling needs to be consistent</li>\n<li>Cross-platform issues exist. This avoids using Platform API in the feature code (which is good)</li>\n</ol>\n",
      "id": 197
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/6-Encapsulating-Styles-And-Wrappers.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/6-Encapsulating-Styles-And-Wrappers.html",
      "content": "# 6. Encapsulating Styles And Wrappers\nCreated Sun Nov 19, 2023 at 4:24 AM\n\n## External styles\nSince styles are objects (including `StyleSheet.create()`), we can store import/export them like usual JS modules.\n\nMost apps usually have global style file. Feature level style files are also possible, of course.\n\nSample code:\n```js\n// app/styles/global.js\n\n// figure out reusable styles, and add here\n// Works in an incremental way too - when you discover new common styles during feature, add here\nexport const layout = {\n  screen: { padding: 16, flex: 1 },\n  rowItem: { padding: 12, flexDirection: 'column', flex: 1 },\n}\n\nexport const rounded = {\n  md: { borderWidth: 2, borderColor: 'grey', borderRadius: '8' },\n  lg: { borderWidth: 2, borderColor: 'grey', borderRadius: '16' }\n}\n\n// more\n```\n\n```jsx\n// app/screens/MyFeature.js\n\n// Makes feature development easy and fast\nimport styles from '../../styles/global';\n\nfunction MyFeature() {\n  return <View style={styles.rounded.lg}></View>\n}\n```\n\n## inline vs file vs external styles\n- Inline - if style used once on element\n- File (Stylesheet) - if style is used by multiple elements of the component (file)\n- External - if style is used in multiple files. By external I mean:\n\n\nthere's another variation, see wrapper.\n\n## Wrapper components\nIf style is used across the codebase, and remains the same for all instances of the component.\n\nThe naming convention is to add a small prefix for all wrappers.\nExample - `Text` --> `AppText`, or the org name `Text` -> `VPText` (Volopay)\n\nWrappers are usually stored in `/app/components/core` alongside other custom core components.\n\n## Don't overdo wrappers\nThe wrappers way is almost non-optional in RN, but don't over do it.\n\nExample: creating a wrapper for `View` doesn't make sense. Same goes with `TouchableOpacity`.\n\n- Doing too much wrappers makes the primitives \"look\" too abstract, which can be intimidating.\n- This affects onboarding time for a new, makes it longer.\n- Bugs in wrappers can cause issues at multiple places - an out of control situation.\n",
      "html": "<h1 id=\"6.-encapsulating-styles-and-wrappers\">6. Encapsulating Styles And Wrappers <a class=\"heading-anchor-permalink\" href=\"#6.-encapsulating-styles-and-wrappers\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 4:24 AM</p>\n<h2 id=\"external-styles\">External styles <a class=\"heading-anchor-permalink\" href=\"#external-styles\">#</a></h2>\n<p>Since styles are objects (including <code>StyleSheet.create()</code>), we can store import/export them like usual JS modules.</p>\n<p>Most apps usually have global style file. Feature level style files are also possible, of course.</p>\n<p>Sample code:</p>\n<pre><code class=\"language-js\">// app/styles/global.js\n\n// figure out reusable styles, and add here\n// Works in an incremental way too - when you discover new common styles during feature, add here\nexport const layout = {\n  screen: { padding: 16, flex: 1 },\n  rowItem: { padding: 12, flexDirection: 'column', flex: 1 },\n}\n\nexport const rounded = {\n  md: { borderWidth: 2, borderColor: 'grey', borderRadius: '8' },\n  lg: { borderWidth: 2, borderColor: 'grey', borderRadius: '16' }\n}\n\n// more\n</code></pre>\n<pre><code class=\"language-jsx\">// app/screens/MyFeature.js\n\n// Makes feature development easy and fast\nimport styles from '../../styles/global';\n\nfunction MyFeature() {\n  return &lt;View style={styles.rounded.lg}&gt;&lt;/View&gt;\n}\n</code></pre>\n<h2 id=\"inline-vs-file-vs-external-styles\">inline vs file vs external styles <a class=\"heading-anchor-permalink\" href=\"#inline-vs-file-vs-external-styles\">#</a></h2>\n<ul>\n<li>Inline - if style used once on element</li>\n<li>File (Stylesheet) - if style is used by multiple elements of the component (file)</li>\n<li>External - if style is used in multiple files. By external I mean:</li>\n</ul>\n<p>there’s another variation, see wrapper.</p>\n<h2 id=\"wrapper-components\">Wrapper components <a class=\"heading-anchor-permalink\" href=\"#wrapper-components\">#</a></h2>\n<p>If style is used across the codebase, and remains the same for all instances of the component.</p>\n<p>The naming convention is to add a small prefix for all wrappers.\nExample - <code>Text</code> --&gt; <code>AppText</code>, or the org name <code>Text</code> -&gt; <code>VPText</code> (Volopay)</p>\n<p>Wrappers are usually stored in <code>/app/components/core</code> alongside other custom core components.</p>\n<h2 id=\"don%E2%80%99t-overdo-wrappers\">Don’t overdo wrappers <a class=\"heading-anchor-permalink\" href=\"#don%E2%80%99t-overdo-wrappers\">#</a></h2>\n<p>The wrappers way is almost non-optional in RN, but don’t over do it.</p>\n<p>Example: creating a wrapper for <code>View</code> doesn’t make sense. Same goes with <code>TouchableOpacity</code>.</p>\n<ul>\n<li>Doing too much wrappers makes the primitives “look” too abstract, which can be intimidating.</li>\n<li>This affects onboarding time for a new, makes it longer.</li>\n<li>Bugs in wrappers can cause issues at multiple places - an out of control situation.</li>\n</ul>\n",
      "id": 198
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/7-Icons.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/7-Icons.html",
      "content": "---\nicons: \ntags:\n  - icons\n  - hack\n  - rn-icon\n  - image-icon\n---\n# 7. Icons\nCreated Sun Nov 19, 2023 at 4:16 PM\n\n## Expo\nExpo has the `@expo/vector-icons` [package](https://docs.expo.dev/guides/icons/#expovector-icons) installed by default.\nIf offers many font sets - Ant Design , Ionicons, MaterialIcons etc.\n\nSteps:\n1. Find the icon you want, by name like 'email', 'video', 'person' from the  [sets directory](https://icons.expo.fyi/Index)\n2. Choose a set.\n3. Import the set component (same name as set name) from `@expo/vector-icons`\n4. Use the imported component, with `name` (= email), `size` and `color` props\n\nYou're done\n\nCode example:\n```jsx\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nexport default MyFeature() {\n  return <MaterialCommunityIcons name=\"email\" size={50} color=\"royalblue\" />;\n}\n```\n\n[Saved in repo](https://github.com/exemplar-codes/DoneWithIt/commit/6b8b357193a5d383124386f4c185542d0443f906)\n\n## RN CLI\nOne needs to create a wrapper that uses `<Image />`. \n- Exposed props would be `name`, `size` and `color`.\n- SVG files would be saved to `/app/assets` and a exporter file can be created `/app/assets/index.js` with entries for each SVG.\n- Make sure `fill=\"currentColor\"` in SVGs, so color gets applied to SVG strokes.\n\nTrick for NativeWind controlling size - wrap `Image` by `View` and set Image height and width to 100%.\n```jsx\n({ src, classes = \"w-12 h-12\" }) => \n  <View className={classes}>\n    <Image width=\"100%\" height=\"100%\" resizeMode=\"cover\"/>\n  <View>\n```\n",
      "html": "<hr>\n<p>icons:\ntags:</p>\n<ul>\n<li>icons</li>\n<li>hack</li>\n<li>rn-icon</li>\n<li>image-icon</li>\n</ul>\n<hr>\n<h1 id=\"7.-icons\">7. Icons <a class=\"heading-anchor-permalink\" href=\"#7.-icons\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 4:16 PM</p>\n<h2 id=\"expo\">Expo <a class=\"heading-anchor-permalink\" href=\"#expo\">#</a></h2>\n<p>Expo has the <code>@expo/vector-icons</code> <a href=\"https://docs.expo.dev/guides/icons/#expovector-icons\">package</a> installed by default.\nIf offers many font sets - Ant Design , Ionicons, MaterialIcons etc.</p>\n<p>Steps:</p>\n<ol>\n<li>Find the icon you want, by name like ‘email’, ‘video’, ‘person’ from the  <a href=\"https://icons.expo.fyi/Index\">sets directory</a></li>\n<li>Choose a set.</li>\n<li>Import the set component (same name as set name) from <code>@expo/vector-icons</code></li>\n<li>Use the imported component, with <code>name</code> (= email), <code>size</code> and <code>color</code> props</li>\n</ol>\n<p>You’re done</p>\n<p>Code example:</p>\n<pre><code class=\"language-jsx\">import { MaterialCommunityIcons } from '@expo/vector-icons';\n\nexport default MyFeature() {\n  return &lt;MaterialCommunityIcons name=&quot;email&quot; size={50} color=&quot;royalblue&quot; /&gt;;\n}\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/6b8b357193a5d383124386f4c185542d0443f906\">Saved in repo</a></p>\n<h2 id=\"rn-cli\">RN CLI <a class=\"heading-anchor-permalink\" href=\"#rn-cli\">#</a></h2>\n<p>One needs to create a wrapper that uses <code>&lt;Image /&gt;</code>.</p>\n<ul>\n<li>Exposed props would be <code>name</code>, <code>size</code> and <code>color</code>.</li>\n<li>SVG files would be saved to <code>/app/assets</code> and a exporter file can be created <code>/app/assets/index.js</code> with entries for each SVG.</li>\n<li>Make sure <code>fill=&quot;currentColor&quot;</code> in SVGs, so color gets applied to SVG strokes.</li>\n</ul>\n<p>Trick for NativeWind controlling size - wrap <code>Image</code> by <code>View</code> and set Image height and width to 100%.</p>\n<pre><code class=\"language-jsx\">({ src, classes = &quot;w-12 h-12&quot; }) =&gt; \n  &lt;View className={classes}&gt;\n    &lt;Image width=&quot;100%&quot; height=&quot;100%&quot; resizeMode=&quot;cover&quot;/&gt;\n  &lt;View&gt;\n</code></pre>\n",
      "id": 199
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/8-Platform-specific-Code.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/8-Platform-specific-Code.html",
      "content": "# 8. Platform specific Code\nCreated Sun Nov 19, 2023 at 5:03 PM\n\n`Platform.OS === 'android'`, i.e conditionals are helpful. But the code is difficult to scale.\nRN provides a solution for this.\n\n## `Platform.select()`\nDeclarative selection of platform stuff.\nGenerally used for styles, but can be used for any static stuff.\n\nThis takes an object as argument.\nEach top level key is a platform value - `'ios'`, `'android'`\nReturns one of the platform objects.\n\nUsed with spreading.\n```jsx\nconst fontStyles = Platform.select({\n  ios: {\n    fontFamily: 'Avenir',\n    fontSize: 20,\n  },\n  android: {\n    fontFamily: 'Roboto',\n    fontSize: 18,\n  }\n});\n\n\n<View styles={[{ fontWeight: '600' }, fontStyles]}></View>;\n```\n\n[Code example](https://github.com/exemplar-codes/DoneWithIt/commit/f3a370b513d6cf04e710b5c982794be25d5da964)\n## Cross-platform custom components\nSuppose a reusable custom component needs to be made for an app, and it's implementation\nwould be too convoluted if done via `Platform` API, i.e. there would be too many conditionals.\n\nIn such a case, a common structure is to implement the component in a dedicated file per platform.\nThis avoids `Platform` conditional logic in each file.\nOf course, make a `index.js` file that calls these files and has a simple `Platform` logic.\n\nExample: Suppose `<AppButton />` needs to be made this way, then files would be:\n- `AppButton/index.js`\n- `AppButton.android.js`\n- `AppButton.ios.js`\n",
      "html": "<h1 id=\"8.-platform-specific-code\">8. Platform specific Code <a class=\"heading-anchor-permalink\" href=\"#8.-platform-specific-code\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 5:03 PM</p>\n<p><code>Platform.OS === 'android'</code>, i.e conditionals are helpful. But the code is difficult to scale.\nRN provides a solution for this.</p>\n<h2 id=\"platform.select()\"><code>Platform.select()</code> <a class=\"heading-anchor-permalink\" href=\"#platform.select()\">#</a></h2>\n<p>Declarative selection of platform stuff.\nGenerally used for styles, but can be used for any static stuff.</p>\n<p>This takes an object as argument.\nEach top level key is a platform value - <code>'ios'</code>, <code>'android'</code>\nReturns one of the platform objects.</p>\n<p>Used with spreading.</p>\n<pre><code class=\"language-jsx\">const fontStyles = Platform.select({\n  ios: {\n    fontFamily: 'Avenir',\n    fontSize: 20,\n  },\n  android: {\n    fontFamily: 'Roboto',\n    fontSize: 18,\n  }\n});\n\n\n&lt;View styles={[{ fontWeight: '600' }, fontStyles]}&gt;&lt;/View&gt;;\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/f3a370b513d6cf04e710b5c982794be25d5da964\">Code example</a></p>\n<h2 id=\"cross-platform-custom-components\">Cross-platform custom components <a class=\"heading-anchor-permalink\" href=\"#cross-platform-custom-components\">#</a></h2>\n<p>Suppose a reusable custom component needs to be made for an app, and it’s implementation\nwould be too convoluted if done via <code>Platform</code> API, i.e. there would be too many conditionals.</p>\n<p>In such a case, a common structure is to implement the component in a dedicated file per platform.\nThis avoids <code>Platform</code> conditional logic in each file.\nOf course, make a <code>index.js</code> file that calls these files and has a simple <code>Platform</code> logic.</p>\n<p>Example: Suppose <code>&lt;AppButton /&gt;</code> needs to be made this way, then files would be:</p>\n<ul>\n<li><code>AppButton/index.js</code></li>\n<li><code>AppButton.android.js</code></li>\n<li><code>AppButton.ios.js</code></li>\n</ul>\n",
      "id": 200
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/9-Organizing-Styles.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/9-Organizing-Styles.html",
      "content": "# 9. Organizing Styles\nCreated Sun Nov 19, 2023 at 6:29 PM\n\nMostly the same as [6-Encapsulating-Styles-And-Wrappers](6-Encapsulating-Styles-And-Wrappers.md)\n\n## Where to keep local styles\nThere are two approaches\n- One file - `MyComponent.js`. Has the component, as well a top level `styles` variable (created using `StylesSheet.create`)\n- Two files - `MyComponent/index.js` and `MyComponent/styles.js`, the index file imports styles from \"styles.js\", which has the style object created using `StyleSheet.create`\n\nMany devs prefer the second, because it separates functionality from presentation.\nBut many devs also prefer the first approach, since it's concise.\n\nChoose whatever you like. The only thing that matters is being consistent - use one way and do so across the codebase.",
      "html": "<h1 id=\"9.-organizing-styles\">9. Organizing Styles <a class=\"heading-anchor-permalink\" href=\"#9.-organizing-styles\">#</a></h1>\n<p>Created Sun Nov 19, 2023 at 6:29 PM</p>\n<p>Mostly the same as <a href=\"6-Encapsulating-Styles-And-Wrappers.html\">6-Encapsulating-Styles-And-Wrappers</a></p>\n<h2 id=\"where-to-keep-local-styles\">Where to keep local styles <a class=\"heading-anchor-permalink\" href=\"#where-to-keep-local-styles\">#</a></h2>\n<p>There are two approaches</p>\n<ul>\n<li>One file - <code>MyComponent.js</code>. Has the component, as well a top level <code>styles</code> variable (created using <code>StylesSheet.create</code>)</li>\n<li>Two files - <code>MyComponent/index.js</code> and <code>MyComponent/styles.js</code>, the index file imports styles from “styles.js”, which has the style object created using <code>StyleSheet.create</code></li>\n</ul>\n<p>Many devs prefer the second, because it separates functionality from presentation.\nBut many devs also prefer the first approach, since it’s concise.</p>\n<p>Choose whatever you like. The only thing that matters is being consistent - use one way and do so across the codebase.</p>\n",
      "id": 201
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/4-Styling/index.html",
      "content": "# 4. Styling\nCreated Sat Dec 30, 2023 at 1:09 PM\n\n[1-Introduction](1-Introduction.md)\n[2-Borders](2-Borders.md)\n[3-Shadows](3-Shadows.md)\n[4-Paddings-and-Margins](4-Paddings-and-Margins.md)\n[5-Styling-Text](5-Styling-Text.md)\n[6-Encapsulating-Styles-And-Wrappers](6-Encapsulating-Styles-And-Wrappers.md)\n[7-Icons](7-Icons.md)\n[8-Platform-specific-Code](8-Platform-specific-Code.md)\n\n## Topics\n1. Introduction\n2. Borders\n3. Shadows\n4. Paddings and Margins\n5. Styling Text\n6. Encapsulating Styles\n7. Icons\n8. Platform-specific Code\n9. Organizing Styles\n10. Building the Button Component\n11. Improving the Welcome Screen\n12. Building the Card Component\n13. Building the Listing Details Screen\n14. Building the ListItem Component\n15. Improving the View Image Screen\n16. UI Libraries",
      "html": "<h1 id=\"4.-styling\">4. Styling <a class=\"heading-anchor-permalink\" href=\"#4.-styling\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:09 PM</p>\n<p><a href=\"1-Introduction.html\">1-Introduction</a>\n<a href=\"2-Borders.html\">2-Borders</a>\n<a href=\"3-Shadows.html\">3-Shadows</a>\n<a href=\"4-Paddings-and-Margins.html\">4-Paddings-and-Margins</a>\n<a href=\"5-Styling-Text.html\">5-Styling-Text</a>\n<a href=\"6-Encapsulating-Styles-And-Wrappers.html\">6-Encapsulating-Styles-And-Wrappers</a>\n<a href=\"7-Icons.html\">7-Icons</a>\n<a href=\"8-Platform-specific-Code.html\">8-Platform-specific-Code</a></p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Borders</li>\n<li>Shadows</li>\n<li>Paddings and Margins</li>\n<li>Styling Text</li>\n<li>Encapsulating Styles</li>\n<li>Icons</li>\n<li>Platform-specific Code</li>\n<li>Organizing Styles</li>\n<li>Building the Button Component</li>\n<li>Improving the Welcome Screen</li>\n<li>Building the Card Component</li>\n<li>Building the Listing Details Screen</li>\n<li>Building the ListItem Component</li>\n<li>Improving the View Image Screen</li>\n<li>UI Libraries</li>\n</ol>\n",
      "id": 202
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/1-FlatList.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/1-FlatList.html",
      "content": "# 1. FlatList\nCreated Tue Dec 5, 2023 at 1:40 AM\n\n## Basic\n- A performant (virtualized) listing component\n- Intended for linear lists\n- Cross platform and looks exactly the same.\n- Horizontal layout possible.\n\nhttps://reactnative.dev/docs/flatlist\n### Usage and props\n```jsx\nimport { FlatList } from 'react-native';\n\n<FlatList\n  data={[{ id: '', name: '', label: ''}]}\n  renderItem={(item, index) => <View></View>)}\n  keyExtractor={item => item.someIdKey.toString()} // defaults to `id`, then index. toString is important\n/>\n```\n\n```jsx\n// more (optional) props\n<FlatList\n  // empty, loading state, load more\n  refreshing={false}\n  ListEmptyComponent ={<SomeComponent />}\n  onRefresh={() => {}}\n\n\n  extraData={} // optional but important, \n  // causes list to re-render if this changes.\n  // shallow equals not accepted, just like useEffect\n  \n  ListHeaderComponent={<SomeComponent />}\n  ListFooterComponent={<SomeComponent />}\n  ItemSeparatorComponent={<SomeComponent highlighted leadingItem />}\n  horizontal={false}\n  inverted={false}\n/>\n```\n\n### Events\n - `onRefresh` - pull to refresh event\n\n### Methods\n- `scrollToEnd({ animated?: true })`\n- `scrollToIndex({ index: number, animated?: true, viewPosition: 0_to_1 })`\n\t- `scrollToItem`\n\t- `scrollToOffset`\n\n## Pattern\nRow click via `onPress` on `renderItem`",
      "html": "<h1 id=\"1.-flatlist\">1. FlatList <a class=\"heading-anchor-permalink\" href=\"#1.-flatlist\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 1:40 AM</p>\n<h2 id=\"basic\">Basic <a class=\"heading-anchor-permalink\" href=\"#basic\">#</a></h2>\n<ul>\n<li>A performant (virtualized) listing component</li>\n<li>Intended for linear lists</li>\n<li>Cross platform and looks exactly the same.</li>\n<li>Horizontal layout possible.</li>\n</ul>\n<p><a href=\"https://reactnative.dev/docs/flatlist\">https://reactnative.dev/docs/flatlist</a></p>\n<h3 id=\"usage-and-props\">Usage and props <a class=\"heading-anchor-permalink\" href=\"#usage-and-props\">#</a></h3>\n<pre><code class=\"language-jsx\">import { FlatList } from 'react-native';\n\n&lt;FlatList\n  data={[{ id: '', name: '', label: ''}]}\n  renderItem={(item, index) =&gt; &lt;View&gt;&lt;/View&gt;)}\n  keyExtractor={item =&gt; item.someIdKey.toString()} // defaults to `id`, then index. toString is important\n/&gt;\n</code></pre>\n<pre><code class=\"language-jsx\">// more (optional) props\n&lt;FlatList\n  // empty, loading state, load more\n  refreshing={false}\n  ListEmptyComponent ={&lt;SomeComponent /&gt;}\n  onRefresh={() =&gt; {}}\n\n\n  extraData={} // optional but important, \n  // causes list to re-render if this changes.\n  // shallow equals not accepted, just like useEffect\n  \n  ListHeaderComponent={&lt;SomeComponent /&gt;}\n  ListFooterComponent={&lt;SomeComponent /&gt;}\n  ItemSeparatorComponent={&lt;SomeComponent highlighted leadingItem /&gt;}\n  horizontal={false}\n  inverted={false}\n/&gt;\n</code></pre>\n<h3 id=\"events\">Events <a class=\"heading-anchor-permalink\" href=\"#events\">#</a></h3>\n<ul>\n<li><code>onRefresh</code> - pull to refresh event</li>\n</ul>\n<h3 id=\"methods\">Methods <a class=\"heading-anchor-permalink\" href=\"#methods\">#</a></h3>\n<ul>\n<li><code>scrollToEnd({ animated?: true })</code></li>\n<li><code>scrollToIndex({ index: number, animated?: true, viewPosition: 0_to_1 })</code>\n<ul>\n<li><code>scrollToItem</code></li>\n<li><code>scrollToOffset</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"pattern\">Pattern <a class=\"heading-anchor-permalink\" href=\"#pattern\">#</a></h2>\n<p>Row click via <code>onPress</code> on <code>renderItem</code></p>\n",
      "id": 203
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/10-Multiple-FlatLists.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/10-Multiple-FlatLists.html",
      "content": "# 10. Multiple FlatLists\nCreated Tue Dec 5, 2023 at 2:06 AM\n\nIt's fine to use multiple `FlatList` as siblings.\nMany times this is preferable and simpler than a `SectionList`",
      "html": "<h1 id=\"10.-multiple-flatlists\">10. Multiple FlatLists <a class=\"heading-anchor-permalink\" href=\"#10.-multiple-flatlists\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 2:06 AM</p>\n<p>It’s fine to use multiple <code>FlatList</code> as siblings.\nMany times this is preferable and simpler than a <code>SectionList</code></p>\n",
      "id": 204
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/6-Swipes.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/6-Swipes.html",
      "content": "# 6. Swipes\nCreated Tue Dec 5, 2023 at 1:56 AM\n\n- Install `react-native-gesure-handler`\n- Wrap each `renderItem` with `<Swipeable></Swipeable>`\n\n```jsx\n<Swipeable \n  renderRightAction={(item) => <SomeComponent onPress={} />}\n  renderLeftAction ={(item) => <SomeComponent onPress={} />}\n>\n</Swipeable>\n```\n",
      "html": "<h1 id=\"6.-swipes\">6. Swipes <a class=\"heading-anchor-permalink\" href=\"#6.-swipes\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 1:56 AM</p>\n<ul>\n<li>Install <code>react-native-gesure-handler</code></li>\n<li>Wrap each <code>renderItem</code> with <code>&lt;Swipeable&gt;&lt;/Swipeable&gt;</code></li>\n</ul>\n<pre><code class=\"language-jsx\">&lt;Swipeable \n  renderRightAction={(item) =&gt; &lt;SomeComponent onPress={} /&gt;}\n  renderLeftAction ={(item) =&gt; &lt;SomeComponent onPress={} /&gt;}\n&gt;\n&lt;/Swipeable&gt;\n</code></pre>\n",
      "id": 205
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/7-Deleting-item-aka-inner-click.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/7-Deleting-item-aka-inner-click.html",
      "content": "# 7. Deleting item aka inner click\nCreated Tue Dec 5, 2023 at 2:01 AM\n\n![](../../../../../assets/7-Deleting-item-aka-inner-click-image-1-7fd9d830.png)\n\nThe inner box needs to prevent bubbling.\n```jsx\n<Outer onPress={() => \"not called\"}>\n  ...\n  <InnerBox\n    onStartShouldSetResponder={() => true}\n    onTouchEnd={(e) => {\n      e.stopPropagation();\n      // code\n    }}\n  />\n  ...\n</Outer>\n```",
      "html": "<h1 id=\"7.-deleting-item-aka-inner-click\">7. Deleting item aka inner click <a class=\"heading-anchor-permalink\" href=\"#7.-deleting-item-aka-inner-click\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 2:01 AM</p>\n<p><img src=\"../../../../../assets/7-Deleting-item-aka-inner-click-image-1-7fd9d830.png\" alt=\"\"></p>\n<p>The inner box needs to prevent bubbling.</p>\n<pre><code class=\"language-jsx\">&lt;Outer onPress={() =&gt; &quot;not called&quot;}&gt;\n  ...\n  &lt;InnerBox\n    onStartShouldSetResponder={() =&gt; true}\n    onTouchEnd={(e) =&gt; {\n      e.stopPropagation();\n      // code\n    }}\n  /&gt;\n  ...\n&lt;/Outer&gt;\n</code></pre>\n",
      "id": 206
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/5-Lists/index.html",
      "content": "# 5. Lists\nCreated Sat Dec 30, 2023 at 1:09 PM\n\nHave added as written notes. See [OneNote](https://onedrive.live.com/redir?resid=1AFE2D221CFD3E54%21137&page=Edit&wd=target%285-lists.one%7Ceda0ce80-9b1a-a843-80fd-2934049b8b04%2F%29&wdorigin=717)\n\n## Topics\n1. Introduction\n2. FlatList\n3. Extracting-the-Screen-Component\n4. Separators\n5. Handling-Selections\n6. Handling-Swipes\n7. Deleting-an-Item\n8. Implementing-Pull-to-Refresh\n10. Planning-the-Account-Screen\n11. Building-the-Icon-Component\n12. Extending-the-ListItem-Component\n13. Building-the-Account-Screen\n14. Building-the-Listings-Screen",
      "html": "<h1 id=\"5.-lists\">5. Lists <a class=\"heading-anchor-permalink\" href=\"#5.-lists\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:09 PM</p>\n<p>Have added as written notes. See <a href=\"https://onedrive.live.com/redir?resid=1AFE2D221CFD3E54%21137&amp;page=Edit&amp;wd=target%285-lists.one%7Ceda0ce80-9b1a-a843-80fd-2934049b8b04%2F%29&amp;wdorigin=717\">OneNote</a></p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>FlatList</li>\n<li>Extracting-the-Screen-Component</li>\n<li>Separators</li>\n<li>Handling-Selections</li>\n<li>Handling-Swipes</li>\n<li>Deleting-an-Item</li>\n<li>Implementing-Pull-to-Refresh</li>\n<li>Planning-the-Account-Screen</li>\n<li>Building-the-Icon-Component</li>\n<li>Extending-the-ListItem-Component</li>\n<li>Building-the-Account-Screen</li>\n<li>Building-the-Listings-Screen</li>\n</ol>\n",
      "id": 207
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/2-TextInput.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/2-TextInput.html",
      "content": "# 2. TextInput\nCreated Tue Dec 5, 2023 at 1:02 AM\n\nhttps://reactnative.dev/docs/textinput\n\n## Basic\n- RN core's input text box\n- By default its invisible.\n- Cross platform but renders according to the platform\n\n```jsx\nimport { TextInput } from 'react-native';\n\n<TextInput\n  value=\"\"\n  onChangeText={(newText) => {}}\n\n  placeholder=\"\"\n  keyboardType=\"numeric\" // | 'dialpad' | 'default'\n  maxLength={10}\n\n  clearButtonMode=\"never\" // 'while-editing' | 'unless-editing' | 'always'\n/>\n```\n- `clearButtonMode` is iOS only. It renders a right \"cross\"/\"clear\" icon.\n\n\n## Wrapper usually needed\nProjects usually have a wrapper they use (instead of directly using `<TextInput />`)\n\nReason being that `<TextInput />` has no styles (invisible) by default. And also that RN has no style inheritance.",
      "html": "<h1 id=\"2.-textinput\">2. TextInput <a class=\"heading-anchor-permalink\" href=\"#2.-textinput\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 1:02 AM</p>\n<p><a href=\"https://reactnative.dev/docs/textinput\">https://reactnative.dev/docs/textinput</a></p>\n<h2 id=\"basic\">Basic <a class=\"heading-anchor-permalink\" href=\"#basic\">#</a></h2>\n<ul>\n<li>RN core’s input text box</li>\n<li>By default its invisible.</li>\n<li>Cross platform but renders according to the platform</li>\n</ul>\n<pre><code class=\"language-jsx\">import { TextInput } from 'react-native';\n\n&lt;TextInput\n  value=&quot;&quot;\n  onChangeText={(newText) =&gt; {}}\n\n  placeholder=&quot;&quot;\n  keyboardType=&quot;numeric&quot; // | 'dialpad' | 'default'\n  maxLength={10}\n\n  clearButtonMode=&quot;never&quot; // 'while-editing' | 'unless-editing' | 'always'\n/&gt;\n</code></pre>\n<ul>\n<li><code>clearButtonMode</code> is iOS only. It renders a right “cross”/“clear” icon.</li>\n</ul>\n<h2 id=\"wrapper-usually-needed\">Wrapper usually needed <a class=\"heading-anchor-permalink\" href=\"#wrapper-usually-needed\">#</a></h2>\n<p>Projects usually have a wrapper they use (instead of directly using <code>&lt;TextInput /&gt;</code>)</p>\n<p>Reason being that <code>&lt;TextInput /&gt;</code> has no styles (invisible) by default. And also that RN has no style inheritance.</p>\n",
      "id": 208
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/5-Switch.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/5-Switch.html",
      "content": "# 5. Switch\nCreated Tue Dec 5, 2023 at 1:09 AM\n\nRN core has a `Switch`, which is a toggle switch.\n```jsx\nimport { Switch } from 'react-native';\n\n<Switch \n  value={true}\n  onValueChange={newValue => ()} \n/>\n```",
      "html": "<h1 id=\"5.-switch\">5. Switch <a class=\"heading-anchor-permalink\" href=\"#5.-switch\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 1:09 AM</p>\n<p>RN core has a <code>Switch</code>, which is a toggle switch.</p>\n<pre><code class=\"language-jsx\">import { Switch } from 'react-native';\n\n&lt;Switch \n  value={true}\n  onValueChange={newValue =&gt; ()} \n/&gt;\n</code></pre>\n",
      "id": 209
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/6-DatePicker.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/6-DatePicker.html",
      "content": "# 6. DatePicker\nCreated Tue Dec 5, 2023 at 1:10 AM\n\n- Has been deprecated from core RN\n- Expo has a library to work with Android. For iOS, have to eject from expo.\n- For RNCLI, [DateTimePicker](https://github.com/react-native-datetimepicker/datetimepicker) is available. Cross platform, but shows UI as per platform. Has a simple interface.",
      "html": "<h1 id=\"6.-datepicker\">6. DatePicker <a class=\"heading-anchor-permalink\" href=\"#6.-datepicker\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 1:10 AM</p>\n<ul>\n<li>Has been deprecated from core RN</li>\n<li>Expo has a library to work with Android. For iOS, have to eject from expo.</li>\n<li>For RNCLI, <a href=\"https://github.com/react-native-datetimepicker/datetimepicker\">DateTimePicker</a> is available. Cross platform, but shows UI as per platform. Has a simple interface.</li>\n</ul>\n",
      "id": 210
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/7-DropdownPicker.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/7-DropdownPicker.html",
      "content": "# 7. DropdownPicker\nCreated Tue Dec 5, 2023 at 1:12 AM\n\nThere's no RN core component for this.\n\nThere are 3 possible UIs here:\n1. Dropdown - just like web\n2. Slide up menu - is stuck to the bottom, the form becomes a little blurry but the slide up menu has the label and description in it. The user clicks, and the slide up disappears, showing the form with the filled value.\n3. Modal, let the user select from a list, and navigate back to the form.\n\nSome people discourage normal drop-down, because long ones can case scrolling or hard to use UX issues.",
      "html": "<h1 id=\"7.-dropdownpicker\">7. DropdownPicker <a class=\"heading-anchor-permalink\" href=\"#7.-dropdownpicker\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 1:12 AM</p>\n<p>There’s no RN core component for this.</p>\n<p>There are 3 possible UIs here:</p>\n<ol>\n<li>Dropdown - just like web</li>\n<li>Slide up menu - is stuck to the bottom, the form becomes a little blurry but the slide up menu has the label and description in it. The user clicks, and the slide up disappears, showing the form with the filled value.</li>\n<li>Modal, let the user select from a list, and navigate back to the form.</li>\n</ol>\n<p>Some people discourage normal drop-down, because long ones can case scrolling or hard to use UX issues.</p>\n",
      "id": 211
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/8-Modal.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/8-Modal.html",
      "content": "# 8. Modal\nCreated Tue Dec 5, 2023 at 1:17 AM\n\nRN core has `Modal`\n## Basic\nIt's just a wrapper for content.\nRenders on top of existing UI. Covers the entire screen.\n```jsx\nimport { Modal } from \"react-native\";\n\n<Modal\n  visible={false}\n\n  transparent // optional. Default false (background is hidden completely).\n  onShow={() => {}}\n  animationType=\"none\" // 'slide' | 'fade'\n>\n\n</Modal>\n```\n- `style` prop not available. To add background color, add a `View` inside with `flex=1` and `opacity=0.5` (anything < 1) and move modal content inside it.\n\n## Example\nTransparent background example.\n```jsx\nimport React, { useState } from \"react\";\nimport { View, Modal, Button, Text } from \"react-native\";\n\nexport default function App() {\n  const [showModal, setShowModal] = useState();\n  const toggleModal = () => setShowModal((_) => !_);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: 100,\n      }}\n    >\n      <Button title=\"Open modal\" onPress={toggleModal} />\n\n      <Modal visible={showModal} transparent>\n        <View\n          style={{\n            flex: 1,\n            backgroundColor: \"gold\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            opacity: 0.6,\n            gap: 80,\n          }}\n        >\n          <Button title=\"Close modal\" onPress={toggleModal} />\n        </View>\n      </Modal>\n\n      <Text>\n        loremqdblqywdfdqwdloremqdblqywdfdqwdloremqdblqywdfdqwdlo\n        remqdblqywdfdqwdloremqdblqywdfdqwdloremqdblqywdfdqwdlo\n        remqdblqywdfdqwdloremqdb lqywdfdqwdloremqdblqywdfdqwdlor\n      </Text>\n    </View>\n  );\n}\n\n```",
      "html": "<h1 id=\"8.-modal\">8. Modal <a class=\"heading-anchor-permalink\" href=\"#8.-modal\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 1:17 AM</p>\n<p>RN core has <code>Modal</code></p>\n<h2 id=\"basic\">Basic <a class=\"heading-anchor-permalink\" href=\"#basic\">#</a></h2>\n<p>It’s just a wrapper for content.\nRenders on top of existing UI. Covers the entire screen.</p>\n<pre><code class=\"language-jsx\">import { Modal } from &quot;react-native&quot;;\n\n&lt;Modal\n  visible={false}\n\n  transparent // optional. Default false (background is hidden completely).\n  onShow={() =&gt; {}}\n  animationType=&quot;none&quot; // 'slide' | 'fade'\n&gt;\n\n&lt;/Modal&gt;\n</code></pre>\n<ul>\n<li><code>style</code> prop not available. To add background color, add a <code>View</code> inside with <code>flex=1</code> and <code>opacity=0.5</code> (anything &lt; 1) and move modal content inside it.</li>\n</ul>\n<h2 id=\"example\">Example <a class=\"heading-anchor-permalink\" href=\"#example\">#</a></h2>\n<p>Transparent background example.</p>\n<pre><code class=\"language-jsx\">import React, { useState } from &quot;react&quot;;\nimport { View, Modal, Button, Text } from &quot;react-native&quot;;\n\nexport default function App() {\n  const [showModal, setShowModal] = useState();\n  const toggleModal = () =&gt; setShowModal((_) =&gt; !_);\n\n  return (\n    &lt;View\n      style={{\n        flex: 1,\n        alignItems: &quot;center&quot;,\n        justifyContent: &quot;center&quot;,\n        gap: 100,\n      }}\n    &gt;\n      &lt;Button title=&quot;Open modal&quot; onPress={toggleModal} /&gt;\n\n      &lt;Modal visible={showModal} transparent&gt;\n        &lt;View\n          style={{\n            flex: 1,\n            backgroundColor: &quot;gold&quot;,\n            alignItems: &quot;center&quot;,\n            justifyContent: &quot;center&quot;,\n            opacity: 0.6,\n            gap: 80,\n          }}\n        &gt;\n          &lt;Button title=&quot;Close modal&quot; onPress={toggleModal} /&gt;\n        &lt;/View&gt;\n      &lt;/Modal&gt;\n\n      &lt;Text&gt;\n        loremqdblqywdfdqwdloremqdblqywdfdqwdloremqdblqywdfdqwdlo\n        remqdblqywdfdqwdloremqdblqywdfdqwdloremqdblqywdfdqwdlo\n        remqdblqywdfdqwdloremqdb lqywdfdqwdloremqdblqywdfdqwdlor\n      &lt;/Text&gt;\n    &lt;/View&gt;\n  );\n}\n\n</code></pre>\n",
      "id": 212
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/6-Input-Components/index.html",
      "content": "# 6. Input Components\nCreated Sat Dec 30, 2023 at 1:09 PM\n\nHand written notes done. See [OneNote](https://onedrive.live.com/redir?resid=1AFE2D221CFD3E54%21137&page=Edit&wd=target%286-inputs.one%7C0862ae07-818a-5a4c-8b46-eb8794b3033f%2F%29&wdorigin=717)\n\nHas just two input components - TextInput and Switch\n\n## Topics\n1. Introduction\n2. TextInput\n3. Building-a-Pretty-TextInput\n4. Extracting-the-Default-Styles\n5. Switch\n6. Picker\n7. Building-a-Custom-Picker\n8. Modal\n9. Showing-Picker-Items\n10. Handling-Selections",
      "html": "<h1 id=\"6.-input-components\">6. Input Components <a class=\"heading-anchor-permalink\" href=\"#6.-input-components\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:09 PM</p>\n<p>Hand written notes done. See <a href=\"https://onedrive.live.com/redir?resid=1AFE2D221CFD3E54%21137&amp;page=Edit&amp;wd=target%286-inputs.one%7C0862ae07-818a-5a4c-8b46-eb8794b3033f%2F%29&amp;wdorigin=717\">OneNote</a></p>\n<p>Has just two input components - TextInput and Switch</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>TextInput</li>\n<li>Building-a-Pretty-TextInput</li>\n<li>Extracting-the-Default-Styles</li>\n<li>Switch</li>\n<li>Picker</li>\n<li>Building-a-Custom-Picker</li>\n<li>Modal</li>\n<li>Showing-Picker-Items</li>\n<li>Handling-Selections</li>\n</ol>\n",
      "id": 213
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/7-Forms/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/7-Forms/index.html",
      "content": "# 7. Forms\nCreated Sat Dec 30, 2023 at 1:06 PM\n\nHand written notes done. See [OneNote](https://onedrive.live.com/redir?resid=1AFE2D221CFD3E54%21137&page=Edit&wd=target%287-forms.one%7C3df3c2cf-33e8-6746-a1f1-2d6d057a4b01%2F%29&wdorigin=717)\n\n## Topics\n1. Introduction\n2. Building-the-Login-Form\n3. Building-Better-Forms-with-Formik\n4. Form-Validation-with-Yup\n5. Building-the-ErrorMessage-Component\n6. The-Touched-State\n7. Building-the-Field-Component\n8. Building-the-SubmitButton-Component\n9. Building-the-Form-Component\n10. Organizing-Components\n12. Building-the-Listing-Edit-Screen\n13. Fixing-the-Placeholder-Color\n\n## Formik and Yup\n- Formik is available for RN\n- Yup can be used for validation. Works since it's just a JS validation library\n\n\n## Error message\nInstead of rendering an error message after every form component, i.e. coding the error message in the feature, just add an error UI in every input element. so only `error` prop needs to be set, in addition to `value` and `handleChange`.\n\n## Touched state\nWhen making a form, in addition to 'value', 'error' and 'handleChange'. Keep a 'touched' boolean state too (initially false).\n\nThis avoids the form showing errors when it loads first, which is an annoying feeling.\n\nWhen the form is initialized, don't show errors until the user has touched the input element once, i.e. touched is true. Of course, touched stays true ones it becomes true.\n\nTo set it, use `onBlur => setTouched(true)`",
      "html": "<h1 id=\"7.-forms\">7. Forms <a class=\"heading-anchor-permalink\" href=\"#7.-forms\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:06 PM</p>\n<p>Hand written notes done. See <a href=\"https://onedrive.live.com/redir?resid=1AFE2D221CFD3E54%21137&amp;page=Edit&amp;wd=target%287-forms.one%7C3df3c2cf-33e8-6746-a1f1-2d6d057a4b01%2F%29&amp;wdorigin=717\">OneNote</a></p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Building-the-Login-Form</li>\n<li>Building-Better-Forms-with-Formik</li>\n<li>Form-Validation-with-Yup</li>\n<li>Building-the-ErrorMessage-Component</li>\n<li>The-Touched-State</li>\n<li>Building-the-Field-Component</li>\n<li>Building-the-SubmitButton-Component</li>\n<li>Building-the-Form-Component</li>\n<li>Organizing-Components</li>\n<li>Building-the-Listing-Edit-Screen</li>\n<li>Fixing-the-Placeholder-Color</li>\n</ol>\n<h2 id=\"formik-and-yup\">Formik and Yup <a class=\"heading-anchor-permalink\" href=\"#formik-and-yup\">#</a></h2>\n<ul>\n<li>Formik is available for RN</li>\n<li>Yup can be used for validation. Works since it’s just a JS validation library</li>\n</ul>\n<h2 id=\"error-message\">Error message <a class=\"heading-anchor-permalink\" href=\"#error-message\">#</a></h2>\n<p>Instead of rendering an error message after every form component, i.e. coding the error message in the feature, just add an error UI in every input element. so only <code>error</code> prop needs to be set, in addition to <code>value</code> and <code>handleChange</code>.</p>\n<h2 id=\"touched-state\">Touched state <a class=\"heading-anchor-permalink\" href=\"#touched-state\">#</a></h2>\n<p>When making a form, in addition to ‘value’, ‘error’ and ‘handleChange’. Keep a ‘touched’ boolean state too (initially false).</p>\n<p>This avoids the form showing errors when it loads first, which is an annoying feeling.</p>\n<p>When the form is initialized, don’t show errors until the user has touched the input element once, i.e. touched is true. Of course, touched stays true ones it becomes true.</p>\n<p>To set it, use <code>onBlur =&gt; setTouched(true)</code></p>\n",
      "id": 214
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-1/8-Additional-Improvements/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-1/8-Additional-Improvements/index.html",
      "content": "# 8. Additional Improvements\nCreated Sat Dec 30, 2023 at 1:07 PM\n\nNothing new here. Some points about keeping various listItems but have one context-less list that takes them as prop.\n\nNode projects usually need a \"jsconfig.json\" file. Makes auto completes faster.\n```json\n{\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n## Topics\n1. Introduction\n2. Adding-Chevrons\n3. Handling-Long-Text\n4. Improving-the-Messages-Screen\n5. Fixing-the-Auto-Import-Issue\n6. Input-Components-with-Dynamic-Width\n7. Flexible-Architecture\n8. Building-the-CategoryPickerItem-Component\n9. Revisiting-Components-Names\n10. Custom-Snippets\n11. Course-Wrap-Up\n",
      "html": "<h1 id=\"8.-additional-improvements\">8. Additional Improvements <a class=\"heading-anchor-permalink\" href=\"#8.-additional-improvements\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:07 PM</p>\n<p>Nothing new here. Some points about keeping various listItems but have one context-less list that takes them as prop.</p>\n<p>Node projects usually need a “jsconfig.json” file. Makes auto completes faster.</p>\n<pre><code class=\"language-json\">{\n  &quot;exclude&quot;: [&quot;node_modules&quot;]\n}\n</code></pre>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Adding-Chevrons</li>\n<li>Handling-Long-Text</li>\n<li>Improving-the-Messages-Screen</li>\n<li>Fixing-the-Auto-Import-Issue</li>\n<li>Input-Components-with-Dynamic-Width</li>\n<li>Flexible-Architecture</li>\n<li>Building-the-CategoryPickerItem-Component</li>\n<li>Revisiting-Components-Names</li>\n<li>Custom-Snippets</li>\n<li>Course-Wrap-Up</li>\n</ol>\n",
      "id": 215
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/1-Native-feature-intro.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/1-Native-feature-intro.html",
      "content": "# 1. Native feature intro\nCreated Mon Dec 4, 2023 at 11:53 PM\n\n## Section info\n- Going to learn about native device features. Mostly how to access images\n- There are very few RN \"native features\" - `Alert`, `SoftKeyboard` etc. That's it.\n- Camera, Contacts, ImagePicker are not available in RN core. But libraries are available for them.\n- These libraries have native code and therefore require some platform wise setup (i.e. outside of npm). BTW, this setup is less compared to the past, due to the ['Autolinking'](https://github.com/react-native-community/cli/blob/main/docs/autolinking.md) feature of RNCLI.\n\n## What about Expo projects?\nExpo projects are supposed to be JS only projects - they have almost no native code in them, at-least accessible to the developer.\n\nIf you want to use a native feature in an expo, there are two possibilities:\n1. Expo has a library in its [SDK](https://docs.expo.dev/versions/latest/) that's enough for you. Nice, no extra work needed. Example - [ImagePicker](https://docs.expo.dev/versions/latest/sdk/imagepicker/)\n2. Expo doesn't have a library with a feature you want, but an external library is available. Since we're talking about native feature library here, there will be native code in it. There's choice but to eject from Expo. Hard to do, but important if your app uses native features heavily, or you want to ensure high scope of customization of native features. Example - ImagePicker, Contact, FileSystem, DocumentPicker etc.\n\n## Note about Expo native components\n- Every 'native' expo component has a compatibility table in docs, as well as extra steps that would be required when you eject from Expo.\n- Expo provides very good docs for native libs. And the library list keeps growing",
      "html": "<h1 id=\"1.-native-feature-intro\">1. Native feature intro <a class=\"heading-anchor-permalink\" href=\"#1.-native-feature-intro\">#</a></h1>\n<p>Created Mon Dec 4, 2023 at 11:53 PM</p>\n<h2 id=\"section-info\">Section info <a class=\"heading-anchor-permalink\" href=\"#section-info\">#</a></h2>\n<ul>\n<li>Going to learn about native device features. Mostly how to access images</li>\n<li>There are very few RN “native features” - <code>Alert</code>, <code>SoftKeyboard</code> etc. That’s it.</li>\n<li>Camera, Contacts, ImagePicker are not available in RN core. But libraries are available for them.</li>\n<li>These libraries have native code and therefore require some platform wise setup (i.e. outside of npm). BTW, this setup is less compared to the past, due to the <a href=\"https://github.com/react-native-community/cli/blob/main/docs/autolinking.md\">‘Autolinking’</a> feature of RNCLI.</li>\n</ul>\n<h2 id=\"what-about-expo-projects%3F\">What about Expo projects? <a class=\"heading-anchor-permalink\" href=\"#what-about-expo-projects%3F\">#</a></h2>\n<p>Expo projects are supposed to be JS only projects - they have almost no native code in them, at-least accessible to the developer.</p>\n<p>If you want to use a native feature in an expo, there are two possibilities:</p>\n<ol>\n<li>Expo has a library in its <a href=\"https://docs.expo.dev/versions/latest/\">SDK</a> that’s enough for you. Nice, no extra work needed. Example - <a href=\"https://docs.expo.dev/versions/latest/sdk/imagepicker/\">ImagePicker</a></li>\n<li>Expo doesn’t have a library with a feature you want, but an external library is available. Since we’re talking about native feature library here, there will be native code in it. There’s choice but to eject from Expo. Hard to do, but important if your app uses native features heavily, or you want to ensure high scope of customization of native features. Example - ImagePicker, Contact, FileSystem, DocumentPicker etc.</li>\n</ol>\n<h2 id=\"note-about-expo-native-components\">Note about Expo native components <a class=\"heading-anchor-permalink\" href=\"#note-about-expo-native-components\">#</a></h2>\n<ul>\n<li>Every ‘native’ expo component has a compatibility table in docs, as well as extra steps that would be required when you eject from Expo.</li>\n<li>Expo provides very good docs for native libs. And the library list keeps growing</li>\n</ul>\n",
      "id": 216
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/15-Getting-Location.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/15-Getting-Location.html",
      "content": "# 15. Getting Location\nCreated Tue Dec 5, 2023 at 12:38 AM\n\n[`expo-location`](https://docs.expo.dev/versions/latest/sdk/location/) library is available.\n\nUsage flow is the same as ImageLibrary - request, launch\n\n```jsx\nimport React from \"react\";\nimport * as Location from \"expo-location\";\nimport { Button, View } from \"react-native\";\n\nexport default function App() {\n  const permissionFlow = async () => {\n    const { granted } = await Location.requestForegroundPermissionsAsync(); // acceptable\n    // .requestBackgroundPermissionsAsync less private\n    \n    console.log(granted);\n  };\n\n  const locationFlow = async () => {\n    const result = await Location.getLastKnownPositionAsync(); // almost instant\n    // .getCurrentPositionAsync takes some time (~5 seconds)\n    \n    // coords.latitude, coords.longitude, coords.heading\n\n    console.log(result);\n    \n    const sample_result = {\n      coords: {\n        accuracy: 100,\n        altitude: 0,\n        altitudeAccuracy: 0,\n        heading: 0,\n        latitude: 37.4226711,\n        longitude: -122.0849872,\n        speed: 0,\n      },\n      mocked: false,\n      timestamp: 1701717475116,\n    };\n  };\n\n  return (\n    <View style={{ paddingTop: 100 }}>\n      <Button title=\"Permission flow\" onPress={permissionFlow} />\n      <Button title=\"Location flow\" onPress={locationFlow} />\n    </View>\n  );\n}\n```",
      "html": "<h1 id=\"15.-getting-location\">15. Getting Location <a class=\"heading-anchor-permalink\" href=\"#15.-getting-location\">#</a></h1>\n<p>Created Tue Dec 5, 2023 at 12:38 AM</p>\n<p><a href=\"https://docs.expo.dev/versions/latest/sdk/location/\"><code>expo-location</code></a> library is available.</p>\n<p>Usage flow is the same as ImageLibrary - request, launch</p>\n<pre><code class=\"language-jsx\">import React from &quot;react&quot;;\nimport * as Location from &quot;expo-location&quot;;\nimport { Button, View } from &quot;react-native&quot;;\n\nexport default function App() {\n  const permissionFlow = async () =&gt; {\n    const { granted } = await Location.requestForegroundPermissionsAsync(); // acceptable\n    // .requestBackgroundPermissionsAsync less private\n    \n    console.log(granted);\n  };\n\n  const locationFlow = async () =&gt; {\n    const result = await Location.getLastKnownPositionAsync(); // almost instant\n    // .getCurrentPositionAsync takes some time (~5 seconds)\n    \n    // coords.latitude, coords.longitude, coords.heading\n\n    console.log(result);\n    \n    const sample_result = {\n      coords: {\n        accuracy: 100,\n        altitude: 0,\n        altitudeAccuracy: 0,\n        heading: 0,\n        latitude: 37.4226711,\n        longitude: -122.0849872,\n        speed: 0,\n      },\n      mocked: false,\n      timestamp: 1701717475116,\n    };\n  };\n\n  return (\n    &lt;View style={{ paddingTop: 100 }}&gt;\n      &lt;Button title=&quot;Permission flow&quot; onPress={permissionFlow} /&gt;\n      &lt;Button title=&quot;Location flow&quot; onPress={locationFlow} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>\n",
      "id": 217
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/3-Image-pick-trial.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/3-Image-pick-trial.html",
      "content": "# 1. Image pick trial\nCreated Wed Nov 29, 2023 at 1:17 AM\n\n- [`expo-image-picker`](https://docs.expo.dev/versions/latest/sdk/imagepicker/#imagepickeroptions) allows image selection from camera and local storage\n\n## Permission via picker library\nThe ImagePicker library provides a static function that returns status of the permission. It's async and results can vary depending upon what the user selected for permissions.\n\nThere are two steps:\n1. `request*` - this is done before any native op. The permission status is returned. If permission was never asked, the user gets a user prompt to select permission. If permission was answered, it will be available in the future without a prompt. If permission is false, show an alert. Otherwise continue.\n2. `launch*` - assuming permission is given, this function launches the native feature flow. At the end of the flow, one received URI or other data pertaining to the flow.\n### Camera\n```jsx\nimport React from \"react\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { Button, View } from \"react-native\";\n\nexport default function App() {\n  const permissionFlow = async () => {\n    const { granted } = await ImagePicker.requestCameraPermissionsAsync();\n    console.log(granted);\n  };\n\n  const cameraFlow = async () => {\n    const { assets, canceled } = await ImagePicker.launchCameraAsync();\n    const { uri, height, width } = assets[0];\n    console.log(uri, height, width);\n  };\n\n  return (\n    <View>\n      <Button title=\"Permission flow\" onPress={permissionFlow} />\n      <Button title=\"Camera flow\" onPress={cameraFlow} />\n    </View>\n  );\n}\n```\n\n\n### Image Library (aka Gallery)\n```jsx\nimport React from \"react\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { Button, View } from \"react-native\";\n\nexport default function App() {\n  const permissionFlow = async () => {\n    const { granted } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    console.log(granted);\n  };\n\n  const imagePickerFlow = async () => {\n    const { assets, canceled = false } = await ImagePicker.launchImageLibraryAsync({\n      allowsMultipleSelection: true, // default false\n    });\n    console.log(assets);\n    const { uri, height, width } = assets[0];\n    console.log(uri, height, width);\n  };\n\n  return (\n    <View style={{ paddingTop: 100 }}>\n      <Button title=\"Permission flow\" onPress={permissionFlow} />\n      <Button title=\"imagePickerFlow flow\" onPress={imagePickerFlow} />\n    </View>\n  );\n}\n```\n\n\n## A note about Permissions in Expo\nExpo used to have a global `expo-permissions` library that could ask for any permission. But this has been deprecated. Permissions are now available in the respective library - ImagePicker, Audio, MediaLibrary.\n\nAll these have the same code flow - `.request*` and `.launch*`.\n\n## Exercise - build scrollable image picker\nhttps://github.com/exemplar-codes/DoneWithIt/commit/6efcbdaf20b1a92821b626ae570a1bc493f960c2\n\nLearnt:\n1. ImagePicker permission function\n2. Structure of added assets and how to display them. The imp thing is `uri`\n3. Learnt about `BackHandler` API, applicable for Android only. Has add listener API. Does take into account multiple presses (I didn't consider this though).\n4. ScrollView - height gotcha, onScroll, snapToOffset, ref.current.scrollToEnd etc\n\nBranch: https://github.com/exemplar-codes/DoneWithIt/tree/rn2/image-form-exercise",
      "html": "<h1 id=\"1.-image-pick-trial\">1. Image pick trial <a class=\"heading-anchor-permalink\" href=\"#1.-image-pick-trial\">#</a></h1>\n<p>Created Wed Nov 29, 2023 at 1:17 AM</p>\n<ul>\n<li><a href=\"https://docs.expo.dev/versions/latest/sdk/imagepicker/#imagepickeroptions\"><code>expo-image-picker</code></a> allows image selection from camera and local storage</li>\n</ul>\n<h2 id=\"permission-via-picker-library\">Permission via picker library <a class=\"heading-anchor-permalink\" href=\"#permission-via-picker-library\">#</a></h2>\n<p>The ImagePicker library provides a static function that returns status of the permission. It’s async and results can vary depending upon what the user selected for permissions.</p>\n<p>There are two steps:</p>\n<ol>\n<li><code>request*</code> - this is done before any native op. The permission status is returned. If permission was never asked, the user gets a user prompt to select permission. If permission was answered, it will be available in the future without a prompt. If permission is false, show an alert. Otherwise continue.</li>\n<li><code>launch*</code> - assuming permission is given, this function launches the native feature flow. At the end of the flow, one received URI or other data pertaining to the flow.</li>\n</ol>\n<h3 id=\"camera\">Camera <a class=\"heading-anchor-permalink\" href=\"#camera\">#</a></h3>\n<pre><code class=\"language-jsx\">import React from &quot;react&quot;;\nimport * as ImagePicker from &quot;expo-image-picker&quot;;\nimport { Button, View } from &quot;react-native&quot;;\n\nexport default function App() {\n  const permissionFlow = async () =&gt; {\n    const { granted } = await ImagePicker.requestCameraPermissionsAsync();\n    console.log(granted);\n  };\n\n  const cameraFlow = async () =&gt; {\n    const { assets, canceled } = await ImagePicker.launchCameraAsync();\n    const { uri, height, width } = assets[0];\n    console.log(uri, height, width);\n  };\n\n  return (\n    &lt;View&gt;\n      &lt;Button title=&quot;Permission flow&quot; onPress={permissionFlow} /&gt;\n      &lt;Button title=&quot;Camera flow&quot; onPress={cameraFlow} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>\n<h3 id=\"image-library-(aka-gallery)\">Image Library (aka Gallery) <a class=\"heading-anchor-permalink\" href=\"#image-library-(aka-gallery)\">#</a></h3>\n<pre><code class=\"language-jsx\">import React from &quot;react&quot;;\nimport * as ImagePicker from &quot;expo-image-picker&quot;;\nimport { Button, View } from &quot;react-native&quot;;\n\nexport default function App() {\n  const permissionFlow = async () =&gt; {\n    const { granted } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    console.log(granted);\n  };\n\n  const imagePickerFlow = async () =&gt; {\n    const { assets, canceled = false } = await ImagePicker.launchImageLibraryAsync({\n      allowsMultipleSelection: true, // default false\n    });\n    console.log(assets);\n    const { uri, height, width } = assets[0];\n    console.log(uri, height, width);\n  };\n\n  return (\n    &lt;View style={{ paddingTop: 100 }}&gt;\n      &lt;Button title=&quot;Permission flow&quot; onPress={permissionFlow} /&gt;\n      &lt;Button title=&quot;imagePickerFlow flow&quot; onPress={imagePickerFlow} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>\n<h2 id=\"a-note-about-permissions-in-expo\">A note about Permissions in Expo <a class=\"heading-anchor-permalink\" href=\"#a-note-about-permissions-in-expo\">#</a></h2>\n<p>Expo used to have a global <code>expo-permissions</code> library that could ask for any permission. But this has been deprecated. Permissions are now available in the respective library - ImagePicker, Audio, MediaLibrary.</p>\n<p>All these have the same code flow - <code>.request*</code> and <code>.launch*</code>.</p>\n<h2 id=\"exercise---build-scrollable-image-picker\">Exercise - build scrollable image picker <a class=\"heading-anchor-permalink\" href=\"#exercise---build-scrollable-image-picker\">#</a></h2>\n<p><a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/6efcbdaf20b1a92821b626ae570a1bc493f960c2\">https://github.com/exemplar-codes/DoneWithIt/commit/6efcbdaf20b1a92821b626ae570a1bc493f960c2</a></p>\n<p>Learnt:</p>\n<ol>\n<li>ImagePicker permission function</li>\n<li>Structure of added assets and how to display them. The imp thing is <code>uri</code></li>\n<li>Learnt about <code>BackHandler</code> API, applicable for Android only. Has add listener API. Does take into account multiple presses (I didn’t consider this though).</li>\n<li>ScrollView - height gotcha, onScroll, snapToOffset, ref.current.scrollToEnd etc</li>\n</ol>\n<p>Branch: <a href=\"https://github.com/exemplar-codes/DoneWithIt/tree/rn2/image-form-exercise\">https://github.com/exemplar-codes/DoneWithIt/tree/rn2/image-form-exercise</a></p>\n",
      "id": 218
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/2-Native-features/index.html",
      "content": "# 2. Native features\nCreated Sat Dec 30, 2023 at 1:08 PM\n\n## Topics\n1. Introduction\n2. Device Features\n3. Using ImagePicker\n4. Requesting Permissions\n5. Permissions Module\n6. Accessing the Library\n7. Exercises\n8. Building ImageInput- Layout\n9. Building ImageInput- Touches\n10. Building ImageInputList- Basics\n11. Building ImageInputList- Scrolling\n12. Building FormImagePicker\n13. Improving ListingEditScreen\n14. Getting the User's Location\n15. Building Custom Hooks\n16. A Quick Note",
      "html": "<h1 id=\"2.-native-features\">2. Native features <a class=\"heading-anchor-permalink\" href=\"#2.-native-features\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:08 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Device Features</li>\n<li>Using ImagePicker</li>\n<li>Requesting Permissions</li>\n<li>Permissions Module</li>\n<li>Accessing the Library</li>\n<li>Exercises</li>\n<li>Building ImageInput- Layout</li>\n<li>Building ImageInput- Touches</li>\n<li>Building ImageInputList- Basics</li>\n<li>Building ImageInputList- Scrolling</li>\n<li>Building FormImagePicker</li>\n<li>Improving ListingEditScreen</li>\n<li>Getting the User’s Location</li>\n<li>Building Custom Hooks</li>\n<li>A Quick Note</li>\n</ol>\n",
      "id": 219
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/1-Basic-code.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/1-Basic-code.html",
      "content": "# 1. Basic code\nCreated Sat Dec 30, 2023 at 1:54 PM\n\nCode repo: https://github.com/exemplar-codes/DoneWithIt/tree/11-navigation \n## Stack Navigator + general structure\n```jsx\nconst { createStackNavigator } = require(\"@react-navigation/stack\");\n\nconst Stack = createStackNavigator();\n\nfunction MyRootNavigator() {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"\"\n      screenOptions={{}} /* lowest priority */\n    >\n      <Stack.Screen\n        name=\"\"\n        component={<SimpleReactComponent /> | <SomeNavigatorComponent />}\n        options={{}} // highest priority, esp than Navigator.screenOptions\n      />\n      {/* ... */}\n      <Stack.Group screenOptions={{}} /* medium priority */>\n        <Stack.Screen />\n        <Stack.Screen />\n        <Stack.Screen />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n```\n\n\n## Stack ops\n1. .navigate (aka replace)\n\t1. Same - nothing happens\n\t2. Different (not in stack) - push\n\t3. Different (in stack) - goes to first occurence and trashes ones at the end.\n2. Push\n\t1. Same - push\n\t2. Different (not in stack) - push\n\t3. Different (in stack) - push.\n\tComment - simplest\n\n## Programmatic navigation\ni.e. by calling function\n\n### For a screen component\nBy \"screen component\", I mean one that's passed as a <Screen /> directly to a navigator.\n```jsx\n// screen component inside a navigator\nfunction MyScreen(props) {\n  const { navigation, route } = props; // provided by the library\n\n  // navigate action types\n  navigation.navigate;\n  navigation.push;\n  navigation.pop;\n\n  // navigation action variations\n  navigation.navigate(\"ScreenName\");\n  navigation.navigate(\"ScreenName\", { anyId: 2 }); // navigate and pass data forward\n  navigation.navigate(\"NavigatorName\"); // first screen of some/self navigator\n  navigation.navigate(\"NavigatorName\", { screen: \"ScreenName\" }); // nested navigation\n  //some screen in some navigator\n\n  // get data passed during navigation (at destination code)\n  route.params.anyId;\n}\n```\n\n### For a non-screen component\nnon-screen meaning it's far below the navigator or screen.\nNow, RNav does not pass `navigation` and `route` props only till the 1st level.\n\nSo, for such non-screen components, use the hooks\n\n```jsx\nconst navigation = useNavigation(); // get navigation object\nconst route = useRoute(); // get passed route (at destination)\n```\n",
      "html": "<h1 id=\"1.-basic-code\">1. Basic code <a class=\"heading-anchor-permalink\" href=\"#1.-basic-code\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:54 PM</p>\n<p>Code repo: <a href=\"https://github.com/exemplar-codes/DoneWithIt/tree/11-navigation\">https://github.com/exemplar-codes/DoneWithIt/tree/11-navigation</a></p>\n<h2 id=\"stack-navigator-%2B-general-structure\">Stack Navigator + general structure <a class=\"heading-anchor-permalink\" href=\"#stack-navigator-%2B-general-structure\">#</a></h2>\n<pre><code class=\"language-jsx\">const { createStackNavigator } = require(&quot;@react-navigation/stack&quot;);\n\nconst Stack = createStackNavigator();\n\nfunction MyRootNavigator() {\n  return (\n    &lt;Stack.Navigator\n      initialRouteName=&quot;&quot;\n      screenOptions={{}} /* lowest priority */\n    &gt;\n      &lt;Stack.Screen\n        name=&quot;&quot;\n        component={&lt;SimpleReactComponent /&gt; | &lt;SomeNavigatorComponent /&gt;}\n        options={{}} // highest priority, esp than Navigator.screenOptions\n      /&gt;\n      {/* ... */}\n      &lt;Stack.Group screenOptions={{}} /* medium priority */&gt;\n        &lt;Stack.Screen /&gt;\n        &lt;Stack.Screen /&gt;\n        &lt;Stack.Screen /&gt;\n      &lt;/Stack.Group&gt;\n    &lt;/Stack.Navigator&gt;\n  );\n}\n</code></pre>\n<h2 id=\"stack-ops\">Stack ops <a class=\"heading-anchor-permalink\" href=\"#stack-ops\">#</a></h2>\n<ol>\n<li>.navigate (aka replace)\n<ol>\n<li>Same - nothing happens</li>\n<li>Different (not in stack) - push</li>\n<li>Different (in stack) - goes to first occurence and trashes ones at the end.</li>\n</ol>\n</li>\n<li>Push\n<ol>\n<li>Same - push</li>\n<li>Different (not in stack) - push</li>\n<li>Different (in stack) - push.\nComment - simplest</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"programmatic-navigation\">Programmatic navigation <a class=\"heading-anchor-permalink\" href=\"#programmatic-navigation\">#</a></h2>\n<p>i.e. by calling function</p>\n<h3 id=\"for-a-screen-component\">For a screen component <a class=\"heading-anchor-permalink\" href=\"#for-a-screen-component\">#</a></h3>\n<p>By “screen component”, I mean one that’s passed as a <Screen /> directly to a navigator.</p>\n<pre><code class=\"language-jsx\">// screen component inside a navigator\nfunction MyScreen(props) {\n  const { navigation, route } = props; // provided by the library\n\n  // navigate action types\n  navigation.navigate;\n  navigation.push;\n  navigation.pop;\n\n  // navigation action variations\n  navigation.navigate(&quot;ScreenName&quot;);\n  navigation.navigate(&quot;ScreenName&quot;, { anyId: 2 }); // navigate and pass data forward\n  navigation.navigate(&quot;NavigatorName&quot;); // first screen of some/self navigator\n  navigation.navigate(&quot;NavigatorName&quot;, { screen: &quot;ScreenName&quot; }); // nested navigation\n  //some screen in some navigator\n\n  // get data passed during navigation (at destination code)\n  route.params.anyId;\n}\n</code></pre>\n<h3 id=\"for-a-non-screen-component\">For a non-screen component <a class=\"heading-anchor-permalink\" href=\"#for-a-non-screen-component\">#</a></h3>\n<p>non-screen meaning it’s far below the navigator or screen.\nNow, RNav does not pass <code>navigation</code> and <code>route</code> props only till the 1st level.</p>\n<p>So, for such non-screen components, use the hooks</p>\n<pre><code class=\"language-jsx\">const navigation = useNavigation(); // get navigation object\nconst route = useRoute(); // get passed route (at destination)\n</code></pre>\n",
      "id": 220
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/2-Rules.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/2-Rules.html",
      "content": "# 2. Rules\nCreated Sat Dec 30, 2023 at 1:33 PM\n\n1. Navigation nature is guaranteed only within the navigator.\n2. Each navigator must be a component, the name of this component will be the name (string) of the navigator.\n3. Each child of navigator has to be a screen. If a child is a navigator, it will be registered as a screen with component prop being the nested navigator component.\n4. Groups are meant for concise coding of header variations. If Groups construct didn't exist, mere difference of header would have necessitated the need to create a new navigator, and code for navigation would be cumbersome, even though the screens are semantically related but just differ in the header.\n5. A navigator specifies header for all* screens under it. * meaning all direct (since groups are possible).\n6. `options` callback prop on <Screen /> or <Group /> have the same value as if it were inside a Screen. What this means - that headerUI is semantically meant to be a component inside the screen. *This rule holds for other navigators too*\n7. Navigator level header setting are actually an after thought, and are used if all screens have the same styling.\n",
      "html": "<h1 id=\"2.-rules\">2. Rules <a class=\"heading-anchor-permalink\" href=\"#2.-rules\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:33 PM</p>\n<ol>\n<li>Navigation nature is guaranteed only within the navigator.</li>\n<li>Each navigator must be a component, the name of this component will be the name (string) of the navigator.</li>\n<li>Each child of navigator has to be a screen. If a child is a navigator, it will be registered as a screen with component prop being the nested navigator component.</li>\n<li>Groups are meant for concise coding of header variations. If Groups construct didn’t exist, mere difference of header would have necessitated the need to create a new navigator, and code for navigation would be cumbersome, even though the screens are semantically related but just differ in the header.</li>\n<li>A navigator specifies header for all* screens under it. * meaning all direct (since groups are possible).</li>\n<li><code>options</code> callback prop on <Screen /> or <Group /> have the same value as if it were inside a Screen. What this means - that headerUI is semantically meant to be a component inside the screen. <em>This rule holds for other navigators too</em></li>\n<li>Navigator level header setting are actually an after thought, and are used if all screens have the same styling.</li>\n</ol>\n",
      "id": 221
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/3-Tab-navigators.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/3-Tab-navigators.html",
      "content": "# 3. Tab navigators\nCreated Sat Dec 30, 2023 at 1:54 PM\n\nThese are another type of navigators.\nThey render at the bottom as a row. With each cell being clickable.\n\n- Tabs have independent state, which persists across \"jumps\", there's no pop or destroy action since it's not a stack. There's no duplicates (and traverse back via back button) either.\n- Navigation props and programmatic navigations happens exactly like in Stack Navigator\n- Tabs usually mean addition of a UI feature where the navigator itself is also visible (bottom in this case). This is different from the StackNavigator, which had no navigation UI, and just presented complete screens.\n- The style (cell style) config is a single prop on the navigator itself. There's no <Screen /> wise prop styling.\n- The specific tab config (like icon) is specified on the TabScreen, and callback type prop ares still available on Screens for dynamic stuff like title, badge count. This callback also contains \"recommended\" UI values like `size`, `color` that may be used as is.",
      "html": "<h1 id=\"3.-tab-navigators\">3. Tab navigators <a class=\"heading-anchor-permalink\" href=\"#3.-tab-navigators\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:54 PM</p>\n<p>These are another type of navigators.\nThey render at the bottom as a row. With each cell being clickable.</p>\n<ul>\n<li>Tabs have independent state, which persists across “jumps”, there’s no pop or destroy action since it’s not a stack. There’s no duplicates (and traverse back via back button) either.</li>\n<li>Navigation props and programmatic navigations happens exactly like in Stack Navigator</li>\n<li>Tabs usually mean addition of a UI feature where the navigator itself is also visible (bottom in this case). This is different from the StackNavigator, which had no navigation UI, and just presented complete screens.</li>\n<li>The style (cell style) config is a single prop on the navigator itself. There’s no <Screen /> wise prop styling.</li>\n<li>The specific tab config (like icon) is specified on the TabScreen, and callback type prop ares still available on Screens for dynamic stuff like title, badge count. This callback also contains “recommended” UI values like <code>size</code>, <code>color</code> that may be used as is.</li>\n</ul>\n",
      "id": 222
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/4-Route-enums-in-React-Native.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/4-Route-enums-in-React-Native.html",
      "content": "# 4. Route enums in React Native\nCreated Sat Dec 30, 2023 at 1:54 PM\n\n## Why enums\nUsing literal values for navigation code is a bad idea, because:\n1. There's scope for typos\n2. Even if there are no typos, one has to do \"complete\" testing to make sure everything works\n3. Refactoring is hard in the future.\n4. No auto-complete, too many manual lookups. Also, scope for error.\n\nSo, in addition to route markup (of navigators and screens), one should maintain a large POJO of just literals. And use this enum in navigation and initialRoute props.\n\n## About nesting\n1. Try to keep nesting to a minimum. Feature wise unrelated screens on the same navigator are fine, instead of feature based nested navigators. \n2. Of course, if the stack navigator is of a different type, then a dedicated navigator in a file of its own is fine.\n\n## Enum structure\nIn a routes enum structure, there are 3 goals - uniqueness of keys, minimize manual lookup and ease of use in app code.\n\n1. For uniqueness - I mean uniqueness of navigable entities (screens). create a linear object with keys and values identical. or Better, create variables one below the other, with name and value identical. In both cases, the editor will let you know about duplicates\n2. Minimize manual lookup: first of all, what lookups are we talking about in a route structure? Parent and children are two possibilities right. Those are two pieces of data.  \n\t1. We know the self entity (whose parent or child we're finding) but still represent it to make sure we always use the same terminal key for navigation. `ROUTES.x.y.....screen`\n\t2. The value of this key will be an object  as we'll be creating an object here (2 pieces of data already). So keys are `screen`, `stackName`, `stack`.\n\t3. `base` key - Additionally if the entity is a navigator, add a `base` string, for use in `initialRouteName` in the markup of the same navigator. So if base changes, we only have to change this enum file. Don't use `base` in app code.\n\t4. `base` key - for simple screens, this key should be absent. Appearing/not-appearing in auto-complete is also helpful to check if current path is a simple screen or not. Lookup avoided.\n3. Ease of usage - for usage with autocompletion we need an object (array won't do), so make the exported structure is a single object, and it uses the unique keys we created.\n\nCon (not really): person has to check `stack`, `screen` and `navigator` below when a new screen is added. But that's a localized one time effort. Much better each member of the team having to do a lookup of the tree for each .navigate they do.\n\nIdea example:\n```js\n// any navigable thing - be it navigator or screen\n// linear object - for global uniqueness, and future refactorablity\n// or one variable declaration at a line (uniquess should be identified)\n//\n// Note: don't export, only for unqiueness\nconst ENTITIES = {\n  entity1: 'entity1',\n};\n// OR (better, avoid [] and . in ROUTES)\nconst ENTITY1 = 'entity1';\nconst ENTITY2 = 'entity2';\n\n\n// potentially nested objected\n// all right side values will be an entity\nexport const ROUTES = {\n  [ENTITY1]: {\n    // optional\n    screen: [ENTITY1], // self. always there. Be it screen or navigator. Ik, duplicate, but can't do anything here. And dynamic generation will break autocompletion\n    stackName: \"\", // parent stack navigator\n    \n    stack: {}, // own stack (children)\n    // (below), value is an entity from inside `stack` that is the preferred stack screen\n    // will not show up in autocomplete, indicating simple screen\n    // we avoided a manual lookup\n    base: '', // present only if `stack` is absent. I am a simple screen.\n  },\n};\n```\n\nReal example:\n```js\n// lowercase is fine too, since we're not exporting these\n// Logged in?\nconst PUBLIC = \"PUBLIC\";\nconst PRIVATE = \"PRIVATE\";\n\n// Cars\nconst CARS = \"CARS\";\nconst MY_CARS = \"CARS\";\nconst INCOMPLETE_DRIVES = \"INCOMPLETE_DRIVES\";\nconst ACTIVATE_CAR = \"ACTIVATE_CAR\";\n\n// Profile\nconst PROFILE = \"PROFILE\";\nconst MY_PROFILE = \"MY_PROFILE\";\nconst MY_DETAILS = \"MY_DETAILS\";\nconst DRIVER_HANDBOOK = \"DRIVER_HANDBOOK\";\n\n// Login\nconst LOGIN = \"LOGIN\";\nconst PASSWORD = \"PASSWORD\";\nconst FORGOT_PASSWORD = \"FORGOT_PASSWORD\";\nconst RESET_PASSWORD = \"RESET_PASSWORD\";\nconst MFA = \"MFA\";\n\nconst ROUTES = {\n  [PRIVATE]: {\n    [CARS]: {\n      screen: [CARS], // screen (actually a navigator)\n      stackName: [PRIVATE], // parent stack\n      stack: {\n        [MY_CARS]: {\n          screen: [MY_CARS], // a simple screen this time (leaf)\n          stackName: [CARS],\n        },\n        [INCOMPLETE_DRIVES]: {\n          screen: [INCOMPLETE_DRIVES],\n          stackName: [CARS],\n        },\n        [ACTIVATE_CAR]: {\n          screen: [ACTIVATE_CAR],\n          stackName: [CARS],\n        },\n      },\n      base: [MY_CARS],\n    },\n    [PROFILE]: {\n      // self properties\n      screen: [PROFILE], // screen (actually a navigator)\n      stackName: [PRIVATE], // parent stack\n\n      // nested stack\n      stack: {\n        [MY_PROFILE]: {\n          // same structure - parent stack, screen\n          screen: [MY_PROFILE],\n          stackName: [PROFILE],\n        },\n        [MY_DETAILS]: {\n          screen: [MY_DETAILS],\n          stackName: [PROFILE],\n        },\n        [DRIVER_HANDBOOK]: {\n          screen: [DRIVER_HANDBOOK],\n          stackName: [PROFILE],\n        },\n      },\n      base: [MY_PROFILE],\n    },\n  },\n  [PUBLIC]: {\n    [LOGIN]: {\n      screen: [LOGIN],\n      stackName: [PUBLIC],\n      // stack, base both missing for simple screen\n    },\n    [PASSWORD]: {\n      screen: [PASSWORD],\n      stackName: [PUBLIC],\n    },\n    [FORGOT_PASSWORD]: {\n      screen: [FORGOT_PASSWORD],\n      stackName: [PUBLIC],\n    },\n    [RESET_PASSWORD]: {\n      screen: [RESET_PASSWORD],\n      stackName: [PUBLIC],\n    },\n    [MFA]: {\n      screen: [MFA],\n      stackName: [PUBLIC],\n    },\n  },\n};\n```\n\n## Conclusion\nBTW, use these enums in the markup. I spoke about markup first since it's build in to React navigation, but markup according to me comes after enum is ready.",
      "html": "<h1 id=\"4.-route-enums-in-react-native\">4. Route enums in React Native <a class=\"heading-anchor-permalink\" href=\"#4.-route-enums-in-react-native\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:54 PM</p>\n<h2 id=\"why-enums\">Why enums <a class=\"heading-anchor-permalink\" href=\"#why-enums\">#</a></h2>\n<p>Using literal values for navigation code is a bad idea, because:</p>\n<ol>\n<li>There’s scope for typos</li>\n<li>Even if there are no typos, one has to do “complete” testing to make sure everything works</li>\n<li>Refactoring is hard in the future.</li>\n<li>No auto-complete, too many manual lookups. Also, scope for error.</li>\n</ol>\n<p>So, in addition to route markup (of navigators and screens), one should maintain a large POJO of just literals. And use this enum in navigation and initialRoute props.</p>\n<h2 id=\"about-nesting\">About nesting <a class=\"heading-anchor-permalink\" href=\"#about-nesting\">#</a></h2>\n<ol>\n<li>Try to keep nesting to a minimum. Feature wise unrelated screens on the same navigator are fine, instead of feature based nested navigators.</li>\n<li>Of course, if the stack navigator is of a different type, then a dedicated navigator in a file of its own is fine.</li>\n</ol>\n<h2 id=\"enum-structure\">Enum structure <a class=\"heading-anchor-permalink\" href=\"#enum-structure\">#</a></h2>\n<p>In a routes enum structure, there are 3 goals - uniqueness of keys, minimize manual lookup and ease of use in app code.</p>\n<ol>\n<li>For uniqueness - I mean uniqueness of navigable entities (screens). create a linear object with keys and values identical. or Better, create variables one below the other, with name and value identical. In both cases, the editor will let you know about duplicates</li>\n<li>Minimize manual lookup: first of all, what lookups are we talking about in a route structure? Parent and children are two possibilities right. Those are two pieces of data.\n<ol>\n<li>We know the self entity (whose parent or child we’re finding) but still represent it to make sure we always use the same terminal key for navigation. <code>ROUTES.x.y.....screen</code></li>\n<li>The value of this key will be an object  as we’ll be creating an object here (2 pieces of data already). So keys are <code>screen</code>, <code>stackName</code>, <code>stack</code>.</li>\n<li><code>base</code> key - Additionally if the entity is a navigator, add a <code>base</code> string, for use in <code>initialRouteName</code> in the markup of the same navigator. So if base changes, we only have to change this enum file. Don’t use <code>base</code> in app code.</li>\n<li><code>base</code> key - for simple screens, this key should be absent. Appearing/not-appearing in auto-complete is also helpful to check if current path is a simple screen or not. Lookup avoided.</li>\n</ol>\n</li>\n<li>Ease of usage - for usage with autocompletion we need an object (array won’t do), so make the exported structure is a single object, and it uses the unique keys we created.</li>\n</ol>\n<p>Con (not really): person has to check <code>stack</code>, <code>screen</code> and <code>navigator</code> below when a new screen is added. But that’s a localized one time effort. Much better each member of the team having to do a lookup of the tree for each .navigate they do.</p>\n<p>Idea example:</p>\n<pre><code class=\"language-js\">// any navigable thing - be it navigator or screen\n// linear object - for global uniqueness, and future refactorablity\n// or one variable declaration at a line (uniquess should be identified)\n//\n// Note: don't export, only for unqiueness\nconst ENTITIES = {\n  entity1: 'entity1',\n};\n// OR (better, avoid [] and . in ROUTES)\nconst ENTITY1 = 'entity1';\nconst ENTITY2 = 'entity2';\n\n\n// potentially nested objected\n// all right side values will be an entity\nexport const ROUTES = {\n  [ENTITY1]: {\n    // optional\n    screen: [ENTITY1], // self. always there. Be it screen or navigator. Ik, duplicate, but can't do anything here. And dynamic generation will break autocompletion\n    stackName: &quot;&quot;, // parent stack navigator\n    \n    stack: {}, // own stack (children)\n    // (below), value is an entity from inside `stack` that is the preferred stack screen\n    // will not show up in autocomplete, indicating simple screen\n    // we avoided a manual lookup\n    base: '', // present only if `stack` is absent. I am a simple screen.\n  },\n};\n</code></pre>\n<p>Real example:</p>\n<pre><code class=\"language-js\">// lowercase is fine too, since we're not exporting these\n// Logged in?\nconst PUBLIC = &quot;PUBLIC&quot;;\nconst PRIVATE = &quot;PRIVATE&quot;;\n\n// Cars\nconst CARS = &quot;CARS&quot;;\nconst MY_CARS = &quot;CARS&quot;;\nconst INCOMPLETE_DRIVES = &quot;INCOMPLETE_DRIVES&quot;;\nconst ACTIVATE_CAR = &quot;ACTIVATE_CAR&quot;;\n\n// Profile\nconst PROFILE = &quot;PROFILE&quot;;\nconst MY_PROFILE = &quot;MY_PROFILE&quot;;\nconst MY_DETAILS = &quot;MY_DETAILS&quot;;\nconst DRIVER_HANDBOOK = &quot;DRIVER_HANDBOOK&quot;;\n\n// Login\nconst LOGIN = &quot;LOGIN&quot;;\nconst PASSWORD = &quot;PASSWORD&quot;;\nconst FORGOT_PASSWORD = &quot;FORGOT_PASSWORD&quot;;\nconst RESET_PASSWORD = &quot;RESET_PASSWORD&quot;;\nconst MFA = &quot;MFA&quot;;\n\nconst ROUTES = {\n  [PRIVATE]: {\n    [CARS]: {\n      screen: [CARS], // screen (actually a navigator)\n      stackName: [PRIVATE], // parent stack\n      stack: {\n        [MY_CARS]: {\n          screen: [MY_CARS], // a simple screen this time (leaf)\n          stackName: [CARS],\n        },\n        [INCOMPLETE_DRIVES]: {\n          screen: [INCOMPLETE_DRIVES],\n          stackName: [CARS],\n        },\n        [ACTIVATE_CAR]: {\n          screen: [ACTIVATE_CAR],\n          stackName: [CARS],\n        },\n      },\n      base: [MY_CARS],\n    },\n    [PROFILE]: {\n      // self properties\n      screen: [PROFILE], // screen (actually a navigator)\n      stackName: [PRIVATE], // parent stack\n\n      // nested stack\n      stack: {\n        [MY_PROFILE]: {\n          // same structure - parent stack, screen\n          screen: [MY_PROFILE],\n          stackName: [PROFILE],\n        },\n        [MY_DETAILS]: {\n          screen: [MY_DETAILS],\n          stackName: [PROFILE],\n        },\n        [DRIVER_HANDBOOK]: {\n          screen: [DRIVER_HANDBOOK],\n          stackName: [PROFILE],\n        },\n      },\n      base: [MY_PROFILE],\n    },\n  },\n  [PUBLIC]: {\n    [LOGIN]: {\n      screen: [LOGIN],\n      stackName: [PUBLIC],\n      // stack, base both missing for simple screen\n    },\n    [PASSWORD]: {\n      screen: [PASSWORD],\n      stackName: [PUBLIC],\n    },\n    [FORGOT_PASSWORD]: {\n      screen: [FORGOT_PASSWORD],\n      stackName: [PUBLIC],\n    },\n    [RESET_PASSWORD]: {\n      screen: [RESET_PASSWORD],\n      stackName: [PUBLIC],\n    },\n    [MFA]: {\n      screen: [MFA],\n      stackName: [PUBLIC],\n    },\n  },\n};\n</code></pre>\n<h2 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h2>\n<p>BTW, use these enums in the markup. I spoke about markup first since it’s build in to React navigation, but markup according to me comes after enum is ready.</p>\n",
      "id": 223
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/3-Navigation/index.html",
      "content": "# 3. Navigation\nCreated Sat Dec 30, 2023 at 1:28 PM\n\n## Topics\n1. Introduction\n2. Installing React Navigation\n3. Stack Navigator\n4. Navigating Between Screens\n5. Passing Parameters to Routes\n6. Setting Screen Titles\n7. Customizing Headers\n8. Creating a TabNavigator\n9. Customizing Tabs\n10. Nesting Navigators\n11. Exercises\n12. Building AuthNavigator\n13. Navigation Theme\n14. Building AppNavigator\n15. Building FeedNavigator\n16. Building AccountNavigator\n17. Beautifying the Tabs\n18. Refactoring Routes",
      "html": "<h1 id=\"3.-navigation\">3. Navigation <a class=\"heading-anchor-permalink\" href=\"#3.-navigation\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:28 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Installing React Navigation</li>\n<li>Stack Navigator</li>\n<li>Navigating Between Screens</li>\n<li>Passing Parameters to Routes</li>\n<li>Setting Screen Titles</li>\n<li>Customizing Headers</li>\n<li>Creating a TabNavigator</li>\n<li>Customizing Tabs</li>\n<li>Nesting Navigators</li>\n<li>Exercises</li>\n<li>Building AuthNavigator</li>\n<li>Navigation Theme</li>\n<li>Building AppNavigator</li>\n<li>Building FeedNavigator</li>\n<li>Building AccountNavigator</li>\n<li>Beautifying the Tabs</li>\n<li>Refactoring Routes</li>\n</ol>\n",
      "id": 224
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/1-1-Intro.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/1-1-Intro.html",
      "content": "# 1. 1 Intro\nCreated Sat Dec 30, 2023 at 7:19 PM\n\n[axios](https://www.npmjs.com/package/axios) works as is like web on React native.\nThe [await-to-js](https://www.npmjs.com/package/await-to-js) helper also works just fine.",
      "html": "<h1 id=\"1.-1-intro\">1. 1 Intro <a class=\"heading-anchor-permalink\" href=\"#1.-1-intro\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 7:19 PM</p>\n<p><a href=\"https://www.npmjs.com/package/axios\">axios</a> works as is like web on React native.\nThe <a href=\"https://www.npmjs.com/package/await-to-js\">await-to-js</a> helper also works just fine.</p>\n",
      "id": 225
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/1-2-Inspecting-API-calls.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/1-2-Inspecting-API-calls.html",
      "content": "# 1. 2 Inspecting API calls\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nStandalone UI tool for debugging RN - react-native-debugger\nLink: https://github.com/jhen0409/react-native-debugger\n\nSteps:\n1. Set port in the desktop app to be 19001\n2. Enable remote JS debugging in the RN app (simulator or physical)",
      "html": "<h1 id=\"1.-2-inspecting-api-calls\">1. 2 Inspecting API calls <a class=\"heading-anchor-permalink\" href=\"#1.-2-inspecting-api-calls\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>Standalone UI tool for debugging RN - react-native-debugger\nLink: <a href=\"https://github.com/jhen0409/react-native-debugger\">https://github.com/jhen0409/react-native-debugger</a></p>\n<p>Steps:</p>\n<ol>\n<li>Set port in the desktop app to be 19001</li>\n<li>Enable remote JS debugging in the RN app (simulator or physical)</li>\n</ol>\n",
      "id": 226
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/10-Loading-animations.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/10-Loading-animations.html",
      "content": "# 10. Loading animations\nCreated Sat Dec 30, 2023 at 1:55 PM\n\n- [Lottie](https://airbnb.design/lottie/) is an animation library from AirBnB\n- It can be used in React Native, and works on all platforms.\n- The source files are Adobe After Effects file.\n\t- Many devs don't know After Effects, no issues, head over to https://lottiefiles.com/ and get directly usable files.\n\t- LottieFiles.com allows editing right inside the website, before download\n\t- File downloaded is JSON\n\n- Expo provides a [component](https://docs.expo.dev/versions/latest/sdk/lottie/) to render Lottie JSON files\n\t```jsx\n\timport LottieView from 'lottie-react-native';\n\t\n\t<LottieView source={require('./my-file.json')} />\n\t```\n- LottieView component takes the whole screen space by default. Workaround is simple, just wrap a View around LottieView. Set the height and width on the View.",
      "html": "<h1 id=\"10.-loading-animations\">10. Loading animations <a class=\"heading-anchor-permalink\" href=\"#10.-loading-animations\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<ul>\n<li>\n<p><a href=\"https://airbnb.design/lottie/\">Lottie</a> is an animation library from AirBnB</p>\n</li>\n<li>\n<p>It can be used in React Native, and works on all platforms.</p>\n</li>\n<li>\n<p>The source files are Adobe After Effects file.</p>\n<ul>\n<li>Many devs don’t know After Effects, no issues, head over to <a href=\"https://lottiefiles.com/\">https://lottiefiles.com/</a> and get directly usable files.</li>\n<li><a href=\"http://LottieFiles.com\">LottieFiles.com</a> allows editing right inside the website, before download</li>\n<li>File downloaded is JSON</li>\n</ul>\n</li>\n<li>\n<p>Expo provides a <a href=\"https://docs.expo.dev/versions/latest/sdk/lottie/\">component</a> to render Lottie JSON files</p>\n<pre><code class=\"language-jsx\">import LottieView from 'lottie-react-native';\n\n&lt;LottieView source={require('./my-file.json')} /&gt;\n</code></pre>\n</li>\n<li>\n<p>LottieView component takes the whole screen space by default. Workaround is simple, just wrap a View around LottieView. Set the height and width on the View.</p>\n</li>\n</ul>\n",
      "id": 227
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/12-Sending-images.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/12-Sending-images.html",
      "content": "# 12. Sending images\nCreated Sat Dec 30, 2023 at 1:55 PM\n\n## Payload creation\n- Axios automatically sets proper \"Content-Type\" (multipart/form-data) when its given a FormData object. So headers are not an issue.\n- One thing is important - when sending files, or a mixture of files and normal data, make sure everything is inside FormData, and that's given as is as payload to axios. Don't spread it, or do anything else with it. It's an inflexible/problematic thing. Also, one has to sequentially add keys to FormData via `.append`, fine, just do a `Object.entries.forEach` for the normal data.\n- Since we're dealing with images, which is a file, we'll use FormData.\n\n```js\nconst payload = new FormData();\n\npayload.append('name', 'Sanjar');\npayload.append('age', 25);\n\nimgArray.forEach((img, index) => {\n  payload.append('images', {\n    name: 'img' + idx, // this is enough to indcate that `images` is an array\n    type: `image/jpeg`,\n    uri: img // as returned by picker\n  })\n});\n\naxios.post('/endpoint-here', payload, { params: {} });\n```",
      "html": "<h1 id=\"12.-sending-images\">12. Sending images <a class=\"heading-anchor-permalink\" href=\"#12.-sending-images\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<h2 id=\"payload-creation\">Payload creation <a class=\"heading-anchor-permalink\" href=\"#payload-creation\">#</a></h2>\n<ul>\n<li>Axios automatically sets proper “Content-Type” (multipart/form-data) when its given a FormData object. So headers are not an issue.</li>\n<li>One thing is important - when sending files, or a mixture of files and normal data, make sure everything is inside FormData, and that’s given as is as payload to axios. Don’t spread it, or do anything else with it. It’s an inflexible/problematic thing. Also, one has to sequentially add keys to FormData via <code>.append</code>, fine, just do a <code>Object.entries.forEach</code> for the normal data.</li>\n<li>Since we’re dealing with images, which is a file, we’ll use FormData.</li>\n</ul>\n<pre><code class=\"language-js\">const payload = new FormData();\n\npayload.append('name', 'Sanjar');\npayload.append('age', 25);\n\nimgArray.forEach((img, index) =&gt; {\n  payload.append('images', {\n    name: 'img' + idx, // this is enough to indcate that `images` is an array\n    type: `image/jpeg`,\n    uri: img // as returned by picker\n  })\n});\n\naxios.post('/endpoint-here', payload, { params: {} });\n</code></pre>\n",
      "id": 228
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/14-Progress.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/14-Progress.html",
      "content": "# 14. Progress\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nThe axios request config argument has a `onUploadProgress` key, which runs multiple times until the upload finishes.\n\nWe can use `useState` and update it, indicating the realtime progress in the UI!\n\n```js\nconst [uploadedRatio, setUploadedRatio] = useState(0);\n\nreturn axiosClient.post(endpoint, data, {\n  onUploadProgress: (progress) => {\n    setUploadedRatio(progress.loaded / progress.total);\n    console.log(progress.loaded / progress.total);\n  }\n})\n```",
      "html": "<h1 id=\"14.-progress\">14. Progress <a class=\"heading-anchor-permalink\" href=\"#14.-progress\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>The axios request config argument has a <code>onUploadProgress</code> key, which runs multiple times until the upload finishes.</p>\n<p>We can use <code>useState</code> and update it, indicating the realtime progress in the UI!</p>\n<pre><code class=\"language-js\">const [uploadedRatio, setUploadedRatio] = useState(0);\n\nreturn axiosClient.post(endpoint, data, {\n  onUploadProgress: (progress) =&gt; {\n    setUploadedRatio(progress.loaded / progress.total);\n    console.log(progress.loaded / progress.total);\n  }\n})\n</code></pre>\n",
      "id": 229
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/17-Progress-bar-UI.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/17-Progress-bar-UI.html",
      "content": "# 17. Progress bar UI\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nreact-native-progress is a general library for progress UI components\nLink: https://www.npmjs.com/package/react-native-progress\n\nIt works on Expo and RNCLI (no extra steps needed)!\n\n## Code\n```jsx\nimport * as Progress from 'react-native-progress';\n\n{progress < 1 ? \n\t<Progress.Bar\n\t  color='#FF0000'\n\t  progress={progress} // between 0 and 1\n\t  width={200} \n\t/> \n: null}\n```\n\n## Back-sping UI bug\nA common bug that's easy to miss in progress components\n\nMake sure to set progress to 0 after it has finished (reached 1). So that when the progress bar renders again, it starts out empty. Do so in the false case of `progress < 1` or in a useEffect if progress has reached 1.\n\nFortunately, we don't need useEffect since <LottieView /> (the false case of ternary) already has an `onAnimationFinish` that runs when the animation finishes. This is also helpful since once progress reaches 1, the <LottieView /> takes over, and runs the small animation, and we can set progress to 0. Everything is smooth and correct. No useEffect!",
      "html": "<h1 id=\"17.-progress-bar-ui\">17. Progress bar UI <a class=\"heading-anchor-permalink\" href=\"#17.-progress-bar-ui\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>react-native-progress is a general library for progress UI components\nLink: <a href=\"https://www.npmjs.com/package/react-native-progress\">https://www.npmjs.com/package/react-native-progress</a></p>\n<p>It works on Expo and RNCLI (no extra steps needed)!</p>\n<h2 id=\"code\">Code <a class=\"heading-anchor-permalink\" href=\"#code\">#</a></h2>\n<pre><code class=\"language-jsx\">import * as Progress from 'react-native-progress';\n\n{progress &lt; 1 ? \n\t&lt;Progress.Bar\n\t  color='#FF0000'\n\t  progress={progress} // between 0 and 1\n\t  width={200} \n\t/&gt; \n: null}\n</code></pre>\n<h2 id=\"back-sping-ui-bug\">Back-sping UI bug <a class=\"heading-anchor-permalink\" href=\"#back-sping-ui-bug\">#</a></h2>\n<p>A common bug that’s easy to miss in progress components</p>\n<p>Make sure to set progress to 0 after it has finished (reached 1). So that when the progress bar renders again, it starts out empty. Do so in the false case of <code>progress &lt; 1</code> or in a useEffect if progress has reached 1.</p>\n<p>Fortunately, we don’t need useEffect since <LottieView /> (the false case of ternary) already has an <code>onAnimationFinish</code> that runs when the animation finishes. This is also helpful since once progress reaches 1, the <LottieView /> takes over, and runs the small animation, and we can set progress to 0. Everything is smooth and correct. No useEffect!</p>\n",
      "id": 230
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/2-Slow-connection-and-loader.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/2-Slow-connection-and-loader.html",
      "content": "---\ntags:\n  - slow-connection\n  - loader\n  - ActivityIndicator\n  - RN-core\n  - throttling\n  - network\n---\n# 2. Slow connection and loader\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nAlways test the app on slow internet - both speed and latency wise. One simple way is via the react-native-debugger (that we installed previously); it has the standard network throttling features like browser network tab.\n\nAlso, the `<ActivityIndicator animating={isFetching} size={48} />` is a built-in loader component.",
      "html": "<hr>\n<p>tags:</p>\n<ul>\n<li>slow-connection</li>\n<li>loader</li>\n<li>ActivityIndicator</li>\n<li>RN-core</li>\n<li>throttling</li>\n<li>network</li>\n</ul>\n<hr>\n<h1 id=\"2.-slow-connection-and-loader\">2. Slow connection and loader <a class=\"heading-anchor-permalink\" href=\"#2.-slow-connection-and-loader\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>Always test the app on slow internet - both speed and latency wise. One simple way is via the react-native-debugger (that we installed previously); it has the standard network throttling features like browser network tab.</p>\n<p>Also, the <code>&lt;ActivityIndicator animating={isFetching} size={48} /&gt;</code> is a built-in loader component.</p>\n",
      "id": 231
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/4-Networking/index.html",
      "content": "# 4. Networking\nCreated Sat Dec 30, 2023 at 1:29 PM\n\n## Topics\n1. Introduction\n2. Setting Up the Backend\n3. Calling APIs Using ApiSauce\n4. Creating an API Layer\n5. Fetching Data\n6. Inspecting API Calls\n7. Handling Errors\n8. Simulating a Slow Connection\n9. Showing an Activity Indicator\n10. Building a Beautiful Activitiy Indicator\n11. Creating a Reusable Hook\n12. Exercises\n13. Extending the API Layer\n14. Posting Data\n15. Tracking Upload Progress\n16. Building the Upload Screen\n17. Adding a Progress Bar\n18. Showing the Done Animation\n19. Resetting the Form\n20. A Quick Note",
      "html": "<h1 id=\"4.-networking\">4. Networking <a class=\"heading-anchor-permalink\" href=\"#4.-networking\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:29 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Setting Up the Backend</li>\n<li>Calling APIs Using ApiSauce</li>\n<li>Creating an API Layer</li>\n<li>Fetching Data</li>\n<li>Inspecting API Calls</li>\n<li>Handling Errors</li>\n<li>Simulating a Slow Connection</li>\n<li>Showing an Activity Indicator</li>\n<li>Building a Beautiful Activitiy Indicator</li>\n<li>Creating a Reusable Hook</li>\n<li>Exercises</li>\n<li>Extending the API Layer</li>\n<li>Posting Data</li>\n<li>Tracking Upload Progress</li>\n<li>Building the Upload Screen</li>\n<li>Adding a Progress Bar</li>\n<li>Showing the Done Animation</li>\n<li>Resetting the Form</li>\n<li>A Quick Note</li>\n</ol>\n",
      "id": 232
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/1-Intro.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/1-Intro.html",
      "content": "# 1. Intro\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nInternet connection can go down or be too slow (for your app to function), especially during travel (which people do everyday).\n\nSo its important to show proper states in the app when this happens, the minimum being to acknowledge that connection is not good.",
      "html": "<h1 id=\"1.-intro\">1. Intro <a class=\"heading-anchor-permalink\" href=\"#1.-intro\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>Internet connection can go down or be too slow (for your app to function), especially during travel (which people do everyday).</p>\n<p>So its important to show proper states in the app when this happens, the minimum being to acknowledge that connection is not good.</p>\n",
      "id": 233
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/10-1-Caching-images.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/10-1-Caching-images.html",
      "content": "# 10. 1 Caching images\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nWe can save strings in AsyncStorage fine.\n\nBut what about images or assets? How do we store them for caching?\n\n---\nIt's not possible with AsyncStorage, since images and assets are binary data, and are usually large in size.\n\nFor image caching, there are libraries. The usual pattern here is that the library provide a near identical replacement for RN core image, This way the library intercepts, caches and presents fetched images.\n\n\n- react-native-expo-image-cache (expo-blur needs to be installed before for this to work) is a library. *DOEST WORK/NOT-PREFERRED*. The `expo-image`'s [Image](https://docs.expo.dev/versions/latest/sdk/image/#cachepolicy) could help.\n- [react-native-fast-image](https://www.npmjs.com/package/react-native-fast-image) is a library for RNCLI, that provides a replacement for RN core Image. This way it's able to cache images. The library also has more useful features",
      "html": "<h1 id=\"10.-1-caching-images\">10. 1 Caching images <a class=\"heading-anchor-permalink\" href=\"#10.-1-caching-images\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>We can save strings in AsyncStorage fine.</p>\n<p>But what about images or assets? How do we store them for caching?</p>\n<hr>\n<p>It’s not possible with AsyncStorage, since images and assets are binary data, and are usually large in size.</p>\n<p>For image caching, there are libraries. The usual pattern here is that the library provide a near identical replacement for RN core image, This way the library intercepts, caches and presents fetched images.</p>\n<ul>\n<li>react-native-expo-image-cache (expo-blur needs to be installed before for this to work) is a library. <em>DOEST WORK/NOT-PREFERRED</em>. The <code>expo-image</code>'s <a href=\"https://docs.expo.dev/versions/latest/sdk/image/#cachepolicy\">Image</a> could help.</li>\n<li><a href=\"https://www.npmjs.com/package/react-native-fast-image\">react-native-fast-image</a> is a library for RNCLI, that provides a replacement for RN core Image. This way it’s able to cache images. The library also has more useful features</li>\n</ul>\n",
      "id": 234
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/10-2-Thumbnails-loader.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/10-2-Thumbnails-loader.html",
      "content": "# 10. 2 Thumbnails loader\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nIf your app is image centric, then showing a normal loading state for images is not a very good UI. Example: if YouTube home list showed loading state for each video, it would look bland.\n\nA simple fix for this is to have an extra image (aka \"thumbnail\") associated with each actual image on the server. This thumbnail is usually 100x100 pixels.\n\nOn the client (our app), when an image component is used, it should fetch both the thumbnail as well as the original image. The thumbnail is quite small and will usually arrive very quickly. We show the thumbnail instead of a loader while the actual image is arriving. This way we show atleast some hint instead of a plain loading state.\n\n## Code\nThere's no library needed for this. Expo has it already. Use the `placeholder` prop.\n```jsx\nimport { Image } from 'expo-image';\n\n<Image source={url} placeholder={thumnailUrl} />\n```\n\nUnfortunately, React Native `loadingIndicatorSource` doesn't work.",
      "html": "<h1 id=\"10.-2-thumbnails-loader\">10. 2 Thumbnails loader <a class=\"heading-anchor-permalink\" href=\"#10.-2-thumbnails-loader\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>If your app is image centric, then showing a normal loading state for images is not a very good UI. Example: if YouTube home list showed loading state for each video, it would look bland.</p>\n<p>A simple fix for this is to have an extra image (aka “thumbnail”) associated with each actual image on the server. This thumbnail is usually 100x100 pixels.</p>\n<p>On the client (our app), when an image component is used, it should fetch both the thumbnail as well as the original image. The thumbnail is quite small and will usually arrive very quickly. We show the thumbnail instead of a loader while the actual image is arriving. This way we show atleast some hint instead of a plain loading state.</p>\n<h2 id=\"code\">Code <a class=\"heading-anchor-permalink\" href=\"#code\">#</a></h2>\n<p>There’s no library needed for this. Expo has it already. Use the <code>placeholder</code> prop.</p>\n<pre><code class=\"language-jsx\">import { Image } from 'expo-image';\n\n&lt;Image source={url} placeholder={thumnailUrl} /&gt;\n</code></pre>\n<p>Unfortunately, React Native <code>loadingIndicatorSource</code> doesn’t work.</p>\n",
      "id": 235
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/11-Coding-with-redux.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/11-Coding-with-redux.html",
      "content": "# 11. Coding with redux\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nWe added caching very quickly by overriding axios.\nAn alternative is to use \"redux-persist\" to persist the whole Redux store.\n\nThis may be needed if the same data needs to be in sync at multiple places in the app.\n\nFIXME: is 'redux-persist' straightforward to do?",
      "html": "<h1 id=\"11.-coding-with-redux\">11. Coding with redux <a class=\"heading-anchor-permalink\" href=\"#11.-coding-with-redux\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>We added caching very quickly by overriding axios.\nAn alternative is to use “redux-persist” to persist the whole Redux store.</p>\n<p>This may be needed if the same data needs to be in sync at multiple places in the app.</p>\n<p>FIXME: is ‘redux-persist’ straightforward to do?</p>\n",
      "id": 236
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/12-Storing-user-actions-when-offline.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/12-Storing-user-actions-when-offline.html",
      "content": "# 12. Storing user actions when offline\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nWe cached data as a 'offline' strategy. But more can done - we can store user actions.\n\nImplementing this quite hard, since we'll need to do:\n1. Handle optimistic updates\n2. Conflict resolution\n3. Retry actions when network is back\n4. Check if a feature flow should be usable in offline mode or not\n\n## Practically\nPractically, some sort of library or SDK is used for this. Example:\n1. Firebase\n2. Realm - maintains an offline on device database for us.\n\n## YAGNI\nDo you really need offline user action support?",
      "html": "<h1 id=\"12.-storing-user-actions-when-offline\">12. Storing user actions when offline <a class=\"heading-anchor-permalink\" href=\"#12.-storing-user-actions-when-offline\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>We cached data as a ‘offline’ strategy. But more can done - we can store user actions.</p>\n<p>Implementing this quite hard, since we’ll need to do:</p>\n<ol>\n<li>Handle optimistic updates</li>\n<li>Conflict resolution</li>\n<li>Retry actions when network is back</li>\n<li>Check if a feature flow should be usable in offline mode or not</li>\n</ol>\n<h2 id=\"practically\">Practically <a class=\"heading-anchor-permalink\" href=\"#practically\">#</a></h2>\n<p>Practically, some sort of library or SDK is used for this. Example:</p>\n<ol>\n<li>Firebase</li>\n<li>Realm - maintains an offline on device database for us.</li>\n</ol>\n<h2 id=\"yagni\">YAGNI <a class=\"heading-anchor-permalink\" href=\"#yagni\">#</a></h2>\n<p>Do you really need offline user action support?</p>\n",
      "id": 237
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/13-Showing-offline-notice.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/13-Showing-offline-notice.html",
      "content": "# 13. Showing offline notice\nCreated Sun Dec 31, 2023 at 1:48 AM\n\nNetwork info we got from the NetInfo library, just add a root level View with zIndex: 1 that renders when app is offline. Keep it simple.",
      "html": "<h1 id=\"13.-showing-offline-notice\">13. Showing offline notice <a class=\"heading-anchor-permalink\" href=\"#13.-showing-offline-notice\">#</a></h1>\n<p>Created Sun Dec 31, 2023 at 1:48 AM</p>\n<p>Network info we got from the NetInfo library, just add a root level View with zIndex: 1 that renders when app is offline. Keep it simple.</p>\n",
      "id": 238
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/2-Offline-strategies.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/2-Offline-strategies.html",
      "content": "# 2. Offline strategies\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nStrategies for building offline capable apps:\n1. Notify the user\n2. DIsable certain features\n3. Cache-data\n4. Store user-actions, to be run when connection is back.\n\nbtw, Each of these strategies can mostly be applied independently.\n\n## YAGNI and cost\nDo you really need sophisticated offline strategies?\nA simple detect message won't do?\n\nThe strategies discussed above vary in effort and complexity according from app to app. But they definitely need more effort than building a happy-path app. Answer this question before implementing.",
      "html": "<h1 id=\"2.-offline-strategies\">2. Offline strategies <a class=\"heading-anchor-permalink\" href=\"#2.-offline-strategies\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>Strategies for building offline capable apps:</p>\n<ol>\n<li>Notify the user</li>\n<li>DIsable certain features</li>\n<li>Cache-data</li>\n<li>Store user-actions, to be run when connection is back.</li>\n</ol>\n<p>btw, Each of these strategies can mostly be applied independently.</p>\n<h2 id=\"yagni-and-cost\">YAGNI and cost <a class=\"heading-anchor-permalink\" href=\"#yagni-and-cost\">#</a></h2>\n<p>Do you really need sophisticated offline strategies?\nA simple detect message won’t do?</p>\n<p>The strategies discussed above vary in effort and complexity according from app to app. But they definitely need more effort than building a happy-path app. Answer this question before implementing.</p>\n",
      "id": 239
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/3-Detecting-network-status.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/3-Detecting-network-status.html",
      "content": "# 3. Detecting network status\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nThe [react-native-community/netinfo](https://www.npmjs.com/package/@react-native-community/netinfo) library works on Expo. Works on RNCLI too, but minor steps needed for platforms.\n\nIt helps get network info like type of network, if internet is reachable and other parameters.\n\nInternally, it pings a 3rd party server (by default Google), but this can be configured.\n\nIt's a nice library, exposes main functionality in 3 ways - static method, a hook and an event-listener. Choose whatever you like. Be a little cautious when using event listener though, since forgetting to unsubscribe the event will result in memory leaks.\n## Code\n```jsx\nimport NetInfo from \"@react-native-community/netinfo\";\n\nNetInfo.fetch().then((state) => {\n  console.log(\"Connection type\", state.type, state);\n  console.log(\"Is connected?\", state.isConnected);\n  console.log('as is', state);\n});\n```\n\n```json\n// output\n{\n  \"isConnected\": true,\n  \"isInternetReachable\": true,\n  \"isWifiEnabled\": true,\n  \"type\": \"wifi\",\n  \"details\": {\n    \"bssid\": \"02:00:00:00:00:00\",\n    \"frequency\": 2447,\n    \"ipAddress\": \"10.0.2.16\",\n    \"isConnectionExpensive\": false,\n    \"linkSpeed\": 2,\n    \"rxLinkSpeed\": 2,\n    \"strength\": 99,\n    \"subnet\": \"255.255.255.0\",\n    \"txLinkSpeed\": 2\n  }\n}\n```\n\nSince we're building the react app, the hook is the simplest for us - realtime, and cleans itself up.\n```jsx\nimport { useNetInfo } from \"@react-native-community/netinfo\";\n\nfunction MyComponent() {\n  const netInfo = useNetInfo(); // same object as above\n  const isOffline = !netInfo.isInternetReachable;\n  \n  // optionally hook accepts a config object as argument\n  // see https://www.npmjs.com/package/@react-native-community/netinfo#usenetinfo\n  \n  return null;\n}\n```",
      "html": "<h1 id=\"3.-detecting-network-status\">3. Detecting network status <a class=\"heading-anchor-permalink\" href=\"#3.-detecting-network-status\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>The <a href=\"https://www.npmjs.com/package/@react-native-community/netinfo\">react-native-community/netinfo</a> library works on Expo. Works on RNCLI too, but minor steps needed for platforms.</p>\n<p>It helps get network info like type of network, if internet is reachable and other parameters.</p>\n<p>Internally, it pings a 3rd party server (by default Google), but this can be configured.</p>\n<p>It’s a nice library, exposes main functionality in 3 ways - static method, a hook and an event-listener. Choose whatever you like. Be a little cautious when using event listener though, since forgetting to unsubscribe the event will result in memory leaks.</p>\n<h2 id=\"code\">Code <a class=\"heading-anchor-permalink\" href=\"#code\">#</a></h2>\n<pre><code class=\"language-jsx\">import NetInfo from &quot;@react-native-community/netinfo&quot;;\n\nNetInfo.fetch().then((state) =&gt; {\n  console.log(&quot;Connection type&quot;, state.type, state);\n  console.log(&quot;Is connected?&quot;, state.isConnected);\n  console.log('as is', state);\n});\n</code></pre>\n<pre><code class=\"language-json\">// output\n{\n  &quot;isConnected&quot;: true,\n  &quot;isInternetReachable&quot;: true,\n  &quot;isWifiEnabled&quot;: true,\n  &quot;type&quot;: &quot;wifi&quot;,\n  &quot;details&quot;: {\n    &quot;bssid&quot;: &quot;02:00:00:00:00:00&quot;,\n    &quot;frequency&quot;: 2447,\n    &quot;ipAddress&quot;: &quot;10.0.2.16&quot;,\n    &quot;isConnectionExpensive&quot;: false,\n    &quot;linkSpeed&quot;: 2,\n    &quot;rxLinkSpeed&quot;: 2,\n    &quot;strength&quot;: 99,\n    &quot;subnet&quot;: &quot;255.255.255.0&quot;,\n    &quot;txLinkSpeed&quot;: 2\n  }\n}\n</code></pre>\n<p>Since we’re building the react app, the hook is the simplest for us - realtime, and cleans itself up.</p>\n<pre><code class=\"language-jsx\">import { useNetInfo } from &quot;@react-native-community/netinfo&quot;;\n\nfunction MyComponent() {\n  const netInfo = useNetInfo(); // same object as above\n  const isOffline = !netInfo.isInternetReachable;\n  \n  // optionally hook accepts a config object as argument\n  // see https://www.npmjs.com/package/@react-native-community/netinfo#usenetinfo\n  \n  return null;\n}\n</code></pre>\n",
      "id": 240
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/4-Caching.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/4-Caching.html",
      "content": "# 4. Caching\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nCaching is more important in mobile apps, since they may be operating on slow cellular connections and battery usage is important.\n\nCaching strategy, in the simplest way for mobile apps, focuses on \"retaining sucessfully fetched data\".\nIt does *not care* about mutations/actions the user does.\n\nIf this strategy is being used in isolation, action UIs should be disabled. This will *prevent* a variety of errors and unfruitful fixes for them.\n\n## Storage?\nTech wise, there are 3 ways to implement caching in an RN app:\n1. [AsyncStorage](https://www.npmjs.com/package/@react-native-async-storage/async-storage) - a cross platform library for storing string key value pairs. Not encrypted and has limit of 6MB. Not meant for sensitive data. The RN analogue of browser's localStorage.\n2. [SecureStore](https://docs.expo.dev/versions/latest/sdk/securestore/) - key value store. Is encrypted. Limit of 2MB. Developed for Expo. RNCLU alternatives also exist.\n3. [SQLite](https://docs.expo.dev/versions/latest/sdk/sqlite/) - large store. Good if you're OK writing SQL. Unencrypted. Useful if stored data has complex relations\n\nNote: in all these methods, data is persisted across restarts, which is what we need. Gets trashed on uninstall, but fine.",
      "html": "<h1 id=\"4.-caching\">4. Caching <a class=\"heading-anchor-permalink\" href=\"#4.-caching\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>Caching is more important in mobile apps, since they may be operating on slow cellular connections and battery usage is important.</p>\n<p>Caching strategy, in the simplest way for mobile apps, focuses on “retaining sucessfully fetched data”.\nIt does <em>not care</em> about mutations/actions the user does.</p>\n<p>If this strategy is being used in isolation, action UIs should be disabled. This will <em>prevent</em> a variety of errors and unfruitful fixes for them.</p>\n<h2 id=\"storage%3F\">Storage? <a class=\"heading-anchor-permalink\" href=\"#storage%3F\">#</a></h2>\n<p>Tech wise, there are 3 ways to implement caching in an RN app:</p>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/@react-native-async-storage/async-storage\">AsyncStorage</a> - a cross platform library for storing string key value pairs. Not encrypted and has limit of 6MB. Not meant for sensitive data. The RN analogue of browser’s localStorage.</li>\n<li><a href=\"https://docs.expo.dev/versions/latest/sdk/securestore/\">SecureStore</a> - key value store. Is encrypted. Limit of 2MB. Developed for Expo. RNCLU alternatives also exist.</li>\n<li><a href=\"https://docs.expo.dev/versions/latest/sdk/sqlite/\">SQLite</a> - large store. Good if you’re OK writing SQL. Unencrypted. Useful if stored data has complex relations</li>\n</ol>\n<p>Note: in all these methods, data is persisted across restarts, which is what we need. Gets trashed on uninstall, but fine.</p>\n",
      "id": 241
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/5-AsyncStorage.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/5-AsyncStorage.html",
      "content": "# 5. AsyncStorage\nCreated Sat Dec 30, 2023 at 1:55 PM\n\n[AsyncStorage](https://www.npmjs.com/package/@react-native-async-storage/async-storage) was a part of RN core once, but was deprecated.\nIt's now a standalone community maintained library.\n\nIt can be installed and used in Expo, or RNCLI. No extra steps needed.\n\n## Inspecting AsyncStorage\n- Run the function `showAsyncStorageInDev` in the react-native-debugger console.\n- Run `$reactNative.AsyncStorage.clear()` to clear stored values\n\n## AsyncStorage internals\nInternally, AsyncStorage is implemented like differently on Android and iOS.\nThe library interface is the same for us, of course.\n![](../../../../../assets/5-AsyncStorage-image-1-140d5a8e.png)",
      "html": "<h1 id=\"5.-asyncstorage\">5. AsyncStorage <a class=\"heading-anchor-permalink\" href=\"#5.-asyncstorage\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p><a href=\"https://www.npmjs.com/package/@react-native-async-storage/async-storage\">AsyncStorage</a> was a part of RN core once, but was deprecated.\nIt’s now a standalone community maintained library.</p>\n<p>It can be installed and used in Expo, or RNCLI. No extra steps needed.</p>\n<h2 id=\"inspecting-asyncstorage\">Inspecting AsyncStorage <a class=\"heading-anchor-permalink\" href=\"#inspecting-asyncstorage\">#</a></h2>\n<ul>\n<li>Run the function <code>showAsyncStorageInDev</code> in the react-native-debugger console.</li>\n<li>Run <code>$reactNative.AsyncStorage.clear()</code> to clear stored values</li>\n</ul>\n<h2 id=\"asyncstorage-internals\">AsyncStorage internals <a class=\"heading-anchor-permalink\" href=\"#asyncstorage-internals\">#</a></h2>\n<p>Internally, AsyncStorage is implemented like differently on Android and iOS.\nThe library interface is the same for us, of course.\n<img src=\"../../../../../assets/5-AsyncStorage-image-1-140d5a8e.png\" alt=\"\"></p>\n",
      "id": 242
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/7-The-cache-layer.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/7-The-cache-layer.html",
      "content": "# 7. The cache layer\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nIf the fetched data has complex relations, SQLite method is preferred.\n\nElse if data is simple and non-sensitive, we use AsyncStorage. For sensitive  data, use SecureStorage.\n\n## Wrapper - migration\nWe'll use AsyncStorage for caching (including for offline support).\nBut we shouldn't use it directly. Maybe our data is termed sensitive by some regulation or we want to migrate to some other library/solution, this would be very hard to do if our code directly use the AsyncStorage library and its functions.\n\nThe fix is simple. We need to come up and define functionality we need from the library, and create a wrapper for around the library. This way, only the wrapper interacts with the library code. And our app code uses the wrapper. Future migration wise, we'd need to change only one file.\n\n## Wrapper - caching need\nA thin wrapper won't do in our case, since we need to label our data with timestamps.\n\nNow, adding timestamps to data as part of feature/app code would be cumbersome and error-prone. So we should automate it.\n\nSo we'll add these functionality in the wrapper:\n1. Auto-label stuff when we \"add\" stuff to the async storage via the wrapper.\n2. Serialize-deserialize data as AsyncStorage can only deal with strings\n3. Auto remove expired things",
      "html": "<h1 id=\"7.-the-cache-layer\">7. The cache layer <a class=\"heading-anchor-permalink\" href=\"#7.-the-cache-layer\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>If the fetched data has complex relations, SQLite method is preferred.</p>\n<p>Else if data is simple and non-sensitive, we use AsyncStorage. For sensitive  data, use SecureStorage.</p>\n<h2 id=\"wrapper---migration\">Wrapper - migration <a class=\"heading-anchor-permalink\" href=\"#wrapper---migration\">#</a></h2>\n<p>We’ll use AsyncStorage for caching (including for offline support).\nBut we shouldn’t use it directly. Maybe our data is termed sensitive by some regulation or we want to migrate to some other library/solution, this would be very hard to do if our code directly use the AsyncStorage library and its functions.</p>\n<p>The fix is simple. We need to come up and define functionality we need from the library, and create a wrapper for around the library. This way, only the wrapper interacts with the library code. And our app code uses the wrapper. Future migration wise, we’d need to change only one file.</p>\n<h2 id=\"wrapper---caching-need\">Wrapper - caching need <a class=\"heading-anchor-permalink\" href=\"#wrapper---caching-need\">#</a></h2>\n<p>A thin wrapper won’t do in our case, since we need to label our data with timestamps.</p>\n<p>Now, adding timestamps to data as part of feature/app code would be cumbersome and error-prone. So we should automate it.</p>\n<p>So we’ll add these functionality in the wrapper:</p>\n<ol>\n<li>Auto-label stuff when we “add” stuff to the async storage via the wrapper.</li>\n<li>Serialize-deserialize data as AsyncStorage can only deal with strings</li>\n<li>Auto remove expired things</li>\n</ol>\n",
      "id": 243
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/8-Coding-the-cache-layer.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/8-Coding-the-cache-layer.html",
      "content": "# 8. Coding the cache layer\nCreated Sat Dec 30, 2023 at 1:55 PM\n\n- The layer is just a set of 4 CRUD functions.\n\t  1. set - add timestamps, serialize, insert with into AsyncStorage.\n\t  2. get - de-serialize and return object. if time is past some predefined TTL, delete the entry from storage and return null.\n\t  3. update - like set\n\t  4. delete - well just delete\n- We'll add a constant `cache-` prefix to all keys here, since we may use AsyncStorage for other things too, that are unrelated to caching\n",
      "html": "<h1 id=\"8.-coding-the-cache-layer\">8. Coding the cache layer <a class=\"heading-anchor-permalink\" href=\"#8.-coding-the-cache-layer\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<ul>\n<li>The layer is just a set of 4 CRUD functions.\n1. set - add timestamps, serialize, insert with into AsyncStorage.\n2. get - de-serialize and return object. if time is past some predefined TTL, delete the entry from storage and return null.\n3. update - like set\n4. delete - well just delete</li>\n<li>We’ll add a constant <code>cache-</code> prefix to all keys here, since we may use AsyncStorage for other things too, that are unrelated to caching</li>\n</ul>\n",
      "id": 244
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/9-Usage-of-cache-layer.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/9-Usage-of-cache-layer.html",
      "content": "# 9. Usage of cache layer\nCreated Sat Dec 30, 2023 at 1:55 PM\n\nSince we don't know when a network outage may happen, we need to cache periodically, or maybe even with each important API call.\n\nIn an app, we usually have the following structure.\ncomponent <--> context/store <--> axios/networking-lib\n\nNow adding the cache code in components or even in the context/store is pretty low level and shouldn't be a concern when developing a feature. And since its related to networking, caching code should be kept close to networking code, and as far away from app/feat code as possible.\n\n## Where to add code in API lib\nAssume we're using axios for networking. Now axios code isn't large but it's frequently changed and needs to be correct, so doing caching by hand near networking isn't good.\n\nIt should happen \"automatically\" and be \"invisible\". The simplest way is to just override the API library core function(s), and run your caching code beside them. This way, none of the components, store or API code changes, and we only made a one line change at one place.\n\nThis makes sense too, since if network is down, and during a fetch, we give back cached data, the flow remains the same, it's as if the data really came from the server.\n\n*Intuitively, keep \"habits\" (frequent needs) of the app at a low level, away from app code as much as possible*.\n\n## Code\n```jsx\naxiosClient.get = (...x) => {\n  // before caching code\n  const ret = await axiosClient.get(...x);\n\n  // cache code here\n  \n  return ret;\n}\n```\n\n## Clarifications\n- Remember, \"caching\" is about \"reads\"\n- Actions are hard to account for in a bad connection. And its sometimes impossible, since frontend part of an app only does a small number of validations, and the backend may run more, or may have external dependencies for validations. Example: is username taken?",
      "html": "<h1 id=\"9.-usage-of-cache-layer\">9. Usage of cache layer <a class=\"heading-anchor-permalink\" href=\"#9.-usage-of-cache-layer\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n<p>Since we don’t know when a network outage may happen, we need to cache periodically, or maybe even with each important API call.</p>\n<p>In an app, we usually have the following structure.\ncomponent &lt;–&gt; context/store &lt;–&gt; axios/networking-lib</p>\n<p>Now adding the cache code in components or even in the context/store is pretty low level and shouldn’t be a concern when developing a feature. And since its related to networking, caching code should be kept close to networking code, and as far away from app/feat code as possible.</p>\n<h2 id=\"where-to-add-code-in-api-lib\">Where to add code in API lib <a class=\"heading-anchor-permalink\" href=\"#where-to-add-code-in-api-lib\">#</a></h2>\n<p>Assume we’re using axios for networking. Now axios code isn’t large but it’s frequently changed and needs to be correct, so doing caching by hand near networking isn’t good.</p>\n<p>It should happen “automatically” and be “invisible”. The simplest way is to just override the API library core function(s), and run your caching code beside them. This way, none of the components, store or API code changes, and we only made a one line change at one place.</p>\n<p>This makes sense too, since if network is down, and during a fetch, we give back cached data, the flow remains the same, it’s as if the data really came from the server.</p>\n<p><em>Intuitively, keep “habits” (frequent needs) of the app at a low level, away from app code as much as possible</em>.</p>\n<h2 id=\"code\">Code <a class=\"heading-anchor-permalink\" href=\"#code\">#</a></h2>\n<pre><code class=\"language-jsx\">axiosClient.get = (...x) =&gt; {\n  // before caching code\n  const ret = await axiosClient.get(...x);\n\n  // cache code here\n  \n  return ret;\n}\n</code></pre>\n<h2 id=\"clarifications\">Clarifications <a class=\"heading-anchor-permalink\" href=\"#clarifications\">#</a></h2>\n<ul>\n<li>Remember, “caching” is about “reads”</li>\n<li>Actions are hard to account for in a bad connection. And its sometimes impossible, since frontend part of an app only does a small number of validations, and the backend may run more, or may have external dependencies for validations. Example: is username taken?</li>\n</ul>\n",
      "id": 245
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/5-Offline-support/index.html",
      "content": "# 5. Offline support\nCreated Sat Dec 30, 2023 at 1:29 PM\n\n## Topics\n1. Introduction\n2. Strategies for Building Offline Capable Apps\n3. Detecting Network Status\n4. Caching\n5. AsyncStorage\n6. Inspecting AsyncStorage\n7. The Cache Layer\n8. Implementing a Cache Layer\n9. Caching Successful Request Data\n10. Caching Images\n11. Caching with Redux\n12. Storing User Actions When Offline\n13. Exercise\n14. Showing an Offline Notice",
      "html": "<h1 id=\"5.-offline-support\">5. Offline support <a class=\"heading-anchor-permalink\" href=\"#5.-offline-support\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:29 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Strategies for Building Offline Capable Apps</li>\n<li>Detecting Network Status</li>\n<li>Caching</li>\n<li>AsyncStorage</li>\n<li>Inspecting AsyncStorage</li>\n<li>The Cache Layer</li>\n<li>Implementing a Cache Layer</li>\n<li>Caching Successful Request Data</li>\n<li>Caching Images</li>\n<li>Caching with Redux</li>\n<li>Storing User Actions When Offline</li>\n<li>Exercise</li>\n<li>Showing an Offline Notice</li>\n</ol>\n",
      "id": 246
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/1-Auth-Flow.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/1-Auth-Flow.html",
      "content": "# 1. Auth Flow\nCreated Sat Dec 30, 2023 at 1:55 PM\n\n",
      "html": "<h1 id=\"1.-auth-flow\">1. Auth Flow <a class=\"heading-anchor-permalink\" href=\"#1.-auth-flow\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:55 PM</p>\n",
      "id": 247
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/10-Persist-across-restarts.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/10-Persist-across-restarts.html",
      "content": "# 10. Persist across restarts\nCreated Sat Dec 30, 2023 at 1:56 PM\n\n",
      "html": "<h1 id=\"10.-persist-across-restarts\">10. Persist across restarts <a class=\"heading-anchor-permalink\" href=\"#10.-persist-across-restarts\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n",
      "id": 248
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/16-Overlay.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/16-Overlay.html",
      "content": "# 16. Overlay\nCreated Sat Dec 30, 2023 at 1:56 PM\n\n",
      "html": "<h1 id=\"16.-overlay\">16. Overlay <a class=\"heading-anchor-permalink\" href=\"#16.-overlay\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n",
      "id": 249
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/2-JWT-lib.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/2-JWT-lib.html",
      "content": "# 2. JWT lib\nCreated Sat Dec 30, 2023 at 1:56 PM\n\n",
      "html": "<h1 id=\"2.-jwt-lib\">2. JWT lib <a class=\"heading-anchor-permalink\" href=\"#2.-jwt-lib\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n",
      "id": 250
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/6-Authentication/index.html",
      "content": "# 6. Authentication\nCreated Sat Dec 30, 2023 at 1:29 PM\n\n## Topics\n1. Introduction\n2. Authentication Providers\n3. Authentication Flow\n4. Authentication API\n5. Getting the AuthToken\n6. Extracting the User from the AuthToken\n7. Storing the Current User\n8. Getting the Current User\n9. Logging Out the User\n10. Persisting the Authentication State Across Restarts\n11. Controlling the Splash Screen\n12. Refactoring\n13. Creating a Custom Hook\n14. Calling Protected APIs\n15. Exercise\n16. Implementing the Registration\n17. Showing an Activity Indicator\n18. Adding an Overlay\n19. A Quick Note",
      "html": "<h1 id=\"6.-authentication\">6. Authentication <a class=\"heading-anchor-permalink\" href=\"#6.-authentication\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:29 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Authentication Providers</li>\n<li>Authentication Flow</li>\n<li>Authentication API</li>\n<li>Getting the AuthToken</li>\n<li>Extracting the User from the AuthToken</li>\n<li>Storing the Current User</li>\n<li>Getting the Current User</li>\n<li>Logging Out the User</li>\n<li>Persisting the Authentication State Across Restarts</li>\n<li>Controlling the Splash Screen</li>\n<li>Refactoring</li>\n<li>Creating a Custom Hook</li>\n<li>Calling Protected APIs</li>\n<li>Exercise</li>\n<li>Implementing the Registration</li>\n<li>Showing an Activity Indicator</li>\n<li>Adding an Overlay</li>\n<li>A Quick Note</li>\n</ol>\n",
      "id": 251
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/1-Intro-to-push-notifications.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/1-Intro-to-push-notifications.html",
      "content": "# 1. Intro to push notifications\nCreated Sat Dec 30, 2023 at 1:56 PM\n\nWe'll learn how to send a push notification to a phone running our app.",
      "html": "<h1 id=\"1.-intro-to-push-notifications\">1. Intro to push notifications <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-push-notifications\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<p>We’ll learn how to send a push notification to a phone running our app.</p>\n",
      "id": 252
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/2-Push-notification-providers.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/2-Push-notification-providers.html",
      "content": "# 2. Push notification providers\nCreated Sat Dec 30, 2023 at 1:56 PM\n\n## Idea - offload\nThe idea is simple, our backend app (running the database) does not send notifications directly to the app. Instead there's a middle party - called a push notification service, that gets pinged by our backend app, and then the service sends a notification to the device.\n\nThis needs to be done because? Because:\n1. **Complexity** - We don't need to care about device info, platform etc. We just store a token from the service.\n2. **Cost + efficiency** - Since number of users can be very high, having the database app and the notification code on the same machine doesn't make sense. Push notification services are dedicated for sending notifications, and do so efficiently.\n\n## Providers\naka 'Push notification services'\n![](/assets/2-Push-notification-providers-image-1-41c46f41.png)\n\nExpo's push notification service is free. \nAnd works on both Expo and RNCLI, without any special setup.\n\nOther services are:\n- Hard to setup\n- Require significant effort to get working\n- Plus: Offer more control\n\nThat said, Expo does not lock us into using it. FCM and APNs servers can still be [added](https://docs.expo.dev/push-notifications/sending-notifications-custom/#how-to-write-fcm-and-apns-servers).\n\nWe'll use expo Push Notification Service for this course.",
      "html": "<h1 id=\"2.-push-notification-providers\">2. Push notification providers <a class=\"heading-anchor-permalink\" href=\"#2.-push-notification-providers\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<h2 id=\"idea---offload\">Idea - offload <a class=\"heading-anchor-permalink\" href=\"#idea---offload\">#</a></h2>\n<p>The idea is simple, our backend app (running the database) does not send notifications directly to the app. Instead there’s a middle party - called a push notification service, that gets pinged by our backend app, and then the service sends a notification to the device.</p>\n<p>This needs to be done because? Because:</p>\n<ol>\n<li><strong>Complexity</strong> - We don’t need to care about device info, platform etc. We just store a token from the service.</li>\n<li><strong>Cost + efficiency</strong> - Since number of users can be very high, having the database app and the notification code on the same machine doesn’t make sense. Push notification services are dedicated for sending notifications, and do so efficiently.</li>\n</ol>\n<h2 id=\"providers\">Providers <a class=\"heading-anchor-permalink\" href=\"#providers\">#</a></h2>\n<p>aka ‘Push notification services’\n<img src=\"/assets/2-Push-notification-providers-image-1-41c46f41.png\" alt=\"\"></p>\n<p>Expo’s push notification service is free.\nAnd works on both Expo and RNCLI, without any special setup.</p>\n<p>Other services are:</p>\n<ul>\n<li>Hard to setup</li>\n<li>Require significant effort to get working</li>\n<li>Plus: Offer more control</li>\n</ul>\n<p>That said, Expo does not lock us into using it. FCM and APNs servers can still be <a href=\"https://docs.expo.dev/push-notifications/sending-notifications-custom/#how-to-write-fcm-and-apns-servers\">added</a>.</p>\n<p>We’ll use expo Push Notification Service for this course.</p>\n",
      "id": 253
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/3-Flow.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/3-Flow.html",
      "content": "# 3. Flow\nCreated Sat Dec 30, 2023 at 1:56 PM\n\nactually just the flow architecture for our app (client + server if any). We're not concerned with how the provider works.\n\nExpo steps:\n1. Register the app (and device) with Expo directly, to get a token. This happens on the device itself and usually happens through a prompt 'Allow'.\n2. Send and store token received from Expo (step 1) on 'your server'.\n3. Send a notification to the device from your server. This is done by pinging Expo Push Notification service, which then sends a notification to the app. Expo provides server SDK's to do this, good.\n4. Handle the notification on the client.\n\nStep 1 needs to be done only once per user+device combo. If the app is uninstalled by the user, push notifications may be pushed by our server, but Expo will let us know that nobody received it (FIXME: check this).",
      "html": "<h1 id=\"3.-flow\">3. Flow <a class=\"heading-anchor-permalink\" href=\"#3.-flow\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<p>actually just the flow architecture for our app (client + server if any). We’re not concerned with how the provider works.</p>\n<p>Expo steps:</p>\n<ol>\n<li>Register the app (and device) with Expo directly, to get a token. This happens on the device itself and usually happens through a prompt ‘Allow’.</li>\n<li>Send and store token received from Expo (step 1) on ‘your server’.</li>\n<li>Send a notification to the device from your server. This is done by pinging Expo Push Notification service, which then sends a notification to the app. Expo provides server SDK’s to do this, good.</li>\n<li>Handle the notification on the client.</li>\n</ol>\n<p>Step 1 needs to be done only once per user+device combo. If the app is uninstalled by the user, push notifications may be pushed by our server, but Expo will let us know that nobody received it (FIXME: check this).</p>\n",
      "id": 254
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/4-Getting-push-notification-token.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/4-Getting-push-notification-token.html",
      "content": "# 4. Getting push notification token\nCreated Sat Dec 30, 2023 at 1:56 PM\n\nThe following is just *pseudocode* for the flow (described on previous page). Here's the [actual](https://github.com/exemplar-codes/DoneWithIt/commit/c450f48ff09288f11f6e192b3f75eddb4838ee86) code.\n\nEach token corresponds to an \"app installation\". So both device+app are registered in one go. Also, we need to do this once per install.\n## Client code\nThis is for hint, for actual steps see next page.\n```js\n// client flow\n// assuming user is logged in.\n// sync permissions have also been handled.\n\nimport callExpoToGetNewToken 'some-expo-package';\n\nuseEffect(() => {\n  const backendHasTokenForDevice = await callOwnBackend();\n  if(!backendHasTokenForDevice) {\n    const tokenFromExpo = await callExpoToGetNewToken({ appId: 'from-eas.json' }); // client - Expo talk directly.\n    // this `direct` talk is important. Because otherwise we'd need to get platform info\n    // and send to Expo from backend. Not hard, but why deal with platform info at all?\n    \n    await sendTokenToOwnBackend(tokenFromExpo);\n  }\n}, [])\n```\n![](/assets/4-Getting-push-notification-token-image-1-41c46f41.png)\n\n## Server code\n```js\n// backend flow\n// assuming user is in database, and notification token is saved too.\n\nimport SomeNotificationSDK from 'some-notification-sdk';\n\nconst user = await dbGetUser(id);\nSomeNotificationSDK('The message', user.notificationToken);\n```\n\nSent from app to our server, below. Save token into the DB now, in the user row/object.\n![](../../../../../assets/4-Getting-push-notification-token-image-2-41c46f41.png)",
      "html": "<h1 id=\"4.-getting-push-notification-token\">4. Getting push notification token <a class=\"heading-anchor-permalink\" href=\"#4.-getting-push-notification-token\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<p>The following is just <em>pseudocode</em> for the flow (described on previous page). Here’s the <a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/c450f48ff09288f11f6e192b3f75eddb4838ee86\">actual</a> code.</p>\n<p>Each token corresponds to an “app installation”. So both device+app are registered in one go. Also, we need to do this once per install.</p>\n<h2 id=\"client-code\">Client code <a class=\"heading-anchor-permalink\" href=\"#client-code\">#</a></h2>\n<p>This is for hint, for actual steps see next page.</p>\n<pre><code class=\"language-js\">// client flow\n// assuming user is logged in.\n// sync permissions have also been handled.\n\nimport callExpoToGetNewToken 'some-expo-package';\n\nuseEffect(() =&gt; {\n  const backendHasTokenForDevice = await callOwnBackend();\n  if(!backendHasTokenForDevice) {\n    const tokenFromExpo = await callExpoToGetNewToken({ appId: 'from-eas.json' }); // client - Expo talk directly.\n    // this `direct` talk is important. Because otherwise we'd need to get platform info\n    // and send to Expo from backend. Not hard, but why deal with platform info at all?\n    \n    await sendTokenToOwnBackend(tokenFromExpo);\n  }\n}, [])\n</code></pre>\n<p><img src=\"/assets/4-Getting-push-notification-token-image-1-41c46f41.png\" alt=\"\"></p>\n<h2 id=\"server-code\">Server code <a class=\"heading-anchor-permalink\" href=\"#server-code\">#</a></h2>\n<pre><code class=\"language-js\">// backend flow\n// assuming user is in database, and notification token is saved too.\n\nimport SomeNotificationSDK from 'some-notification-sdk';\n\nconst user = await dbGetUser(id);\nSomeNotificationSDK('The message', user.notificationToken);\n</code></pre>\n<p>Sent from app to our server, below. Save token into the DB now, in the user row/object.\n<img src=\"../../../../../assets/4-Getting-push-notification-token-image-2-41c46f41.png\" alt=\"\"></p>\n",
      "id": 255
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/6-Send-test-notification.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/6-Send-test-notification.html",
      "content": "# 6. Send test notification\nCreated Sun Jan 7, 2024 at 6:24 PM\n\n## From Expo online tool\nUse the expo site tool to send notifications. \n\nThere's a gotcha here: `send {\"_displayInForeground\": true }` atleast, otherwise there won't be a notification. \n\n\n## From app (client) itself\nIt's possible to ping Expo notification service from the app itself, and receive the notification. Here's the code\n```js\nconst sendNotificationHandler = async () => {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! 📬\",\n      body: \"Here is the notification body\",\n      data: { data: \"goes here\" },\n    },\n    trigger: { seconds: 2 },\n  });\n  \n  console.log(\"Server pinged fine\");\n  setIsLoading(true);\n  setTimeout(() => {\n    console.log(\"Sould have gotten it by now\");\n    setIsLoading(false);\n  }, 2000);\n}; // client pinging self, not common. for demo purposes.\n```",
      "html": "<h1 id=\"6.-send-test-notification\">6. Send test notification <a class=\"heading-anchor-permalink\" href=\"#6.-send-test-notification\">#</a></h1>\n<p>Created Sun Jan 7, 2024 at 6:24 PM</p>\n<h2 id=\"from-expo-online-tool\">From Expo online tool <a class=\"heading-anchor-permalink\" href=\"#from-expo-online-tool\">#</a></h2>\n<p>Use the expo site tool to send notifications.</p>\n<p>There’s a gotcha here: <code>send {&quot;_displayInForeground&quot;: true }</code> atleast, otherwise there won’t be a notification.</p>\n<h2 id=\"from-app-(client)-itself\">From app (client) itself <a class=\"heading-anchor-permalink\" href=\"#from-app-(client)-itself\">#</a></h2>\n<p>It’s possible to ping Expo notification service from the app itself, and receive the notification. Here’s the code</p>\n<pre><code class=\"language-js\">const sendNotificationHandler = async () =&gt; {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: &quot;You've got mail! 📬&quot;,\n      body: &quot;Here is the notification body&quot;,\n      data: { data: &quot;goes here&quot; },\n    },\n    trigger: { seconds: 2 },\n  });\n  \n  console.log(&quot;Server pinged fine&quot;);\n  setIsLoading(true);\n  setTimeout(() =&gt; {\n    console.log(&quot;Sould have gotten it by now&quot;);\n    setIsLoading(false);\n  }, 2000);\n}; // client pinging self, not common. for demo purposes.\n</code></pre>\n",
      "id": 256
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/7-1-Notifications-from-the-server.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/7-1-Notifications-from-the-server.html",
      "content": "# 7. Notifications from the server\nCreated Sat Dec 30, 2023 at 1:56 PM\n\n1. Install the required SDK for your language from the expo site - Node, Ruby, Python many more are available. \n2. Then make a API request to Expo via the SDK, passing the device's Expo push token (that you typically store during first install of the app) and payload as argument. \n3. Expo service forwards this request to Firebase Messaging or APNS (Apple Push Notification Service), depending on the the device. Finally the device receives the notification. \n\nBatching of notifications is also possible to avoid own server load.\n\nExample code:\n```js\nconst { Expo } = require(\"expo-server-sdk\");\n\n// example token 'ExponentPushToken[US2xmhFoeM_r-ZzTwWjk8p]', sent as is\nconst sendPushNotification = async (targetExpoPushToken, message) => {\n  const expo = new Expo();\n  const chunks = expo.chunkPushNotifications([\n    { to: targetExpoPushToken, sound: \"default\", body: message }\n  ]);\n\n  const sendChunks = async () => {\n    // This code runs synchronously. We're waiting for each chunk to be send.\n    // A better approach is to use Promise.all() and send multiple chunks in parallel.\n    chunks.forEach(async chunk => {\n      console.log(\"Sending Chunk\", chunk);\n      try {\n        const tickets = await expo.sendPushNotificationsAsync(chunk);\n        console.log(\"Tickets\", tickets);\n      } catch (error) {\n        console.log(\"Error sending chunk\", error);\n      }\n    });\n  };\n\n  await sendChunks();\n};\n\nmodule.exports = sendPushNotification;\n\n```",
      "html": "<h1 id=\"7.-notifications-from-the-server\">7. Notifications from the server <a class=\"heading-anchor-permalink\" href=\"#7.-notifications-from-the-server\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<ol>\n<li>Install the required SDK for your language from the expo site - Node, Ruby, Python many more are available.</li>\n<li>Then make a API request to Expo via the SDK, passing the device’s Expo push token (that you typically store during first install of the app) and payload as argument.</li>\n<li>Expo service forwards this request to Firebase Messaging or APNS (Apple Push Notification Service), depending on the the device. Finally the device receives the notification.</li>\n</ol>\n<p>Batching of notifications is also possible to avoid own server load.</p>\n<p>Example code:</p>\n<pre><code class=\"language-js\">const { Expo } = require(&quot;expo-server-sdk&quot;);\n\n// example token 'ExponentPushToken[US2xmhFoeM_r-ZzTwWjk8p]', sent as is\nconst sendPushNotification = async (targetExpoPushToken, message) =&gt; {\n  const expo = new Expo();\n  const chunks = expo.chunkPushNotifications([\n    { to: targetExpoPushToken, sound: &quot;default&quot;, body: message }\n  ]);\n\n  const sendChunks = async () =&gt; {\n    // This code runs synchronously. We're waiting for each chunk to be send.\n    // A better approach is to use Promise.all() and send multiple chunks in parallel.\n    chunks.forEach(async chunk =&gt; {\n      console.log(&quot;Sending Chunk&quot;, chunk);\n      try {\n        const tickets = await expo.sendPushNotificationsAsync(chunk);\n        console.log(&quot;Tickets&quot;, tickets);\n      } catch (error) {\n        console.log(&quot;Error sending chunk&quot;, error);\n      }\n    });\n  };\n\n  await sendChunks();\n};\n\nmodule.exports = sendPushNotification;\n\n</code></pre>\n",
      "id": 257
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/7-2-Detect-notification.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/7-2-Detect-notification.html",
      "content": "# 7. Detect notification\nCreated Sat Dec 30, 2023 at 1:56 PM\n\n## Setup\nThe setup to detect is simple:\n1. There's some UI config\n2. Hook into the Notification subsystem via Expo's [Notifications](https://docs.expo.dev/versions/latest/sdk/notifications/)package.\n3. We store new notification objects from this listening to the store/state.\n4. Upon app close (i.e. root level component cleanup), un-hook the listener.\n   \nAlready [seen](https://github.com/exemplar-codes/DoneWithIt/commit/c450f48ff09288f11f6e192b3f75eddb4838ee86#r136427655) in a previous page - we listen for notifications via an event listener and [Notifications](https://docs.expo.dev/versions/latest/sdk/notifications/) expo API. This listener is usually added at the root level component.\n\n\n## Service response\nReceived Notification objects has many keys\nSo, it's a small object - we get response body in .data. \n- `.origin` key has two values - \"received\" (notification was received when app was in foreground), or \"selected\" (when app was off or in background, and we tapped the notification). \n - `.remote` is true for PNS notifications. But it's false for local notifications. \n\nWe'll see how local notifications work soon.",
      "html": "<h1 id=\"7.-detect-notification\">7. Detect notification <a class=\"heading-anchor-permalink\" href=\"#7.-detect-notification\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<h2 id=\"setup\">Setup <a class=\"heading-anchor-permalink\" href=\"#setup\">#</a></h2>\n<p>The setup to detect is simple:</p>\n<ol>\n<li>There’s some UI config</li>\n<li>Hook into the Notification subsystem via Expo’s <a href=\"https://docs.expo.dev/versions/latest/sdk/notifications/\">Notifications</a>package.</li>\n<li>We store new notification objects from this listening to the store/state.</li>\n<li>Upon app close (i.e. root level component cleanup), un-hook the listener.</li>\n</ol>\n<p>Already <a href=\"https://github.com/exemplar-codes/DoneWithIt/commit/c450f48ff09288f11f6e192b3f75eddb4838ee86#r136427655\">seen</a> in a previous page - we listen for notifications via an event listener and <a href=\"https://docs.expo.dev/versions/latest/sdk/notifications/\">Notifications</a> expo API. This listener is usually added at the root level component.</p>\n<h2 id=\"service-response\">Service response <a class=\"heading-anchor-permalink\" href=\"#service-response\">#</a></h2>\n<p>Received Notification objects has many keys\nSo, it’s a small object - we get response body in .data.</p>\n<ul>\n<li><code>.origin</code> key has two values - “received” (notification was received when app was in foreground), or “selected” (when app was off or in background, and we tapped the notification).</li>\n<li><code>.remote</code> is true for PNS notifications. But it’s false for local notifications.</li>\n</ul>\n<p>We’ll see how local notifications work soon.</p>\n",
      "id": 258
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/8-1-Navigate-on-notification.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/8-1-Navigate-on-notification.html",
      "content": "# 8. 1 Navigate on notification\nCreated Sat Dec 30, 2023 at 1:56 PM\n\nThis not possible at the root level (and we can't keep the notification listener in a screen since that could be unmounted). useNavigation is also not possible since that's for leaf component not top level components.\n\nThe fix is to create a \"service\" file - which is just a fancy name for a simple trick. \nWe create a Recat ref in a JS file and export it. Yes a ref can be created without a component. Then we set this ref as the ref prop for top most react Navigation provider. See PKB react node. Already noted.\n\nNow, we can import and read/write to the exported thing's `.current` property.\nAnd can navigate from anywhere.\n\nIn our case when the listener detects a notification, it can check if it contains some navigation param, and navigate accordingly. And since notifications can have payload, even parameterized navigation is possible. Wow.\n\nBtw. With local navigation, this can absolve the problem of opening a large app quicker.",
      "html": "<h1 id=\"8.-1-navigate-on-notification\">8. 1 Navigate on notification <a class=\"heading-anchor-permalink\" href=\"#8.-1-navigate-on-notification\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<p>This not possible at the root level (and we can’t keep the notification listener in a screen since that could be unmounted). useNavigation is also not possible since that’s for leaf component not top level components.</p>\n<p>The fix is to create a “service” file - which is just a fancy name for a simple trick.\nWe create a Recat ref in a JS file and export it. Yes a ref can be created without a component. Then we set this ref as the ref prop for top most react Navigation provider. See PKB react node. Already noted.</p>\n<p>Now, we can import and read/write to the exported thing’s <code>.current</code> property.\nAnd can navigate from anywhere.</p>\n<p>In our case when the listener detects a notification, it can check if it contains some navigation param, and navigate accordingly. And since notifications can have payload, even parameterized navigation is possible. Wow.</p>\n<p>Btw. With local navigation, this can absolve the problem of opening a large app quicker.</p>\n",
      "id": 259
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/8-2-Local-notifications.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/8-2-Local-notifications.html",
      "content": "# 8. 2 Local notifications\nCreated Sat Dec 30, 2023 at 1:56 PM\n\nSimple to do in expo, and in RNCLI ig.\n\n`Notification.presentLocalNotification({ title: \"\", body: \"\" });` ",
      "html": "<h1 id=\"8.-2-local-notifications\">8. 2 Local notifications <a class=\"heading-anchor-permalink\" href=\"#8.-2-local-notifications\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<p>Simple to do in expo, and in RNCLI ig.</p>\n<p><code>Notification.presentLocalNotification({ title: &quot;&quot;, body: &quot;&quot; });</code></p>\n",
      "id": 260
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/7-Notifications/index.html",
      "content": "# 7. Notifications\nCreated Sat Dec 30, 2023 at 1:29 PM\n\n## Topics\n1. Introduction\n2. Push Notification Services\n3. Architecture\n4. Getting a Push Notification Token\n5. Storing the Push Notification Token\n6. Sending Test Notifications\n7. Sending Notifications on the Server\n8. Handling Received Notifications\n9. Navigation Upon Receiving a Notification\n10. Creating a Custom Hook\n11. Local Notifications\n12. Exercises\n13. Building the Contact Form",
      "html": "<h1 id=\"7.-notifications\">7. Notifications <a class=\"heading-anchor-permalink\" href=\"#7.-notifications\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:29 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>Push Notification Services</li>\n<li>Architecture</li>\n<li>Getting a Push Notification Token</li>\n<li>Storing the Push Notification Token</li>\n<li>Sending Test Notifications</li>\n<li>Sending Notifications on the Server</li>\n<li>Handling Received Notifications</li>\n<li>Navigation Upon Receiving a Notification</li>\n<li>Creating a Custom Hook</li>\n<li>Local Notifications</li>\n<li>Exercises</li>\n<li>Building the Contact Form</li>\n</ol>\n",
      "id": 261
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/10-Distributing-to-the-App-store.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/10-Distributing-to-the-App-store.html",
      "content": "# 10. Distributing to the App store\nCreated Sat Dec 30, 2023 at 1:57 PM\n\nNow, I'm assuming you have trigger build in expo.\n\n## Step 1\n- Go to https://appstoreconnect.apple.com/ and log in\n- Go to 'My apps'\n- Create a new app\n- Choose platform - for phones, just iOS is ok\n- Add name, primary app lang (English)\n- Bundle id - whatever was generated by expo during build\n- SKU - the unique reverse DNS identifier of our app. i.e. same\n- You should be able to download an '.ipa' file now. Download it.\n\n## Step 2 - upload to app store\n1. On mac, install the \"Transporter\" app from AppStore. And log in.\n2. Select 'Add app' and select the ipa file. Or drag and drop the file into Transporter.\n3. The app will show up in 'Active' tab. Press 'Deliver CTA'\n4. The app will now be uploaded to app store by transporter. Takes a few minutes\n\nThis may be done for multiple versions of the app - usually language variations, or for A/B testing.\n\n## Step 3 - check, tweak, add testers\n1. Go back to https://appstoreconnect.apple.com/\n2. Check the 'Activity' tab and see if app(s) were uploaded and built fine.\n3. Optionally, go to TestFlight tab, and setup tests. Further testers may be added from here, including inviting external testers. Of course, external testers will need to download the TestFlight mobile app.\n\n## Step 4 - submission\nGo to the next tab, and add description, promotional info, changes etc.\nHave to provide some screenshots, urls, keywords too.\n\nThis will be displayed in the AppStore.\n\n## Step 5 - wait for approval\nThe app approval takes 2 days or so, and it it's ok, the app will be live.\nOr else, you'll be communicated with possible changes.\nIf you get some, make the changes, and then, follow all steps from the start ;(\n\nBtw, you'll need to bump up the build number in this case.",
      "html": "<h1 id=\"10.-distributing-to-the-app-store\">10. Distributing to the App store <a class=\"heading-anchor-permalink\" href=\"#10.-distributing-to-the-app-store\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:57 PM</p>\n<p>Now, I’m assuming you have trigger build in expo.</p>\n<h2 id=\"step-1\">Step 1 <a class=\"heading-anchor-permalink\" href=\"#step-1\">#</a></h2>\n<ul>\n<li>Go to <a href=\"https://appstoreconnect.apple.com/\">https://appstoreconnect.apple.com/</a> and log in</li>\n<li>Go to ‘My apps’</li>\n<li>Create a new app</li>\n<li>Choose platform - for phones, just iOS is ok</li>\n<li>Add name, primary app lang (English)</li>\n<li>Bundle id - whatever was generated by expo during build</li>\n<li>SKU - the unique reverse DNS identifier of our app. i.e. same</li>\n<li>You should be able to download an ‘.ipa’ file now. Download it.</li>\n</ul>\n<h2 id=\"step-2---upload-to-app-store\">Step 2 - upload to app store <a class=\"heading-anchor-permalink\" href=\"#step-2---upload-to-app-store\">#</a></h2>\n<ol>\n<li>On mac, install the “Transporter” app from AppStore. And log in.</li>\n<li>Select ‘Add app’ and select the ipa file. Or drag and drop the file into Transporter.</li>\n<li>The app will show up in ‘Active’ tab. Press ‘Deliver CTA’</li>\n<li>The app will now be uploaded to app store by transporter. Takes a few minutes</li>\n</ol>\n<p>This may be done for multiple versions of the app - usually language variations, or for A/B testing.</p>\n<h2 id=\"step-3---check%2C-tweak%2C-add-testers\">Step 3 - check, tweak, add testers <a class=\"heading-anchor-permalink\" href=\"#step-3---check%2C-tweak%2C-add-testers\">#</a></h2>\n<ol>\n<li>Go back to <a href=\"https://appstoreconnect.apple.com/\">https://appstoreconnect.apple.com/</a></li>\n<li>Check the ‘Activity’ tab and see if app(s) were uploaded and built fine.</li>\n<li>Optionally, go to TestFlight tab, and setup tests. Further testers may be added from here, including inviting external testers. Of course, external testers will need to download the TestFlight mobile app.</li>\n</ol>\n<h2 id=\"step-4---submission\">Step 4 - submission <a class=\"heading-anchor-permalink\" href=\"#step-4---submission\">#</a></h2>\n<p>Go to the next tab, and add description, promotional info, changes etc.\nHave to provide some screenshots, urls, keywords too.</p>\n<p>This will be displayed in the AppStore.</p>\n<h2 id=\"step-5---wait-for-approval\">Step 5 - wait for approval <a class=\"heading-anchor-permalink\" href=\"#step-5---wait-for-approval\">#</a></h2>\n<p>The app approval takes 2 days or so, and it it’s ok, the app will be live.\nOr else, you’ll be communicated with possible changes.\nIf you get some, make the changes, and then, follow all steps from the start ;(</p>\n<p>Btw, you’ll need to bump up the build number in this case.</p>\n",
      "id": 262
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/11-Building-the-android-app.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/11-Building-the-android-app.html",
      "content": "# 11. Building the android app\nCreated Sat Dec 30, 2023 at 1:57 PM\n\n## Config\nGo to app.json and set:\n- `android.package` - to a unique string (representing the app) in reverse DNS location. Example: \"com.sanjarcode.doneWithIt\". This is usually never changed. There's no need to have a website or anything for the value you enter above.\n- `android.versionCode` - number. This is not seen by users (`version` key does that). This is used by Google to keep track of build numbers. Bump this up when you submit new builds.\n\n## Do the build\nRun `expo buld:android`. Answer prompt\n- Build-type. Choose\n\t- APK - for generating setup file\n\t- App-bundle - for generating file to be uploaded to PlayStore.\n- Key-store - Choose \"let expo handle\"\n\nThe prompt will now show a URL and go into loading state. Press Ctrl + C, no issues, build won't be aborted. Click the URL to check build progress.\n\nOn the URL, you'' get to download the .apk or app-bundle (whatever you chose earlier).\n\nNote:\n- Large bundle size - even small Expo apps are large, like ~50 MB. This happens because Expo bundles a lot of functionality by default, even if the code doesn't use it. There's been some effort from Expo to reduce this bloat.\n- If large size is not ok for you. There's no choice but to eject from Expo. But do this only if you know how to build ios apps on your own.\n\n\n## Generate the keystore (PlayStore)\nRun `expo fetch:android:keystore`. This generates a `.jks` file.\nThe file is like an authentication key and used to update the app on PlayStore.\n\nSo keep it private and safe. If you lose it, we'll need to submit the app as a new app, foregoing the name and unique identifier too.",
      "html": "<h1 id=\"11.-building-the-android-app\">11. Building the android app <a class=\"heading-anchor-permalink\" href=\"#11.-building-the-android-app\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:57 PM</p>\n<h2 id=\"config\">Config <a class=\"heading-anchor-permalink\" href=\"#config\">#</a></h2>\n<p>Go to app.json and set:</p>\n<ul>\n<li><code>android.package</code> - to a unique string (representing the app) in reverse DNS location. Example: “com.sanjarcode.doneWithIt”. This is usually never changed. There’s no need to have a website or anything for the value you enter above.</li>\n<li><code>android.versionCode</code> - number. This is not seen by users (<code>version</code> key does that). This is used by Google to keep track of build numbers. Bump this up when you submit new builds.</li>\n</ul>\n<h2 id=\"do-the-build\">Do the build <a class=\"heading-anchor-permalink\" href=\"#do-the-build\">#</a></h2>\n<p>Run <code>expo buld:android</code>. Answer prompt</p>\n<ul>\n<li>Build-type. Choose\n<ul>\n<li>APK - for generating setup file</li>\n<li>App-bundle - for generating file to be uploaded to PlayStore.</li>\n</ul>\n</li>\n<li>Key-store - Choose “let expo handle”</li>\n</ul>\n<p>The prompt will now show a URL and go into loading state. Press Ctrl + C, no issues, build won’t be aborted. Click the URL to check build progress.</p>\n<p>On the URL, you’’ get to download the .apk or app-bundle (whatever you chose earlier).</p>\n<p>Note:</p>\n<ul>\n<li>Large bundle size - even small Expo apps are large, like ~50 MB. This happens because Expo bundles a lot of functionality by default, even if the code doesn’t use it. There’s been some effort from Expo to reduce this bloat.</li>\n<li>If large size is not ok for you. There’s no choice but to eject from Expo. But do this only if you know how to build ios apps on your own.</li>\n</ul>\n<h2 id=\"generate-the-keystore-(playstore)\">Generate the keystore (PlayStore) <a class=\"heading-anchor-permalink\" href=\"#generate-the-keystore-(playstore)\">#</a></h2>\n<p>Run <code>expo fetch:android:keystore</code>. This generates a <code>.jks</code> file.\nThe file is like an authentication key and used to update the app on PlayStore.</p>\n<p>So keep it private and safe. If you lose it, we’ll need to submit the app as a new app, foregoing the name and unique identifier too.</p>\n",
      "id": 263
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/12-Distributing-to-playstore.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/12-Distributing-to-playstore.html",
      "content": "# 12. Distributing to playstore\nCreated Sat Dec 30, 2023 at 1:57 PM\n\nMissing info, will add.",
      "html": "<h1 id=\"12.-distributing-to-playstore\">12. Distributing to playstore <a class=\"heading-anchor-permalink\" href=\"#12.-distributing-to-playstore\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:57 PM</p>\n<p>Missing info, will add.</p>\n",
      "id": 264
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/13-OTA-updates.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/13-OTA-updates.html",
      "content": "# 13. OTA updates\nCreated Sat Dec 30, 2023 at 1:57 PM\n\n## What, how and advantage\nExpo OTA updates are a super power.\n\nThe story is, that native apps on Apple or ANdroid, built with Kotlin/Swift need to the build + distribute process whenever they are updated.\n\nBut RN doesn't have to, since it's JS. So on both iOS and Android, OTA updates are allowed.\n\nSo, we don't have to go through build + distribute steps for updates. It happens automatically, i.e. whenever we update the app code, and trigger a build, the updated bundle gets saved to Expo cloud. Now, all expo managed apps running on user devices do a update check with Expo server when they start, and if found, download the update in the background, to be used on next start of the app.\n\n\n## When to use OTA updates\nIf update involves:\n- Assets like images\n- Changes in text\n- Bug fixes\n- Small features\n\n## When not to use OTA updates\nLarge features can be done in OTA mode too, but it's generally better to do the build + distribute step for them, and also update store level description, screenshots etc.\n\n\n## Workflow matters? no.\nOTA updates are supported in both Expo 'managed' and 'bare' workflows.",
      "html": "<h1 id=\"13.-ota-updates\">13. OTA updates <a class=\"heading-anchor-permalink\" href=\"#13.-ota-updates\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:57 PM</p>\n<h2 id=\"what%2C-how-and-advantage\">What, how and advantage <a class=\"heading-anchor-permalink\" href=\"#what%2C-how-and-advantage\">#</a></h2>\n<p>Expo OTA updates are a super power.</p>\n<p>The story is, that native apps on Apple or ANdroid, built with Kotlin/Swift need to the build + distribute process whenever they are updated.</p>\n<p>But RN doesn’t have to, since it’s JS. So on both iOS and Android, OTA updates are allowed.</p>\n<p>So, we don’t have to go through build + distribute steps for updates. It happens automatically, i.e. whenever we update the app code, and trigger a build, the updated bundle gets saved to Expo cloud. Now, all expo managed apps running on user devices do a update check with Expo server when they start, and if found, download the update in the background, to be used on next start of the app.</p>\n<h2 id=\"when-to-use-ota-updates\">When to use OTA updates <a class=\"heading-anchor-permalink\" href=\"#when-to-use-ota-updates\">#</a></h2>\n<p>If update involves:</p>\n<ul>\n<li>Assets like images</li>\n<li>Changes in text</li>\n<li>Bug fixes</li>\n<li>Small features</li>\n</ul>\n<h2 id=\"when-not-to-use-ota-updates\">When not to use OTA updates <a class=\"heading-anchor-permalink\" href=\"#when-not-to-use-ota-updates\">#</a></h2>\n<p>Large features can be done in OTA mode too, but it’s generally better to do the build + distribute step for them, and also update store level description, screenshots etc.</p>\n<h2 id=\"workflow-matters%3F-no.\">Workflow matters? no. <a class=\"heading-anchor-permalink\" href=\"#workflow-matters%3F-no.\">#</a></h2>\n<p>OTA updates are supported in both Expo ‘managed’ and ‘bare’ workflows.</p>\n",
      "id": 265
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/2-App-Icon.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/2-App-Icon.html",
      "content": "# 2. App Icon\nCreated Sat Dec 30, 2023 at 1:56 PM\n\n## App icon \nIn expo this is very easy to do. just specify it in the `app.json`\n- key is `icon`, value is the path\n- Image must be in PNG format \n- Size should be 1024 x 1024 \n- Avoid round cornered image.\nExpo will auto generate the required sized icons for Android and ios, so we don't have to.\n\n\n## Splash screen \nSame as before, specify in `app.json`\nuse PNG. Size doesn't matter that much.\n\n\n![](/assets/2-App-Icon-image-1-a30d4072.png)",
      "html": "<h1 id=\"2.-app-icon\">2. App Icon <a class=\"heading-anchor-permalink\" href=\"#2.-app-icon\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<h2 id=\"app-icon\">App icon <a class=\"heading-anchor-permalink\" href=\"#app-icon\">#</a></h2>\n<p>In expo this is very easy to do. just specify it in the <code>app.json</code></p>\n<ul>\n<li>key is <code>icon</code>, value is the path</li>\n<li>Image must be in PNG format</li>\n<li>Size should be 1024 x 1024</li>\n<li>Avoid round cornered image.\nExpo will auto generate the required sized icons for Android and ios, so we don’t have to.</li>\n</ul>\n<h2 id=\"splash-screen\">Splash screen <a class=\"heading-anchor-permalink\" href=\"#splash-screen\">#</a></h2>\n<p>Same as before, specify in <code>app.json</code>\nuse PNG. Size doesn’t matter that much.</p>\n<p><img src=\"/assets/2-App-Icon-image-1-a30d4072.png\" alt=\"\"></p>\n",
      "id": 266
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/3-Optimize-assets.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/3-Optimize-assets.html",
      "content": "# 3. Optimize assets\nCreated Sat Dec 30, 2023 at 1:56 PM\n\n1. Remove image and other assets that can be downloaded at run time. Keep only essential assets\n2. Run `npx expo-optimize` command from project root. This needs `npm i -g sharp-cli` to be installed at first though. The command will optimize all assets in the project.",
      "html": "<h1 id=\"3.-optimize-assets\">3. Optimize assets <a class=\"heading-anchor-permalink\" href=\"#3.-optimize-assets\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<ol>\n<li>Remove image and other assets that can be downloaded at run time. Keep only essential assets</li>\n<li>Run <code>npx expo-optimize</code> command from project root. This needs <code>npm i -g sharp-cli</code> to be installed at first though. The command will optimize all assets in the project.</li>\n</ol>\n",
      "id": 267
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/4-Optimize-bundle.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/4-Optimize-bundle.html",
      "content": "# 4. Optimize bundle\nCreated Sat Dec 30, 2023 at 1:56 PM\n\n1. **Lightweight packages** - try to use lighter libraries instead of heavier packages if possible. This is usually a geat optimization since many libraries are very powerful, but we use only a small portion of it. A simpler library may do the same thing.\n2. **Submodules** - Sometimes, how we import also matters. Many libraries export submodules, and at the same time a default module that redundantly has the same function. Using the submodules approach here could help a lot. i.e. `import. { uniqueId } from lodash` is heavier than `import uniqueId from lodash/uniqueId`;",
      "html": "<h1 id=\"4.-optimize-bundle\">4. Optimize bundle <a class=\"heading-anchor-permalink\" href=\"#4.-optimize-bundle\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:56 PM</p>\n<ol>\n<li><strong>Lightweight packages</strong> - try to use lighter libraries instead of heavier packages if possible. This is usually a geat optimization since many libraries are very powerful, but we use only a small portion of it. A simpler library may do the same thing.</li>\n<li><strong>Submodules</strong> - Sometimes, how we import also matters. Many libraries export submodules, and at the same time a default module that redundantly has the same function. Using the submodules approach here could help a lot. i.e. <code>import. { uniqueId } from lodash</code> is heavier than <code>import uniqueId from lodash/uniqueId</code>;</li>\n</ol>\n",
      "id": 268
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/5-Error-reporting.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/5-Error-reporting.html",
      "content": "# 5. Error reporting\nCreated Sat Dec 30, 2023 at 1:57 PM\n\nClient side apps (especially) mobile are used in the fields.\nAnd it's usually hard for you or the user to debug/report.\n\nTherefore, using a error reporting Sentry is helpful.\n\nThese platforms usually have an SDK that can be added to our app, and we can log errors with our license key. We can then see errors and analytics for runtime issues as experienced by users.\n\nThis way, we get to know errors remotely. This includes the device id, our app version, platform and other information labelled with each error.\n\nOptionally, during install an SDK can be configured to upload \"source maps\" too, so we on dev side can debug the bug files with our \"real\" source code.\n\nMake sure you create a wrapper around the SDK and use that in the app code. Makes migration easy. Example:\n```js\nimport Bugsnag from '@bugsnag/expo';\n\nconst log = (error) => Bugsnag.notify(error);\nconst start = () => Bugsnag.start();\n\nexport default { log, start };\n```\n\nUsage wise, we need to initialize this SDK once. Usually done in App.js and outside the component. We can now use the log wrapper in our try catches.",
      "html": "<h1 id=\"5.-error-reporting\">5. Error reporting <a class=\"heading-anchor-permalink\" href=\"#5.-error-reporting\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:57 PM</p>\n<p>Client side apps (especially) mobile are used in the fields.\nAnd it’s usually hard for you or the user to debug/report.</p>\n<p>Therefore, using a error reporting Sentry is helpful.</p>\n<p>These platforms usually have an SDK that can be added to our app, and we can log errors with our license key. We can then see errors and analytics for runtime issues as experienced by users.</p>\n<p>This way, we get to know errors remotely. This includes the device id, our app version, platform and other information labelled with each error.</p>\n<p>Optionally, during install an SDK can be configured to upload “source maps” too, so we on dev side can debug the bug files with our “real” source code.</p>\n<p>Make sure you create a wrapper around the SDK and use that in the app code. Makes migration easy. Example:</p>\n<pre><code class=\"language-js\">import Bugsnag from '@bugsnag/expo';\n\nconst log = (error) =&gt; Bugsnag.notify(error);\nconst start = () =&gt; Bugsnag.start();\n\nexport default { log, start };\n</code></pre>\n<p>Usage wise, we need to initialize this SDK once. Usually done in App.js and outside the component. We can now use the log wrapper in our try catches.</p>\n",
      "id": 269
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/6-Environment-management.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/6-Environment-management.html",
      "content": "# 6. Environment management\nCreated Sat Dec 30, 2023 at 1:57 PM\n\nIts common to have dev, staging and prod apps.\n\n## How to detect env\n```js\nimport { Constants } from 'expo-constants';\n\nconst getCurrentSettings = () => {\n  if (__DEV__) return settings.dev; // __DEV__ is from RN core. no import needed.\n  if (Constants.manifest.releaseChannel === 'staging') return settings.staging;\n\n  return settings.prod;\n}\n```\n\n`releaseChannel` is something that is set during app build (or expo publish). where we usually need to specify if staging or prod. See next page for info.\n\nThat's it, use a JSON like env library for each config.",
      "html": "<h1 id=\"6.-environment-management\">6. Environment management <a class=\"heading-anchor-permalink\" href=\"#6.-environment-management\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:57 PM</p>\n<p>Its common to have dev, staging and prod apps.</p>\n<h2 id=\"how-to-detect-env\">How to detect env <a class=\"heading-anchor-permalink\" href=\"#how-to-detect-env\">#</a></h2>\n<pre><code class=\"language-js\">import { Constants } from 'expo-constants';\n\nconst getCurrentSettings = () =&gt; {\n  if (__DEV__) return settings.dev; // __DEV__ is from RN core. no import needed.\n  if (Constants.manifest.releaseChannel === 'staging') return settings.staging;\n\n  return settings.prod;\n}\n</code></pre>\n<p><code>releaseChannel</code> is something that is set during app build (or expo publish). where we usually need to specify if staging or prod. See next page for info.</p>\n<p>That’s it, use a JSON like env library for each config.</p>\n",
      "id": 270
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/7-Expo-publish.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/7-Expo-publish.html",
      "content": "# 7. Expo publish\nCreated Sat Dec 30, 2023 at 1:57 PM\n\nExpo publish is a quick and simple way to share out app with out team or anyone with the Expo Go app installed on their phone.\n\nAfter publishing, you get a URL that can be shared.\n\nCommand for publishing is:\n```sh\nnpx expo publish -release-channel='myStaging' ## old\n```\n\nSharing can be done in URL only or private mode too.\n\nThis is done by having \"privacy\" key in app.json\n- By default - value is `unlisted`, this hides the URL from search engines.\n- `public` - makes the URL searchable and accessible to all\n- `private` - also supported TBD\n\n\n## EAS - the new way\nExpo publish has been \"sunset\" in 2024, last day is Feb 2024. See [official blog](https://blog.expo.dev/sunsetting-expo-publish-and-classic-updates-6cb9cd295378).\nIt's now called 'Classic Updates'. The new way to build/publish is called 'EAS Update'.\n\nClassic Update will still remain available for SDK 49 or earlier.\n\n[Migration guide - expo-publish to eas](https://docs.expo.dev/eas-update/migrate-from-classic-updates/)",
      "html": "<h1 id=\"7.-expo-publish\">7. Expo publish <a class=\"heading-anchor-permalink\" href=\"#7.-expo-publish\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:57 PM</p>\n<p>Expo publish is a quick and simple way to share out app with out team or anyone with the Expo Go app installed on their phone.</p>\n<p>After publishing, you get a URL that can be shared.</p>\n<p>Command for publishing is:</p>\n<pre><code class=\"language-sh\">npx expo publish -release-channel='myStaging' ## old\n</code></pre>\n<p>Sharing can be done in URL only or private mode too.</p>\n<p>This is done by having “privacy” key in app.json</p>\n<ul>\n<li>By default - value is <code>unlisted</code>, this hides the URL from search engines.</li>\n<li><code>public</code> - makes the URL searchable and accessible to all</li>\n<li><code>private</code> - also supported TBD</li>\n</ul>\n<h2 id=\"eas---the-new-way\">EAS - the new way <a class=\"heading-anchor-permalink\" href=\"#eas---the-new-way\">#</a></h2>\n<p>Expo publish has been “sunset” in 2024, last day is Feb 2024. See <a href=\"https://blog.expo.dev/sunsetting-expo-publish-and-classic-updates-6cb9cd295378\">official blog</a>.\nIt’s now called ‘Classic Updates’. The new way to build/publish is called ‘EAS Update’.</p>\n<p>Classic Update will still remain available for SDK 49 or earlier.</p>\n<p><a href=\"https://docs.expo.dev/eas-update/migrate-from-classic-updates/\">Migration guide - expo-publish to eas</a></p>\n",
      "id": 271
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/8-Build-standalone-apps.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/8-Build-standalone-apps.html",
      "content": "# 8. Build standalone apps\nCreated Sat Dec 30, 2023 at 1:57 PM\n\n## Sharing is hard\nExpo URL is not a cool way to share your app with non-dev folks, since they'll need to install Expo app, and may find it hard.\n\nA better way is to provide an APK.\n\n\n## Types of standalone apps\nThere are two kinds of standalone apps:\n1. Bundles for stores - PlayStore/AppStore\n2. Build APK for direct install\n\n\n## Expo's build service\nExpo provides a free service where we just run a command and expo generates the bundle.\n\nNote:\n- This command can be run only in the 'managed' worfklow option of expo. In the 'bare' workflow, the process is tedious and requires effort.\n- Mac not needed - the service runs on the cloud, by default. So you can generate ios bundle without needing a mac.",
      "html": "<h1 id=\"8.-build-standalone-apps\">8. Build standalone apps <a class=\"heading-anchor-permalink\" href=\"#8.-build-standalone-apps\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:57 PM</p>\n<h2 id=\"sharing-is-hard\">Sharing is hard <a class=\"heading-anchor-permalink\" href=\"#sharing-is-hard\">#</a></h2>\n<p>Expo URL is not a cool way to share your app with non-dev folks, since they’ll need to install Expo app, and may find it hard.</p>\n<p>A better way is to provide an APK.</p>\n<h2 id=\"types-of-standalone-apps\">Types of standalone apps <a class=\"heading-anchor-permalink\" href=\"#types-of-standalone-apps\">#</a></h2>\n<p>There are two kinds of standalone apps:</p>\n<ol>\n<li>Bundles for stores - PlayStore/AppStore</li>\n<li>Build APK for direct install</li>\n</ol>\n<h2 id=\"expo%E2%80%99s-build-service\">Expo’s build service <a class=\"heading-anchor-permalink\" href=\"#expo%E2%80%99s-build-service\">#</a></h2>\n<p>Expo provides a free service where we just run a command and expo generates the bundle.</p>\n<p>Note:</p>\n<ul>\n<li>This command can be run only in the ‘managed’ worfklow option of expo. In the ‘bare’ workflow, the process is tedious and requires effort.</li>\n<li>Mac not needed - the service runs on the cloud, by default. So you can generate ios bundle without needing a mac.</li>\n</ul>\n",
      "id": 272
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/9-Build-the-ios-app.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/9-Build-the-ios-app.html",
      "content": "# 9. Build the ios app\nCreated Sat Dec 30, 2023 at 1:57 PM\n\n## Step 1 - Register with Apple\nTo add an ios app to the App store, you need to register in the Apple Developer Program.\nYou can sign up as an individual or an organization. Need to upload some document like drivers license.\n\nThis involves a fee of around 100 dollars. Renewal fee is 100 year, per year.\nIf you don't won't be updating the app anytime soon, renewal is not needed. The latest version of the app will always be available on the AppStore.\n\n\n## Step 2 - Configs - register new app metadata\nConfigs. Go to app.json\n- `ios.supportsTablet` - true or false\n- `ios.bundleIdentifier` - \"com.sanjarcode.donewithit\". Should be unique to the app, and usually never changes. This is called reverse DNS notation. Of course, there's no need to create a website or something named like so.\n- `ios.buildNumber` - \"1.0.0\", update this when you build a new bundle\n- `version` - version as it will appear in app metadata on the store, and after installation\n\nNote: you may get \"build already exists\". This usually means you forgot to bump up the build number.\n\n\n## Step 3 - generate the bundle\nRun `expo build:ios`. Then answer the prompts:\n1. yes I have apple account\n2. apple id\n3. password\n4. 'Getting Distribution Certificates on Apple Servers'. Choose \"let expo handle\"\n5. 'Provide Apple PNS key'. Choose \"let expo handle\"\n\nThe prompt will now show a URL and go into loading state. Press Ctrl + C, no issues, build won't be aborted. Click the URL to check build progress.\n\n![](/assets/9-Build-the-ios-app-image-1-a30d4072.png)\n\nNote:\n- Large bundle size - even small Expo apps are large, like ~50 MB. This happens because Expo bundles a lot of functionality by default, even if the code doesn't use it. There's been some effort from Expo to reduce this bloat.\n- If large size is not ok for you. There's no choice but to eject from Expo. But do this only if you know how to build ios apps on your own.",
      "html": "<h1 id=\"9.-build-the-ios-app\">9. Build the ios app <a class=\"heading-anchor-permalink\" href=\"#9.-build-the-ios-app\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:57 PM</p>\n<h2 id=\"step-1---register-with-apple\">Step 1 - Register with Apple <a class=\"heading-anchor-permalink\" href=\"#step-1---register-with-apple\">#</a></h2>\n<p>To add an ios app to the App store, you need to register in the Apple Developer Program.\nYou can sign up as an individual or an organization. Need to upload some document like drivers license.</p>\n<p>This involves a fee of around 100 dollars. Renewal fee is 100 year, per year.\nIf you don’t won’t be updating the app anytime soon, renewal is not needed. The latest version of the app will always be available on the AppStore.</p>\n<h2 id=\"step-2---configs---register-new-app-metadata\">Step 2 - Configs - register new app metadata <a class=\"heading-anchor-permalink\" href=\"#step-2---configs---register-new-app-metadata\">#</a></h2>\n<p>Configs. Go to app.json</p>\n<ul>\n<li><code>ios.supportsTablet</code> - true or false</li>\n<li><code>ios.bundleIdentifier</code> - “com.sanjarcode.donewithit”. Should be unique to the app, and usually never changes. This is called reverse DNS notation. Of course, there’s no need to create a website or something named like so.</li>\n<li><code>ios.buildNumber</code> - “1.0.0”, update this when you build a new bundle</li>\n<li><code>version</code> - version as it will appear in app metadata on the store, and after installation</li>\n</ul>\n<p>Note: you may get “build already exists”. This usually means you forgot to bump up the build number.</p>\n<h2 id=\"step-3---generate-the-bundle\">Step 3 - generate the bundle <a class=\"heading-anchor-permalink\" href=\"#step-3---generate-the-bundle\">#</a></h2>\n<p>Run <code>expo build:ios</code>. Then answer the prompts:</p>\n<ol>\n<li>yes I have apple account</li>\n<li>apple id</li>\n<li>password</li>\n<li>‘Getting Distribution Certificates on Apple Servers’. Choose “let expo handle”</li>\n<li>‘Provide Apple PNS key’. Choose “let expo handle”</li>\n</ol>\n<p>The prompt will now show a URL and go into loading state. Press Ctrl + C, no issues, build won’t be aborted. Click the URL to check build progress.</p>\n<p><img src=\"/assets/9-Build-the-ios-app-image-1-a30d4072.png\" alt=\"\"></p>\n<p>Note:</p>\n<ul>\n<li>Large bundle size - even small Expo apps are large, like ~50 MB. This happens because Expo bundles a lot of functionality by default, even if the code doesn’t use it. There’s been some effort from Expo to reduce this bloat.</li>\n<li>If large size is not ok for you. There’s no choice but to eject from Expo. But do this only if you know how to build ios apps on your own.</li>\n</ul>\n",
      "id": 273
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/Part-2/8-Distribution/index.html",
      "content": "# 8. Distribution\nCreated Sat Dec 30, 2023 at 1:29 PM\n\n## Topics\n1. Introduction\n2. App Icon\n3. Optimizing Assets\n4. Optimizing JavaScript Bundle\n5. Error Reporting\n6. Environment Management\n7. Publishing\n8. Building Standalone Apps\n9. Building the iOS App\n10. Distributing to the App Store\n11. Building the Android App\n12. Distributing to the Google Play Store\n13. Over-the-air Updates\n14. Additional Resources\n15. Course Wrap Up",
      "html": "<h1 id=\"8.-distribution\">8. Distribution <a class=\"heading-anchor-permalink\" href=\"#8.-distribution\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 1:29 PM</p>\n<h2 id=\"topics\">Topics <a class=\"heading-anchor-permalink\" href=\"#topics\">#</a></h2>\n<ol>\n<li>Introduction</li>\n<li>App Icon</li>\n<li>Optimizing Assets</li>\n<li>Optimizing JavaScript Bundle</li>\n<li>Error Reporting</li>\n<li>Environment Management</li>\n<li>Publishing</li>\n<li>Building Standalone Apps</li>\n<li>Building the iOS App</li>\n<li>Distributing to the App Store</li>\n<li>Building the Android App</li>\n<li>Distributing to the Google Play Store</li>\n<li>Over-the-air Updates</li>\n<li>Additional Resources</li>\n<li>Course Wrap Up</li>\n</ol>\n",
      "id": 274
    },
    {
      "path": "home/4_resource_itineraries/3-RN-Mosh/index.md",
      "url": "home/4_resource_itineraries/3-RN-Mosh/index.html",
      "content": "",
      "html": "",
      "id": 275
    },
    {
      "path": "home/5_projects.md",
      "url": "home/5_projects.html",
      "content": "# 5. Projects\nCreated Thursday 13 February 2022\n\n1. [Assorted React Apps](https://github.com/exemplar-codes/assorted-reactjs-apps) - a project to play with React, has many sub-projects.\n2. [Expense Tracker](https://github.com/exemplar-codes/expense-tracker-react) - in course demo project.\n3. [Pocket Calculator](https://github.com/exemplar-codes/pocket-calculator) - something I made on my own, for practice.\n4. [Course selection styling](https://github.com/exemplar-codes/course-selection-styling) - in course demo project.\n5. [Todo Like List](https://github.com/exemplar-codes/todo_like_list) - after styling in React section. For practicing everything until that point.\n6. [Login Page](https://github.com/exemplar-codes/login-page) - for practice and study, course related.\n7. [React Meals](https://github.com/exemplar-codes/react-meals) - For practice.\n8. [React Working and Optimizations](https://github.com/exemplar-codes/react-working-and-optimizations)\n9. [React With Classes](https://github.com/exemplar-codes/react-with-classes)\n10. [React HTTP app](https://github.com/exemplar-codes/react-http-app) - learn to work with HTTP in React.\n11. [React Forms User Input](https://github.com/exemplar-codes/reactjs-forms-user-input) - learn to work with forms in React\n12. [Redux Demo](https://github.com/exemplar-codes/redux-demo) - core Redux demo.\n13. [Core Redux React Demo](https://github.com/exemplar-codes/core-redux-react-demo) - using core Redux in React apps.\n14. React Router - [React Router demo](https://github.com/exemplar-codes/react-router-demo), [React Router practice - quotes app](https://github.com/exemplar-codes/react-router-practice)\n",
      "html": "<h1 id=\"5.-projects\">5. Projects <a class=\"heading-anchor-permalink\" href=\"#5.-projects\">#</a></h1>\n<p>Created Thursday 13 February 2022</p>\n<ol>\n<li><a href=\"https://github.com/exemplar-codes/assorted-reactjs-apps\">Assorted React Apps</a> - a project to play with React, has many sub-projects.</li>\n<li><a href=\"https://github.com/exemplar-codes/expense-tracker-react\">Expense Tracker</a> - in course demo project.</li>\n<li><a href=\"https://github.com/exemplar-codes/pocket-calculator\">Pocket Calculator</a> - something I made on my own, for practice.</li>\n<li><a href=\"https://github.com/exemplar-codes/course-selection-styling\">Course selection styling</a> - in course demo project.</li>\n<li><a href=\"https://github.com/exemplar-codes/todo_like_list\">Todo Like List</a> - after styling in React section. For practicing everything until that point.</li>\n<li><a href=\"https://github.com/exemplar-codes/login-page\">Login Page</a> - for practice and study, course related.</li>\n<li><a href=\"https://github.com/exemplar-codes/react-meals\">React Meals</a> - For practice.</li>\n<li><a href=\"https://github.com/exemplar-codes/react-working-and-optimizations\">React Working and Optimizations</a></li>\n<li><a href=\"https://github.com/exemplar-codes/react-with-classes\">React With Classes</a></li>\n<li><a href=\"https://github.com/exemplar-codes/react-http-app\">React HTTP app</a> - learn to work with HTTP in React.</li>\n<li><a href=\"https://github.com/exemplar-codes/reactjs-forms-user-input\">React Forms User Input</a> - learn to work with forms in React</li>\n<li><a href=\"https://github.com/exemplar-codes/redux-demo\">Redux Demo</a> - core Redux demo.</li>\n<li><a href=\"https://github.com/exemplar-codes/core-redux-react-demo\">Core Redux React Demo</a> - using core Redux in React apps.</li>\n<li>React Router - <a href=\"https://github.com/exemplar-codes/react-router-demo\">React Router demo</a>, <a href=\"https://github.com/exemplar-codes/react-router-practice\">React Router practice - quotes app</a></li>\n</ol>\n",
      "id": 276
    },
    {
      "path": "tooling/README.md",
      "url": "tooling/README.html",
      "content": "This is meant for obsidian templates and other IDE stuff. Is generally context agnostic of the PKB domain.\n\nCreated Sun Sep 10, 2023 at 6:44 PM\n\n",
      "html": "<p>This is meant for obsidian templates and other IDE stuff. Is generally context agnostic of the PKB domain.</p>\n<p>Created Sun Sep 10, 2023 at 6:44 PM</p>\n",
      "id": 277
    },
    {
      "path": "tooling/obsidian-templates/README.md",
      "url": "tooling/obsidian-templates/README.html",
      "content": "This folder is meant for obsidian templates.\n\n## Templater plugin\n\n- I keep the templater plugins here as well. [Templater help](https://github.com/SilentVoid13/Templater/issues/397#issuecomment-1712749066)\n- I've added empty hotkey enties into templater and have attached them as top command palette options.\n- If templates increase, I'll need to use the 'Templater: insert template modal'. *Palette term 'modal' is enough*\n",
      "html": "<p>This folder is meant for obsidian templates.</p>\n<h2 id=\"templater-plugin\">Templater plugin <a class=\"heading-anchor-permalink\" href=\"#templater-plugin\">#</a></h2>\n<ul>\n<li>I keep the templater plugins here as well. <a href=\"https://github.com/SilentVoid13/Templater/issues/397#issuecomment-1712749066\">Templater help</a></li>\n<li>I’ve added empty hotkey enties into templater and have attached them as top command palette options.</li>\n<li>If templates increase, I’ll need to use the ‘Templater: insert template modal’. <em>Palette term ‘modal’ is enough</em></li>\n</ul>\n",
      "id": 278
    },
    {
      "path": "tooling/obsidian-templates/templater/timestamp.md",
      "url": "tooling/obsidian-templates/templater/timestamp.html",
      "content": "<% tp.date.now(\"[Created] ddd ll [at] LT\") %>\n\n",
      "html": "<p>&lt;% tp.date.now(&quot;[Created] ddd ll [at] LT&quot;) %&gt;</p>\n",
      "id": 279
    },
    {
      "path": "tooling/obsidian-templates/templater/title_and_date.md",
      "url": "tooling/obsidian-templates/templater/title_and_date.html",
      "content": "<%*\nfileName = tp.file.title;\nif (fileName.endsWith(\".md\")) fileName = fileName.slice(0, -3);\n\nif(fileName === \"index\") { // if name is index, consider parent folder name\n  fileName = tp.file.folder();\n}\n\n// I used underscores for note.md names, but they make bad URLs,\n// so I switched to using hypens. Example: '1_React_Lists' to '1-React-Lists'\n// adding a separator token here, fallback value is underscore\nconst separator = fileName.indexOf('-') > fileName.indexOf('_') ? '-' : '_';\ncompleteTitle = fileName.replaceAll(separator, \" \");\npotentialNumber = completeTitle.split(\" \").at(0);\nhasNumber = !Number.isNaN(parseFloat(potentialNumber));\ntitleWithoutNumber = completeTitle.slice(potentialNumber.length + 1);\n\nnewTitle = hasNumber\n  ? `${potentialNumber}. ${titleWithoutNumber}`\n  : completeTitle;\n%># <% newTitle %>\n<% tp.date.now(\"[Created] ddd ll [at] LT\") %>\n\n<% tp.file.cursor() %>",
      "html": "<p>&lt;%*\nfileName = tp.file.title;\nif (fileName.endsWith(&quot;.md&quot;)) fileName = fileName.slice(0, -3);</p>\n<p>if(fileName === “index”) { // if name is index, consider parent folder name\nfileName = tp.file.folder();\n}</p>\n<p>// I used underscores for <a href=\"http://note.md\">note.md</a> names, but they make bad URLs,\n// so I switched to using hypens. Example: ‘1_React_Lists’ to ‘1-React-Lists’\n// adding a separator token here, fallback value is underscore\nconst separator = fileName.indexOf(’-’) &gt; fileName.indexOf(’<em>’) ? ‘-’ : '</em>’;\ncompleteTitle = fileName.replaceAll(separator, &quot; “);\npotentialNumber = completeTitle.split(” &quot;).at(0);\nhasNumber = !Number.isNaN(parseFloat(potentialNumber));\ntitleWithoutNumber = completeTitle.slice(potentialNumber.length + 1);</p>\n<p>newTitle = hasNumber\n? <code>${potentialNumber}. ${titleWithoutNumber}</code>\n: completeTitle;\n%&gt;# &lt;% newTitle %&gt;\n&lt;% tp.date.now(&quot;[Created] ddd ll [at] LT&quot;) %&gt;</p>\n<p>&lt;% tp.file.cursor() %&gt;</p>\n",
      "id": 280
    },
    {
      "path": "tooling/obsidian-templates/templater/w2h.md",
      "url": "tooling/obsidian-templates/templater/w2h.html",
      "content": "## Why\n<% tp.file.cursor(1) %>\n\n## How\n<% tp.file.cursor(2) %>\n\n## What\n<% tp.file.cursor(3) %>",
      "html": "<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>&lt;% tp.file.cursor(1) %&gt;</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>&lt;% tp.file.cursor(2) %&gt;</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>&lt;% tp.file.cursor(3) %&gt;</p>\n",
      "id": 281
    },
    {
      "path": "vault/0_npm/1_Introduction_to_NPM.md",
      "url": "vault/0_npm/1_Introduction_to_NPM.html",
      "content": "# 1. Introduction to NPM\nCreated Sunday 19 July 2020\n\n- `npm`, short for Node Package Manager is an online registry of JS scripts available for all developers to use.\n- They are very useful, as making a project from scratch is very rare these days.\n- `yarn` is also a popular package manager.\n- Anybody can create their own NPM package.\n- NPM allows us to use the knowledge of others in an easy way.\n- The only drawback is that it increases project size, because we may use only parts of the NPM packages.\n\n---\n\nThere are three types of packages at `npm`:\n\n1. FrontEnd packages - React, Angular etc.\n2. Command line packages - working with filesystem, database etc.\n3. Back-End packages - Express, Node.\n\n---\n\n- package.json is a meta file that specifies dependencies of the project. It is configured before the development begins.\n- Three things are important for any project:\n\n![](../../assets/1_Introduction_to_NPM-image-1-675eec4f.png)\n",
      "html": "<h1 id=\"1.-introduction-to-npm\">1. Introduction to NPM <a class=\"heading-anchor-permalink\" href=\"#1.-introduction-to-npm\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<ul>\n<li><code>npm</code>, short for Node Package Manager is an online registry of JS scripts available for all developers to use.</li>\n<li>They are very useful, as making a project from scratch is very rare these days.</li>\n<li><code>yarn</code> is also a popular package manager.</li>\n<li>Anybody can create their own NPM package.</li>\n<li>NPM allows us to use the knowledge of others in an easy way.</li>\n<li>The only drawback is that it increases project size, because we may use only parts of the NPM packages.</li>\n</ul>\n<hr>\n<p>There are three types of packages at <code>npm</code>:</p>\n<ol>\n<li>FrontEnd packages - React, Angular etc.</li>\n<li>Command line packages - working with filesystem, database etc.</li>\n<li>Back-End packages - Express, Node.</li>\n</ol>\n<hr>\n<ul>\n<li>package.json is a meta file that specifies dependencies of the project. It is configured before the development begins.</li>\n<li>Three things are important for any project:</li>\n</ul>\n<p><img src=\"../../assets/1_Introduction_to_NPM-image-1-675eec4f.png\" alt=\"\"></p>\n",
      "id": 282
    },
    {
      "path": "vault/0_npm/2_Node_and_NPM.md",
      "url": "vault/0_npm/2_Node_and_NPM.html",
      "content": "# 2. Node and NPM\nCreated Sunday 19 July 2020\n\nSetting up `node` and `npm`\n\n- Install `nvm` - the node version manager.\n- Using `nvm`, install the latest LTS version of `node`.\n- `npm` is bundled with `node`, so no need to install separately.\n- Check nvm - run `nvm list`\n- Check node - run `node -v`\n- Check npm - run `npm -v`\n\n- All the 3 - `nvm`, `node`, `npm` require admin rights.\n\n---\n\n- When starting a project, run **npm init** inside the directory.\n- Fill the things if you know, or just ignore them.\n- A package.json will be created in the directory.\n- Start the development.\n",
      "html": "<h1 id=\"2.-node-and-npm\">2. Node and NPM <a class=\"heading-anchor-permalink\" href=\"#2.-node-and-npm\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p>Setting up <code>node</code> and <code>npm</code></p>\n<ul>\n<li>\n<p>Install <code>nvm</code> - the node version manager.</p>\n</li>\n<li>\n<p>Using <code>nvm</code>, install the latest LTS version of <code>node</code>.</p>\n</li>\n<li>\n<p><code>npm</code> is bundled with <code>node</code>, so no need to install separately.</p>\n</li>\n<li>\n<p>Check nvm - run <code>nvm list</code></p>\n</li>\n<li>\n<p>Check node - run <code>node -v</code></p>\n</li>\n<li>\n<p>Check npm - run <code>npm -v</code></p>\n</li>\n<li>\n<p>All the 3 - <code>nvm</code>, <code>node</code>, <code>npm</code> require admin rights.</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>When starting a project, run <strong>npm init</strong> inside the directory.</li>\n<li>Fill the things if you know, or just ignore them.</li>\n<li>A package.json will be created in the directory.</li>\n<li>Start the development.</li>\n</ul>\n",
      "id": 283
    },
    {
      "path": "vault/0_npm/3_Installing_and_using_NPM_packages.md",
      "url": "vault/0_npm/3_Installing_and_using_NPM_packages.html",
      "content": "# 3. Installing and using NPM packages\nCreated Sunday 19 July 2020\n\n- Some useful packages:\n  1.  `live-server` - makes a local server with index.html as the homepage. Browser refreshes automatically when a file is changed.\n  2.  `lodash` - syntactic sugar for JavaScript.\n- A package can be installed in two ways:\n\n1. Locally - installed only in the current directory\n   - **npm install package_name**\n   - Creates a node_modules folder inside the current directory.\n2. Global - available from anywhere in the computer\n   - **npm install -g package_name**\n   - no new folder is created, except in the node default directory\n\n---\n\n- package.json has all the dependencies stored in it.\n- Technically, the `node_modules` directory is not a part of the source code, it's more of an SDK. So its never uploaded to a repo. This can be done by including `/node_modules` in the `.gitignore` file.\n- package.json also contains scripts to run the project, one-click to run.\n",
      "html": "<h1 id=\"3.-installing-and-using-npm-packages\">3. Installing and using NPM packages <a class=\"heading-anchor-permalink\" href=\"#3.-installing-and-using-npm-packages\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<ul>\n<li>Some useful packages:\n<ol>\n<li><code>live-server</code> - makes a local server with index.html as the homepage. Browser refreshes automatically when a file is changed.</li>\n<li><code>lodash</code> - syntactic sugar for JavaScript.</li>\n</ol>\n</li>\n<li>A package can be installed in two ways:</li>\n</ul>\n<ol>\n<li>Locally - installed only in the current directory\n<ul>\n<li><strong>npm install package_name</strong></li>\n<li>Creates a node_modules folder inside the current directory.</li>\n</ul>\n</li>\n<li>Global - available from anywhere in the computer\n<ul>\n<li><strong>npm install -g package_name</strong></li>\n<li>no new folder is created, except in the node default directory</li>\n</ul>\n</li>\n</ol>\n<hr>\n<ul>\n<li>package.json has all the dependencies stored in it.</li>\n<li>Technically, the <code>node_modules</code> directory is not a part of the source code, it’s more of an SDK. So its never uploaded to a repo. This can be done by including <code>/node_modules</code> in the <code>.gitignore</code> file.</li>\n<li>package.json also contains scripts to run the project, one-click to run.</li>\n</ul>\n",
      "id": 284
    },
    {
      "path": "vault/1_React_info_and_setup/0_SPA_W2H.md",
      "url": "vault/1_React_info_and_setup/0_SPA_W2H.html",
      "content": "# 0. SPA W2H\n\nFIXME: SPA W2H\nhttps://en.wikipedia.org/wiki/Single-page_application",
      "html": "<h1 id=\"0.-spa-w2h\">0. SPA W2H <a class=\"heading-anchor-permalink\" href=\"#0.-spa-w2h\">#</a></h1>\n<p>FIXME: SPA W2H\n<a href=\"https://en.wikipedia.org/wiki/Single-page_application\">https://en.wikipedia.org/wiki/Single-page_application</a></p>\n",
      "id": 285
    },
    {
      "path": "vault/1_React_info_and_setup/1_create-react-app/0_index.md",
      "url": "vault/1_React_info_and_setup/1_create-react-app/0_index.html",
      "content": "# 1. create-react-app\nCreated Monday 20 July 2020\n\n#### Why\nTo avoid manual setup.\nThe script:\n1. Downloads and installs **React** and core dependencies.\n2. Sets up Babel (the transpiler).\n3. Creates a basic skeleton of the app to start development with.\n\n#### How\n* Install **create-react-app** globally from npm.\n\n#### What\n**Steps to create app**\n* Run ``create-react-app`` **app_name** or run it inside a folder with `.` as argument.\n* Dependencies are downloaded, ``package.json`` is set and the project is a ``git`` folder.\n* Run ``npm start`` from the project root to start app.\n",
      "html": "<h1 id=\"1.-create-react-app\">1. create-react-app <a class=\"heading-anchor-permalink\" href=\"#1.-create-react-app\">#</a></h1>\n<p>Created Monday 20 July 2020</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>To avoid manual setup.\nThe script:</p>\n<ol>\n<li>Downloads and installs <strong>React</strong> and core dependencies.</li>\n<li>Sets up Babel (the transpiler).</li>\n<li>Creates a basic skeleton of the app to start development with.</li>\n</ol>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<ul>\n<li>Install <strong>create-react-app</strong> globally from npm.</li>\n</ul>\n<h4 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h4>\n<p><strong>Steps to create app</strong></p>\n<ul>\n<li>Run <code>create-react-app</code> <strong>app_name</strong> or run it inside a folder with <code>.</code> as argument.</li>\n<li>Dependencies are downloaded, <code>package.json</code> is set and the project is a <code>git</code> folder.</li>\n<li>Run <code>npm start</code> from the project root to start app.</li>\n</ul>\n",
      "id": 286
    },
    {
      "path": "vault/1_React_info_and_setup/1_create-react-app/1_Folder_structure.md",
      "url": "vault/1_React_info_and_setup/1_create-react-app/1_Folder_structure.html",
      "content": "# 1. Folder structure\nCreated Thursday 27 August 2020\n\n![](../../../assets/1_Folder_structure-image-1-fbdbae48.png)\nFiles/Folder in order of importance(descending):\n\n1. `node_modules` folder - node dependencies, ignored in `.gitignore`.\n2. `public` folder - Has `index.html` (the app is rendered in a div here, `id=root`).\n3. `src` folder - _all code_ should be added here.\n   1. Has `index.js` - The main/homepage injector to `index.html`.\n4. `package.json` - node dependency file.\n\n---\n\nHow the files work together:\n![](../../../assets/1_Folder_structure-image-2-fbdbae48.png)\n\n- We can make folders and place things in them, only except index.js.\n",
      "html": "<h1 id=\"1.-folder-structure\">1. Folder structure <a class=\"heading-anchor-permalink\" href=\"#1.-folder-structure\">#</a></h1>\n<p>Created Thursday 27 August 2020</p>\n<p><img src=\"../../../assets/1_Folder_structure-image-1-fbdbae48.png\" alt=\"\">\nFiles/Folder in order of importance(descending):</p>\n<ol>\n<li><code>node_modules</code> folder - node dependencies, ignored in <code>.gitignore</code>.</li>\n<li><code>public</code> folder - Has <code>index.html</code> (the app is rendered in a div here, <code>id=root</code>).</li>\n<li><code>src</code> folder - <em>all code</em> should be added here.\n<ol>\n<li>Has <code>index.js</code> - The main/homepage injector to <code>index.html</code>.</li>\n</ol>\n</li>\n<li><code>package.json</code> - node dependency file.</li>\n</ol>\n<hr>\n<p>How the files work together:\n<img src=\"../../../assets/1_Folder_structure-image-2-fbdbae48.png\" alt=\"\"></p>\n<ul>\n<li>We can make folders and place things in them, only except index.js.</li>\n</ul>\n",
      "id": 287
    },
    {
      "path": "vault/1_React_info_and_setup/1_create-react-app/2_Making_files_and_folders.md",
      "url": "vault/1_React_info_and_setup/1_create-react-app/2_Making_files_and_folders.html",
      "content": "# 2. Making files and folders\nCreated Tuesday 08 September 2020\n\n\n* Only ``index.js`` is must be directly in ``/src``.\n\nGenerally, two folders are created:\n\n1. components - dumb components\n2. containers - smart components\n\n\n* Keep styles with the JS files.\n\n\n",
      "html": "<h1 id=\"2.-making-files-and-folders\">2. Making files and folders <a class=\"heading-anchor-permalink\" href=\"#2.-making-files-and-folders\">#</a></h1>\n<p>Created Tuesday 08 September 2020</p>\n<ul>\n<li>Only <code>index.js</code> is must be directly in <code>/src</code>.</li>\n</ul>\n<p>Generally, two folders are created:</p>\n<ol>\n<li>components - dumb components</li>\n<li>containers - smart components</li>\n</ol>\n<ul>\n<li>Keep styles with the JS files.</li>\n</ul>\n",
      "id": 288
    },
    {
      "path": "vault/1_React_info_and_setup/1_create-react-app/3_React_ecosystem.md",
      "url": "vault/1_React_info_and_setup/1_create-react-app/3_React_ecosystem.html",
      "content": "# 3.React ecosystem\nCreated Tuesday 08 September 2020\n\n![](../../../assets/3_React_ecosystem-image-1-fbdbae48.png)\nWe need the following for a react project:\n\n1. Babel - for writing JSX\n2. Webpack - bundles the files into singular build files.\n\n\n",
      "html": "<h1 id=\"3.react-ecosystem\">3.React ecosystem <a class=\"heading-anchor-permalink\" href=\"#3.react-ecosystem\">#</a></h1>\n<p>Created Tuesday 08 September 2020</p>\n<p><img src=\"../../../assets/3_React_ecosystem-image-1-fbdbae48.png\" alt=\"\">\nWe need the following for a react project:</p>\n<ol>\n<li>Babel - for writing JSX</li>\n<li>Webpack - bundles the files into singular build files.</li>\n</ol>\n",
      "id": 289
    },
    {
      "path": "vault/1_React_info_and_setup/2_Why_React.md",
      "url": "vault/1_React_info_and_setup/2_Why_React.html",
      "content": "# 2. Why React\nCreated Friday 03 March 2022\n\nFIXME - because re-rendering the whole page is easy to code, and React made it practically possible. It was becoming very difficult to handle changes in the DOM which affected state, and all effects needed to be checked and coded.",
      "html": "<h1 id=\"2.-why-react\">2. Why React <a class=\"heading-anchor-permalink\" href=\"#2.-why-react\">#</a></h1>\n<p>Created Friday 03 March 2022</p>\n<p>FIXME - because re-rendering the whole page is easy to code, and React made it practically possible. It was becoming very difficult to handle changes in the DOM which affected state, and all effects needed to be checked and coded.</p>\n",
      "id": 290
    },
    {
      "path": "vault/1_React_info_and_setup/3_How_React_works.md",
      "url": "vault/1_React_info_and_setup/3_How_React_works.html",
      "content": "# 3. How React works\nCreated Tuesday 08 September 2020\n\n### What makes React revolutionary?\nIn the context of web browsers, changing from a UI frame **E** (for existing) to a UI frame **R** (for required), i.e. E --> R can be done in many ways:\n1. Remove **E** elements from the page, then calculate and paint **R**. This is the most expensive thing, computationally. It's very easy to code.\n2. Specify what changes need to be done to **E**, to make it look like **R**. The changes keep in mind similar branches of the DOM, so it's economical. This is very cumbersome to code.\n\nAssume all DOM operations, layout calculations and painting to the screen were very cheap to do. One would choose to do it by the first way, i.e. just replacing the page with the new UI. React makes this possible. Of course, it's not magical. There's something called the virtual DOM and diffing algorithm.\n\nReact will change the DOM in the most optimum way, *practically* possible.\n\n[Reflow and repaint, what are they?](https://medium.com/swlh/what-the-heck-is-repaint-and-reflow-in-the-browser-b2d0fb980c08)\n\n### React internals - Virtual DOM and the diffing algorithm\nTo go from E --> R, React keeps two DOM trees in memory. These in memory DOM trees are called 'virtual DOM'. They are fast to work with, because they are not connected to the webpage. Let's call them pristine and dirty.\n\n![](../../assets/3_How_React_works-image-1-503b220a.png)\n\nPristine is a copy of the current actual DOM, and dirty is initially nothing.\nSteps React uses:\n1. When the next frame is specified, it creates the *dirty tree* based on it.\n2. The pristine and dirty trees are then compared using a diffing algorithm. This results in DOM ops that need to be done to minimally update the DOM. This is called [reconciliation](https://reactjs.org/docs/reconciliation.html#recursing-on-children).\n3. These DOM ops are batched together.\n4. The batched DOM ops are applied to the actual DOM.\n5. Reflow and repaints are done if needed.\n6. The dirty tree becomes the pristine tree. And the process is repeated.\nDone!\n\n[Virtual DOM and diffing](https://www.pluralsight.com/guides/virtual-dom-difference-maker-react-js)\n\n### More about the diffing algorithm\nThe generic algorithm for diffing trees is O(n<sup>3</sup>). But React uses a heuristic O(n) algorithm based on two assumptions:\n1. Different components will produce different trees.\n2. The developer can hint at which [*child*](https://reactjs.org/docs/reconciliation.html#recursing-on-children) elements may be stable across different renders with a [key](https://reactjs.org/docs/reconciliation.html#keys) prop.\n\n[\"In practice, these assumptions are valid for almost all practical use cases.\"](https://reactjs.org/docs/reconciliation.html#motivation)\n\n---\n\nI was fuzzy on the diffing details, and more importantly if React's optimization was even possible. Turns out the abstract node comparison part of the diffing algorithm is not the crux of React (it's important from a code POV though) - the major part that makes diff possible is the \"layout conscious diff\" (something skipped over by most tutorials). See [ChatGPT conversation](../../assets/React-reflow-repaint-ldiff.pdf)\n",
      "html": "<h1 id=\"3.-how-react-works\">3. How React works <a class=\"heading-anchor-permalink\" href=\"#3.-how-react-works\">#</a></h1>\n<p>Created Tuesday 08 September 2020</p>\n<h3 id=\"what-makes-react-revolutionary%3F\">What makes React revolutionary? <a class=\"heading-anchor-permalink\" href=\"#what-makes-react-revolutionary%3F\">#</a></h3>\n<p>In the context of web browsers, changing from a UI frame <strong>E</strong> (for existing) to a UI frame <strong>R</strong> (for required), i.e. E --&gt; R can be done in many ways:</p>\n<ol>\n<li>Remove <strong>E</strong> elements from the page, then calculate and paint <strong>R</strong>. This is the most expensive thing, computationally. It’s very easy to code.</li>\n<li>Specify what changes need to be done to <strong>E</strong>, to make it look like <strong>R</strong>. The changes keep in mind similar branches of the DOM, so it’s economical. This is very cumbersome to code.</li>\n</ol>\n<p>Assume all DOM operations, layout calculations and painting to the screen were very cheap to do. One would choose to do it by the first way, i.e. just replacing the page with the new UI. React makes this possible. Of course, it’s not magical. There’s something called the virtual DOM and diffing algorithm.</p>\n<p>React will change the DOM in the most optimum way, <em>practically</em> possible.</p>\n<p><a href=\"https://medium.com/swlh/what-the-heck-is-repaint-and-reflow-in-the-browser-b2d0fb980c08\">Reflow and repaint, what are they?</a></p>\n<h3 id=\"react-internals---virtual-dom-and-the-diffing-algorithm\">React internals - Virtual DOM and the diffing algorithm <a class=\"heading-anchor-permalink\" href=\"#react-internals---virtual-dom-and-the-diffing-algorithm\">#</a></h3>\n<p>To go from E --&gt; R, React keeps two DOM trees in memory. These in memory DOM trees are called ‘virtual DOM’. They are fast to work with, because they are not connected to the webpage. Let’s call them pristine and dirty.</p>\n<p><img src=\"../../assets/3_How_React_works-image-1-503b220a.png\" alt=\"\"></p>\n<p>Pristine is a copy of the current actual DOM, and dirty is initially nothing.\nSteps React uses:</p>\n<ol>\n<li>When the next frame is specified, it creates the <em>dirty tree</em> based on it.</li>\n<li>The pristine and dirty trees are then compared using a diffing algorithm. This results in DOM ops that need to be done to minimally update the DOM. This is called <a href=\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\">reconciliation</a>.</li>\n<li>These DOM ops are batched together.</li>\n<li>The batched DOM ops are applied to the actual DOM.</li>\n<li>Reflow and repaints are done if needed.</li>\n<li>The dirty tree becomes the pristine tree. And the process is repeated.\nDone!</li>\n</ol>\n<p><a href=\"https://www.pluralsight.com/guides/virtual-dom-difference-maker-react-js\">Virtual DOM and diffing</a></p>\n<h3 id=\"more-about-the-diffing-algorithm\">More about the diffing algorithm <a class=\"heading-anchor-permalink\" href=\"#more-about-the-diffing-algorithm\">#</a></h3>\n<p>The generic algorithm for diffing trees is O(n<sup>3</sup>). But React uses a heuristic O(n) algorithm based on two assumptions:</p>\n<ol>\n<li>Different components will produce different trees.</li>\n<li>The developer can hint at which <a href=\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\"><em>child</em></a> elements may be stable across different renders with a <a href=\"https://reactjs.org/docs/reconciliation.html#keys\">key</a> prop.</li>\n</ol>\n<p><a href=\"https://reactjs.org/docs/reconciliation.html#motivation\">“In practice, these assumptions are valid for almost all practical use cases.”</a></p>\n<hr>\n<p>I was fuzzy on the diffing details, and more importantly if React’s optimization was even possible. Turns out the abstract node comparison part of the diffing algorithm is not the crux of React (it’s important from a code POV though) - the major part that makes diff possible is the “layout conscious diff” (something skipped over by most tutorials). See <a href=\"../../assets/React-reflow-repaint-ldiff.pdf\">ChatGPT conversation</a></p>\n",
      "id": 291
    },
    {
      "path": "vault/1_React_info_and_setup/4_Migrating_to_Vite.md",
      "url": "vault/1_React_info_and_setup/4_Migrating_to_Vite.html",
      "content": "# 4. Migrating to Vite\nCreated Sun Sep 24, 2023 at 5:00 PM\n\ngithub issue: https://github.com/sanjar-notes/react/issues/45\n## Situation (ignorable)\nYou have a React app, created using [create-react-app](https://medium.com/r/?url=https%3A%2F%2Fcreate-react-app.dev%2F) (CRA) project that you wish to migrate to [Vite](https://medium.com/r/?url=https%3A%2F%2Fvitejs.dev%2Fguide%2F).\n\n## Why migrate (ignorable)\nCRA is really slow, especially the `npm install` step.\n\nThis usually results in failure during free deployments (like [render.com](https://www.render.com)) - due to memory usage and timeouts.\n\nMoving to Vite.js solves this - npm install for projects is very fast, development experience is good and free deployments don't fail.\n\n## Preparation\nYou have your CRA project. Ok.\n\nWe need to add Vite config files to this project. For this, create a new (blank) Vite project -\n\n1. Run `npm create vite` in the terminal.\n2. In the prompt - add project name (\"hello-world\"), select framework as `React` and variant as `JavaScript + SWC`.\n\n## Steps\n1. **Rename component** `.js` files to `.jsx`. Util files don't need to be renamed. Just to be clear: a component file means any file having JSX code. [See changes (view GitHub commit diff)](https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fexemplar-codes%2Fposts-express-api-app%2Fcommit%2F52a0fe58befad2bda8eacf06383fa6f247fe04ef%3Fdiff%3Dsplit). [Automating the rename (wip)](https://github.com/sanjar-notes/react/issues/46)\n2. **Move index.html and change shell files** - move index.html from `public` to `src` and change other \"shell\" files like App.js, index.js, App.css etc. [See changes](https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fexemplar-codes%2Fposts-express-api-app%2Fcommit%2F45274accb63c538bb593354843c5c3c284a6b755%3Fdiff%3Dsplit)\n3. **Add vite.config.js, package.json**, package-lock.json - just copy this from the fresh vite project into your CRA project. Replace conflicting files. [See changes](https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fexemplar-codes%2Fposts-express-api-app%2Fcommit%2F9134d111c7b5e54ddd2e58c434ec895333df3f82%3Fdiff%3Dsplit)\n4. **Handle environment variables (optional** - if your project uses them) - code `process.env.PORT` becomes `import.meta.env.PORT`. Make similar changes at other places. [See changes](https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fexemplar-codes%2Fposts-express-api-app%2Fcommit%2Fabd00a755defcc39020494610231ae6d734dfb52)\nHandle environment variables (optional - if your project uses them)\n5. Run the app - `npm run dev` should work now.\n6. Cleanup - delete extra files if any.\n7. **Deployment build folder (optional)** - Vite's build folder is named `dist` (as opposed to CRA's `build`). Change  corresponding backend code if needed. [See changes](https://github.com/exemplar-codes/posts-express-api-app/commit/3ea3ae51e9f4e343226f8eec788501533777ba46)\n\nFor more info, see the GitHub trail (commits) starting from https://github.com/exemplar-codes/posts-express-api-app/commit/52a0fe58befad2bda8eacf06383fa6f247fe04ef\n",
      "html": "<h1 id=\"4.-migrating-to-vite\">4. Migrating to Vite <a class=\"heading-anchor-permalink\" href=\"#4.-migrating-to-vite\">#</a></h1>\n<p>Created Sun Sep 24, 2023 at 5:00 PM</p>\n<p>github issue: <a href=\"https://github.com/sanjar-notes/react/issues/45\">https://github.com/sanjar-notes/react/issues/45</a></p>\n<h2 id=\"situation-(ignorable)\">Situation (ignorable) <a class=\"heading-anchor-permalink\" href=\"#situation-(ignorable)\">#</a></h2>\n<p>You have a React app, created using <a href=\"https://medium.com/r/?url=https%3A%2F%2Fcreate-react-app.dev%2F\">create-react-app</a> (CRA) project that you wish to migrate to <a href=\"https://medium.com/r/?url=https%3A%2F%2Fvitejs.dev%2Fguide%2F\">Vite</a>.</p>\n<h2 id=\"why-migrate-(ignorable)\">Why migrate (ignorable) <a class=\"heading-anchor-permalink\" href=\"#why-migrate-(ignorable)\">#</a></h2>\n<p>CRA is really slow, especially the <code>npm install</code> step.</p>\n<p>This usually results in failure during free deployments (like <a href=\"https://www.render.com\">render.com</a>) - due to memory usage and timeouts.</p>\n<p>Moving to Vite.js solves this - npm install for projects is very fast, development experience is good and free deployments don’t fail.</p>\n<h2 id=\"preparation\">Preparation <a class=\"heading-anchor-permalink\" href=\"#preparation\">#</a></h2>\n<p>You have your CRA project. Ok.</p>\n<p>We need to add Vite config files to this project. For this, create a new (blank) Vite project -</p>\n<ol>\n<li>Run <code>npm create vite</code> in the terminal.</li>\n<li>In the prompt - add project name (“hello-world”), select framework as <code>React</code> and variant as <code>JavaScript + SWC</code>.</li>\n</ol>\n<h2 id=\"steps\">Steps <a class=\"heading-anchor-permalink\" href=\"#steps\">#</a></h2>\n<ol>\n<li><strong>Rename component</strong> <code>.js</code> files to <code>.jsx</code>. Util files don’t need to be renamed. Just to be clear: a component file means any file having JSX code. <a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fexemplar-codes%2Fposts-express-api-app%2Fcommit%2F52a0fe58befad2bda8eacf06383fa6f247fe04ef%3Fdiff%3Dsplit\">See changes (view GitHub commit diff)</a>. <a href=\"https://github.com/sanjar-notes/react/issues/46\">Automating the rename (wip)</a></li>\n<li><strong>Move index.html and change shell files</strong> - move index.html from <code>public</code> to <code>src</code> and change other “shell” files like App.js, index.js, App.css etc. <a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fexemplar-codes%2Fposts-express-api-app%2Fcommit%2F45274accb63c538bb593354843c5c3c284a6b755%3Fdiff%3Dsplit\">See changes</a></li>\n<li><strong>Add vite.config.js, package.json</strong>, package-lock.json - just copy this from the fresh vite project into your CRA project. Replace conflicting files. <a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fexemplar-codes%2Fposts-express-api-app%2Fcommit%2F9134d111c7b5e54ddd2e58c434ec895333df3f82%3Fdiff%3Dsplit\">See changes</a></li>\n<li><strong>Handle environment variables (optional</strong> - if your project uses them) - code <code>process.env.PORT</code> becomes <code>import.meta.env.PORT</code>. Make similar changes at other places. <a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fexemplar-codes%2Fposts-express-api-app%2Fcommit%2Fabd00a755defcc39020494610231ae6d734dfb52\">See changes</a>\nHandle environment variables (optional - if your project uses them)</li>\n<li>Run the app - <code>npm run dev</code> should work now.</li>\n<li>Cleanup - delete extra files if any.</li>\n<li><strong>Deployment build folder (optional)</strong> - Vite’s build folder is named <code>dist</code> (as opposed to CRA’s <code>build</code>). Change  corresponding backend code if needed. <a href=\"https://github.com/exemplar-codes/posts-express-api-app/commit/3ea3ae51e9f4e343226f8eec788501533777ba46\">See changes</a></li>\n</ol>\n<p>For more info, see the GitHub trail (commits) starting from <a href=\"https://github.com/exemplar-codes/posts-express-api-app/commit/52a0fe58befad2bda8eacf06383fa6f247fe04ef\">https://github.com/exemplar-codes/posts-express-api-app/commit/52a0fe58befad2bda8eacf06383fa6f247fe04ef</a></p>\n",
      "id": 292
    },
    {
      "path": "vault/1_React_info_and_setup/5_Environment_variables.md",
      "url": "vault/1_React_info_and_setup/5_Environment_variables.html",
      "content": "# 5. Environment variables\nCreated Mon Dec 25, 2023 at 9:06 PM\n\nVideo - https://youtube.com/shorts/r92aHr752Bg?si=NhM-JVkqMONeiK2W\n\n## Vite\nVite injects the envs into `import.meta.env`.\nFYI: `process.env` is just not available (error).\n\n- Set envs. Two ways:\n\t- Add .env file. Make sure all key names have the `VITE_` prefix. Example: `VITE_PORT`\n\t- Add inline - `VITE_PORT=4000 npm run build`. Multiple are supported too `VITE_PORT=4000 VITE_PORT2=4001 npm run build`.  Make sure all key names have the `VITE_` prefix.\n- Get envs - `import.meta.env.VITE_PORT`\n- Works in dev, build\nConfirmed works for both cases.\n## Create-react-app\nCRA simply injects the envs passed into the `process.env` object\n\n- Set envs. Two ways:\n\t- Add a .env file. Make sure all key names have the `REACT_APP_` prefix. Example: `REACT_APP_PORT`\n\t- Add inline - `REACT_APP_PORT=4000 npm run build`. Multiple are supported too `REACT_APP_PORT=4000 REACT_APP_PORT2=4001 npm run build`\n- Get envs - `process.env.SOME_ENV_KEY`. Example: `process.env.REACT_APP_PORT`\n\n- Works in dev, build\n- since React is an SPA library, the build process happens just once, and the env variables get hardcoded into the bundle. So, if the env file changes, you'll need to rebuild.\nConfirmed works for both cases. (react-scripts 5.0.1)",
      "html": "<h1 id=\"5.-environment-variables\">5. Environment variables <a class=\"heading-anchor-permalink\" href=\"#5.-environment-variables\">#</a></h1>\n<p>Created Mon Dec 25, 2023 at 9:06 PM</p>\n<p>Video - <a href=\"https://youtube.com/shorts/r92aHr752Bg?si=NhM-JVkqMONeiK2W\">https://youtube.com/shorts/r92aHr752Bg?si=NhM-JVkqMONeiK2W</a></p>\n<h2 id=\"vite\">Vite <a class=\"heading-anchor-permalink\" href=\"#vite\">#</a></h2>\n<p>Vite injects the envs into <code>import.meta.env</code>.\nFYI: <code>process.env</code> is just not available (error).</p>\n<ul>\n<li>Set envs. Two ways:\n<ul>\n<li>Add .env file. Make sure all key names have the <code>VITE_</code> prefix. Example: <code>VITE_PORT</code></li>\n<li>Add inline - <code>VITE_PORT=4000 npm run build</code>. Multiple are supported too <code>VITE_PORT=4000 VITE_PORT2=4001 npm run build</code>.  Make sure all key names have the <code>VITE_</code> prefix.</li>\n</ul>\n</li>\n<li>Get envs - <code>import.meta.env.VITE_PORT</code></li>\n<li>Works in dev, build\nConfirmed works for both cases.</li>\n</ul>\n<h2 id=\"create-react-app\">Create-react-app <a class=\"heading-anchor-permalink\" href=\"#create-react-app\">#</a></h2>\n<p>CRA simply injects the envs passed into the <code>process.env</code> object</p>\n<ul>\n<li>\n<p>Set envs. Two ways:</p>\n<ul>\n<li>Add a .env file. Make sure all key names have the <code>REACT_APP_</code> prefix. Example: <code>REACT_APP_PORT</code></li>\n<li>Add inline - <code>REACT_APP_PORT=4000 npm run build</code>. Multiple are supported too <code>REACT_APP_PORT=4000 REACT_APP_PORT2=4001 npm run build</code></li>\n</ul>\n</li>\n<li>\n<p>Get envs - <code>process.env.SOME_ENV_KEY</code>. Example: <code>process.env.REACT_APP_PORT</code></p>\n</li>\n<li>\n<p>Works in dev, build</p>\n</li>\n<li>\n<p>since React is an SPA library, the build process happens just once, and the env variables get hardcoded into the bundle. So, if the env file changes, you’ll need to rebuild.\nConfirmed works for both cases. (react-scripts 5.0.1)</p>\n</li>\n</ul>\n",
      "id": 293
    },
    {
      "path": "vault/1_React_info_and_setup/6_Dev_Tools.md",
      "url": "vault/1_React_info_and_setup/6_Dev_Tools.html",
      "content": "# 6. Dev Tools\nCreated Mon Jan 8, 2024 at 9:16 PM\n\n> Basically, we can complete view the tree, inspect it and also reach exact points in code. console.log for props is very inefficient.\n\n## Chrome Dev tools\nUsed if other tools don't work.\nFor exact inspecting styling - Chrome dev tools inspect.\n\n## React Developer Tools\nA browser extension\nReact Developer tools are very good and absolutely needed for productivity.\nhttps://react.dev/learn/react-developer-tools\n\nThey help:\n1. Inspect component tree. Optionally, HTML nodes can be included into the tree.\n2. See props and state\n3. Identify performance problems\n\nThe main point here is that they make the app traversable via your components instead of just HTML (like browser dev tools).\n\n\n## Redux DevTools\nA browser extension\nhttps://github.com/reduxjs/redux-devtools/\n\nMainly to\n- Inspect slices\n- Inspect actions\n- Do time travel debugging of the store, actions\n\n\n## LocatorJS\nA browser extension\nhttps://www.locatorjs.com/\n\n Use this extension to jump to code (in correct file, at correct line number) by selecting the UI (without opening dev tools) - activates via a shortcut.\n Takes you directly into the editor (vscode).\n \n Locator is non-myopic - if you hover just outside a component, it shows a different background, which prevents going into reusable component files. Awesome\n\n\nFor shallow inspect spaceing - 'Desisgner tools' plugin",
      "html": "<h1 id=\"6.-dev-tools\">6. Dev Tools <a class=\"heading-anchor-permalink\" href=\"#6.-dev-tools\">#</a></h1>\n<p>Created Mon Jan 8, 2024 at 9:16 PM</p>\n<blockquote>\n<p>Basically, we can complete view the tree, inspect it and also reach exact points in code. console.log for props is very inefficient.</p>\n</blockquote>\n<h2 id=\"chrome-dev-tools\">Chrome Dev tools <a class=\"heading-anchor-permalink\" href=\"#chrome-dev-tools\">#</a></h2>\n<p>Used if other tools don’t work.\nFor exact inspecting styling - Chrome dev tools inspect.</p>\n<h2 id=\"react-developer-tools\">React Developer Tools <a class=\"heading-anchor-permalink\" href=\"#react-developer-tools\">#</a></h2>\n<p>A browser extension\nReact Developer tools are very good and absolutely needed for productivity.\n<a href=\"https://react.dev/learn/react-developer-tools\">https://react.dev/learn/react-developer-tools</a></p>\n<p>They help:</p>\n<ol>\n<li>Inspect component tree. Optionally, HTML nodes can be included into the tree.</li>\n<li>See props and state</li>\n<li>Identify performance problems</li>\n</ol>\n<p>The main point here is that they make the app traversable via your components instead of just HTML (like browser dev tools).</p>\n<h2 id=\"redux-devtools\">Redux DevTools <a class=\"heading-anchor-permalink\" href=\"#redux-devtools\">#</a></h2>\n<p>A browser extension\n<a href=\"https://github.com/reduxjs/redux-devtools/\">https://github.com/reduxjs/redux-devtools/</a></p>\n<p>Mainly to</p>\n<ul>\n<li>Inspect slices</li>\n<li>Inspect actions</li>\n<li>Do time travel debugging of the store, actions</li>\n</ul>\n<h2 id=\"locatorjs\">LocatorJS <a class=\"heading-anchor-permalink\" href=\"#locatorjs\">#</a></h2>\n<p>A browser extension\n<a href=\"https://www.locatorjs.com/\">https://www.locatorjs.com/</a></p>\n<p>Use this extension to jump to code (in correct file, at correct line number) by selecting the UI (without opening dev tools) - activates via a shortcut.\nTakes you directly into the editor (vscode).</p>\n<p>Locator is non-myopic - if you hover just outside a component, it shows a different background, which prevents going into reusable component files. Awesome</p>\n<p>For shallow inspect spaceing - ‘Desisgner tools’ plugin</p>\n",
      "id": 294
    },
    {
      "path": "vault/2_React_-_basics/0_index.md",
      "url": "vault/2_React_-_basics/0_index.html",
      "content": "# 2. React - basics\nCreated Monday 20 July 2020\n\nFIXME - why React\n\n## About React\n- React is a JS library, not a framework.\n- React replaced jQuery\n- It makes websites scalable and predictable in development.\n- It is used by many of the top companies.\n- It solves the problem of efficient DOM manipulation.\n- React is like a bread-machine, just give the ingredients, and it outputs a website.\n- React works with anything - on web, mobile apps, desktop apps, VR apps, etc.\n\n\n## UI layers in web apps\n![](../../assets/0_index-image-1-4fa49474.png)\nPrinciples in web dev over the years:\n\n1. Thinking in components\n   1. Atoms - Indivisible entities, e.g icons, buttons\n   2. Molecules - Navigation bar\n   3. Organisms - Functionality\n   4. Templates - group of organisms\n   5. Pages - The page we see\n   - The advantage - We can reuse components to make our pages. No need to rewrite the code.\n   - All the components are independent.\n2. One way data-flow.\n3. Virtual DOM - Handled by React, it is an object which describes our website. Painting is handled in the most optimum way.\n\n## React.js Alternatives\nAngular:\n- Is a proper framework\n- Uses TypeScript\n- Component based\n- Batteries included - has most of the extra needed modules set.\n\nReact:\n- Is a UI library\n- Component based\n- As it is a library, it does not enforce extra needed modules. They may be installed from `npm`\n\nVue:\n- Component based\\*\\*\\*\\*\n- Has many core modules\n- From a needed modules POV, it ships with _some_ modules, unlike the extremes - React (none) and Angular (most).\n",
      "html": "<h1 id=\"2.-react---basics\">2. React - basics <a class=\"heading-anchor-permalink\" href=\"#2.-react---basics\">#</a></h1>\n<p>Created Monday 20 July 2020</p>\n<p>FIXME - why React</p>\n<h2 id=\"about-react\">About React <a class=\"heading-anchor-permalink\" href=\"#about-react\">#</a></h2>\n<ul>\n<li>React is a JS library, not a framework.</li>\n<li>React replaced jQuery</li>\n<li>It makes websites scalable and predictable in development.</li>\n<li>It is used by many of the top companies.</li>\n<li>It solves the problem of efficient DOM manipulation.</li>\n<li>React is like a bread-machine, just give the ingredients, and it outputs a website.</li>\n<li>React works with anything - on web, mobile apps, desktop apps, VR apps, etc.</li>\n</ul>\n<h2 id=\"ui-layers-in-web-apps\">UI layers in web apps <a class=\"heading-anchor-permalink\" href=\"#ui-layers-in-web-apps\">#</a></h2>\n<p><img src=\"../../assets/0_index-image-1-4fa49474.png\" alt=\"\">\nPrinciples in web dev over the years:</p>\n<ol>\n<li>Thinking in components\n<ol>\n<li>Atoms - Indivisible entities, e.g icons, buttons</li>\n<li>Molecules - Navigation bar</li>\n<li>Organisms - Functionality</li>\n<li>Templates - group of organisms</li>\n<li>Pages - The page we see</li>\n</ol>\n<ul>\n<li>The advantage - We can reuse components to make our pages. No need to rewrite the code.</li>\n<li>All the components are independent.</li>\n</ul>\n</li>\n<li>One way data-flow.</li>\n<li>Virtual DOM - Handled by React, it is an object which describes our website. Painting is handled in the most optimum way.</li>\n</ol>\n<h2 id=\"react.js-alternatives\">React.js Alternatives <a class=\"heading-anchor-permalink\" href=\"#react.js-alternatives\">#</a></h2>\n<p>Angular:</p>\n<ul>\n<li>Is a proper framework</li>\n<li>Uses TypeScript</li>\n<li>Component based</li>\n<li>Batteries included - has most of the extra needed modules set.</li>\n</ul>\n<p>React:</p>\n<ul>\n<li>Is a UI library</li>\n<li>Component based</li>\n<li>As it is a library, it does not enforce extra needed modules. They may be installed from <code>npm</code></li>\n</ul>\n<p>Vue:</p>\n<ul>\n<li>Component based****</li>\n<li>Has many core modules</li>\n<li>From a needed modules POV, it ships with <em>some</em> modules, unlike the extremes - React (none) and Angular (most).</li>\n</ul>\n",
      "id": 295
    },
    {
      "path": "vault/2_React_-_basics/1_JSX.md",
      "url": "vault/2_React_-_basics/1_JSX.html",
      "content": "# 3. JSX\nCreated Thursday 27 August 2020\n\n## Why\n* React uses a declarative approach to code UIs. JSX makes this easy.\n* JSX also makes the code \n\t* Intuitive and readable, instead of function calls.\n\t* Both structure and structure-related-logic-**expressions (not all logic)** are kept together.\n```JSX\nfunction App() {\n\tconst ul = document.createElement('ul');\n\tconst li = document.createElement('li');\n\t\n\tul.appendchild(li);\n\tli.appendChild(document.createTextNode('...'));\n\n\treturn ul;\n}\n/* Same as\n\t<ul>\n\t\t<li>...</li>\n\t</ul>\n*/\n```\nJust imagine, the verbosity and un-intuitiveness of similar code.\n\nActually, JSX behaves like this:\n```jsx\n<div className=\"intro\">Hello, world</div>\n// is equivalent to\nReact.createElement('div', {className: \"hello\"}, 'Hello, world' )\n```\nor as [JSX in Depth](https://reactjs.org/docs/jsx-in-depth.html) describes it:\n> Fundamentally, JSX just provides syntactic sugar for the `React.createElement(component, props, ...children)` \n\nNote: React components are JavaScript functions, and are therefore supposed to return only one value. So, each component must have one and only one container. This is a disadvantage of JS, not of HTML.\n\n## How\nHandled by the Babel transpiler.\n\n## What\n* Short for JavaScript XML\n* JSX is *not* necessary for using React, basic JS is fine too.\n* JSX is a syntactic sugar for JavaScript, and so can be stored in variables.\n\n\n### Rules for JSX\n1. Like HTML except if specified otherwise.\n2. Some reserved keywords are different:\n\t* ``className`` instead of ``class`` attribute.\n\t* ``htmlFor`` in HTML form `<label>` tag instead of ``for``.\n3. JS **expressions** can be enclosed in braces {}. But avoid this, keep JSX lean - the logic outside JSX and result variable in JSX.\n\t```JSX\n\tfunction ExpenseItem(props) {\n\t  const month = 'March';\n\t  const day = 24;\n\t  return (<div>\n\t\t\t    <span> {day}th </span>\n\t\t\t\t<span> {month} </span>\n\t\t\t  </div>);\n\t}\n\t```\n4. Components must start with a capital letter. Small letter indicates HTML element, and may lead to errors.\n5. JSX is an expression too, so one can store it in a variable or return it.\n6. JSX can restart inside JS, but still JSX and JS should be differentiated with a {} for the JS part. Simply remember that JSX is an object and it doesn't make sense to write objects after one another. Example:\n\t```JSX\n\tconst day = 24;\n\tconst month = 'March';\n\treturn <div>{day}<span>th</span> {month}</div>;\n\t// 24th March\n\t```\n7. `true`, `false`, `null` and `undefined` are rendered as empty whitespace. To really render them, convert to string first, like so `String(null)`.\n\nSee a gist of [more](https://flaviocopes.com/jsx/) rules.\n\n### About JSX\n* JSX prevents injection attacks - everything is converted into a string before being rendered.\n* JSX represents objects.\n\n\n",
      "html": "<h1 id=\"3.-jsx\">3. JSX <a class=\"heading-anchor-permalink\" href=\"#3.-jsx\">#</a></h1>\n<p>Created Thursday 27 August 2020</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<ul>\n<li>React uses a declarative approach to code UIs. JSX makes this easy.</li>\n<li>JSX also makes the code\n<ul>\n<li>Intuitive and readable, instead of function calls.</li>\n<li>Both structure and structure-related-logic-<strong>expressions (not all logic)</strong> are kept together.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-JSX\">function App() {\n\tconst ul = document.createElement('ul');\n\tconst li = document.createElement('li');\n\t\n\tul.appendchild(li);\n\tli.appendChild(document.createTextNode('...'));\n\n\treturn ul;\n}\n/* Same as\n\t&lt;ul&gt;\n\t\t&lt;li&gt;...&lt;/li&gt;\n\t&lt;/ul&gt;\n*/\n</code></pre>\n<p>Just imagine, the verbosity and un-intuitiveness of similar code.</p>\n<p>Actually, JSX behaves like this:</p>\n<pre><code class=\"language-jsx\">&lt;div className=&quot;intro&quot;&gt;Hello, world&lt;/div&gt;\n// is equivalent to\nReact.createElement('div', {className: &quot;hello&quot;}, 'Hello, world' )\n</code></pre>\n<p>or as <a href=\"https://reactjs.org/docs/jsx-in-depth.html\">JSX in Depth</a> describes it:</p>\n<blockquote>\n<p>Fundamentally, JSX just provides syntactic sugar for the <code>React.createElement(component, props, ...children)</code></p>\n</blockquote>\n<p>Note: React components are JavaScript functions, and are therefore supposed to return only one value. So, each component must have one and only one container. This is a disadvantage of JS, not of HTML.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Handled by the Babel transpiler.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<ul>\n<li>Short for JavaScript XML</li>\n<li>JSX is <em>not</em> necessary for using React, basic JS is fine too.</li>\n<li>JSX is a syntactic sugar for JavaScript, and so can be stored in variables.</li>\n</ul>\n<h3 id=\"rules-for-jsx\">Rules for JSX <a class=\"heading-anchor-permalink\" href=\"#rules-for-jsx\">#</a></h3>\n<ol>\n<li>Like HTML except if specified otherwise.</li>\n<li>Some reserved keywords are different:\n<ul>\n<li><code>className</code> instead of <code>class</code> attribute.</li>\n<li><code>htmlFor</code> in HTML form <code>&lt;label&gt;</code> tag instead of <code>for</code>.</li>\n</ul>\n</li>\n<li>JS <strong>expressions</strong> can be enclosed in braces {}. But avoid this, keep JSX lean - the logic outside JSX and result variable in JSX.<pre><code class=\"language-JSX\">function ExpenseItem(props) {\n  const month = 'March';\n  const day = 24;\n  return (&lt;div&gt;\n\t\t    &lt;span&gt; {day}th &lt;/span&gt;\n\t\t\t&lt;span&gt; {month} &lt;/span&gt;\n\t\t  &lt;/div&gt;);\n}\n</code></pre>\n</li>\n<li>Components must start with a capital letter. Small letter indicates HTML element, and may lead to errors.</li>\n<li>JSX is an expression too, so one can store it in a variable or return it.</li>\n<li>JSX can restart inside JS, but still JSX and JS should be differentiated with a {} for the JS part. Simply remember that JSX is an object and it doesn’t make sense to write objects after one another. Example:<pre><code class=\"language-JSX\">const day = 24;\nconst month = 'March';\nreturn &lt;div&gt;{day}&lt;span&gt;th&lt;/span&gt; {month}&lt;/div&gt;;\n// 24th March\n</code></pre>\n</li>\n<li><code>true</code>, <code>false</code>, <code>null</code> and <code>undefined</code> are rendered as empty whitespace. To really render them, convert to string first, like so <code>String(null)</code>.</li>\n</ol>\n<p>See a gist of <a href=\"https://flaviocopes.com/jsx/\">more</a> rules.</p>\n<h3 id=\"about-jsx\">About JSX <a class=\"heading-anchor-permalink\" href=\"#about-jsx\">#</a></h3>\n<ul>\n<li>JSX prevents injection attacks - everything is converted into a string before being rendered.</li>\n<li>JSX represents objects.</li>\n</ul>\n",
      "id": 296
    },
    {
      "path": "vault/2_React_-_basics/2_React_Components/0_React_elements.md",
      "url": "vault/2_React_-_basics/2_React_Components/0_React_elements.html",
      "content": "# 0. React elements\nCreated Tuesday 02 November 2021\n\n#### Why\nThese are most basic objects that describe what needs to be rendered.\n\n#### How\nThey call the ``React.createElement()`` method when rendered.\nThey are of two types:\n\n1. HTML basics\n2. Component based\n\n\nFIXME: add examples\n\n",
      "html": "<h1 id=\"0.-react-elements\">0. React elements <a class=\"heading-anchor-permalink\" href=\"#0.-react-elements\">#</a></h1>\n<p>Created Tuesday 02 November 2021</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>These are most basic objects that describe what needs to be rendered.</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<p>They call the <code>React.createElement()</code> method when rendered.\nThey are of two types:</p>\n<ol>\n<li>HTML basics</li>\n<li>Component based</li>\n</ol>\n<p>FIXME: add examples</p>\n",
      "id": 297
    },
    {
      "path": "vault/2_React_-_basics/2_React_Components/1_Components.md",
      "url": "vault/2_React_-_basics/2_React_Components/1_Components.html",
      "content": "# 1. Components\nCreated Tuesday 02 November 2021\n\nFIXME - all here\n\n#### Why\nState needs to be passed to the elements being rendered. This can be done in components.\n\n#### How\nBy passing a ``props`` argument to the component, this is optional though.\n\n#### What\n\n* These are different from elements.\n* They are either functions or classes (with a render method) that have a ``props`` argument that contains the state.\n\n\nNote: ``props`` are read only, by convention. Let the components be pure, w.r.t their ``props``.\n\n",
      "html": "<h1 id=\"1.-components\">1. Components <a class=\"heading-anchor-permalink\" href=\"#1.-components\">#</a></h1>\n<p>Created Tuesday 02 November 2021</p>\n<p>FIXME - all here</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>State needs to be passed to the elements being rendered. This can be done in components.</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<p>By passing a <code>props</code> argument to the component, this is optional though.</p>\n<h4 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h4>\n<ul>\n<li>These are different from elements.</li>\n<li>They are either functions or classes (with a render method) that have a <code>props</code> argument that contains the state.</li>\n</ul>\n<p>Note: <code>props</code> are read only, by convention. Let the components be pure, w.r.t their <code>props</code>.</p>\n",
      "id": 298
    },
    {
      "path": "vault/2_React_-_basics/2_React_Components/2_Function_based_component.md",
      "url": "vault/2_React_-_basics/2_React_Components/2_Function_based_component.html",
      "content": "# 2. Function based component\nCreated Wednesday 09 September 2020\n\n\n* Used for dumb components (no state).\n* Just return JSX.\n\n```jsx\nimport React as 'react';\n\t\nfunction App ()\n{\n\treturn (\n\t\t<div>\n\t\t\t<h1>Function-Based Component</h1>\n\t\t</div>\n\t);\n}\n\nexport default App;\n```",
      "html": "<h1 id=\"2.-function-based-component\">2. Function based component <a class=\"heading-anchor-permalink\" href=\"#2.-function-based-component\">#</a></h1>\n<p>Created Wednesday 09 September 2020</p>\n<ul>\n<li>Used for dumb components (no state).</li>\n<li>Just return JSX.</li>\n</ul>\n<pre><code class=\"language-jsx\">import React as 'react';\n\t\nfunction App ()\n{\n\treturn (\n\t\t&lt;div&gt;\n\t\t\t&lt;h1&gt;Function-Based Component&lt;/h1&gt;\n\t\t&lt;/div&gt;\n\t);\n}\n\nexport default App;\n</code></pre>\n",
      "id": 299
    },
    {
      "path": "vault/2_React_-_basics/2_importing_and_exporting_in_React.md",
      "url": "vault/2_React_-_basics/2_importing_and_exporting_in_React.html",
      "content": "# 5. Importing and exporting in React\nCreated Tuesday 25 August 2020\n\n## Why\nAs React is made of reusable components, it's obvious that code will need to be imported to other files. Consequently, it must be exported properly.\n\nIt is important to note that imports/exports are not specific to React but to version of JavaScript being used. This import and export feature is actually supported by Babel.\n\n## How\n### Importing\n```JSX\nimport App from 'components/App' // .jsx or .js can be omitted\n\nfunction MainApp() {\n\treturn <App />;\n}\n```\n### Exporting\nThere are 2 ways (syntactic) to export:\n```JSX\nfunction App() {\t\n\treturn (<div><\\div>);\n}\n\nexport default App; // extra line\n```\nOR all in one go\n```JSX\nexport default function App() {\t\n\treturn (<div><\\div>);\n} // modular, no extra line\n```\n\n### `export` vs `export default`\n* `export default`  is useful if only one thing is being imported. Also the imported thing may be renamed at the destination(using **import x from y**). \n* `export` alone exports objects which need to imported by their original name, and separated by commas.\nNote: There is atmost one `export default`.\n\n## Example code\nSource:\n```JSX\nexport default function App1() {\t\n\treturn (<div>App1<\\div>);\n}\n\nexport function App2() {\n\treturn (<div>App2<\\div>);\n}\n\nexport function App3() {\n\treturn (<div>App3<\\div>);\n}\n```\n\nDestination:\n```JSX\nimport AppOne from \"./source.js\"; // export default - no brace, original name needed\n\nimport {App2, App3} from \"./source.js\"; // export - must use braces and original same\n\nimport AppOne, {App2, App3} from \"./source.js\"; // all in one line\n```",
      "html": "<h1 id=\"5.-importing-and-exporting-in-react\">5. Importing and exporting in React <a class=\"heading-anchor-permalink\" href=\"#5.-importing-and-exporting-in-react\">#</a></h1>\n<p>Created Tuesday 25 August 2020</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>As React is made of reusable components, it’s obvious that code will need to be imported to other files. Consequently, it must be exported properly.</p>\n<p>It is important to note that imports/exports are not specific to React but to version of JavaScript being used. This import and export feature is actually supported by Babel.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<h3 id=\"importing\">Importing <a class=\"heading-anchor-permalink\" href=\"#importing\">#</a></h3>\n<pre><code class=\"language-JSX\">import App from 'components/App' // .jsx or .js can be omitted\n\nfunction MainApp() {\n\treturn &lt;App /&gt;;\n}\n</code></pre>\n<h3 id=\"exporting\">Exporting <a class=\"heading-anchor-permalink\" href=\"#exporting\">#</a></h3>\n<p>There are 2 ways (syntactic) to export:</p>\n<pre><code class=\"language-JSX\">function App() {\t\n\treturn (&lt;div&gt;&lt;\\div&gt;);\n}\n\nexport default App; // extra line\n</code></pre>\n<p>OR all in one go</p>\n<pre><code class=\"language-JSX\">export default function App() {\t\n\treturn (&lt;div&gt;&lt;\\div&gt;);\n} // modular, no extra line\n</code></pre>\n<h3 id=\"export-vs-export-default\"><code>export</code> vs <code>export default</code> <a class=\"heading-anchor-permalink\" href=\"#export-vs-export-default\">#</a></h3>\n<ul>\n<li><code>export default</code>  is useful if only one thing is being imported. Also the imported thing may be renamed at the destination(using <strong>import x from y</strong>).</li>\n<li><code>export</code> alone exports objects which need to imported by their original name, and separated by commas.\nNote: There is atmost one <code>export default</code>.</li>\n</ul>\n<h2 id=\"example-code\">Example code <a class=\"heading-anchor-permalink\" href=\"#example-code\">#</a></h2>\n<p>Source:</p>\n<pre><code class=\"language-JSX\">export default function App1() {\t\n\treturn (&lt;div&gt;App1&lt;\\div&gt;);\n}\n\nexport function App2() {\n\treturn (&lt;div&gt;App2&lt;\\div&gt;);\n}\n\nexport function App3() {\n\treturn (&lt;div&gt;App3&lt;\\div&gt;);\n}\n</code></pre>\n<p>Destination:</p>\n<pre><code class=\"language-JSX\">import AppOne from &quot;./source.js&quot;; // export default - no brace, original name needed\n\nimport {App2, App3} from &quot;./source.js&quot;; // export - must use braces and original same\n\nimport AppOne, {App2, App3} from &quot;./source.js&quot;; // all in one line\n</code></pre>\n",
      "id": 300
    },
    {
      "path": "vault/2_React_-_basics/3_React_Components.md",
      "url": "vault/2_React_-_basics/3_React_Components.html",
      "content": "# 4. React Components\nCreated Wednesday 29 July 2020\n\n#### Why\nComponents are universally useful in building UIs, because they enhance:\n* Separation Of Concerns\n* Re-usability\n\n#### How\n* HTML, CSS and JavaScript are combined to create components, using the React library.\n* They are also combined using the React library.\n\nSo this is a 2 step process - create units and then combine them.\n\n#### What\n* React is all about components.\n\t![](../../assets/0_index-image-1-4fa49474.png)\n* All component names should start with a capital letter(very important - CamelCase) - React generally treats lowercase elements as standard HTML elements.\n* Each component is generally kept in a file of it's own. Both `.js` and `.jsx` are valid file extensions. I prefer `.jsx` because it helps in differentiation UI files and logic-only files.\n* Every component exports a class or a function that returns **one and only one** wrapped JSX element(like a div or React.Fragment tag-for multiple components).\n* Styles should be named as a component-class because all CSS is finally bundled in the head tag.\n* The index.js renders all the components, finally, and only it should, generally.\n\n\nIt's normal to have ~100 components for a UI, because components of the UI are broken down.\n\n",
      "html": "<h1 id=\"4.-react-components\">4. React Components <a class=\"heading-anchor-permalink\" href=\"#4.-react-components\">#</a></h1>\n<p>Created Wednesday 29 July 2020</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>Components are universally useful in building UIs, because they enhance:</p>\n<ul>\n<li>Separation Of Concerns</li>\n<li>Re-usability</li>\n</ul>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<ul>\n<li>HTML, CSS and JavaScript are combined to create components, using the React library.</li>\n<li>They are also combined using the React library.</li>\n</ul>\n<p>So this is a 2 step process - create units and then combine them.</p>\n<h4 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h4>\n<ul>\n<li>React is all about components.\n<img src=\"../../assets/0_index-image-1-4fa49474.png\" alt=\"\"></li>\n<li>All component names should start with a capital letter(very important - CamelCase) - React generally treats lowercase elements as standard HTML elements.</li>\n<li>Each component is generally kept in a file of it’s own. Both <code>.js</code> and <code>.jsx</code> are valid file extensions. I prefer <code>.jsx</code> because it helps in differentiation UI files and logic-only files.</li>\n<li>Every component exports a class or a function that returns <strong>one and only one</strong> wrapped JSX element(like a div or React.Fragment tag-for multiple components).</li>\n<li>Styles should be named as a component-class because all CSS is finally bundled in the head tag.</li>\n<li>The index.js renders all the components, finally, and only it should, generally.</li>\n</ul>\n<p>It’s normal to have ~100 components for a UI, because components of the UI are broken down.</p>\n",
      "id": 301
    },
    {
      "path": "vault/2_React_-_basics/4_Conditional_rendering_in_JSX.md",
      "url": "vault/2_React_-_basics/4_Conditional_rendering_in_JSX.html",
      "content": "# 1. Conditional rendering in JSX\nCreated Thursday 27 August 2020\n\n#### Why\nThis is one of the uses of JSX's treatment of logic-expressions and UI code as inherently coupled.\n\n## How\nSimply use 3 things:\n1. Fact that JSX code is an object.\n2. AND and OR logical operators evaluate to one of the argument object.\n3. `null` renders to nothing in React. \n\n## What\nThese are some cases of conditional rendering using JSX\n1. Ternary operator.\n\t```JSX\n\tfunction App() {\n\t\tconst name = 'Rahul';\n\t\tconst isLoggedIn = false;\n\t\n\t\treturn <p> Hello {isLoggedin ? name : 'World'} </p>\n\t}\n\t```\n2. AND (&&). Shortcircuiting helps.\n\t```JSX\n\t{!isLoggedIn && <p> Hello World </p>}\n\t{isLoggedIn && <p> Hello {name} </p>}\n\t```\n\tThis works because JS **returns** the *second* value as it is(if it is truthy, instead of a boolean), in case of logical AND.\n\t```JS\n\ttrue && 'Sanjar' // 'Sanjar'\n\tfalse && 'Sanjar' // false, short circuit\n\t'Sanjar' && 'Afaq' // Afaq\n\t```\n\tFor a || (OR), the *first* value is **returned** if truthy, else the *second* value.\n\t```JS\n\tfalse || 'Sanjar' // 'Sanjar'\n\ttrue || 'Sanjar' // true, short circuit\n\t'Sanjar' || 'Afaq' // 'Sanjar', short circuit\n\t```\n\tThese statement return a value. So in order to avoid return for the function, we wrap these statements in a {}\n3. Using if statements and JSX expressions. This is considered bad practice. This is because it defeats the reason why JSX is created (to include expression code and UI code). It can be done but should never be done.\n4. Using switch case.\n5. Using {} and JSX inside it. Expression will be returned. JSX is JS too 😂️.\n\t```JSX\n\treturn (<div>\n\t\t\t\t{ false && <p1> Hello <p1>} \n\t\t\t</div>);\n\t```\n\n## Example\nIn the robofriends App, we can show loading if the URL is still loading.\n```JSX\nif (!this.state.robots.length) return <h1>Loading</h1>; // conditional rendering\n\nreturn (\n  <div>\n\t...// some code\n  </div>);\n```\n* Generally, the conditions are kept inside the return clause, using {} JS if possible.",
      "html": "<h1 id=\"1.-conditional-rendering-in-jsx\">1. Conditional rendering in JSX <a class=\"heading-anchor-permalink\" href=\"#1.-conditional-rendering-in-jsx\">#</a></h1>\n<p>Created Thursday 27 August 2020</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>This is one of the uses of JSX’s treatment of logic-expressions and UI code as inherently coupled.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Simply use 3 things:</p>\n<ol>\n<li>Fact that JSX code is an object.</li>\n<li>AND and OR logical operators evaluate to one of the argument object.</li>\n<li><code>null</code> renders to nothing in React.</li>\n</ol>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>These are some cases of conditional rendering using JSX</p>\n<ol>\n<li>Ternary operator.<pre><code class=\"language-JSX\">function App() {\n\tconst name = 'Rahul';\n\tconst isLoggedIn = false;\n\n\treturn &lt;p&gt; Hello {isLoggedin ? name : 'World'} &lt;/p&gt;\n}\n</code></pre>\n</li>\n<li>AND (&amp;&amp;). Shortcircuiting helps.<pre><code class=\"language-JSX\">{!isLoggedIn &amp;&amp; &lt;p&gt; Hello World &lt;/p&gt;}\n{isLoggedIn &amp;&amp; &lt;p&gt; Hello {name} &lt;/p&gt;}\n</code></pre>\nThis works because JS <strong>returns</strong> the <em>second</em> value as it is(if it is truthy, instead of a boolean), in case of logical AND.<pre><code class=\"language-JS\">true &amp;&amp; 'Sanjar' // 'Sanjar'\nfalse &amp;&amp; 'Sanjar' // false, short circuit\n'Sanjar' &amp;&amp; 'Afaq' // Afaq\n</code></pre>\nFor a || (OR), the <em>first</em> value is <strong>returned</strong> if truthy, else the <em>second</em> value.<pre><code class=\"language-JS\">false || 'Sanjar' // 'Sanjar'\ntrue || 'Sanjar' // true, short circuit\n'Sanjar' || 'Afaq' // 'Sanjar', short circuit\n</code></pre>\nThese statement return a value. So in order to avoid return for the function, we wrap these statements in a {}</li>\n<li>Using if statements and JSX expressions. This is considered bad practice. This is because it defeats the reason why JSX is created (to include expression code and UI code). It can be done but should never be done.</li>\n<li>Using switch case.</li>\n<li>Using {} and JSX inside it. Expression will be returned. JSX is JS too 😂️.<pre><code class=\"language-JSX\">return (&lt;div&gt;\n\t\t\t{ false &amp;&amp; &lt;p1&gt; Hello &lt;p1&gt;} \n\t\t&lt;/div&gt;);\n</code></pre>\n</li>\n</ol>\n<h2 id=\"example\">Example <a class=\"heading-anchor-permalink\" href=\"#example\">#</a></h2>\n<p>In the robofriends App, we can show loading if the URL is still loading.</p>\n<pre><code class=\"language-JSX\">if (!this.state.robots.length) return &lt;h1&gt;Loading&lt;/h1&gt;; // conditional rendering\n\nreturn (\n  &lt;div&gt;\n\t...// some code\n  &lt;/div&gt;);\n</code></pre>\n<ul>\n<li>Generally, the conditions are kept inside the return clause, using {} JS if possible.</li>\n</ul>\n",
      "id": 302
    },
    {
      "path": "vault/2_React_-_basics/5_Rendering_lists.md",
      "url": "vault/2_React_-_basics/5_Rendering_lists.html",
      "content": "# 2. Rendering lists\nCreated Wednesday 09 September 2020\n\n#### Why\nReact can render a hierarchied JSX object. But what about rendering **sibling** nodes.\nReact can render them too.\n\n#### How\nReact render an array of JSX objects as sibling nodes.\nExample\n```JSX\nreturn <div>{[<span> Hello </span>, <span> World </span>]}</div>\nreturn <div>{names.map( (name) => <div>{name}</div> )} </div>} // commonly done\n```\n\nNote: React can render sibling nodes, but a single outermost container is still needed.\n#### What\n**How to output/render multiple components together on a page? Some approaches are:**\n* Doing a for loop won't help, as it's not an expression, so no object will be rendered finally.\n* A simple way to do this: Have an array of **JSX elements** in a div. All items in the array will be rendered as siblings, in order.\n\nA simple way is to use **map** in JS, and this is used quite a lot.\ne.g Making a list of components and, then rendering it\n```jsx\nconst ninjaList = ninjas.map(\n\tninja => (<div>\n\t\t\t\t<div>Name: {ninja.name} </div>\n\t\t\t\t<div>Age: {ninja.age} </div>\n\t\t\t\t<div>Belt: {ninja.belt} </div>\n\t\t\t</div>));\nreturn (<div> {ninjaList} </div>);\t// render function\n```\n![](../../assets/5_Rendering_lists-image-1-4fa49474.png)\n\n### Key attribute\n* While rendering lists of components, React may redo the whole array even if only a single component is pre-pended in the latest UI frame. The reason being that React compares the lists in a simple iterative way. This can lead to poor performance.\n- To avoid poor performance, React can be given a hint via the \"key\" string attribute on the list JSX element (can be HTML element or custom, although in case key is passed to custom element it *won't* be available to it via prop).\n- How does the \"key\" attribute help? React first compares key of a JSX element with all keys of existing list of JSX elements. If the key is present, React assumes the JSX elements are the same, so it ignores any updates for/inside them. This makes React fast, and also helps with cases like pre-pending an element, where performance without keys would be bad.\n\t```jsx\n\t<ul>\n\t\t<li> One </li>\n\t\t<li> Two </li>\n\t</ul>\n\t\n\t// vs - 3 thrashes. Bad performance.\n\t\n\t<ul>\n\t\t<li> Zero </li>\n\t\t<li> One </li>\n\t\t<li> Two </li>\n\t</ul>\n\t```\n\t```jsx\n\t<ul>\n\t\t<li key=\"one\"> One </li>\n\t\t<li key=\"two\"> Two </li>\n\t</ul>\n\t\n\t// vs - Just a pre-pended component. Good performance.\n\t\n\t<ul>\n\t\t<li key=\"zero\"> Zero </li>\n\t\t<li key=\"one\"> One </li>\n\t\t<li key=\"two\"> Two </li>\n\t</ul>\n\t```\n### Conditions for key\n* The ideal candidate for the key attribute is the ID of the data being used.\n* A less and sometimes buggy candidate is the index of the array, as available in map (`map(vari, index)`). It is buggy because a JSX element would change internally, but have an ID same as existing nodes, this would not update the existing JSX, as it should, resulting in an error.\n* An error shows if key is absent while rendering lists of JSX elements.\n- Always use keys attribute for when rendering lists of JSX elements.\n![](../../assets/5_Rendering_lists-image-2-4fa49474.png)\n- Keys should be unique only among siblings, and don't have to be globally unique.\n* To remove the error, add the key attribute to each component being rendered.\n\t```jsx\n\tconst ninjaList = ninjas.map(\n\t\tninja => (<div key={ninja.id}>\n\t\t\t\t\t<div>Name: {ninja.name} </div>\n\t\t\t\t\t<div>Age: {ninja.age} </div>\n\t\t\t\t\t<div>Belt: {ninja.belt} </div>\n\t\t\t\t</div>));\n\treturn (<div> {ninjaList} </div>);\t// render function\n\t```\n",
      "html": "<h1 id=\"2.-rendering-lists\">2. Rendering lists <a class=\"heading-anchor-permalink\" href=\"#2.-rendering-lists\">#</a></h1>\n<p>Created Wednesday 09 September 2020</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>React can render a hierarchied JSX object. But what about rendering <strong>sibling</strong> nodes.\nReact can render them too.</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<p>React render an array of JSX objects as sibling nodes.\nExample</p>\n<pre><code class=\"language-JSX\">return &lt;div&gt;{[&lt;span&gt; Hello &lt;/span&gt;, &lt;span&gt; World &lt;/span&gt;]}&lt;/div&gt;\nreturn &lt;div&gt;{names.map( (name) =&gt; &lt;div&gt;{name}&lt;/div&gt; )} &lt;/div&gt;} // commonly done\n</code></pre>\n<p>Note: React can render sibling nodes, but a single outermost container is still needed.</p>\n<h4 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h4>\n<p><strong>How to output/render multiple components together on a page? Some approaches are:</strong></p>\n<ul>\n<li>Doing a for loop won’t help, as it’s not an expression, so no object will be rendered finally.</li>\n<li>A simple way to do this: Have an array of <strong>JSX elements</strong> in a div. All items in the array will be rendered as siblings, in order.</li>\n</ul>\n<p>A simple way is to use <strong>map</strong> in JS, and this is used quite a lot.\ne.g Making a list of components and, then rendering it</p>\n<pre><code class=\"language-jsx\">const ninjaList = ninjas.map(\n\tninja =&gt; (&lt;div&gt;\n\t\t\t\t&lt;div&gt;Name: {ninja.name} &lt;/div&gt;\n\t\t\t\t&lt;div&gt;Age: {ninja.age} &lt;/div&gt;\n\t\t\t\t&lt;div&gt;Belt: {ninja.belt} &lt;/div&gt;\n\t\t\t&lt;/div&gt;));\nreturn (&lt;div&gt; {ninjaList} &lt;/div&gt;);\t// render function\n</code></pre>\n<p><img src=\"../../assets/5_Rendering_lists-image-1-4fa49474.png\" alt=\"\"></p>\n<h3 id=\"key-attribute\">Key attribute <a class=\"heading-anchor-permalink\" href=\"#key-attribute\">#</a></h3>\n<ul>\n<li>While rendering lists of components, React may redo the whole array even if only a single component is pre-pended in the latest UI frame. The reason being that React compares the lists in a simple iterative way. This can lead to poor performance.</li>\n</ul>\n<ul>\n<li>To avoid poor performance, React can be given a hint via the “key” string attribute on the list JSX element (can be HTML element or custom, although in case key is passed to custom element it <em>won’t</em> be available to it via prop).</li>\n<li>How does the “key” attribute help? React first compares key of a JSX element with all keys of existing list of JSX elements. If the key is present, React assumes the JSX elements are the same, so it ignores any updates for/inside them. This makes React fast, and also helps with cases like pre-pending an element, where performance without keys would be bad.<pre><code class=\"language-jsx\">&lt;ul&gt;\n\t&lt;li&gt; One &lt;/li&gt;\n\t&lt;li&gt; Two &lt;/li&gt;\n&lt;/ul&gt;\n\n// vs - 3 thrashes. Bad performance.\n\n&lt;ul&gt;\n\t&lt;li&gt; Zero &lt;/li&gt;\n\t&lt;li&gt; One &lt;/li&gt;\n\t&lt;li&gt; Two &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<pre><code class=\"language-jsx\">&lt;ul&gt;\n\t&lt;li key=&quot;one&quot;&gt; One &lt;/li&gt;\n\t&lt;li key=&quot;two&quot;&gt; Two &lt;/li&gt;\n&lt;/ul&gt;\n\n// vs - Just a pre-pended component. Good performance.\n\n&lt;ul&gt;\n\t&lt;li key=&quot;zero&quot;&gt; Zero &lt;/li&gt;\n\t&lt;li key=&quot;one&quot;&gt; One &lt;/li&gt;\n\t&lt;li key=&quot;two&quot;&gt; Two &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"conditions-for-key\">Conditions for key <a class=\"heading-anchor-permalink\" href=\"#conditions-for-key\">#</a></h3>\n<ul>\n<li>The ideal candidate for the key attribute is the ID of the data being used.</li>\n<li>A less and sometimes buggy candidate is the index of the array, as available in map (<code>map(vari, index)</code>). It is buggy because a JSX element would change internally, but have an ID same as existing nodes, this would not update the existing JSX, as it should, resulting in an error.</li>\n<li>An error shows if key is absent while rendering lists of JSX elements.</li>\n</ul>\n<ul>\n<li>Always use keys attribute for when rendering lists of JSX elements.\n<img src=\"../../assets/5_Rendering_lists-image-2-4fa49474.png\" alt=\"\"></li>\n<li>Keys should be unique only among siblings, and don’t have to be globally unique.</li>\n</ul>\n<ul>\n<li>To remove the error, add the key attribute to each component being rendered.<pre><code class=\"language-jsx\">const ninjaList = ninjas.map(\n\tninja =&gt; (&lt;div key={ninja.id}&gt;\n\t\t\t\t&lt;div&gt;Name: {ninja.name} &lt;/div&gt;\n\t\t\t\t&lt;div&gt;Age: {ninja.age} &lt;/div&gt;\n\t\t\t\t&lt;div&gt;Belt: {ninja.belt} &lt;/div&gt;\n\t\t\t&lt;/div&gt;));\nreturn (&lt;div&gt; {ninjaList} &lt;/div&gt;);\t// render function\n</code></pre>\n</li>\n</ul>\n",
      "id": 303
    },
    {
      "path": "vault/2_React_-_basics/6_Organizing_Components.md",
      "url": "vault/2_React_-_basics/6_Organizing_Components.html",
      "content": "# 6. Organizing Components\nCreated Wednesday 09 September 2020\n\nFIXME, write about - destructure props, smart vs dumb, headless components, styleProps/classProps, slots, propSets, dependencyInversion for generic buttons, core + common + page-components + pages directory, constants in enums, util functions in a dedicated file, custom hooks, component/page <--> Redux thunk <--> endpoint file arch.\n#### Why\nReact is all about components and so it's normal to have more than 100 components in a project. Due to which organization becomes more important.\n\n#### How\nThere are many ways to organize files:\n1. Into `components` (specific components), `shared`(wrapper or shared components), `main` (integrating components) folders.\n2. Have app's section wise folders and keep them heirarchical low levelled.\n\nThere are many ways. Just use what makes work on the app a pleasure.",
      "html": "<h1 id=\"6.-organizing-components\">6. Organizing Components <a class=\"heading-anchor-permalink\" href=\"#6.-organizing-components\">#</a></h1>\n<p>Created Wednesday 09 September 2020</p>\n<p>FIXME, write about - destructure props, smart vs dumb, headless components, styleProps/classProps, slots, propSets, dependencyInversion for generic buttons, core + common + page-components + pages directory, constants in enums, util functions in a dedicated file, custom hooks, component/page &lt;–&gt; Redux thunk &lt;–&gt; endpoint file arch.</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>React is all about components and so it’s normal to have more than 100 components in a project. Due to which organization becomes more important.</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<p>There are many ways to organize files:</p>\n<ol>\n<li>Into <code>components</code> (specific components), <code>shared</code>(wrapper or shared components), <code>main</code> (integrating components) folders.</li>\n<li>Have app’s section wise folders and keep them heirarchical low levelled.</li>\n</ol>\n<p>There are many ways. Just use what makes work on the app a pleasure.</p>\n",
      "id": 304
    },
    {
      "path": "vault/3_styling,_props,_children/1_1_PropTypes_and_defaultProps.md",
      "url": "vault/3_styling,_props,_children/1_1_PropTypes_and_defaultProps.html",
      "content": "# 4. PropTypes and defaultProps\nCreated Sunday 06 September 2020\n\n## Why\nThe props we use in React components are supposed to be of a certain type. But this is not indicated anywhere. This can cause wrong type of props to be received by the rendering component. To avoid this, we use the `prop-types` npm library, which lets us created `console` level error checks for the type of props received.\n\nNote that we could use `TypeScript` if we wanted to use a type for variables, but it is an overhead to use `TypeScript`. `prop-types` is a lighter solution for specifying types.\n\nAlso, sometimes we are supposed to receive a prop but it is not passed, this can break our component because of `undefined`. To get rid of this, we can specify default values of the props, so errors like this are caught.\n\n## How\n`propTypes` is a [library](https://www.npmjs.com/package/prop-types).\n`defaultProps` are already included in `create-react-app` projects.\n\nIt is to be noted that we are specifying props of the current component - i.e. props that are being received, not being sent. This is because sent ones are already known - they may be a prop or created just here.\n\nAlso, note that for both `propTypes` and `defaultProps`, while receiving props, it does not matter if we use a props object or de-structure them. Just make sure the names of the receiving props are named correctly during specification.\n\nDuring specification, both values are lowercase, follow component name and are plural. Like so:\n```jsx\nMyComponent.propTypes = { // lowercase start\n\tname: PropTypes.string // capital here, coz it's a constant\n}\nMyComponent.defaultProps = {} //lowercase start\n```\n\n## What\n### PropTypes\nTo use `propTypes`, first install it in the project (`npm i prop-types`) and import it in the *receiving* component.\n```jsx\nimport PropTypes from 'prop-types'; // for using type constants, so capital\n```\n\nTo specify types, the syntax is:\n```jsx\n// receiving component file\n\nconst MyReceivingComponent = () => { ... } // component defintion\n// may be class or functional component\n\nMyReceivingComponent.propTypes = { // lowercase propTypes\n\tname: PropTypes.string, // optional string\n\tobj: PropTypes.object, // object\n\tage: PropTypes.number, // optional number\n\trarr: PropTypes.array, // optional array\n\taction: PropTypes.func.isRequired, // function and always required\n\n\tnumArr: PropTypes.arrayOf(PropTypes.number), // array of numbers\n\tenumm: PropTypes.oneOf(['News', 'Photos', 'Game']) // enum - one of values\n\toneType: PropTypes.oneOfType([ // one of types\n\t\tPropTypes.string,\n\t\tPropTypes.number\n\t])\n\toptionalShape: PropTypes.shape({ // object and it's minimalist shape. Can be nested. More name-value pairs could be added.\n\t\tcolor: PropTypes.string,\n\t\tfontSize: PropTypes.number\n\t})\n\texactShape: PropTypes.exact({ // exact object, cannot have extra/less name value pairs\n\t\tname: PropTypes.string,\n\t\tfontSize: PropTypes.number,\n\t\tid: PropTypes.string,\n\t})\n\tanyTypeProp: PropTypes.any, // any data type is acceptable\n\n\telement: PropTypes.element, // a React element\n\tspecificElement: PropTypes.MyComponent, // a React element of type MyComponent\n\trenderableNode: PropTypes.node, // anything that may be rendered directly\n\n\tgenericType: PropTypes.instanceOf(ClassName), // prop is an object of type ClassName\n}\n```\n- `isRequired` for `propTypes` entries is appended to the last to indicate the prop should always be received, i.e. it cannot be blank.\n- `isRequired` and default value are mutually exclusive - If a prop is tagged `isRequired`, a default value for it makes no sense, and should be omitted. If it's not `isRequired`, a default value should always be specified.\n- Only `PropTypes.bool` (`boolean`) and `PropTypes.func` (`function`) are named unusually.\n- We can combine the types of values and make complex types using `PropType`.\n- For more types, see https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes\n\n---\n### defaultProps\nThe syntax for this is:\n```jsx\n// MyReceivingComponent is defined, class or functional component\n\nMyReceivingComponent.defaultProps = {\n\tprop1: \"Default val\",\n\tpropObject: {}, // an empty object\n}\n```\n\nThat' all.\n\n### Single child for wrapper\nTo specify that a single component is wrapper around our component (see [3_Wrapper_components](3_Wrapper_components.md)), do this:\n```jsx\nMyComponent.propTypes = {\n\tchildren: propTypes.element.isRequired,\n}\n```",
      "html": "<h1 id=\"4.-proptypes-and-defaultprops\">4. PropTypes and defaultProps <a class=\"heading-anchor-permalink\" href=\"#4.-proptypes-and-defaultprops\">#</a></h1>\n<p>Created Sunday 06 September 2020</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>The props we use in React components are supposed to be of a certain type. But this is not indicated anywhere. This can cause wrong type of props to be received by the rendering component. To avoid this, we use the <code>prop-types</code> npm library, which lets us created <code>console</code> level error checks for the type of props received.</p>\n<p>Note that we could use <code>TypeScript</code> if we wanted to use a type for variables, but it is an overhead to use <code>TypeScript</code>. <code>prop-types</code> is a lighter solution for specifying types.</p>\n<p>Also, sometimes we are supposed to receive a prop but it is not passed, this can break our component because of <code>undefined</code>. To get rid of this, we can specify default values of the props, so errors like this are caught.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p><code>propTypes</code> is a <a href=\"https://www.npmjs.com/package/prop-types\">library</a>.\n<code>defaultProps</code> are already included in <code>create-react-app</code> projects.</p>\n<p>It is to be noted that we are specifying props of the current component - i.e. props that are being received, not being sent. This is because sent ones are already known - they may be a prop or created just here.</p>\n<p>Also, note that for both <code>propTypes</code> and <code>defaultProps</code>, while receiving props, it does not matter if we use a props object or de-structure them. Just make sure the names of the receiving props are named correctly during specification.</p>\n<p>During specification, both values are lowercase, follow component name and are plural. Like so:</p>\n<pre><code class=\"language-jsx\">MyComponent.propTypes = { // lowercase start\n\tname: PropTypes.string // capital here, coz it's a constant\n}\nMyComponent.defaultProps = {} //lowercase start\n</code></pre>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<h3 id=\"proptypes\">PropTypes <a class=\"heading-anchor-permalink\" href=\"#proptypes\">#</a></h3>\n<p>To use <code>propTypes</code>, first install it in the project (<code>npm i prop-types</code>) and import it in the <em>receiving</em> component.</p>\n<pre><code class=\"language-jsx\">import PropTypes from 'prop-types'; // for using type constants, so capital\n</code></pre>\n<p>To specify types, the syntax is:</p>\n<pre><code class=\"language-jsx\">// receiving component file\n\nconst MyReceivingComponent = () =&gt; { ... } // component defintion\n// may be class or functional component\n\nMyReceivingComponent.propTypes = { // lowercase propTypes\n\tname: PropTypes.string, // optional string\n\tobj: PropTypes.object, // object\n\tage: PropTypes.number, // optional number\n\trarr: PropTypes.array, // optional array\n\taction: PropTypes.func.isRequired, // function and always required\n\n\tnumArr: PropTypes.arrayOf(PropTypes.number), // array of numbers\n\tenumm: PropTypes.oneOf(['News', 'Photos', 'Game']) // enum - one of values\n\toneType: PropTypes.oneOfType([ // one of types\n\t\tPropTypes.string,\n\t\tPropTypes.number\n\t])\n\toptionalShape: PropTypes.shape({ // object and it's minimalist shape. Can be nested. More name-value pairs could be added.\n\t\tcolor: PropTypes.string,\n\t\tfontSize: PropTypes.number\n\t})\n\texactShape: PropTypes.exact({ // exact object, cannot have extra/less name value pairs\n\t\tname: PropTypes.string,\n\t\tfontSize: PropTypes.number,\n\t\tid: PropTypes.string,\n\t})\n\tanyTypeProp: PropTypes.any, // any data type is acceptable\n\n\telement: PropTypes.element, // a React element\n\tspecificElement: PropTypes.MyComponent, // a React element of type MyComponent\n\trenderableNode: PropTypes.node, // anything that may be rendered directly\n\n\tgenericType: PropTypes.instanceOf(ClassName), // prop is an object of type ClassName\n}\n</code></pre>\n<ul>\n<li><code>isRequired</code> for <code>propTypes</code> entries is appended to the last to indicate the prop should always be received, i.e. it cannot be blank.</li>\n<li><code>isRequired</code> and default value are mutually exclusive - If a prop is tagged <code>isRequired</code>, a default value for it makes no sense, and should be omitted. If it’s not <code>isRequired</code>, a default value should always be specified.</li>\n<li>Only <code>PropTypes.bool</code> (<code>boolean</code>) and <code>PropTypes.func</code> (<code>function</code>) are named unusually.</li>\n<li>We can combine the types of values and make complex types using <code>PropType</code>.</li>\n<li>For more types, see <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes\">https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes</a></li>\n</ul>\n<hr>\n<h3 id=\"defaultprops\">defaultProps <a class=\"heading-anchor-permalink\" href=\"#defaultprops\">#</a></h3>\n<p>The syntax for this is:</p>\n<pre><code class=\"language-jsx\">// MyReceivingComponent is defined, class or functional component\n\nMyReceivingComponent.defaultProps = {\n\tprop1: &quot;Default val&quot;,\n\tpropObject: {}, // an empty object\n}\n</code></pre>\n<p>That’ all.</p>\n<h3 id=\"single-child-for-wrapper\">Single child for wrapper <a class=\"heading-anchor-permalink\" href=\"#single-child-for-wrapper\">#</a></h3>\n<p>To specify that a single component is wrapper around our component (see <a href=\"3_Wrapper_components.html\">3_Wrapper_components</a>), do this:</p>\n<pre><code class=\"language-jsx\">MyComponent.propTypes = {\n\tchildren: propTypes.element.isRequired,\n}\n</code></pre>\n",
      "id": 305
    },
    {
      "path": "vault/3_styling,_props,_children/1_React_Props.md",
      "url": "vault/3_styling,_props,_children/1_React_Props.html",
      "content": "# 2. React Props\nCreated Sunday 06 September 2020\n\n#### Why\nReact components should be reusable, so there's a need to associate data with a component, which it uses in rendering its JSX.\n\n#### How\nEverything in React is a component. And the whole UI is nothing but a tree of these components.\n* An easy way to store data for a component is to store the data as key-value attributes of the component, just like HTML attributes.\n* Only attributes passed to a component can be accessed by it, this is an organizing principle in React. The parent passes some of its data to child components as attributes. This is done for two reasons:\n\t* Reusablity: data changes the component behaviour, stuff that it renders.\n\t* Selected information: Every component should have as selective information as possible. This means that code does not have to subscript arrays or extract unnecessary hierarchy of objects. Makes the code simpler. Goal is to keep end information as *singular* as possible.\n* Props are supposed to be **read-only**, this is to achieve separation of concerns. The logic for changing data should be carried out separately from the UI component. This lowers effort needed to write/debug components.\n\nNote: Read-only property of props does not clash with React's philosophy of inherent coupling of final logic-expressions and UI code. The code to change props is not a final expression that is rendered. The final logic-expressions should be at-most logical operators and other short stuff.\n\n#### What\nProp, short for properties, is a component's data storage object.\nAll data that a component works with is stored in this one object.\n\n* Technically, prop is a key-value store based on the attributes (and values) provided by the parent component.\n\n#### How to work with props?\n* Passing data (props): To pass data to a child component, simply pass the data as attribute and values.\n* Defining the component:\n\t* When writing a component that uses props, the **first parameter** in the component's function is the prop object.\n\t* This prop object can be **named anything** (if using a function based component, otherwise it's fixed, and called \"props\"), the only condition is that it must be the component function's first argument.\n\t* If the component is written as a class, it automatically has an object with **fixed name** \"props\".\n* Accessing props: just use the props object as mentioned in the component function definition, via dot notation. Note that the attribute name should **match the key-name**. When using class component, just work with the props object.\n\nUseful trick: An alternative to dot notation is to use ES6 destructuring, where the first argument can be a curly brace with props datum as comma separated objects.\n\nExamples\n```JSX\n// Component file\nfunction ChildComponent = (prop_obj) => {\n  return (<div>\n          \t<h1> {prop_obj.names} </h1>\n          \t<h1> {prop_obj.date} </h1>\n          </div>);\n}\n\n// Parent component passing prop to child component\nfunction ParentToChildComponent = (props) => {\n  return <ChildComponent names=\"Names\" date=\"27 March\" />\n}\n```\nIf using dot notation, the child component would look like this, concise.\n```JSX\n// Component file\nfunction ChildComponent = ({names, date}) => {\n  return (<div>\n          \t<h1> {names} </h1>\n          \t<h1> {date} </h1>\n          </div>);\n}\n```\nClass based component.\n```JSX\nclass Welcome extends React.Component {\n render() {\n   return <h1>Hello, {this.props.name}</h1>;\n }\n}\n```\n\n\n",
      "html": "<h1 id=\"2.-react-props\">2. React Props <a class=\"heading-anchor-permalink\" href=\"#2.-react-props\">#</a></h1>\n<p>Created Sunday 06 September 2020</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>React components should be reusable, so there’s a need to associate data with a component, which it uses in rendering its JSX.</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<p>Everything in React is a component. And the whole UI is nothing but a tree of these components.</p>\n<ul>\n<li>An easy way to store data for a component is to store the data as key-value attributes of the component, just like HTML attributes.</li>\n<li>Only attributes passed to a component can be accessed by it, this is an organizing principle in React. The parent passes some of its data to child components as attributes. This is done for two reasons:\n<ul>\n<li>Reusablity: data changes the component behaviour, stuff that it renders.</li>\n<li>Selected information: Every component should have as selective information as possible. This means that code does not have to subscript arrays or extract unnecessary hierarchy of objects. Makes the code simpler. Goal is to keep end information as <em>singular</em> as possible.</li>\n</ul>\n</li>\n<li>Props are supposed to be <strong>read-only</strong>, this is to achieve separation of concerns. The logic for changing data should be carried out separately from the UI component. This lowers effort needed to write/debug components.</li>\n</ul>\n<p>Note: Read-only property of props does not clash with React’s philosophy of inherent coupling of final logic-expressions and UI code. The code to change props is not a final expression that is rendered. The final logic-expressions should be at-most logical operators and other short stuff.</p>\n<h4 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h4>\n<p>Prop, short for properties, is a component’s data storage object.\nAll data that a component works with is stored in this one object.</p>\n<ul>\n<li>Technically, prop is a key-value store based on the attributes (and values) provided by the parent component.</li>\n</ul>\n<h4 id=\"how-to-work-with-props%3F\">How to work with props? <a class=\"heading-anchor-permalink\" href=\"#how-to-work-with-props%3F\">#</a></h4>\n<ul>\n<li>Passing data (props): To pass data to a child component, simply pass the data as attribute and values.</li>\n<li>Defining the component:\n<ul>\n<li>When writing a component that uses props, the <strong>first parameter</strong> in the component’s function is the prop object.</li>\n<li>This prop object can be <strong>named anything</strong> (if using a function based component, otherwise it’s fixed, and called “props”), the only condition is that it must be the component function’s first argument.</li>\n<li>If the component is written as a class, it automatically has an object with <strong>fixed name</strong> “props”.</li>\n</ul>\n</li>\n<li>Accessing props: just use the props object as mentioned in the component function definition, via dot notation. Note that the attribute name should <strong>match the key-name</strong>. When using class component, just work with the props object.</li>\n</ul>\n<p>Useful trick: An alternative to dot notation is to use ES6 destructuring, where the first argument can be a curly brace with props datum as comma separated objects.</p>\n<p>Examples</p>\n<pre><code class=\"language-JSX\">// Component file\nfunction ChildComponent = (prop_obj) =&gt; {\n  return (&lt;div&gt;\n          \t&lt;h1&gt; {prop_obj.names} &lt;/h1&gt;\n          \t&lt;h1&gt; {prop_obj.date} &lt;/h1&gt;\n          &lt;/div&gt;);\n}\n\n// Parent component passing prop to child component\nfunction ParentToChildComponent = (props) =&gt; {\n  return &lt;ChildComponent names=&quot;Names&quot; date=&quot;27 March&quot; /&gt;\n}\n</code></pre>\n<p>If using dot notation, the child component would look like this, concise.</p>\n<pre><code class=\"language-JSX\">// Component file\nfunction ChildComponent = ({names, date}) =&gt; {\n  return (&lt;div&gt;\n          \t&lt;h1&gt; {names} &lt;/h1&gt;\n          \t&lt;h1&gt; {date} &lt;/h1&gt;\n          &lt;/div&gt;);\n}\n</code></pre>\n<p>Class based component.</p>\n<pre><code class=\"language-JSX\">class Welcome extends React.Component {\n render() {\n   return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;\n }\n}\n</code></pre>\n",
      "id": 306
    },
    {
      "path": "vault/3_styling,_props,_children/2_Styles in React/1_Problem_of_styling_in_component_based_apps.md",
      "url": "vault/3_styling,_props,_children/2_Styles in React/1_Problem_of_styling_in_component_based_apps.html",
      "content": "# 1. Normal styling\nCreated Monday 30 May 2022\n\nExplain the following:\n1. Styling problems in web apps - collisions, namespaces etc.\n2. How styling should work in React, https://www.javatpoint.com/react-css\n3. Research and add\n\n\nFIXME: note that a mix of the following works well, and is intuitive to use.\n1. Common global CSS file\n2. Module CSS files\n3. (optional) Tailwind - solves many collision problems, since many one-off styles (and these can be the majority) just stay outside of CSS files (global or module wise), and also don't collide.\n4. (optional) SCSS - tailwind classes can be used within normal CSS blocks via mixins `@apply font-semibold`",
      "html": "<h1 id=\"1.-normal-styling\">1. Normal styling <a class=\"heading-anchor-permalink\" href=\"#1.-normal-styling\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>Explain the following:</p>\n<ol>\n<li>Styling problems in web apps - collisions, namespaces etc.</li>\n<li>How styling should work in React, <a href=\"https://www.javatpoint.com/react-css\">https://www.javatpoint.com/react-css</a></li>\n<li>Research and add</li>\n</ol>\n<p>FIXME: note that a mix of the following works well, and is intuitive to use.</p>\n<ol>\n<li>Common global CSS file</li>\n<li>Module CSS files</li>\n<li>(optional) Tailwind - solves many collision problems, since many one-off styles (and these can be the majority) just stay outside of CSS files (global or module wise), and also don’t collide.</li>\n<li>(optional) SCSS - tailwind classes can be used within normal CSS blocks via mixins <code>@apply font-semibold</code></li>\n</ol>\n",
      "id": 307
    },
    {
      "path": "vault/3_styling,_props,_children/2_Styles in React/2_Normal_styling.md",
      "url": "vault/3_styling,_props,_children/2_Styles in React/2_Normal_styling.html",
      "content": "# 2. Normal styling\nCreated Sunday 13 February 2022\n\n<https://speakerdeck.com/vjeux/react-css-in-js-react-france-meetup>\n\nLet's continue with normal CSS analogues:\n#### Inline style\nHere the style is actually an object with key-value pairs for the styles. Hyphenated attributes must be camelCase and values must be string. Example:\n```jsx\nfunction Component(){\n\treturn (<div style={{color: \"red\", backgroundColor: \"blue\"}}> ... </div>);\n}\n```\n\n#### CSS in a file\nNothing changes in the CSS file, all types of selectors are possible in the CSS file. And id and classes can be used in JSX via `className` prop.\n\nTo use it, import the CSS file, like so:\n```jsx\nimport './Component.css'; // imported\n```\n**Imported CSS file is not scoped to the existing component, and is applied globally.** So it's better to use classes on elements.\n\nNow for the CSS features:\n1. id - remains the same. Can be used on HTML elements only, not JSX elements. Of course, one may use id and trickle down the prop, but it's not advised.\n2. class - is named as `className`, because `class` is a reserved keyword in JavaScript. Can be used on JSX elements too, but it needs to be properly appended as a prop on an HTML element. Like so\n```jsx\nimport './Card.css';\n\nfunction Card(props){\n\treturn (<div className={'card ' + props.className}>\n\t\t\t...\n\t\t\t</div>);\n}\n\n// So we can do this\nfunction FinalComponent(){\n\treturn <Card className=\"button white bold\"/>;\n\t// evaluates to class=\"card button white bold\" for the div.\n}\n```\n3. tag - available on HTML elements.",
      "html": "<h1 id=\"2.-normal-styling\">2. Normal styling <a class=\"heading-anchor-permalink\" href=\"#2.-normal-styling\">#</a></h1>\n<p>Created Sunday 13 February 2022</p>\n<p><a href=\"https://speakerdeck.com/vjeux/react-css-in-js-react-france-meetup\">https://speakerdeck.com/vjeux/react-css-in-js-react-france-meetup</a></p>\n<p>Let’s continue with normal CSS analogues:</p>\n<h4 id=\"inline-style\">Inline style <a class=\"heading-anchor-permalink\" href=\"#inline-style\">#</a></h4>\n<p>Here the style is actually an object with key-value pairs for the styles. Hyphenated attributes must be camelCase and values must be string. Example:</p>\n<pre><code class=\"language-jsx\">function Component(){\n\treturn (&lt;div style={{color: &quot;red&quot;, backgroundColor: &quot;blue&quot;}}&gt; ... &lt;/div&gt;);\n}\n</code></pre>\n<h4 id=\"css-in-a-file\">CSS in a file <a class=\"heading-anchor-permalink\" href=\"#css-in-a-file\">#</a></h4>\n<p>Nothing changes in the CSS file, all types of selectors are possible in the CSS file. And id and classes can be used in JSX via <code>className</code> prop.</p>\n<p>To use it, import the CSS file, like so:</p>\n<pre><code class=\"language-jsx\">import './Component.css'; // imported\n</code></pre>\n<p><strong>Imported CSS file is not scoped to the existing component, and is applied globally.</strong> So it’s better to use classes on elements.</p>\n<p>Now for the CSS features:</p>\n<ol>\n<li>id - remains the same. Can be used on HTML elements only, not JSX elements. Of course, one may use id and trickle down the prop, but it’s not advised.</li>\n<li>class - is named as <code>className</code>, because <code>class</code> is a reserved keyword in JavaScript. Can be used on JSX elements too, but it needs to be properly appended as a prop on an HTML element. Like so</li>\n</ol>\n<pre><code class=\"language-jsx\">import './Card.css';\n\nfunction Card(props){\n\treturn (&lt;div className={'card ' + props.className}&gt;\n\t\t\t...\n\t\t\t&lt;/div&gt;);\n}\n\n// So we can do this\nfunction FinalComponent(){\n\treturn &lt;Card className=&quot;button white bold&quot;/&gt;;\n\t// evaluates to class=&quot;card button white bold&quot; for the div.\n}\n</code></pre>\n<ol start=\"3\">\n<li>tag - available on HTML elements.</li>\n</ol>\n",
      "id": 308
    },
    {
      "path": "vault/3_styling,_props,_children/2_Styles in React/3_Dynamic_styling.md",
      "url": "vault/3_styling,_props,_children/2_Styles in React/3_Dynamic_styling.html",
      "content": "# 3. Dynamic styling\nCreated Sunday 13 February 2022\n\n- For inline styles, we can use a ternary expression, AND/OR operator, format strings to set values/whole `style` object. Example:\n```jsx\n<div style={isValid ? {color: \"red\"} : {color: \"black\"}}>\n\t...\n</div>\n\n\n// OR equivalent, but shorter\n<div style={{color: isValid ? \"red\" : \"black\"}}>\n\t...\n</div>\n\n\n// OR\nlet style = {{color: \"black\"}};\nif (isValid)\n\tstyle.color = \"red\";\n\n<div style={style}>\n\t...\n</div>\n```\n- For imported CSS file, we can change `className` attribute dynamically, like we did for inline styles.",
      "html": "<h1 id=\"3.-dynamic-styling\">3. Dynamic styling <a class=\"heading-anchor-permalink\" href=\"#3.-dynamic-styling\">#</a></h1>\n<p>Created Sunday 13 February 2022</p>\n<ul>\n<li>For inline styles, we can use a ternary expression, AND/OR operator, format strings to set values/whole <code>style</code> object. Example:</li>\n</ul>\n<pre><code class=\"language-jsx\">&lt;div style={isValid ? {color: &quot;red&quot;} : {color: &quot;black&quot;}}&gt;\n\t...\n&lt;/div&gt;\n\n\n// OR equivalent, but shorter\n&lt;div style={{color: isValid ? &quot;red&quot; : &quot;black&quot;}}&gt;\n\t...\n&lt;/div&gt;\n\n\n// OR\nlet style = {{color: &quot;black&quot;}};\nif (isValid)\n\tstyle.color = &quot;red&quot;;\n\n&lt;div style={style}&gt;\n\t...\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>For imported CSS file, we can change <code>className</code> attribute dynamically, like we did for inline styles.</li>\n</ul>\n",
      "id": 309
    },
    {
      "path": "vault/3_styling,_props,_children/2_Styles in React/4_CSS_modules.md",
      "url": "vault/3_styling,_props,_children/2_Styles in React/4_CSS_modules.html",
      "content": "# 4. CSS modules\nCreated Monday 30 May 2022\n\nRead and explain https://css-tricks.com/css-modules-part-1-need/",
      "html": "<h1 id=\"4.-css-modules\">4. CSS modules <a class=\"heading-anchor-permalink\" href=\"#4.-css-modules\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>Read and explain <a href=\"https://css-tricks.com/css-modules-part-1-need/\">https://css-tricks.com/css-modules-part-1-need/</a></p>\n",
      "id": 310
    },
    {
      "path": "vault/3_styling,_props,_children/2_Styles in React/5_Styled_components.md",
      "url": "vault/3_styling,_props,_children/2_Styles in React/5_Styled_components.html",
      "content": "# 5. Styled components\nCreated Sunday 13 February 2022\n\n### Why\n- For very large projects, where many people work together, class and CSS code can clash, because it's applicable globally - for CSS files that are imported.\n- Basically, we need a way to scope styles to the component only, so that it doesn't affect any other component. This is achieved using styled components.\n\n### How\n- Styles for a component are defined inside the component file. We don't import CSS files as we have done previously.\n- HTML tags are inherited from [the library](https://styled-components.com/) and styles are provided for them, if needed. These inherited tags are stored in variables, which are then used instead of the primitive tags.\n- When the project is built and assets are generated, the classname are hashed, so that they don't class. This makes the final HTML classes cryptic, but it's fine.\n\n### What\n**Dependency**: We need the `styled-components` package installed. Install it in the project using `npm install --save styled-components`.\n\nSteps to use `styled-components`:\n1. Import `styled` object from the `styled-components` library, like so:\n```jsx\nimport styled from 'styled-components';\n```\n2. Specify the styles for each tag inside the file. Provide a name for each tag. As the tag is already selected, there's no need for a selector/class. Of course, pseudo-selectors can be specified, using `&`. Directly specify the styles for tags like so:\n```jsx\nconst Div = styled.div`\n\tcolor: red;\n\tbackground-color: salmon;\n\n\t&:hover\n\t{\n\t\tcolor: black;\n\t}\n`\n\n// now use <Div></Div> instead of <div></div> here.\n```\n\n#### About styled components\n- Props on styled components are passed down as is to the HTML elements, so `onClick` and other attributes work normally.",
      "html": "<h1 id=\"5.-styled-components\">5. Styled components <a class=\"heading-anchor-permalink\" href=\"#5.-styled-components\">#</a></h1>\n<p>Created Sunday 13 February 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<ul>\n<li>For very large projects, where many people work together, class and CSS code can clash, because it’s applicable globally - for CSS files that are imported.</li>\n<li>Basically, we need a way to scope styles to the component only, so that it doesn’t affect any other component. This is achieved using styled components.</li>\n</ul>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<ul>\n<li>Styles for a component are defined inside the component file. We don’t import CSS files as we have done previously.</li>\n<li>HTML tags are inherited from <a href=\"https://styled-components.com/\">the library</a> and styles are provided for them, if needed. These inherited tags are stored in variables, which are then used instead of the primitive tags.</li>\n<li>When the project is built and assets are generated, the classname are hashed, so that they don’t class. This makes the final HTML classes cryptic, but it’s fine.</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p><strong>Dependency</strong>: We need the <code>styled-components</code> package installed. Install it in the project using <code>npm install --save styled-components</code>.</p>\n<p>Steps to use <code>styled-components</code>:</p>\n<ol>\n<li>Import <code>styled</code> object from the <code>styled-components</code> library, like so:</li>\n</ol>\n<pre><code class=\"language-jsx\">import styled from 'styled-components';\n</code></pre>\n<ol start=\"2\">\n<li>Specify the styles for each tag inside the file. Provide a name for each tag. As the tag is already selected, there’s no need for a selector/class. Of course, pseudo-selectors can be specified, using <code>&amp;</code>. Directly specify the styles for tags like so:</li>\n</ol>\n<pre><code class=\"language-jsx\">const Div = styled.div`\n\tcolor: red;\n\tbackground-color: salmon;\n\n\t&amp;:hover\n\t{\n\t\tcolor: black;\n\t}\n`\n\n// now use &lt;Div&gt;&lt;/Div&gt; instead of &lt;div&gt;&lt;/div&gt; here.\n</code></pre>\n<h4 id=\"about-styled-components\">About styled components <a class=\"heading-anchor-permalink\" href=\"#about-styled-components\">#</a></h4>\n<ul>\n<li>Props on styled components are passed down as is to the HTML elements, so <code>onClick</code> and other attributes work normally.</li>\n</ul>\n",
      "id": 311
    },
    {
      "path": "vault/3_styling,_props,_children/3_Wrapper_components.md",
      "url": "vault/3_styling,_props,_children/3_Wrapper_components.html",
      "content": "# 2. Wrapper components\nCreated Friday 21 January 2022\n\n#### Why\nSuppose we have a component that has a variable component inside it, so that we can render components inside this 'wrapper' component.\n\nThis saves us a lot of duplication, like so.\n1. Approach A: Don't use wrapper components. For the whole thing, we'd have to copy all the outer-code for the component and then place the target component inside. This has to be done for each instance of \"wrapper + core\". This references N + 1 files.\n2. Approach B: We create a component with a variable 'hole' in it. We then just specify the whole to be the target container.  This references just 2 files.\n\nThis is why React allows us to create wrapper components, to enhance DRY (don't repeat yourself).\n\n#### How\n- Everything inside a component is actually stored in props, even children and style classes.\n- Style classes are not applicable directly on components, unless a change is made inside to include styles inside (by having a concatenated string of classes). Example: `<XYZComponent className=\"color-2-4\" />` is not valid code. But it can be made so.\n\n#### What\nThree useful wrapper properties are **named** this:\n1. Children - `children`, this is an object.\n2. CSS Classes - `className`, it's a string actually. Wrappers may just styles.\n3. Styles - `style`, an object.\nThis makes making wrapper components very easy.\n\nCode for wrapper component. There's no change in the core component.\n```JSX\nfunction WrapperComponent(props) {\n\treturn (<div>\n\t\t\t\t...\n\t\t\t\t{props.children /*Core component placed here*/}\n\t\t\t\t<div>\n\t\t\t\t...\n\t\t\t\t</div>\n\t\t\t\t...\n\t\t\t</div>)\n}\n\nfunction CoreComponent() {\n\treturn ...;\n}\n```\n\nRendering core in wrapper\n```JSX\nfunction WholeComponent {\n\treturn (<WrapperComponent> <CoreComponent/> </WrapperComponent>);\n}\n```\n\nAs it is a wrapper, we now have a closing tag as opposed to non-wrapper components (which are non-closing tags).\n\n###### What about styles on wrappers/components in general?\nJust change the `className` string inside the component, like so.\n```JSX\nfunction OuterComponent {\n\treturn (<div className={className}>\n\t\t\t...\n\t\t\t</div>);\n}\n// <OuterComponent className=\"top red solid\"/> would work now\n\n\n//// OR if own style classes\n\nfunction OuterComponent2 {\n\treturn (<div className={'color1 ' + className}>\n\t\t\t...\n\t\t\t</div>);\n}\n\n// <OuterComponent2 className='solid'/> is actually 'color1 solid'\n```\nThis way classes specified to the component are appended to it, as we wanted.\n\n###### What about outer styles?\nLike appending, just use the spread operator.\n```JSX\nfunction OuterComponent ({style}) {\n\treturn (<div style={style}>\n\t\t\t...\n\t\t\t</div>);\n}\n\n// <OuterComponent style={{color: \"red\"}}/> works now\n\n//// OR if it has styles of its own\n\nfunction OuterComponent2 ({style}) {\n\treturn (<div style={{color: \"red\", ...style}}>\n\t\t\t...\n\t\t\t</div>);\n}\n\n// <OuterComponent2 style={{fontStyle:\"italic\"}} /> is actually \n// style={{color: \"red\", fontStyle:\"italic\"}}\n```\n\nExample: Real use of wrapper component, [see](https://github.com/exemplar-codes/expense-tracker-react/commit/b5802c373d094c5b993ad06d8ba2f87fdb30e9e8).",
      "html": "<h1 id=\"2.-wrapper-components\">2. Wrapper components <a class=\"heading-anchor-permalink\" href=\"#2.-wrapper-components\">#</a></h1>\n<p>Created Friday 21 January 2022</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>Suppose we have a component that has a variable component inside it, so that we can render components inside this ‘wrapper’ component.</p>\n<p>This saves us a lot of duplication, like so.</p>\n<ol>\n<li>Approach A: Don’t use wrapper components. For the whole thing, we’d have to copy all the outer-code for the component and then place the target component inside. This has to be done for each instance of “wrapper + core”. This references N + 1 files.</li>\n<li>Approach B: We create a component with a variable ‘hole’ in it. We then just specify the whole to be the target container.  This references just 2 files.</li>\n</ol>\n<p>This is why React allows us to create wrapper components, to enhance DRY (don’t repeat yourself).</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<ul>\n<li>Everything inside a component is actually stored in props, even children and style classes.</li>\n<li>Style classes are not applicable directly on components, unless a change is made inside to include styles inside (by having a concatenated string of classes). Example: <code>&lt;XYZComponent className=&quot;color-2-4&quot; /&gt;</code> is not valid code. But it can be made so.</li>\n</ul>\n<h4 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h4>\n<p>Three useful wrapper properties are <strong>named</strong> this:</p>\n<ol>\n<li>Children - <code>children</code>, this is an object.</li>\n<li>CSS Classes - <code>className</code>, it’s a string actually. Wrappers may just styles.</li>\n<li>Styles - <code>style</code>, an object.\nThis makes making wrapper components very easy.</li>\n</ol>\n<p>Code for wrapper component. There’s no change in the core component.</p>\n<pre><code class=\"language-JSX\">function WrapperComponent(props) {\n\treturn (&lt;div&gt;\n\t\t\t\t...\n\t\t\t\t{props.children /*Core component placed here*/}\n\t\t\t\t&lt;div&gt;\n\t\t\t\t...\n\t\t\t\t&lt;/div&gt;\n\t\t\t\t...\n\t\t\t&lt;/div&gt;)\n}\n\nfunction CoreComponent() {\n\treturn ...;\n}\n</code></pre>\n<p>Rendering core in wrapper</p>\n<pre><code class=\"language-JSX\">function WholeComponent {\n\treturn (&lt;WrapperComponent&gt; &lt;CoreComponent/&gt; &lt;/WrapperComponent&gt;);\n}\n</code></pre>\n<p>As it is a wrapper, we now have a closing tag as opposed to non-wrapper components (which are non-closing tags).</p>\n<h6 id=\"what-about-styles-on-wrappers%2Fcomponents-in-general%3F\">What about styles on wrappers/components in general? <a class=\"heading-anchor-permalink\" href=\"#what-about-styles-on-wrappers%2Fcomponents-in-general%3F\">#</a></h6>\n<p>Just change the <code>className</code> string inside the component, like so.</p>\n<pre><code class=\"language-JSX\">function OuterComponent {\n\treturn (&lt;div className={className}&gt;\n\t\t\t...\n\t\t\t&lt;/div&gt;);\n}\n// &lt;OuterComponent className=&quot;top red solid&quot;/&gt; would work now\n\n\n//// OR if own style classes\n\nfunction OuterComponent2 {\n\treturn (&lt;div className={'color1 ' + className}&gt;\n\t\t\t...\n\t\t\t&lt;/div&gt;);\n}\n\n// &lt;OuterComponent2 className='solid'/&gt; is actually 'color1 solid'\n</code></pre>\n<p>This way classes specified to the component are appended to it, as we wanted.</p>\n<h6 id=\"what-about-outer-styles%3F\">What about outer styles? <a class=\"heading-anchor-permalink\" href=\"#what-about-outer-styles%3F\">#</a></h6>\n<p>Like appending, just use the spread operator.</p>\n<pre><code class=\"language-JSX\">function OuterComponent ({style}) {\n\treturn (&lt;div style={style}&gt;\n\t\t\t...\n\t\t\t&lt;/div&gt;);\n}\n\n// &lt;OuterComponent style={{color: &quot;red&quot;}}/&gt; works now\n\n//// OR if it has styles of its own\n\nfunction OuterComponent2 ({style}) {\n\treturn (&lt;div style={{color: &quot;red&quot;, ...style}}&gt;\n\t\t\t...\n\t\t\t&lt;/div&gt;);\n}\n\n// &lt;OuterComponent2 style={{fontStyle:&quot;italic&quot;}} /&gt; is actually \n// style={{color: &quot;red&quot;, fontStyle:&quot;italic&quot;}}\n</code></pre>\n<p>Example: Real use of wrapper component, <a href=\"https://github.com/exemplar-codes/expense-tracker-react/commit/b5802c373d094c5b993ad06d8ba2f87fdb30e9e8\">see</a>.</p>\n",
      "id": 312
    },
    {
      "path": "vault/4_State/1_Events_and_handlers_in_React.md",
      "url": "vault/4_State/1_Events_and_handlers_in_React.html",
      "content": "# 1. Events and handlers in React\nCreated Saturday 22 January 2022\n\n## Why\nWe have to attach and detach listeners to elements in vanilla JavaScript, which is an imperative style of programming.\nBut React's philosophy is to be declarative first. So events are handled differently.\n\n## How\n- All applicable events for different types of HTML elements are available as props on the HTML components.\n- Events are named `onClick` or something named similarly (`on`+`EventName` in camelCase) in React. This way, no imperative `addEventListener` have to be attached.\n- Note that the `onClick` (or similar prop) should only indicate the function name, instead of the whole code or a function call. Code-logic (because it's not an expression) should remain de-coupled from the UI (JSX) code.\nExample:\n```JSX\nfunction OurComponent () {\n\tconst clicked = () => { console.log('Clicked!!'); }; // de-coupled\n\treturn <div onClick={clicked}> Hello </div>;\n}\n```\n\nFIXME: read and explain here if needed - https://reactjs.org/docs/events.html",
      "html": "<h1 id=\"1.-events-and-handlers-in-react\">1. Events and handlers in React <a class=\"heading-anchor-permalink\" href=\"#1.-events-and-handlers-in-react\">#</a></h1>\n<p>Created Saturday 22 January 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>We have to attach and detach listeners to elements in vanilla JavaScript, which is an imperative style of programming.\nBut React’s philosophy is to be declarative first. So events are handled differently.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<ul>\n<li>All applicable events for different types of HTML elements are available as props on the HTML components.</li>\n<li>Events are named <code>onClick</code> or something named similarly (<code>on</code>+<code>EventName</code> in camelCase) in React. This way, no imperative <code>addEventListener</code> have to be attached.</li>\n<li>Note that the <code>onClick</code> (or similar prop) should only indicate the function name, instead of the whole code or a function call. Code-logic (because it’s not an expression) should remain de-coupled from the UI (JSX) code.\nExample:</li>\n</ul>\n<pre><code class=\"language-JSX\">function OurComponent () {\n\tconst clicked = () =&gt; { console.log('Clicked!!'); }; // de-coupled\n\treturn &lt;div onClick={clicked}&gt; Hello &lt;/div&gt;;\n}\n</code></pre>\n<p>FIXME: read and explain here if needed - <a href=\"https://reactjs.org/docs/events.html\">https://reactjs.org/docs/events.html</a></p>\n",
      "id": 313
    },
    {
      "path": "vault/4_State/2_1_What_is_state.md",
      "url": "vault/4_State/2_1_What_is_state.html",
      "content": "# 2.1. What is state\nCreated Monday 30 May 2022\n\nFIXME: Read up and explain the following:\n1. What is state in a web application\n2. What's the need of state\n3. What is the relevance of state in React\n",
      "html": "<h1 id=\"2.1.-what-is-state\">2.1. What is state <a class=\"heading-anchor-permalink\" href=\"#2.1.-what-is-state\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>FIXME: Read up and explain the following:</p>\n<ol>\n<li>What is state in a web application</li>\n<li>What’s the need of state</li>\n<li>What is the relevance of state in React</li>\n</ol>\n",
      "id": 314
    },
    {
      "path": "vault/4_State/2_2_State_using_useState_hook.md",
      "url": "vault/4_State/2_2_State_using_useState_hook.html",
      "content": "# 2. State using useState hook\nCreated Saturday 24 January 2022\n\n## Why\nThis is an implementation of state, so that components are redrawn when state is mutated explicitly. Note that state remains detached from the component lifecycle.\n\n## How\nA life-cycle method (informally called a hook) is used. It is added to the component's code.\n\nA variable is captured as state and managed by the hook.\nWhen an update call using the hook is made, the component is re-rendered. So UI is synced with the state.\n\n## What\nHere's the syntax:\n1. Import `useState` from `react`.\n2. Capture a variable using `useState`, and also get back an updater function. Add this code in the component.\n3. Update the state using the updater method.\nExample\n```JSX\nimport React, { useState } from 'react';\n\nfunction MyComponent (props) {\n\tconst [title, setTitle] = useState(props.title);\n\n\t// some code/event that fires setTitle\n\tconst clickHandler = () => {\n\t\tsetTitle(\"Updated!\"); // this sets the states and fires a re-render\n\t}\n\n\treturn (<div>\n\t\t\t...\n\t\t\t<button onClick = {clickHandler}> Click me </button>\n\t\t\t...\n\t\t\t</div>);\n}\n```\nAlso see [project commit](https://github.com/exemplar-codes/expense-tracker-react/commit/45d42efca9e80754120da43d5989c05519a2965f).\n\n## General flow of `useState`\nFor the skeleton:\n```JSX\nfunction MyComponent {\n\tconst [readVar, setVariable] = useState(capture_variable);\n\t// some code that calls setVariable\n\t// component code (JSX) returned.\n}\n```\nis:\n1. In the first pass:\n\t1. useState is initialized, state is set internally.\n\t2. Read variable set to state.\n\t3. Component is drawn.\n2. In the second pass:\n\t1. useState argument (initialization) is ignored.\n\t2. State set to setState argument - setState is called from event/timer etc.\n\t3. Read variable set to state.\n\t4. Component is drawn.\n3.  Step 2 repeats.\nNote: `const` is OK for the read variable, because we never assign (`=`) anything to it. It's changed internally.\n\n## Computation of initial state\nIf the initial state is a large computation, we would not want to include it in the component non-markup code, because it would execute on every re-render. The workaround is to pass a function to `useState` instead of a value (variable). This function will only be run once (when the component first renders), and never again. This way the \"initial state\" computation is done only once.\n",
      "html": "<h1 id=\"2.-state-using-usestate-hook\">2. State using useState hook <a class=\"heading-anchor-permalink\" href=\"#2.-state-using-usestate-hook\">#</a></h1>\n<p>Created Saturday 24 January 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>This is an implementation of state, so that components are redrawn when state is mutated explicitly. Note that state remains detached from the component lifecycle.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>A life-cycle method (informally called a hook) is used. It is added to the component’s code.</p>\n<p>A variable is captured as state and managed by the hook.\nWhen an update call using the hook is made, the component is re-rendered. So UI is synced with the state.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>Here’s the syntax:</p>\n<ol>\n<li>Import <code>useState</code> from <code>react</code>.</li>\n<li>Capture a variable using <code>useState</code>, and also get back an updater function. Add this code in the component.</li>\n<li>Update the state using the updater method.\nExample</li>\n</ol>\n<pre><code class=\"language-JSX\">import React, { useState } from 'react';\n\nfunction MyComponent (props) {\n\tconst [title, setTitle] = useState(props.title);\n\n\t// some code/event that fires setTitle\n\tconst clickHandler = () =&gt; {\n\t\tsetTitle(&quot;Updated!&quot;); // this sets the states and fires a re-render\n\t}\n\n\treturn (&lt;div&gt;\n\t\t\t...\n\t\t\t&lt;button onClick = {clickHandler}&gt; Click me &lt;/button&gt;\n\t\t\t...\n\t\t\t&lt;/div&gt;);\n}\n</code></pre>\n<p>Also see <a href=\"https://github.com/exemplar-codes/expense-tracker-react/commit/45d42efca9e80754120da43d5989c05519a2965f\">project commit</a>.</p>\n<h2 id=\"general-flow-of-usestate\">General flow of <code>useState</code> <a class=\"heading-anchor-permalink\" href=\"#general-flow-of-usestate\">#</a></h2>\n<p>For the skeleton:</p>\n<pre><code class=\"language-JSX\">function MyComponent {\n\tconst [readVar, setVariable] = useState(capture_variable);\n\t// some code that calls setVariable\n\t// component code (JSX) returned.\n}\n</code></pre>\n<p>is:</p>\n<ol>\n<li>In the first pass:\n<ol>\n<li>useState is initialized, state is set internally.</li>\n<li>Read variable set to state.</li>\n<li>Component is drawn.</li>\n</ol>\n</li>\n<li>In the second pass:\n<ol>\n<li>useState argument (initialization) is ignored.</li>\n<li>State set to setState argument - setState is called from event/timer etc.</li>\n<li>Read variable set to state.</li>\n<li>Component is drawn.</li>\n</ol>\n</li>\n<li>Step 2 repeats.\nNote: <code>const</code> is OK for the read variable, because we never assign (<code>=</code>) anything to it. It’s changed internally.</li>\n</ol>\n<h2 id=\"computation-of-initial-state\">Computation of initial state <a class=\"heading-anchor-permalink\" href=\"#computation-of-initial-state\">#</a></h2>\n<p>If the initial state is a large computation, we would not want to include it in the component non-markup code, because it would execute on every re-render. The workaround is to pass a function to <code>useState</code> instead of a value (variable). This function will only be run once (when the component first renders), and never again. This way the “initial state” computation is done only once.</p>\n",
      "id": 315
    },
    {
      "path": "vault/4_State/3_Working_with_multiple_states.md",
      "url": "vault/4_State/3_Working_with_multiple_states.html",
      "content": "# 3. Working with multiple states\nCreated Saturday 24 January 2022\n\n## Why\nA component may have more than one state. There are two ways to handle automatic re-rendering. Either use multiple `useState` or create a single object of all state variables (so just one `useState` is needed).\n\n## How\nIf multiple states are handled individually, then it's simple. But if all state variables are packed into a single state, then care must be taken to also safely retain the un-updated variable in each `setStateMethod` (of `useState`) call.\n\nThis must be done because just setting one attribute will **replace** other attributes. A shorthand is to use the **spread operator**, which results in cleaner code.\n\nNote: Spread operator actually merges the attribute, just remember keep the spread operator as the first attribute.\n\nHere's a code example for multiple state:\n1. Individual states\n```jsx\nimport React, { useState } from 'React';\n\nfunction MyComponent () {\n\tconst [count, setCount] = useState(0);\n\tconst [reverseCount, setReverseCount] = useState(999);\n\n\tconst countClick = () => { setCount(count + 1); };\n\tconst reverseCountClick = () => { setReverseCount(reverseCount - 1); };\n\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={countClick}>+: {count}</button> &nbsp;\n\t\t\t<button onClick={reverseCountClick}>-: {reverseCount} </button>\n\t\t</div>\n\t);\n}\n\nexport default MultiStateMulti;\n```\n\n2. Single state object - all attributes have to be specified during update, otherwise they'll be lost. So we use the spread operator (`...state`) which merges the previous state with the attribute we are updating.\n```jsx\nimport React, { useState } from \"react\";\n\nfunction MultiStateSingle() {\n\tconst [state, setState] = useState({ count: 0, reverseCount: 999 });\n\n\tconst countClick = () => {\n\t\tsetState({\n\t\t\t...state,\n\t\t    count: state.count + 1, // will update/merge existing\n\t\t});\n\t};\n\tconst reverseCountClick = () => {\n\t\tsetState({\n\t\t    ...state,\n\t\t\treverseCount: state.reverseCount - 1,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={countClick}>+: {state.count}</button> \n\t\t\t&nbsp;\n\t\t\t<button onClick={reverseCountClick}>-: {state.reverseCount}</button>\n\t\t</div>\n\t);\n}\n\nexport default MultiStateSingle;\n```\n\n## callback instead of value in state update call\nThere's a BIG catch here. Most of the time, we are updating state based on its current value. This becomes a problem if we are using the spread operator. It is a problem because React actually schedules changes, instead of carrying them out immediately.\n\nTo avoid this, pass a function to the updater function instead of a value. This function must have one parameter (which will be the latest state) and return the updated state. The method gets called by the updater, automatically.\n\nThe updater code would look like this, ensuring that the latest state is update every-time.\n```jsx\nconst countClick = () => {\n\tsetState( (latestState) => {\n\t\treturn {\n\t\t\t...latestState,\n\t\t\tcount: latestState.count + 1,\n\t\t};\n\t});\n};\n\nconst reverseCountClick = () => {\n\tsetState( (latestState) => {\n\t\treturn {\n\t\t\t...latestState,\n\t\t\treverseCount: latestState.reverseCount - 1,\n\t\t};\n\t});\n};\n\nreturn <></>;\n```\n\nNote: FIXME, I've not completely understood why this function instead of direct update is needed, because even if changes are scheduled and not done immediately, the schedule can save a reference to the object, which will ensure latest state at all times.",
      "html": "<h1 id=\"3.-working-with-multiple-states\">3. Working with multiple states <a class=\"heading-anchor-permalink\" href=\"#3.-working-with-multiple-states\">#</a></h1>\n<p>Created Saturday 24 January 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>A component may have more than one state. There are two ways to handle automatic re-rendering. Either use multiple <code>useState</code> or create a single object of all state variables (so just one <code>useState</code> is needed).</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>If multiple states are handled individually, then it’s simple. But if all state variables are packed into a single state, then care must be taken to also safely retain the un-updated variable in each <code>setStateMethod</code> (of <code>useState</code>) call.</p>\n<p>This must be done because just setting one attribute will <strong>replace</strong> other attributes. A shorthand is to use the <strong>spread operator</strong>, which results in cleaner code.</p>\n<p>Note: Spread operator actually merges the attribute, just remember keep the spread operator as the first attribute.</p>\n<p>Here’s a code example for multiple state:</p>\n<ol>\n<li>Individual states</li>\n</ol>\n<pre><code class=\"language-jsx\">import React, { useState } from 'React';\n\nfunction MyComponent () {\n\tconst [count, setCount] = useState(0);\n\tconst [reverseCount, setReverseCount] = useState(999);\n\n\tconst countClick = () =&gt; { setCount(count + 1); };\n\tconst reverseCountClick = () =&gt; { setReverseCount(reverseCount - 1); };\n\n\treturn (\n\t\t&lt;div&gt;\n\t\t\t&lt;button onClick={countClick}&gt;+: {count}&lt;/button&gt; &amp;nbsp;\n\t\t\t&lt;button onClick={reverseCountClick}&gt;-: {reverseCount} &lt;/button&gt;\n\t\t&lt;/div&gt;\n\t);\n}\n\nexport default MultiStateMulti;\n</code></pre>\n<ol start=\"2\">\n<li>Single state object - all attributes have to be specified during update, otherwise they’ll be lost. So we use the spread operator (<code>...state</code>) which merges the previous state with the attribute we are updating.</li>\n</ol>\n<pre><code class=\"language-jsx\">import React, { useState } from &quot;react&quot;;\n\nfunction MultiStateSingle() {\n\tconst [state, setState] = useState({ count: 0, reverseCount: 999 });\n\n\tconst countClick = () =&gt; {\n\t\tsetState({\n\t\t\t...state,\n\t\t    count: state.count + 1, // will update/merge existing\n\t\t});\n\t};\n\tconst reverseCountClick = () =&gt; {\n\t\tsetState({\n\t\t    ...state,\n\t\t\treverseCount: state.reverseCount - 1,\n\t\t});\n\t};\n\n\treturn (\n\t\t&lt;div&gt;\n\t\t\t&lt;button onClick={countClick}&gt;+: {state.count}&lt;/button&gt; \n\t\t\t&amp;nbsp;\n\t\t\t&lt;button onClick={reverseCountClick}&gt;-: {state.reverseCount}&lt;/button&gt;\n\t\t&lt;/div&gt;\n\t);\n}\n\nexport default MultiStateSingle;\n</code></pre>\n<h2 id=\"callback-instead-of-value-in-state-update-call\">callback instead of value in state update call <a class=\"heading-anchor-permalink\" href=\"#callback-instead-of-value-in-state-update-call\">#</a></h2>\n<p>There’s a BIG catch here. Most of the time, we are updating state based on its current value. This becomes a problem if we are using the spread operator. It is a problem because React actually schedules changes, instead of carrying them out immediately.</p>\n<p>To avoid this, pass a function to the updater function instead of a value. This function must have one parameter (which will be the latest state) and return the updated state. The method gets called by the updater, automatically.</p>\n<p>The updater code would look like this, ensuring that the latest state is update every-time.</p>\n<pre><code class=\"language-jsx\">const countClick = () =&gt; {\n\tsetState( (latestState) =&gt; {\n\t\treturn {\n\t\t\t...latestState,\n\t\t\tcount: latestState.count + 1,\n\t\t};\n\t});\n};\n\nconst reverseCountClick = () =&gt; {\n\tsetState( (latestState) =&gt; {\n\t\treturn {\n\t\t\t...latestState,\n\t\t\treverseCount: latestState.reverseCount - 1,\n\t\t};\n\t});\n};\n\nreturn &lt;&gt;&lt;/&gt;;\n</code></pre>\n<p>Note: FIXME, I’ve not completely understood why this function instead of direct update is needed, because even if changes are scheduled and not done immediately, the schedule can save a reference to the object, which will ensure latest state at all times.</p>\n",
      "id": 316
    },
    {
      "path": "vault/4_State/4_Two_way_binding.md",
      "url": "vault/4_State/4_Two_way_binding.html",
      "content": "# 4. Two way Binding\nCreated Monday 07 February 2022\n\n## Why\nIn forms, we usually need to save the state to then do a PUT/PATCH call to the server asynchronously. This is easily done using `useState`. But how do we reset inputs to their default value (or blank).\n\nBinding state to change in input tag is one-way binding. But we can also bind the input attribute `value` to the state. This way, when we clear the state (programmatically), the inputs are also reset (in UI), on submission. This is a **two way binding**. And it's mostly used in forms.\n\n## How\nHere's a component that uses two way binding:\n```jsx\nimport React, { useState } from \"react\";\n\nimport \"./ExpenseForm.css\";\n\nfunction ExpenseForm() {\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n  };\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n  };\n\n  const submitHandler = (event) => {\n    // this is called when submit is clicked\n    event.preventDefault(); // prevent default submit\n\n    // entered data is saved\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    console.log(expenseData);\n\n    // clearing/restting the input fields\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n\n  return (\n    <form action=\"POST\" onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label htmlFor=\"title\">Title</label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={enteredTitle} // for two way binding\n            onChange={titleChangeHandler}\n          />\n        </div>\n\n        <div className=\"new-expense__control\">\n          <label htmlFor=\"amount\">Amount</label>\n          <input\n            type=\"number\"\n            name=\"amount\"\n            min=\"0.01\"\n            step=\"0.01\"\n            value={enteredAmount} // for two way binding\n            onChange={amountChangeHandler}\n          />\n        </div>\n\n        <div className=\"new-expense__control\">\n          <label htmlFor=\"date\">Date</label>\n          <input\n            type=\"date\"\n            name=\"date\"\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            value={enteredDate} // for two way binding\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n}\n\nexport default ExpenseForm;\n```\n\nAs said, it's quite useful in forms.\n\n\n## What\nTo add two way binding, create a state and use both the value and state updater function (as onchange) on the UI element.\n```jsx\nconst [name, setName] = useState('');\n\n// setName -> changes value and re-renders -> new UI has new `value` prop. Ok\n// User event -> triggers onchange -> changes value and re-renders -> new UI has new `value` prop. Ok\n// i.e. 2 way binding achieved\n\nreturn <input value={name} onChange={(e) => setName(e.target.value)} />;\n```",
      "html": "<h1 id=\"4.-two-way-binding\">4. Two way Binding <a class=\"heading-anchor-permalink\" href=\"#4.-two-way-binding\">#</a></h1>\n<p>Created Monday 07 February 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>In forms, we usually need to save the state to then do a PUT/PATCH call to the server asynchronously. This is easily done using <code>useState</code>. But how do we reset inputs to their default value (or blank).</p>\n<p>Binding state to change in input tag is one-way binding. But we can also bind the input attribute <code>value</code> to the state. This way, when we clear the state (programmatically), the inputs are also reset (in UI), on submission. This is a <strong>two way binding</strong>. And it’s mostly used in forms.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Here’s a component that uses two way binding:</p>\n<pre><code class=\"language-jsx\">import React, { useState } from &quot;react&quot;;\n\nimport &quot;./ExpenseForm.css&quot;;\n\nfunction ExpenseForm() {\n  const [enteredTitle, setEnteredTitle] = useState(&quot;&quot;);\n  const [enteredAmount, setEnteredAmount] = useState(&quot;&quot;);\n  const [enteredDate, setEnteredDate] = useState(&quot;&quot;);\n\n  const titleChangeHandler = (event) =&gt; {\n    setEnteredTitle(event.target.value);\n  };\n  const amountChangeHandler = (event) =&gt; {\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = (event) =&gt; {\n    setEnteredDate(event.target.value);\n  };\n\n  const submitHandler = (event) =&gt; {\n    // this is called when submit is clicked\n    event.preventDefault(); // prevent default submit\n\n    // entered data is saved\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    console.log(expenseData);\n\n    // clearing/restting the input fields\n    setEnteredTitle(&quot;&quot;);\n    setEnteredAmount(&quot;&quot;);\n    setEnteredDate(&quot;&quot;);\n  };\n\n  return (\n    &lt;form action=&quot;POST&quot; onSubmit={submitHandler}&gt;\n      &lt;div className=&quot;new-expense__controls&quot;&gt;\n        &lt;div className=&quot;new-expense__control&quot;&gt;\n          &lt;label htmlFor=&quot;title&quot;&gt;Title&lt;/label&gt;\n          &lt;input\n            type=&quot;text&quot;\n            name=&quot;title&quot;\n            value={enteredTitle} // for two way binding\n            onChange={titleChangeHandler}\n          /&gt;\n        &lt;/div&gt;\n\n        &lt;div className=&quot;new-expense__control&quot;&gt;\n          &lt;label htmlFor=&quot;amount&quot;&gt;Amount&lt;/label&gt;\n          &lt;input\n            type=&quot;number&quot;\n            name=&quot;amount&quot;\n            min=&quot;0.01&quot;\n            step=&quot;0.01&quot;\n            value={enteredAmount} // for two way binding\n            onChange={amountChangeHandler}\n          /&gt;\n        &lt;/div&gt;\n\n        &lt;div className=&quot;new-expense__control&quot;&gt;\n          &lt;label htmlFor=&quot;date&quot;&gt;Date&lt;/label&gt;\n          &lt;input\n            type=&quot;date&quot;\n            name=&quot;date&quot;\n            min=&quot;2019-01-01&quot;\n            max=&quot;2022-12-31&quot;\n            value={enteredDate} // for two way binding\n            onChange={dateChangeHandler}\n          /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div className=&quot;new-expense__actions&quot;&gt;\n        &lt;button type=&quot;submit&quot;&gt;Add Expense&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default ExpenseForm;\n</code></pre>\n<p>As said, it’s quite useful in forms.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>To add two way binding, create a state and use both the value and state updater function (as onchange) on the UI element.</p>\n<pre><code class=\"language-jsx\">const [name, setName] = useState('');\n\n// setName -&gt; changes value and re-renders -&gt; new UI has new `value` prop. Ok\n// User event -&gt; triggers onchange -&gt; changes value and re-renders -&gt; new UI has new `value` prop. Ok\n// i.e. 2 way binding achieved\n\nreturn &lt;input value={name} onChange={(e) =&gt; setName(e.target.value)} /&gt;;\n</code></pre>\n",
      "id": 317
    },
    {
      "path": "vault/4_State/5_Lifting_state_up.md",
      "url": "vault/4_State/5_Lifting_state_up.html",
      "content": "# 5. Lifting state up\nCreated Friday 11 February 2022\n\n## Why\nParent can communicate (i.e. send data) down to children using props.\n\nBut how do children communicate back to parents. Also, is this even needed ? Yes, it is needed. It's needed when:\n1. Entered input needs to change state of the whole app (example: dark mode toggle button). So communication must happen from the input component to the display component, via a common ancestor.\n2. NodeA to NodeB communication via lowest common ancestor.\n\n## How\nSolution: We can create function in a parent component that mutates state and pass it as prop to a child component. The child component will call the passed prop (a function) with an argument (the data to be communicated). This way, data is communicated upwards (child --> parents).\n\nIf there're multiple components between child and parent, each component can call its prop function and each component will receive a function as prop from above.\n```jsx\nimport React, { useState } from \"react\";\n\nimport Child from \"./Child\";\n\nfunction Parent() {\n  const [vari, setVari] = useState(\"Ready to receive...\");\n\n  return (\n    <div>\n      {vari} <Child sendToParent={setVari} />\n    </div>\n  );\n}\n\nexport default Parent;\n```\n```jsx\nimport React from \"react\";\n\nfunction Child({ sendToParent }) {\n  const clickHandler = () => {\n    sendToParent(Math.floor(Math.random() * 100));\n  };\n\n  return <button onClick={clickHandler}>Send</button>;\n}\n\nexport default Child;\n```\n\n## What\n- It should be noted that we need \"state\" to pass data upwards (child --> parent). Can't be done without state. The reason is that the `setFunc` changes the state, which is a variable outside the flow of the component function. And also that the `setFunc` is exportable (of course it is, no big deal!).\n- Also, the above point helps design a component, as it makes it imperative for stuff that's to be lifted up be a state variable, and not a usual variable.\n  \n## Conclusion\nSo basically, we're making state available to the parent via a function passed via prop.",
      "html": "<h1 id=\"5.-lifting-state-up\">5. Lifting state up <a class=\"heading-anchor-permalink\" href=\"#5.-lifting-state-up\">#</a></h1>\n<p>Created Friday 11 February 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Parent can communicate (i.e. send data) down to children using props.</p>\n<p>But how do children communicate back to parents. Also, is this even needed ? Yes, it is needed. It’s needed when:</p>\n<ol>\n<li>Entered input needs to change state of the whole app (example: dark mode toggle button). So communication must happen from the input component to the display component, via a common ancestor.</li>\n<li>NodeA to NodeB communication via lowest common ancestor.</li>\n</ol>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Solution: We can create function in a parent component that mutates state and pass it as prop to a child component. The child component will call the passed prop (a function) with an argument (the data to be communicated). This way, data is communicated upwards (child --&gt; parents).</p>\n<p>If there’re multiple components between child and parent, each component can call its prop function and each component will receive a function as prop from above.</p>\n<pre><code class=\"language-jsx\">import React, { useState } from &quot;react&quot;;\n\nimport Child from &quot;./Child&quot;;\n\nfunction Parent() {\n  const [vari, setVari] = useState(&quot;Ready to receive...&quot;);\n\n  return (\n    &lt;div&gt;\n      {vari} &lt;Child sendToParent={setVari} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Parent;\n</code></pre>\n<pre><code class=\"language-jsx\">import React from &quot;react&quot;;\n\nfunction Child({ sendToParent }) {\n  const clickHandler = () =&gt; {\n    sendToParent(Math.floor(Math.random() * 100));\n  };\n\n  return &lt;button onClick={clickHandler}&gt;Send&lt;/button&gt;;\n}\n\nexport default Child;\n</code></pre>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<ul>\n<li>It should be noted that we need “state” to pass data upwards (child --&gt; parent). Can’t be done without state. The reason is that the <code>setFunc</code> changes the state, which is a variable outside the flow of the component function. And also that the <code>setFunc</code> is exportable (of course it is, no big deal!).</li>\n<li>Also, the above point helps design a component, as it makes it imperative for stuff that’s to be lifted up be a state variable, and not a usual variable.</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h2>\n<p>So basically, we’re making state available to the parent via a function passed via prop.</p>\n",
      "id": 318
    },
    {
      "path": "vault/4_State/6_State_management/1_State_management_W2H.md",
      "url": "vault/4_State/6_State_management/1_State_management_W2H.html",
      "content": "# 1. State management W2H\nCreated Monday 30 May 2022\n\nFIXME: \n1. Add that \"state management\" mostly is about global state management, more so than the generic term.\n2. Add what is state management and why it is needed, especially from the resources directory.\n3. Discuss in depth the problem of state management in GUI apps, especially web apps. Add a page to https://github.com/sanjar-notes/gui-apps\n4. Discuss about Redux. How does it compare with the hook provided for state management?\n5. I have a [Redux knowledge repo](https://github.com/sanjar-notes/redux)",
      "html": "<h1 id=\"1.-state-management-w2h\">1. State management W2H <a class=\"heading-anchor-permalink\" href=\"#1.-state-management-w2h\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>FIXME:</p>\n<ol>\n<li>Add that “state management” mostly is about global state management, more so than the generic term.</li>\n<li>Add what is state management and why it is needed, especially from the resources directory.</li>\n<li>Discuss in depth the problem of state management in GUI apps, especially web apps. Add a page to <a href=\"https://github.com/sanjar-notes/gui-apps\">https://github.com/sanjar-notes/gui-apps</a></li>\n<li>Discuss about Redux. How does it compare with the hook provided for state management?</li>\n<li>I have a <a href=\"https://github.com/sanjar-notes/redux\">Redux knowledge repo</a></li>\n</ol>\n",
      "id": 319
    },
    {
      "path": "vault/5_Lifecycle_and_hooks/1_1_React_lifecycle_methods.md",
      "url": "vault/5_Lifecycle_and_hooks/1_1_React_lifecycle_methods.html",
      "content": "# 1.1. React lifecycle methods\nCreated Monday 30 May 2022\n\nFIXME: copied as of now, to be re-written if needed.\n\nReact life-cycle hooks will have the methods that will be automatically called at different phases in the component life-cycle and thus it provides good control over what happens at the invoked point. It provides the power to effectively control and manipulate what goes on throughout the component life-cycle.\n\nFor example, if you are developing the YouTube application, then the application will make use of a network for buffering the videos and it consumes the power of the battery (assume only these two). After playing the video if the user switches to any other application, then you should make sure that the resources like network and battery are being used most efficiently. You can stop or pause the video buffering which in turn stops the battery and network usage when the user switches to another application after video play.\n\nSo we can say that the developer will be able to produce a quality application with the help of life-cycle methods and it also helps developers to make sure to plan what and how to do it at different points of birth, growth, or death of user interfaces.\n\nThe various life-cycle methods are:\n- `constructor()`: This method will be called when the component is initiated before anything has been done. It helps to set up the initial state and initial values.\n- `getDerivedStateFromProps()`: This method will be called just before element(s) rendering in the DOM. It helps to set up the state object depending on the initial props. The getDerivedStateFromProps() method will have a state as an argument and it returns an object that made changes to the state. This will be the first method to be called on an updating of a component.\n- `render()`: This method will output or re-render the HTML to the DOM with new changes. The render() method is an essential method and will be called always while the remaining methods are optional and will be called only if they are defined.\n- `componentDidMount()`: This method will be called after the rendering of the component. Using this method, you can run statements that need the component to be already kept in the DOM.\n- `shouldComponentUpdate()`: The Boolean value will be returned by this method which will specify whether React should proceed further with the rendering or not. The default value for this method will be True.\n- `getSnapshotBeforeUpdate()`: This method will provide access for the props as well as for the state before the update. It is possible to check the previously present value before the update, even after the update.\n- `componentDidUpdate()`: This method will be called after the component has been updated in the DOM.\n- `componentWillUnmount()`: This method will be called when the component removal from the DOM is about to happen.\n",
      "html": "<h1 id=\"1.1.-react-lifecycle-methods\">1.1. React lifecycle methods <a class=\"heading-anchor-permalink\" href=\"#1.1.-react-lifecycle-methods\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>FIXME: copied as of now, to be re-written if needed.</p>\n<p>React life-cycle hooks will have the methods that will be automatically called at different phases in the component life-cycle and thus it provides good control over what happens at the invoked point. It provides the power to effectively control and manipulate what goes on throughout the component life-cycle.</p>\n<p>For example, if you are developing the YouTube application, then the application will make use of a network for buffering the videos and it consumes the power of the battery (assume only these two). After playing the video if the user switches to any other application, then you should make sure that the resources like network and battery are being used most efficiently. You can stop or pause the video buffering which in turn stops the battery and network usage when the user switches to another application after video play.</p>\n<p>So we can say that the developer will be able to produce a quality application with the help of life-cycle methods and it also helps developers to make sure to plan what and how to do it at different points of birth, growth, or death of user interfaces.</p>\n<p>The various life-cycle methods are:</p>\n<ul>\n<li><code>constructor()</code>: This method will be called when the component is initiated before anything has been done. It helps to set up the initial state and initial values.</li>\n<li><code>getDerivedStateFromProps()</code>: This method will be called just before element(s) rendering in the DOM. It helps to set up the state object depending on the initial props. The getDerivedStateFromProps() method will have a state as an argument and it returns an object that made changes to the state. This will be the first method to be called on an updating of a component.</li>\n<li><code>render()</code>: This method will output or re-render the HTML to the DOM with new changes. The render() method is an essential method and will be called always while the remaining methods are optional and will be called only if they are defined.</li>\n<li><code>componentDidMount()</code>: This method will be called after the rendering of the component. Using this method, you can run statements that need the component to be already kept in the DOM.</li>\n<li><code>shouldComponentUpdate()</code>: The Boolean value will be returned by this method which will specify whether React should proceed further with the rendering or not. The default value for this method will be True.</li>\n<li><code>getSnapshotBeforeUpdate()</code>: This method will provide access for the props as well as for the state before the update. It is possible to check the previously present value before the update, even after the update.</li>\n<li><code>componentDidUpdate()</code>: This method will be called after the component has been updated in the DOM.</li>\n<li><code>componentWillUnmount()</code>: This method will be called when the component removal from the DOM is about to happen.</li>\n</ul>\n",
      "id": 320
    },
    {
      "path": "vault/5_Lifecycle_and_hooks/1_React_lifecycle.md",
      "url": "vault/5_Lifecycle_and_hooks/1_React_lifecycle.html",
      "content": "# 1. React lifecycle\nCreated Monday 30 May 2022\n\n### Why\nIt is important to know and understand the component/app lifecycle in React in order to correctly:\n1. Handle and clear event listeners\n2. Run code at various phases\n\n### How\nThese are implemented in the library.\n\n### What\nThere are four different phases in the lifecycle of React component. They are:\n1. **Initialization**: During this phase, React component will prepare by setting up the default props and initial state for the upcoming tough journey.\n2. **Mounting**: Mounting refers to putting the elements into the browser DOM. Since React uses VirtualDOM, the entire browser DOM which has been currently rendered would not be refreshed. This phase includes the lifecycle methods `componentWillMount` and `componentDidMount`.\n3. **Updating**: In this phase, a component will be updated when there is a change in the state or props of a component. This phase will have lifecycle methods like `componentWillUpdate`, `shouldComponentUpdate`, `render`, and `componentDidUpdate`.\n4. **Unmounting**: In this last phase of the component lifecycle, the component will be removed from the DOM or will be unmounted from the browser DOM. This phase will have the lifecycle method named `componentWillUnmount`.\n\nHere're the phases:\n![](../../assets/1_React_lifecycle-image-1-f7b4f799.png)\n\nHere's an image showing life-cycle methods of the phases:\n![](../../assets/1_React_lifecycle-image-2-f7b4f799.png)\n\nHere's the list of life-cycle methods classified by type:\n![](../../assets/1_React_lifecycle-image-3-f7b4f799.png)\nFIXME: merge the successive page into this\n",
      "html": "<h1 id=\"1.-react-lifecycle\">1. React lifecycle <a class=\"heading-anchor-permalink\" href=\"#1.-react-lifecycle\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>It is important to know and understand the component/app lifecycle in React in order to correctly:</p>\n<ol>\n<li>Handle and clear event listeners</li>\n<li>Run code at various phases</li>\n</ol>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>These are implemented in the library.</p>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>There are four different phases in the lifecycle of React component. They are:</p>\n<ol>\n<li><strong>Initialization</strong>: During this phase, React component will prepare by setting up the default props and initial state for the upcoming tough journey.</li>\n<li><strong>Mounting</strong>: Mounting refers to putting the elements into the browser DOM. Since React uses VirtualDOM, the entire browser DOM which has been currently rendered would not be refreshed. This phase includes the lifecycle methods <code>componentWillMount</code> and <code>componentDidMount</code>.</li>\n<li><strong>Updating</strong>: In this phase, a component will be updated when there is a change in the state or props of a component. This phase will have lifecycle methods like <code>componentWillUpdate</code>, <code>shouldComponentUpdate</code>, <code>render</code>, and <code>componentDidUpdate</code>.</li>\n<li><strong>Unmounting</strong>: In this last phase of the component lifecycle, the component will be removed from the DOM or will be unmounted from the browser DOM. This phase will have the lifecycle method named <code>componentWillUnmount</code>.</li>\n</ol>\n<p>Here’re the phases:\n<img src=\"../../assets/1_React_lifecycle-image-1-f7b4f799.png\" alt=\"\"></p>\n<p>Here’s an image showing life-cycle methods of the phases:\n<img src=\"../../assets/1_React_lifecycle-image-2-f7b4f799.png\" alt=\"\"></p>\n<p>Here’s the list of life-cycle methods classified by type:\n<img src=\"../../assets/1_React_lifecycle-image-3-f7b4f799.png\" alt=\"\">\nFIXME: merge the successive page into this</p>\n",
      "id": 321
    },
    {
      "path": "vault/5_Lifecycle_and_hooks/1_React_lifecycle_hooks_TO_BE_DELETED.md",
      "url": "vault/5_Lifecycle_and_hooks/1_React_lifecycle_hooks_TO_BE_DELETED.html",
      "content": "# 1. React lifecycle hooks\nCreated Tuesday 08 September 2020\n\n- There are some inbuilt functions in React that are great.\n- There are only 8 of them.\n- We'll be looking at one called **componentDidMount**\n\nThis function checks if the component has already mounted, and runs if it has mounted. This of great use when we want to trigger data calls to our database. In the _robofriends_, we use this function to update the robots array using the URL.\n![](../../assets/1_React_lifecycle_hooks_TO_BE_DELETED-image-1-f7b4f799.png)\n**Syntax**: This function is to implemented in a class component as a member function.\n\n---\n\n![](../../assets/1_React_lifecycle-image-1-f7b4f799.png)\ni.e [Lifecycle of a component](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/) - as of Sept 2020\n![](../../assets/1_React_lifecycle_hooks_TO_BE_DELETED-image-3-f7b4f799.png)\n\n- the **componentDidUpdate** has two params, componentDidUpdate(prevProps, prevState)\n\nFunctional component lifecycle hooks: https://wavez.github.io/react-hooks-lifecycle/\n![](../../assets/1_React_lifecycle_hooks_TO_BE_DELETED-image-4-f7b4f799.png)\n",
      "html": "<h1 id=\"1.-react-lifecycle-hooks\">1. React lifecycle hooks <a class=\"heading-anchor-permalink\" href=\"#1.-react-lifecycle-hooks\">#</a></h1>\n<p>Created Tuesday 08 September 2020</p>\n<ul>\n<li>There are some inbuilt functions in React that are great.</li>\n<li>There are only 8 of them.</li>\n<li>We’ll be looking at one called <strong>componentDidMount</strong></li>\n</ul>\n<p>This function checks if the component has already mounted, and runs if it has mounted. This of great use when we want to trigger data calls to our database. In the <em>robofriends</em>, we use this function to update the robots array using the URL.\n<img src=\"../../assets/1_React_lifecycle_hooks_TO_BE_DELETED-image-1-f7b4f799.png\" alt=\"\">\n<strong>Syntax</strong>: This function is to implemented in a class component as a member function.</p>\n<hr>\n<p><img src=\"../../assets/1_React_lifecycle-image-1-f7b4f799.png\" alt=\"\">\ni.e <a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">Lifecycle of a component</a> - as of Sept 2020\n<img src=\"../../assets/1_React_lifecycle_hooks_TO_BE_DELETED-image-3-f7b4f799.png\" alt=\"\"></p>\n<ul>\n<li>the <strong>componentDidUpdate</strong> has two params, componentDidUpdate(prevProps, prevState)</li>\n</ul>\n<p>Functional component lifecycle hooks: <a href=\"https://wavez.github.io/react-hooks-lifecycle/\">https://wavez.github.io/react-hooks-lifecycle/</a>\n<img src=\"../../assets/1_React_lifecycle_hooks_TO_BE_DELETED-image-4-f7b4f799.png\" alt=\"\"></p>\n",
      "id": 322
    },
    {
      "path": "vault/5_Lifecycle_and_hooks/2_1_React_hooks.md",
      "url": "vault/5_Lifecycle_and_hooks/2_1_React_hooks.html",
      "content": "# 2.1. Why React hooks\nCreated Tuesday 08 September 2020\n\nFIXME: read and explain\n1. Need of hooks\n2. What are hooks - Hooks are functions that let us “hook into” React state and lifecycle features from a **functional component**.\n3. https://reactjs.org/docs/hooks-intro.html#motivation\n4. W2H of Custom hooks\n---\n5. Add other hooks of react along with this info:\nThere are two types of Hooks in React. They are:\n1. Built-in Hooks: The built-in Hooks are divided into 2 parts as given below:\n\n## Basic Hooks\n- `useState()`: This functional component is used to set and retrieve the state.\n- `useEffect()`: It enables for performing the side effects in the functional components.\n- `useContext()`: It is used for creating common data that is to be accessed by the components hierarchy without having to pass the props down to each level.\n\n### Additional Hooks\n- `useReducer()` : It is used when there is a complex state logic that is having several sub-values or when the upcoming state is dependent on the previous state. It will also enable you to optimization of component performance that will trigger deeper updates as it is permitted to pass the dispatch down instead of callbacks.\n- `useMemo()` : This will be used for recomputing the memoized value when there is a change in one of the dependencies. This optimization will help for avoiding expensive calculations on each render.\n- `useCallback()` : This is useful while passing callbacks into the optimized child components and depends on the equality of reference for the prevention of unneeded renders.\n- `useImperativeHandle()`:  It will enable modifying the instance that will be passed with the ref object.\n- `useDebugValue()`: It is used for displaying a label for custom hooks in React DevTools.\n- `useRef()` : It will permit creating a reference to the DOM element directly within the functional component.\n- `useLayoutEffect()`: It is used for the reading layout from the DOM and re-rendering synchronously.\n\nAll hooks listed below:\n![](../../assets/2_1_React_hooks-image-1-f7b4f799.png)\n\n## Custom Hooks\nA custom Hook is basically a function of JavaScript. The Custom Hook working is similar to a regular function. The “use” at the beginning of the Custom Hook Name is required for React to understand that this is a custom Hook and also it will describe that this specific function follows the rules of Hooks. Moreover, developing custom Hooks will enable you for extracting component logic from within reusable functions.\n\n\n## Questions about hooks\n1. How does the performance of using Hooks will differ in comparison with the classes?\n   - React Hooks will avoid a lot of overheads such as the instance creation, binding of events, etc., that are present with classes.\n   - Hooks in React will result in smaller component trees since they will be avoiding the nesting that exists in HOCs (Higher Order Components) and will render props which result in less amount of work to be done by React.\n2. Do Hooks cover all the functionalities provided by the classes? - Our goal is for Hooks to cover all the functionalities for classes at its earliest. There are no Hook equivalents for the following methods that are not introduced in Hooks yet:\n\t- `getSnapshotBeforeUpdate()`\n\t- `getDerivedStateFromError()`\n\t- `componentDidCatch()`\n",
      "html": "<h1 id=\"2.1.-why-react-hooks\">2.1. Why React hooks <a class=\"heading-anchor-permalink\" href=\"#2.1.-why-react-hooks\">#</a></h1>\n<p>Created Tuesday 08 September 2020</p>\n<p>FIXME: read and explain</p>\n<ol>\n<li>Need of hooks</li>\n<li>What are hooks - Hooks are functions that let us “hook into” React state and lifecycle features from a <strong>functional component</strong>.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-intro.html#motivation\">https://reactjs.org/docs/hooks-intro.html#motivation</a></li>\n<li>W2H of Custom hooks</li>\n</ol>\n<hr>\n<ol start=\"5\">\n<li>Add other hooks of react along with this info:\nThere are two types of Hooks in React. They are:</li>\n<li>Built-in Hooks: The built-in Hooks are divided into 2 parts as given below:</li>\n</ol>\n<h2 id=\"basic-hooks\">Basic Hooks <a class=\"heading-anchor-permalink\" href=\"#basic-hooks\">#</a></h2>\n<ul>\n<li><code>useState()</code>: This functional component is used to set and retrieve the state.</li>\n<li><code>useEffect()</code>: It enables for performing the side effects in the functional components.</li>\n<li><code>useContext()</code>: It is used for creating common data that is to be accessed by the components hierarchy without having to pass the props down to each level.</li>\n</ul>\n<h3 id=\"additional-hooks\">Additional Hooks <a class=\"heading-anchor-permalink\" href=\"#additional-hooks\">#</a></h3>\n<ul>\n<li><code>useReducer()</code> : It is used when there is a complex state logic that is having several sub-values or when the upcoming state is dependent on the previous state. It will also enable you to optimization of component performance that will trigger deeper updates as it is permitted to pass the dispatch down instead of callbacks.</li>\n<li><code>useMemo()</code> : This will be used for recomputing the memoized value when there is a change in one of the dependencies. This optimization will help for avoiding expensive calculations on each render.</li>\n<li><code>useCallback()</code> : This is useful while passing callbacks into the optimized child components and depends on the equality of reference for the prevention of unneeded renders.</li>\n<li><code>useImperativeHandle()</code>:  It will enable modifying the instance that will be passed with the ref object.</li>\n<li><code>useDebugValue()</code>: It is used for displaying a label for custom hooks in React DevTools.</li>\n<li><code>useRef()</code> : It will permit creating a reference to the DOM element directly within the functional component.</li>\n<li><code>useLayoutEffect()</code>: It is used for the reading layout from the DOM and re-rendering synchronously.</li>\n</ul>\n<p>All hooks listed below:\n<img src=\"../../assets/2_1_React_hooks-image-1-f7b4f799.png\" alt=\"\"></p>\n<h2 id=\"custom-hooks\">Custom Hooks <a class=\"heading-anchor-permalink\" href=\"#custom-hooks\">#</a></h2>\n<p>A custom Hook is basically a function of JavaScript. The Custom Hook working is similar to a regular function. The “use” at the beginning of the Custom Hook Name is required for React to understand that this is a custom Hook and also it will describe that this specific function follows the rules of Hooks. Moreover, developing custom Hooks will enable you for extracting component logic from within reusable functions.</p>\n<h2 id=\"questions-about-hooks\">Questions about hooks <a class=\"heading-anchor-permalink\" href=\"#questions-about-hooks\">#</a></h2>\n<ol>\n<li>How does the performance of using Hooks will differ in comparison with the classes?\n<ul>\n<li>React Hooks will avoid a lot of overheads such as the instance creation, binding of events, etc., that are present with classes.</li>\n<li>Hooks in React will result in smaller component trees since they will be avoiding the nesting that exists in HOCs (Higher Order Components) and will render props which result in less amount of work to be done by React.</li>\n</ul>\n</li>\n<li>Do Hooks cover all the functionalities provided by the classes? - Our goal is for Hooks to cover all the functionalities for classes at its earliest. There are no Hook equivalents for the following methods that are not introduced in Hooks yet:\n<ul>\n<li><code>getSnapshotBeforeUpdate()</code></li>\n<li><code>getDerivedStateFromError()</code></li>\n<li><code>componentDidCatch()</code></li>\n</ul>\n</li>\n</ol>\n",
      "id": 323
    },
    {
      "path": "vault/5_Lifecycle_and_hooks/2_1_Why_React_hooks.md",
      "url": "vault/5_Lifecycle_and_hooks/2_1_Why_React_hooks.html",
      "content": "# 2.1. Why React hooks\nCreated Tuesday 08 September 2020\n\nFIXME: read and explain https://reactjs.org/docs/hooks-intro.html#motivation",
      "html": "<h1 id=\"2.1.-why-react-hooks\">2.1. Why React hooks <a class=\"heading-anchor-permalink\" href=\"#2.1.-why-react-hooks\">#</a></h1>\n<p>Created Tuesday 08 September 2020</p>\n<p>FIXME: read and explain <a href=\"https://reactjs.org/docs/hooks-intro.html#motivation\">https://reactjs.org/docs/hooks-intro.html#motivation</a></p>\n",
      "id": 324
    },
    {
      "path": "vault/5_Lifecycle_and_hooks/2_2_Deriving_all_hooks_from_lifecycle.md",
      "url": "vault/5_Lifecycle_and_hooks/2_2_Deriving_all_hooks_from_lifecycle.html",
      "content": "# 2.2. Deriving all hooks from lifecycle\nCreated Tuesday 06 February 2022\n\n### Why\nIt's simple to derive lifecycle methods after considering the lifecycle of a React component.\n\n---\n### How\nThere are 2 steps to derive/understand hooks:\n1. Consider all possible hooks w.r.t lifecycle phases - places where state could be changed/set for rendering.\n2. Remove duplicate and unneeded hooks.\n\nAfter doing this, only 3 hooks remain, namely:\n1. `componentDidMount`\n2. `componentWillUnmount`\n3. `componentDidUpdate`\n\nAll other hooks, as said, are either unnecessary (they do nothing) or duplicate (can be replaced by existing hook).\n\n---\n### What\nHere's the lifecycle and hooks derivation, HD photo: [MEGA link](https://mega.nz/file/CNtjSI4b#rd33QDBvvW6t94r198WxgFy7cZp5T4Z67m-7of0RpqY)\nThe result is [this](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/).",
      "html": "<h1 id=\"2.2.-deriving-all-hooks-from-lifecycle\">2.2. Deriving all hooks from lifecycle <a class=\"heading-anchor-permalink\" href=\"#2.2.-deriving-all-hooks-from-lifecycle\">#</a></h1>\n<p>Created Tuesday 06 February 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>It’s simple to derive lifecycle methods after considering the lifecycle of a React component.</p>\n<hr>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>There are 2 steps to derive/understand hooks:</p>\n<ol>\n<li>Consider all possible hooks w.r.t lifecycle phases - places where state could be changed/set for rendering.</li>\n<li>Remove duplicate and unneeded hooks.</li>\n</ol>\n<p>After doing this, only 3 hooks remain, namely:</p>\n<ol>\n<li><code>componentDidMount</code></li>\n<li><code>componentWillUnmount</code></li>\n<li><code>componentDidUpdate</code></li>\n</ol>\n<p>All other hooks, as said, are either unnecessary (they do nothing) or duplicate (can be replaced by existing hook).</p>\n<hr>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>Here’s the lifecycle and hooks derivation, HD photo: <a href=\"https://mega.nz/file/CNtjSI4b#rd33QDBvvW6t94r198WxgFy7cZp5T4Z67m-7of0RpqY\">MEGA link</a>\nThe result is <a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">this</a>.</p>\n",
      "id": 325
    },
    {
      "path": "vault/5_Lifecycle_and_hooks/3_1_useEffect_cleanup_function.md",
      "url": "vault/5_Lifecycle_and_hooks/3_1_useEffect_cleanup_function.html",
      "content": "# 114. useEffect cleanup function\nCreated Tuesday 08 March 2022\n\n### Why\nSituation: The useEffect function may create eventListeners, or timeouts. Of course, we want only the latest ones, to avoid a cascading effect from old eventListeners, timeouts.\n\nSo, the cleanup code should be associated with `useEffect`, and run **before** every `useEffect` function call, except the first execution (after 1st render).\n\nThis \"cleanup\" function can be specified as a callback from the function in `useEffect`.\n\n### How\nThe cleanup function is run:\n1. After each `useEffect` function execution.\n2. Except the first `useEffect` function execution. Here, the cleanup is not run before.\n3. After the component has been unmounted from the DOM.\n\nSo for `n` re-renders, the:\n- `useEffect` runs 1 (on first render) + `n` times.\n- The cleanup runs `n` + 1 (1 after unmount) times.\n\n### What\nThe cleanup function is meant to just have logic to avoid a cascading effect of the side-effect, as pointed out earlier.\n\n#### Example of cleanup function\nSuppose we have a text `input` field, and we wish to check if the text exists in the backend or not. We will use `useEffect`, because sending an HTTP request is a \"side-effect\". This is functionally OK. But if we do this on every `onChange` of the field, it will be a lot of backend requests.\n\nTo avoid this, we can actually wait for some time after the user has stopped (finished) typing in the text field. So we use a `setTimeout` in the `onChange` function. This will create a timeout before sending the HTTP request.\n\nBut again, as the `setTimeout` is set for each keystroke, but never removed, we'll have a cascading (repeating) effect from the enqueued `setTimeout`s. The solution is to remove the timeouts after each render, and set a new Timeout. This is perfect for the `useEffect`, as the cleanup is run before the `useEffect` function runs. The code would look something like this:\n```jsx\nimport {useEffect} from 'react';\n\nfunction MyComponent() {\n\t...\n\tuseEffect(() => {\n\t\tconst timeoutVar = setTimeout(\n\t\t\t() => {\n\t\t\t\t... // check HTTP request and validate\n\t\t\t};\n\n\t\treturn (() => { // cleanup function\n\t\t\tclearTimeout(timeOutVar);\n\t\t})\n\t\t\t, 400);\n\t}, [enteredField]);\n\t...\n};\n```\nSee this\n![](../../assets/114_useEffect_cleanup_function-image-1-aa8f0200.gif)\nHere the timeouts will be set and unset when the user is typing, and finally one will be run if the user stops typing. This reduces network calls, and when they have typed successfully, a request is sent.\n\nThis way of validating typed input is called \"de-bouncing\". An example where this is used - GitHub new repo name does not exist tick mark, Gmail new username 'taken' validation.\n\n### Debounce util\nDebounce is not a hard thing. In fact, a util can be created so one doesn't have to think about the details of the construct.\n\n```js\nfunction debounceUtil(cb, time) {\n  let stateOfReturnFuncs;\n\n  function returnFunc() {\n    clearTimeout(state); // clear existing state (i.e. timer)\n    stateOfReturnFuncs = setTimeout(cb, time); // start new timer, but save self also\n  }\n\n  return returnFunc;\n}\n\nconst eventHandler = debounceUtil((event) => { }, 1000);\n\n// sanity check\n// eventHandler ran once -> timer started, awaiting custom code run\n// eventHandler ran again (before previous) -> cleared older timer -> timer started again, awaiting custom code run\n```",
      "html": "<h1 id=\"114.-useeffect-cleanup-function\">114. useEffect cleanup function <a class=\"heading-anchor-permalink\" href=\"#114.-useeffect-cleanup-function\">#</a></h1>\n<p>Created Tuesday 08 March 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Situation: The useEffect function may create eventListeners, or timeouts. Of course, we want only the latest ones, to avoid a cascading effect from old eventListeners, timeouts.</p>\n<p>So, the cleanup code should be associated with <code>useEffect</code>, and run <strong>before</strong> every <code>useEffect</code> function call, except the first execution (after 1st render).</p>\n<p>This “cleanup” function can be specified as a callback from the function in <code>useEffect</code>.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>The cleanup function is run:</p>\n<ol>\n<li>After each <code>useEffect</code> function execution.</li>\n<li>Except the first <code>useEffect</code> function execution. Here, the cleanup is not run before.</li>\n<li>After the component has been unmounted from the DOM.</li>\n</ol>\n<p>So for <code>n</code> re-renders, the:</p>\n<ul>\n<li><code>useEffect</code> runs 1 (on first render) + <code>n</code> times.</li>\n<li>The cleanup runs <code>n</code> + 1 (1 after unmount) times.</li>\n</ul>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>The cleanup function is meant to just have logic to avoid a cascading effect of the side-effect, as pointed out earlier.</p>\n<h4 id=\"example-of-cleanup-function\">Example of cleanup function <a class=\"heading-anchor-permalink\" href=\"#example-of-cleanup-function\">#</a></h4>\n<p>Suppose we have a text <code>input</code> field, and we wish to check if the text exists in the backend or not. We will use <code>useEffect</code>, because sending an HTTP request is a “side-effect”. This is functionally OK. But if we do this on every <code>onChange</code> of the field, it will be a lot of backend requests.</p>\n<p>To avoid this, we can actually wait for some time after the user has stopped (finished) typing in the text field. So we use a <code>setTimeout</code> in the <code>onChange</code> function. This will create a timeout before sending the HTTP request.</p>\n<p>But again, as the <code>setTimeout</code> is set for each keystroke, but never removed, we’ll have a cascading (repeating) effect from the enqueued <code>setTimeout</code>s. The solution is to remove the timeouts after each render, and set a new Timeout. This is perfect for the <code>useEffect</code>, as the cleanup is run before the <code>useEffect</code> function runs. The code would look something like this:</p>\n<pre><code class=\"language-jsx\">import {useEffect} from 'react';\n\nfunction MyComponent() {\n\t...\n\tuseEffect(() =&gt; {\n\t\tconst timeoutVar = setTimeout(\n\t\t\t() =&gt; {\n\t\t\t\t... // check HTTP request and validate\n\t\t\t};\n\n\t\treturn (() =&gt; { // cleanup function\n\t\t\tclearTimeout(timeOutVar);\n\t\t})\n\t\t\t, 400);\n\t}, [enteredField]);\n\t...\n};\n</code></pre>\n<p>See this\n<img src=\"../../assets/114_useEffect_cleanup_function-image-1-aa8f0200.gif\" alt=\"\">\nHere the timeouts will be set and unset when the user is typing, and finally one will be run if the user stops typing. This reduces network calls, and when they have typed successfully, a request is sent.</p>\n<p>This way of validating typed input is called “de-bouncing”. An example where this is used - GitHub new repo name does not exist tick mark, Gmail new username ‘taken’ validation.</p>\n<h3 id=\"debounce-util\">Debounce util <a class=\"heading-anchor-permalink\" href=\"#debounce-util\">#</a></h3>\n<p>Debounce is not a hard thing. In fact, a util can be created so one doesn’t have to think about the details of the construct.</p>\n<pre><code class=\"language-js\">function debounceUtil(cb, time) {\n  let stateOfReturnFuncs;\n\n  function returnFunc() {\n    clearTimeout(state); // clear existing state (i.e. timer)\n    stateOfReturnFuncs = setTimeout(cb, time); // start new timer, but save self also\n  }\n\n  return returnFunc;\n}\n\nconst eventHandler = debounceUtil((event) =&gt; { }, 1000);\n\n// sanity check\n// eventHandler ran once -&gt; timer started, awaiting custom code run\n// eventHandler ran again (before previous) -&gt; cleared older timer -&gt; timer started again, awaiting custom code run\n</code></pre>\n",
      "id": 326
    },
    {
      "path": "vault/5_Lifecycle_and_hooks/3_useEffect_hook.md",
      "url": "vault/5_Lifecycle_and_hooks/3_useEffect_hook.html",
      "content": "# 110. useEffect hook\nCreated Tuesday 08 March 2022\n\n## What is an effect, aka \"side effect\"?\nThe main job of React is to:\n1. Render UI\n2. React to user input.\n\nTasks other than these 2 are \"side effects\". Example - http requests, computation, timers, using `localStorage`, listening to user input etc. Note that some normal ops can also be considered side-effects - like listening to user input for validation.\n\n## Why\nSide effects cannot be coded \"as is\" into the component function, because:\n- They'll be executed each time the component is rendered, i.e. function is executed. This may be very expensive, or not needed.\n- If the side effects change state (using `useState`), then this will trigger an infinite loop. How: `side-effect` --> `change state` --> `re-render due to change state` --> `side-effect` 🔁 and so on.\n\nSo how do we code side effects into components, in a controllable way. The answer is the `useEffect` hook.\n\n## How\nSyntax of `useEffect`:\n```jsx\nimport { useEffect } from 'react';\n\nconst MyComponent() {\n\t...\n\tuseEffect( () => {...}, [...]);\n\t...\n\treturn <>...</>;\n}\n```\nIt has two pieces:\n1. Dependency array - just variables. React keeps track of these.\n2. A function that runs *after* every render if any dependencies have changed, including the first render (independent of dependency array). Side effect code goes into this function.\n\n### Note on dependency array\n1. If dependency = `undefined`, i.e. absent. Function will run after every render.\n2. If dependency = [] (empty array), the function will execute once, i.e. after first render.\n3. If the dependency array has any candidates, the function will run after every render, given the dependencies have changed.\n4. In-built functions, second element of `useState()` array, or anything defined outside the component should not be passed as a dependency, because it has no effect. Basically, only pass stuff that is changed/can change inside the component function (or its parent).\n\n## What\n- `useEffect` is the solution to the problem of placement (and therefore execution) of side-effect (s) code.\n- `useEffect` is not like `useState`. i.e. it won't trigger re-render due dependency array change. It will do so only if state is changed inside the function, which is not the question here. Again, to reiterate - `useEffect` runs the function after every render if any dependency has changed.\n- Additionally, `useEffect` may be used as a refactor to repeated code, due to presence of a dependency array.\n- `useEffect` is good for times when a state is dependent on other states, given the dependent states are kept in the dependency array. This will lead to the latest state being considered during state updation (FIXME: latest, really?).\n\n## When to use `useEffect`?\nFIXME - can be made better\n\nUse it when:\n1. The task is a side-effect. Note that all possible side-effect code is a part of `useEffect`, i.e. `useEffect` is for side-effects, the converse may not be true.\n2. It is computationally expensive and/or not needed on each render.\n3. For http requests, DB/`localStorage` read/writes may use `useEffect`.\n4. You'll know.",
      "html": "<h1 id=\"110.-useeffect-hook\">110. useEffect hook <a class=\"heading-anchor-permalink\" href=\"#110.-useeffect-hook\">#</a></h1>\n<p>Created Tuesday 08 March 2022</p>\n<h2 id=\"what-is-an-effect%2C-aka-%E2%80%9Cside-effect%E2%80%9D%3F\">What is an effect, aka “side effect”? <a class=\"heading-anchor-permalink\" href=\"#what-is-an-effect%2C-aka-%E2%80%9Cside-effect%E2%80%9D%3F\">#</a></h2>\n<p>The main job of React is to:</p>\n<ol>\n<li>Render UI</li>\n<li>React to user input.</li>\n</ol>\n<p>Tasks other than these 2 are “side effects”. Example - http requests, computation, timers, using <code>localStorage</code>, listening to user input etc. Note that some normal ops can also be considered side-effects - like listening to user input for validation.</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>Side effects cannot be coded “as is” into the component function, because:</p>\n<ul>\n<li>They’ll be executed each time the component is rendered, i.e. function is executed. This may be very expensive, or not needed.</li>\n<li>If the side effects change state (using <code>useState</code>), then this will trigger an infinite loop. How: <code>side-effect</code> --&gt; <code>change state</code> --&gt; <code>re-render due to change state</code> --&gt; <code>side-effect</code> 🔁 and so on.</li>\n</ul>\n<p>So how do we code side effects into components, in a controllable way. The answer is the <code>useEffect</code> hook.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>Syntax of <code>useEffect</code>:</p>\n<pre><code class=\"language-jsx\">import { useEffect } from 'react';\n\nconst MyComponent() {\n\t...\n\tuseEffect( () =&gt; {...}, [...]);\n\t...\n\treturn &lt;&gt;...&lt;/&gt;;\n}\n</code></pre>\n<p>It has two pieces:</p>\n<ol>\n<li>Dependency array - just variables. React keeps track of these.</li>\n<li>A function that runs <em>after</em> every render if any dependencies have changed, including the first render (independent of dependency array). Side effect code goes into this function.</li>\n</ol>\n<h3 id=\"note-on-dependency-array\">Note on dependency array <a class=\"heading-anchor-permalink\" href=\"#note-on-dependency-array\">#</a></h3>\n<ol>\n<li>If dependency = <code>undefined</code>, i.e. absent. Function will run after every render.</li>\n<li>If dependency = [] (empty array), the function will execute once, i.e. after first render.</li>\n<li>If the dependency array has any candidates, the function will run after every render, given the dependencies have changed.</li>\n<li>In-built functions, second element of <code>useState()</code> array, or anything defined outside the component should not be passed as a dependency, because it has no effect. Basically, only pass stuff that is changed/can change inside the component function (or its parent).</li>\n</ol>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<ul>\n<li><code>useEffect</code> is the solution to the problem of placement (and therefore execution) of side-effect (s) code.</li>\n<li><code>useEffect</code> is not like <code>useState</code>. i.e. it won’t trigger re-render due dependency array change. It will do so only if state is changed inside the function, which is not the question here. Again, to reiterate - <code>useEffect</code> runs the function after every render if any dependency has changed.</li>\n<li>Additionally, <code>useEffect</code> may be used as a refactor to repeated code, due to presence of a dependency array.</li>\n<li><code>useEffect</code> is good for times when a state is dependent on other states, given the dependent states are kept in the dependency array. This will lead to the latest state being considered during state updation (FIXME: latest, really?).</li>\n</ul>\n<h2 id=\"when-to-use-useeffect%3F\">When to use <code>useEffect</code>? <a class=\"heading-anchor-permalink\" href=\"#when-to-use-useeffect%3F\">#</a></h2>\n<p>FIXME - can be made better</p>\n<p>Use it when:</p>\n<ol>\n<li>The task is a side-effect. Note that all possible side-effect code is a part of <code>useEffect</code>, i.e. <code>useEffect</code> is for side-effects, the converse may not be true.</li>\n<li>It is computationally expensive and/or not needed on each render.</li>\n<li>For http requests, DB/<code>localStorage</code> read/writes may use <code>useEffect</code>.</li>\n<li>You’ll know.</li>\n</ol>\n",
      "id": 327
    },
    {
      "path": "vault/6_More_aspects_of_React/1_Routing.md",
      "url": "vault/6_More_aspects_of_React/1_Routing.html",
      "content": "# 1. Routing\nCreated Monday 30 May 2022\n\nFIXME:\n1. What is routing in SPA? \n2. Why do we need it? Maybe this will help: https://stackoverflow.com/q/39636411/11392807\n3. What is react-router library\n4. How to code it\n---\n4. Add this info if needed\nReact Router refers to the standard library used for routing in React. It permits us for building a single-page web application in React with navigation without even refreshing the page when the user navigates. It also allows to change the browser URL and will keep the user interface in sync with the URL. React Router will make use of the component structure for calling the components, using which appropriate information can be shown. Since React is a component-based framework, it’s not necessary to include and use this package. Any other compatible routing library would also work with React.\n\nThe major components of React Router are given below:\n- **BrowserRouter**: It is a router implementation that will make use of the HTML5 history API (pushState, popstate, and event replaceState) for keeping your UI to be in sync with the URL. It is the parent component useful in storing all other components.\n- **Routes**: It is a newer component that has been introduced in the React v6 and an upgrade of the component.\n- **Route**: It is considered to be a conditionally shown component and some UI will be rendered by this whenever there is a match between its path and the current URL.\n- **Link**: It is useful in creating links to various routes and implementing navigation all over the application. It works similarly to the anchor tag in HTML.\n---\n5. Read and explain from: https://dilshankelsen.com/an-introduction-to-react-router/ and https://reactrouter.com/",
      "html": "<h1 id=\"1.-routing\">1. Routing <a class=\"heading-anchor-permalink\" href=\"#1.-routing\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>FIXME:</p>\n<ol>\n<li>What is routing in SPA?</li>\n<li>Why do we need it? Maybe this will help: <a href=\"https://stackoverflow.com/q/39636411/11392807\">https://stackoverflow.com/q/39636411/11392807</a></li>\n<li>What is react-router library</li>\n<li>How to code it</li>\n</ol>\n<hr>\n<ol start=\"4\">\n<li>Add this info if needed\nReact Router refers to the standard library used for routing in React. It permits us for building a single-page web application in React with navigation without even refreshing the page when the user navigates. It also allows to change the browser URL and will keep the user interface in sync with the URL. React Router will make use of the component structure for calling the components, using which appropriate information can be shown. Since React is a component-based framework, it’s not necessary to include and use this package. Any other compatible routing library would also work with React.</li>\n</ol>\n<p>The major components of React Router are given below:</p>\n<ul>\n<li><strong>BrowserRouter</strong>: It is a router implementation that will make use of the HTML5 history API (pushState, popstate, and event replaceState) for keeping your UI to be in sync with the URL. It is the parent component useful in storing all other components.</li>\n<li><strong>Routes</strong>: It is a newer component that has been introduced in the React v6 and an upgrade of the component.</li>\n<li><strong>Route</strong>: It is considered to be a conditionally shown component and some UI will be rendered by this whenever there is a match between its path and the current URL.</li>\n<li><strong>Link</strong>: It is useful in creating links to various routes and implementing navigation all over the application. It works similarly to the anchor tag in HTML.</li>\n</ul>\n<hr>\n<ol start=\"5\">\n<li>Read and explain from: <a href=\"https://dilshankelsen.com/an-introduction-to-react-router/\">https://dilshankelsen.com/an-introduction-to-react-router/</a> and <a href=\"https://reactrouter.com/\">https://reactrouter.com/</a></li>\n</ol>\n",
      "id": 328
    },
    {
      "path": "vault/6_More_aspects_of_React/2_Architecture_beyond_HTML.md",
      "url": "vault/6_More_aspects_of_React/2_Architecture_beyond_HTML.html",
      "content": "# 2. Architecture beyond HTML\nCreated Monday 30 May 2022\n\nFIXME: what is this ??\n\nThe basic architecture of React applies beyond rendering HTML in the browser. For example, Facebook has dynamic charts that render to \\<canvas\\> [tags](https://facebook.github.io/react/blog/2013/06/05/why-react.html), and Netflix and PayPal use universal loading to render identical HTML on both the server and client.\n\nLinks:\n- [PayPal isomorphic React](https://web.archive.org/web/20190208124143/https://www.paypal-engineering.com/2015/04/27/isomorphic-react-apps-with-react-engine/)\n- [Netflix isomorphic React](https://netflixtechblog.com/netflix-likes-react-509675426db)\n",
      "html": "<h1 id=\"2.-architecture-beyond-html\">2. Architecture beyond HTML <a class=\"heading-anchor-permalink\" href=\"#2.-architecture-beyond-html\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>FIXME: what is this ??</p>\n<p>The basic architecture of React applies beyond rendering HTML in the browser. For example, Facebook has dynamic charts that render to &lt;canvas&gt; <a href=\"https://facebook.github.io/react/blog/2013/06/05/why-react.html\">tags</a>, and Netflix and PayPal use universal loading to render identical HTML on both the server and client.</p>\n<p>Links:</p>\n<ul>\n<li><a href=\"https://web.archive.org/web/20190208124143/https://www.paypal-engineering.com/2015/04/27/isomorphic-react-apps-with-react-engine/\">PayPal isomorphic React</a></li>\n<li><a href=\"https://netflixtechblog.com/netflix-likes-react-509675426db\">Netflix isomorphic React</a></li>\n</ul>\n",
      "id": 329
    },
    {
      "path": "vault/6_More_aspects_of_React/3_Unidirectional_data_flow_and_Flux.md",
      "url": "vault/6_More_aspects_of_React/3_Unidirectional_data_flow_and_Flux.html",
      "content": "# 3. Unidirectional data flow and Flux\nCreated Monday 30 May 2022\n\nFIXME: \n- https://en.wikipedia.org/wiki/React_(JavaScript_library)#Unidirectional_data_flow\n- https://www.javatpoint.com/react-flux-concept\n- https://www.javatpoint.com/react-flux-vs-mvc",
      "html": "<h1 id=\"3.-unidirectional-data-flow-and-flux\">3. Unidirectional data flow and Flux <a class=\"heading-anchor-permalink\" href=\"#3.-unidirectional-data-flow-and-flux\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>FIXME:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/React_(JavaScript_library)#Unidirectional_data_flow\">https://en.wikipedia.org/wiki/React_(JavaScript_library)#Unidirectional_data_flow</a></li>\n<li><a href=\"https://www.javatpoint.com/react-flux-concept\">https://www.javatpoint.com/react-flux-concept</a></li>\n<li><a href=\"https://www.javatpoint.com/react-flux-vs-mvc\">https://www.javatpoint.com/react-flux-vs-mvc</a></li>\n</ul>\n",
      "id": 330
    },
    {
      "path": "vault/6_More_aspects_of_React/4_Code_splitting.md",
      "url": "vault/6_More_aspects_of_React/4_Code_splitting.html",
      "content": "# 4. Code splitting\nCreated Monday 30 May 2022\n\nFIXME: https://reactjs.org/docs/code-splitting.html aka lazy load.",
      "html": "<h1 id=\"4.-code-splitting\">4. Code splitting <a class=\"heading-anchor-permalink\" href=\"#4.-code-splitting\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>FIXME: <a href=\"https://reactjs.org/docs/code-splitting.html\">https://reactjs.org/docs/code-splitting.html</a> aka lazy load.</p>\n",
      "id": 331
    },
    {
      "path": "vault/6_More_aspects_of_React/5_Redux.md",
      "url": "vault/6_More_aspects_of_React/5_Redux.html",
      "content": "# 5. Redux\nCreated Tue Jan 9, 2024 at 12:56 AM\n\n## Redux the package\nRedux is an *efficient* global state management tools. It works by establishing a \"store\", which is a collection of data and functions (mostly pure).\n\nIt is platform agnostic, but generally used for the frontend, especially with React.\n\nThe paradigm in apps using Redux is to subscribe some code to the store, which will will run the code when \"observed/interesting\" piece of data in the store is changed. This observed data has to be specified before hand of course.\n\n\n### Redux Toolkit\nRedux itself [says](https://redux.js.org/introduction/getting-started) recommends using Redux Toolkit over plain Redux.\nAnd plain Redux was indeed, too cumbersome to write.\n\n\n## react-redux\nThis is a library, from the same team as Redux that makes it super easy to subscribe to the store. It exposes two hooks `useDispatch` and `useSelector`, which are used for running an action and getting latest value, respectively.\n\nOf course, `useSelector` is the one that creates and maintains the subscription to the store. Consequently, if the data you're interested in changes, your component(s) will automatically remount. Cool.\n\n## TBD\nI already covered Redux in Max's course. And have been using RTK at Volopay for ~1.5 years. I didn't do any courses on Redux in this time, but RTK has been an absolute delight, and I've learnt:\n1. How to setup\n2. Make API calls with the store involved, aka thunks\n3. Handling pagination via RTK\n4. onSuccess, onError are impure but OK to be called in a reducer/thunk. Maybe there's a better way, idk\n5. Problems with selectors - cannot be parameterized. Although the callback notation works just fine.\n6. Multiplicity/instantiation problem - easily solved by creating a reducer that injects new object. And using the callback notation for selectors.\n\n// finish these points, add some code examples and details",
      "html": "<h1 id=\"5.-redux\">5. Redux <a class=\"heading-anchor-permalink\" href=\"#5.-redux\">#</a></h1>\n<p>Created Tue Jan 9, 2024 at 12:56 AM</p>\n<h2 id=\"redux-the-package\">Redux the package <a class=\"heading-anchor-permalink\" href=\"#redux-the-package\">#</a></h2>\n<p>Redux is an <em>efficient</em> global state management tools. It works by establishing a “store”, which is a collection of data and functions (mostly pure).</p>\n<p>It is platform agnostic, but generally used for the frontend, especially with React.</p>\n<p>The paradigm in apps using Redux is to subscribe some code to the store, which will will run the code when “observed/interesting” piece of data in the store is changed. This observed data has to be specified before hand of course.</p>\n<h3 id=\"redux-toolkit\">Redux Toolkit <a class=\"heading-anchor-permalink\" href=\"#redux-toolkit\">#</a></h3>\n<p>Redux itself <a href=\"https://redux.js.org/introduction/getting-started\">says</a> recommends using Redux Toolkit over plain Redux.\nAnd plain Redux was indeed, too cumbersome to write.</p>\n<h2 id=\"react-redux\">react-redux <a class=\"heading-anchor-permalink\" href=\"#react-redux\">#</a></h2>\n<p>This is a library, from the same team as Redux that makes it super easy to subscribe to the store. It exposes two hooks <code>useDispatch</code> and <code>useSelector</code>, which are used for running an action and getting latest value, respectively.</p>\n<p>Of course, <code>useSelector</code> is the one that creates and maintains the subscription to the store. Consequently, if the data you’re interested in changes, your component(s) will automatically remount. Cool.</p>\n<h2 id=\"tbd\">TBD <a class=\"heading-anchor-permalink\" href=\"#tbd\">#</a></h2>\n<p>I already covered Redux in Max’s course. And have been using RTK at Volopay for ~1.5 years. I didn’t do any courses on Redux in this time, but RTK has been an absolute delight, and I’ve learnt:</p>\n<ol>\n<li>How to setup</li>\n<li>Make API calls with the store involved, aka thunks</li>\n<li>Handling pagination via RTK</li>\n<li>onSuccess, onError are impure but OK to be called in a reducer/thunk. Maybe there’s a better way, idk</li>\n<li>Problems with selectors - cannot be parameterized. Although the callback notation works just fine.</li>\n<li>Multiplicity/instantiation problem - easily solved by creating a reducer that injects new object. And using the callback notation for selectors.</li>\n</ol>\n<p>// finish these points, add some code examples and details</p>\n",
      "id": 332
    },
    {
      "path": "vault/6_More_aspects_of_React/index.md",
      "url": "vault/6_More_aspects_of_React/index.html",
      "content": "# 6. More aspects of React\nCreated Tue Jan 9, 2024 at 1:09 AM\n\nThis section will cover \n- libraries\n- processes \n- patterns\n\nthat are used/related to react apps - whether web or mobile. \n\nNote: Only for ideatic tools/processes/patterns, and not just snippets or minor things like deployment. As least testing/devOps as possible here, for that use Miscellaneous folder for that.",
      "html": "<h1 id=\"6.-more-aspects-of-react\">6. More aspects of React <a class=\"heading-anchor-permalink\" href=\"#6.-more-aspects-of-react\">#</a></h1>\n<p>Created Tue Jan 9, 2024 at 1:09 AM</p>\n<p>This section will cover</p>\n<ul>\n<li>libraries</li>\n<li>processes</li>\n<li>patterns</li>\n</ul>\n<p>that are used/related to react apps - whether web or mobile.</p>\n<p>Note: Only for ideatic tools/processes/patterns, and not just snippets or minor things like deployment. As least testing/devOps as possible here, for that use Miscellaneous folder for that.</p>\n",
      "id": 333
    },
    {
      "path": "vault/8_Misc/1_Building_the_deployable.md",
      "url": "vault/8_Misc/1_Building_the_deployable.html",
      "content": "# 1. Building the deployable\nCreated Tuesday 08 September 2020\n\n\n* Just run 'npm run build' in the project folder'\n* A build folder is created, containing all the files, and an index.html file.\n* These files can be deployed anywhere\n* **No need of any modules now.**\n* All files are minified.\n\n\n",
      "html": "<h1 id=\"1.-building-the-deployable\">1. Building the deployable <a class=\"heading-anchor-permalink\" href=\"#1.-building-the-deployable\">#</a></h1>\n<p>Created Tuesday 08 September 2020</p>\n<ul>\n<li>Just run ‘npm run build’ in the project folder’</li>\n<li>A build folder is created, containing all the files, and an index.html file.</li>\n<li>These files can be deployed anywhere</li>\n<li><strong>No need of any modules now.</strong></li>\n<li>All files are minified.</li>\n</ul>\n",
      "id": 334
    },
    {
      "path": "vault/8_Misc/1_Testing_of_React_apps.md",
      "url": "vault/8_Misc/1_Testing_of_React_apps.html",
      "content": "# 1. Testing of React apps\nCreated Monday 30 May 2022\n\nRepo: https://github.com/sanjar-notes/reactjs-testing\n\nFIXME: https://www.javatpoint.com/unit-testing-in-react\n\nMake changes to https://github.com/sanjar-notes/sw-testing-fundamentals if needed",
      "html": "<h1 id=\"1.-testing-of-react-apps\">1. Testing of React apps <a class=\"heading-anchor-permalink\" href=\"#1.-testing-of-react-apps\">#</a></h1>\n<p>Created Monday 30 May 2022</p>\n<p>Repo: <a href=\"https://github.com/sanjar-notes/reactjs-testing\">https://github.com/sanjar-notes/reactjs-testing</a></p>\n<p>FIXME: <a href=\"https://www.javatpoint.com/unit-testing-in-react\">https://www.javatpoint.com/unit-testing-in-react</a></p>\n<p>Make changes to <a href=\"https://github.com/sanjar-notes/sw-testing-fundamentals\">https://github.com/sanjar-notes/sw-testing-fundamentals</a> if needed</p>\n",
      "id": 335
    },
    {
      "path": "vault/8_Misc/2-Routing-enums-web.md",
      "url": "vault/8_Misc/2-Routing-enums-web.html",
      "content": "# 2. Routing enums web\nCreated Sat Dec 30, 2023 at 6:14 PM\n\n## Why enums\nUsing literal values for navigation code is a bad idea, because:\n1. There's scope for typos\n2. Even if there are no typos, one has to do \"complete\" testing to make sure everything works\n3. Refactoring is hard in the future.\n4. No auto-complete, too many manual lookups. Also, scope for error.\n\nSo, in addition to route markup (of navigators and screens), one should maintain a large POJO of just literals. And use this enum in navigation and initialRoute props.\n\n## About nesting\nNesting isn't an issue in web\nIn a routes enum structure, there are 3 goals - uniqueness of keys, minimize manual lookup and ease of use in app code.\n\n1. For uniqueness - I mean uniqueness of navigable entities (pages). create a linear object with keys and values identical. or Better, create variables one below the other, with name and value identical. In both cases, the editor will let you know about duplicates.\n2. Minimize manual lookup: first of all, what lookups are we talking about in a route structure? Parent and children are two possibilities right. Then there's self representation. And also, it's the web and path sections matter, so we should represent structure in such a way that we don't have to manipulate/concatenate stuff in the app code. \n\t1. We'll use a single word (no `/`) key for a page or navigation link (like sidebar). We'll name the key `pathName` (not path, since path may indicate multiple words). This way, React Router local path is easy to specify (it is a single word).\n\t2. Full path to the page. We'll store it here itself. As `absolutePath`. This makes programmatic navigation easy. `ROUTES.x.y.....absolutePath`\n\t3. The value of this key will be an object  as we'll be creating an object here (2 pieces of data already). So keys are `pathName`, `absolutePath`.\n\t4. Store subpages (for navigation link) - as an object directory, follow same structure inside if there is a sub navigation link.\n\t5. `base` key - Additionally if the entity is a navigation link, add a `base` string, and specify `pathName` and `absolutePath` for use in `initialRouteName` in the markup. So if base changes, we only have to change this enum file. Don't use `base` in app code.\n\t6. `base` key - for simple single pages, this key should be absent. Appearing/not-appearing in auto-complete is also helpful to check if current path is a simple screen or not. Lookup avoided.\n3. Ease of usage - for usage with autocompletion we need an object (array won't do), so make the exported structure is a single object, and it uses the unique keys we created.\n\nExample:\n```js\nconst PUBLIC = '/public'; // top level ones have /\nconst PRIVATE = '/private';\n\nconst WELCOME = '/welcome';\nconst LOGIN = '/login'; // top level ones have /\nconst FORGOT_PASSWORD = '/forgot-password'; // top level ones have /\n\nconst CARS_BASE_ROUTE = \"/cars\";\nconst PHYSICAL_CARS_PATH_NAME = \"physical-cars\"; // middle words, no /\nconst VIRTUAL_CARS_PATH_NAME = \"virtual-cars\";\n\n\nexport const ROUTES = {\n  private: {\n    pathName: [PRIVATE],\n    absolutePath: `${PRIVATE}`,\n\n    cars: {\n      pathName: [CARS_BASE_ROUTE],\n      absolutePath: `${PRIVATE}/${CARS_BASE_ROUTE}`,\n\n\t  physicalCars: {\n\t    pathName: [PHYSICAL_CARS_PATH_NAME],\n\t    absolutePath: `${PRIVATE}/${CARS_BASE_ROUTE}/${PHYSICAL_CARS_PATH_NAME}`,\n\t  },\n\t  virtualCars: {\n\t    pathName: [VIRTUAL_CARS_PATH_NAME],\n\t    absolutePath: `${PRIVATE}/${CARS_BASE_ROUTE}/${VIRTUAL_CARS_PATH_NAME}`,\n\t  }\n    }\n  },\n\n  public: {\n    pathName: [PUBLIC],\n    absolutePath: `${PUBLIC}`,\n    \n    base: { // this will be used to represent preferred route in markup\n      pathName: [WELCOME],\n      absolutePath: `${PUBLIC}/${WELCOME}`,\n    },\n\n    welcome: {\n      pathName: [WELCOME],\n      absolutePath: `${PUBLIC}/${WELCOME}`,\n    },\n    login: {\n      pathName: [LOGIN],\n      absolutePath: `${PUBLIC}/${LOGIN}`,\n    },\n    forgotPassword: {\n      pathName: [FORGOT_PASSWORD],\n      absolutePath: `${PUBLIC}/${FORGOT_PASSWORD}`,\n    }\n  }\n}\n```\n\n```jsx\n  <Route>\n\t<Route\n\t  path={ROUTES.private.cars.absolutePath}\n\t  element={<MainApp />}\n\t>\n\t  <Route\n\t\tpath={ROUTES.private.cars.physicalCars.pathName}\n\t\telement={<PhysicalCars />}\n\t  />\n\t  <Route\n\t\tpath={ROUTES.private.cars.virtualCars.pathName}\n\t\telement={<VirtualCars />}\n\t  />\n\t</Route>\n  </Route>\n```",
      "html": "<h1 id=\"2.-routing-enums-web\">2. Routing enums web <a class=\"heading-anchor-permalink\" href=\"#2.-routing-enums-web\">#</a></h1>\n<p>Created Sat Dec 30, 2023 at 6:14 PM</p>\n<h2 id=\"why-enums\">Why enums <a class=\"heading-anchor-permalink\" href=\"#why-enums\">#</a></h2>\n<p>Using literal values for navigation code is a bad idea, because:</p>\n<ol>\n<li>There’s scope for typos</li>\n<li>Even if there are no typos, one has to do “complete” testing to make sure everything works</li>\n<li>Refactoring is hard in the future.</li>\n<li>No auto-complete, too many manual lookups. Also, scope for error.</li>\n</ol>\n<p>So, in addition to route markup (of navigators and screens), one should maintain a large POJO of just literals. And use this enum in navigation and initialRoute props.</p>\n<h2 id=\"about-nesting\">About nesting <a class=\"heading-anchor-permalink\" href=\"#about-nesting\">#</a></h2>\n<p>Nesting isn’t an issue in web\nIn a routes enum structure, there are 3 goals - uniqueness of keys, minimize manual lookup and ease of use in app code.</p>\n<ol>\n<li>For uniqueness - I mean uniqueness of navigable entities (pages). create a linear object with keys and values identical. or Better, create variables one below the other, with name and value identical. In both cases, the editor will let you know about duplicates.</li>\n<li>Minimize manual lookup: first of all, what lookups are we talking about in a route structure? Parent and children are two possibilities right. Then there’s self representation. And also, it’s the web and path sections matter, so we should represent structure in such a way that we don’t have to manipulate/concatenate stuff in the app code.\n<ol>\n<li>We’ll use a single word (no <code>/</code>) key for a page or navigation link (like sidebar). We’ll name the key <code>pathName</code> (not path, since path may indicate multiple words). This way, React Router local path is easy to specify (it is a single word).</li>\n<li>Full path to the page. We’ll store it here itself. As <code>absolutePath</code>. This makes programmatic navigation easy. <code>ROUTES.x.y.....absolutePath</code></li>\n<li>The value of this key will be an object  as we’ll be creating an object here (2 pieces of data already). So keys are <code>pathName</code>, <code>absolutePath</code>.</li>\n<li>Store subpages (for navigation link) - as an object directory, follow same structure inside if there is a sub navigation link.</li>\n<li><code>base</code> key - Additionally if the entity is a navigation link, add a <code>base</code> string, and specify <code>pathName</code> and <code>absolutePath</code> for use in <code>initialRouteName</code> in the markup. So if base changes, we only have to change this enum file. Don’t use <code>base</code> in app code.</li>\n<li><code>base</code> key - for simple single pages, this key should be absent. Appearing/not-appearing in auto-complete is also helpful to check if current path is a simple screen or not. Lookup avoided.</li>\n</ol>\n</li>\n<li>Ease of usage - for usage with autocompletion we need an object (array won’t do), so make the exported structure is a single object, and it uses the unique keys we created.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-js\">const PUBLIC = '/public'; // top level ones have /\nconst PRIVATE = '/private';\n\nconst WELCOME = '/welcome';\nconst LOGIN = '/login'; // top level ones have /\nconst FORGOT_PASSWORD = '/forgot-password'; // top level ones have /\n\nconst CARS_BASE_ROUTE = &quot;/cars&quot;;\nconst PHYSICAL_CARS_PATH_NAME = &quot;physical-cars&quot;; // middle words, no /\nconst VIRTUAL_CARS_PATH_NAME = &quot;virtual-cars&quot;;\n\n\nexport const ROUTES = {\n  private: {\n    pathName: [PRIVATE],\n    absolutePath: `${PRIVATE}`,\n\n    cars: {\n      pathName: [CARS_BASE_ROUTE],\n      absolutePath: `${PRIVATE}/${CARS_BASE_ROUTE}`,\n\n\t  physicalCars: {\n\t    pathName: [PHYSICAL_CARS_PATH_NAME],\n\t    absolutePath: `${PRIVATE}/${CARS_BASE_ROUTE}/${PHYSICAL_CARS_PATH_NAME}`,\n\t  },\n\t  virtualCars: {\n\t    pathName: [VIRTUAL_CARS_PATH_NAME],\n\t    absolutePath: `${PRIVATE}/${CARS_BASE_ROUTE}/${VIRTUAL_CARS_PATH_NAME}`,\n\t  }\n    }\n  },\n\n  public: {\n    pathName: [PUBLIC],\n    absolutePath: `${PUBLIC}`,\n    \n    base: { // this will be used to represent preferred route in markup\n      pathName: [WELCOME],\n      absolutePath: `${PUBLIC}/${WELCOME}`,\n    },\n\n    welcome: {\n      pathName: [WELCOME],\n      absolutePath: `${PUBLIC}/${WELCOME}`,\n    },\n    login: {\n      pathName: [LOGIN],\n      absolutePath: `${PUBLIC}/${LOGIN}`,\n    },\n    forgotPassword: {\n      pathName: [FORGOT_PASSWORD],\n      absolutePath: `${PUBLIC}/${FORGOT_PASSWORD}`,\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-jsx\">  &lt;Route&gt;\n\t&lt;Route\n\t  path={ROUTES.private.cars.absolutePath}\n\t  element={&lt;MainApp /&gt;}\n\t&gt;\n\t  &lt;Route\n\t\tpath={ROUTES.private.cars.physicalCars.pathName}\n\t\telement={&lt;PhysicalCars /&gt;}\n\t  /&gt;\n\t  &lt;Route\n\t\tpath={ROUTES.private.cars.virtualCars.pathName}\n\t\telement={&lt;VirtualCars /&gt;}\n\t  /&gt;\n\t&lt;/Route&gt;\n  &lt;/Route&gt;\n</code></pre>\n",
      "id": 336
    },
    {
      "path": "vault/8_Misc/index.md",
      "url": "vault/8_Misc/index.html",
      "content": "# 8. Misc\nCreated Tue Jan 9, 2024 at 1:12 AM\n\nAny topic related to React may be added here, assuming it couldn't be added to others.\nSo:\n1. Testing\n2. Deployment\n3. Building apps\n4. Tools",
      "html": "<h1 id=\"8.-misc\">8. Misc <a class=\"heading-anchor-permalink\" href=\"#8.-misc\">#</a></h1>\n<p>Created Tue Jan 9, 2024 at 1:12 AM</p>\n<p>Any topic related to React may be added here, assuming it couldn’t be added to others.\nSo:</p>\n<ol>\n<li>Testing</li>\n<li>Deployment</li>\n<li>Building apps</li>\n<li>Tools</li>\n</ol>\n",
      "id": 337
    },
    {
      "path": "vault/9_React_Native/1_setup.md",
      "url": "vault/9_React_Native/1_setup.html",
      "content": "Follow React Native CLI steps from official site. Expo is good, but not enough for long term stuff.",
      "html": "<p>Follow React Native CLI steps from official site. Expo is good, but not enough for long term stuff.</p>\n",
      "id": 338
    },
    {
      "path": "vault/9_React_Native/2_styling/1_Tailwind_setup_in_RN.md",
      "url": "vault/9_React_Native/2_styling/1_Tailwind_setup_in_RN.html",
      "content": "# Tailwind setup in RN\nCreated Wednesday 6 September 2023\n\n## Library (s) to use\n1. [NativeWind](https://www.nativewind.dev/) - simplest. code stays the same as web. `className` prop with string.\n2. [twrnc](https://www.npmjs.com/package/twrnc) - also good, but syntax is a little more involved `<Text style={tw`text-red-600`} />`\n\n\n## NativeWind features\n App code (looks the same as web):\n```jsx\n<Text className=\"text-yoursystem-500\">\n  Hello bro (native wind) {new Date().toLocaleTimeString()}\n</Text>\n<Text className=\"text-danger-500\">\n  Hello bro (native wind red) {new Date().toLocaleTimeString()}\n</Text>\n```\nClaimed features:\n- Works on all RN platforms, uses the best style system for **each platform**.\n- Uses the Tailwind CSS compiler\n- Styles are computed at build time\n- Small runtime keeps your components fast\n- Babel plugin for simple setup and improving **intellisense** support. *checked: works!*\n- Respects all **tailwind.config.js** settings, including themes, custom values, plugins. *checked: works!*\n- dark mode / arbitrary classes / media queries\n- **pseudo classes** - hover / focus / active on compatible components (docs). *checked: works!*\n- **styling based on parent state** - automatically style children based upon parent pseudo classes (docs)\n- children styles - create simple layouts based upon parent class\n\n\n## Arbitrary values in Nativewind\nFor arbitrary values - colors like `text-[red]` doesn't work, but sizing like `w-[100px]` does work. This is practically fine, since color system is a much \"visible\" thing than spacing, and so, is usually enforced more strictly in the design system.\n\nWait, `text-[#ff0000]` does work (`text-[red]` doesn't). FIXME (why?)\n\n\n## Setup for NativeWind\n- Follow the [quickstart](https://www.nativewind.dev/quick-starts/react-native-cli) steps.\n- In `tailwind.config.js`, replace the first (commented import) by this:\n  ```js\n  /** @type {import('tailwindcss').Config} */ // remove\n  const defaultTheme = require(\"tailwindcss/defaultTheme\"); // add\n  ```\n- Tailwind config properties work like web - colors, fonts etc.\n\n\n## Common problems and fixes\n1. \"process(cb)\" issue - two steps here:\n\t1. Lower the version to 3.2.2 [StackOverflow](https://stackoverflow.com/a/76700786/11392807)\n\t2. If the issue persists, a restart will fix.",
      "html": "<h1 id=\"tailwind-setup-in-rn\">Tailwind setup in RN <a class=\"heading-anchor-permalink\" href=\"#tailwind-setup-in-rn\">#</a></h1>\n<p>Created Wednesday 6 September 2023</p>\n<h2 id=\"library-(s)-to-use\">Library (s) to use <a class=\"heading-anchor-permalink\" href=\"#library-(s)-to-use\">#</a></h2>\n<ol>\n<li><a href=\"https://www.nativewind.dev/\">NativeWind</a> - simplest. code stays the same as web. <code>className</code> prop with string.</li>\n<li><a href=\"https://www.npmjs.com/package/twrnc\">twrnc</a> - also good, but syntax is a little more involved <code>&lt;Text style={tw</code>text-red-600<code>} /&gt;</code></li>\n</ol>\n<h2 id=\"nativewind-features\">NativeWind features <a class=\"heading-anchor-permalink\" href=\"#nativewind-features\">#</a></h2>\n<p>App code (looks the same as web):</p>\n<pre><code class=\"language-jsx\">&lt;Text className=&quot;text-yoursystem-500&quot;&gt;\n  Hello bro (native wind) {new Date().toLocaleTimeString()}\n&lt;/Text&gt;\n&lt;Text className=&quot;text-danger-500&quot;&gt;\n  Hello bro (native wind red) {new Date().toLocaleTimeString()}\n&lt;/Text&gt;\n</code></pre>\n<p>Claimed features:</p>\n<ul>\n<li>Works on all RN platforms, uses the best style system for <strong>each platform</strong>.</li>\n<li>Uses the Tailwind CSS compiler</li>\n<li>Styles are computed at build time</li>\n<li>Small runtime keeps your components fast</li>\n<li>Babel plugin for simple setup and improving <strong>intellisense</strong> support. <em>checked: works!</em></li>\n<li>Respects all <strong>tailwind.config.js</strong> settings, including themes, custom values, plugins. <em>checked: works!</em></li>\n<li>dark mode / arbitrary classes / media queries</li>\n<li><strong>pseudo classes</strong> - hover / focus / active on compatible components (docs). <em>checked: works!</em></li>\n<li><strong>styling based on parent state</strong> - automatically style children based upon parent pseudo classes (docs)</li>\n<li>children styles - create simple layouts based upon parent class</li>\n</ul>\n<h2 id=\"arbitrary-values-in-nativewind\">Arbitrary values in Nativewind <a class=\"heading-anchor-permalink\" href=\"#arbitrary-values-in-nativewind\">#</a></h2>\n<p>For arbitrary values - colors like <code>text-[red]</code> doesn’t work, but sizing like <code>w-[100px]</code> does work. This is practically fine, since color system is a much “visible” thing than spacing, and so, is usually enforced more strictly in the design system.</p>\n<p>Wait, <code>text-[#ff0000]</code> does work (<code>text-[red]</code> doesn’t). FIXME (why?)</p>\n<h2 id=\"setup-for-nativewind\">Setup for NativeWind <a class=\"heading-anchor-permalink\" href=\"#setup-for-nativewind\">#</a></h2>\n<ul>\n<li>Follow the <a href=\"https://www.nativewind.dev/quick-starts/react-native-cli\">quickstart</a> steps.</li>\n<li>In <code>tailwind.config.js</code>, replace the first (commented import) by this:<pre><code class=\"language-js\">/** @type {import('tailwindcss').Config} */ // remove\nconst defaultTheme = require(&quot;tailwindcss/defaultTheme&quot;); // add\n</code></pre>\n</li>\n<li>Tailwind config properties work like web - colors, fonts etc.</li>\n</ul>\n<h2 id=\"common-problems-and-fixes\">Common problems and fixes <a class=\"heading-anchor-permalink\" href=\"#common-problems-and-fixes\">#</a></h2>\n<ol>\n<li>“process(cb)” issue - two steps here:\n<ol>\n<li>Lower the version to 3.2.2 <a href=\"https://stackoverflow.com/a/76700786/11392807\">StackOverflow</a></li>\n<li>If the issue persists, a restart will fix.</li>\n</ol>\n</li>\n</ol>\n",
      "id": 339
    },
    {
      "path": "vault/9_React_Native/3_Basics.md",
      "url": "vault/9_React_Native/3_Basics.html",
      "content": "- Props work the same\n- Redux (including RTK) works just as web\n- Hooks work\n- Use bridge components (abstract - View, Text) instead of platform specific (div, View).\n\nadd more stuff from [resource itine - Ashish](/home/4_resource_itineraries/3_Ashish_rn/1_first_hour.md)",
      "html": "<ul>\n<li>Props work the same</li>\n<li>Redux (including RTK) works just as web</li>\n<li>Hooks work</li>\n<li>Use bridge components (abstract - View, Text) instead of platform specific (div, View).</li>\n</ul>\n<p>add more stuff from <a href=\"/home/4_resource_itineraries/3_Ashish_rn/1_first_hour.html\">resource itine - Ashish</a></p>\n",
      "id": 340
    }
  ]
}