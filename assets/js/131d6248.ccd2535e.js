"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[856],{9613:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var a=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),m=n,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return r?a.createElement(h,o(o({ref:t},u),{},{components:r})):a.createElement(h,o({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},957:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=r(1163),n=(r(9496),r(9613));const i={},o="230. Core Redux",s={unversionedId:"home/resource_itineraries/React_the_complete_guide/Redux/Core_Redux",id:"home/resource_itineraries/React_the_complete_guide/Redux/Core_Redux",title:"230. Core Redux",description:"Created Friday 29 July 2022",source:"@site/docs/home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/230_Core_Redux.md",sourceDirName:"home/4_resource_itineraries/2_React_the_complete_guide/18_Redux",slug:"/home/resource_itineraries/React_the_complete_guide/Redux/Core_Redux",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Redux/Core_Redux",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/home/4_resource_itineraries/2_React_the_complete_guide/18_Redux/230_Core_Redux.md",tags:[],version:"current",sidebarPosition:230,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"229. How Redux works",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Redux/How_Redux_works"},next:{title:"231. Redux with React",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Redux/Redux_with_React"}},c={},l=[{value:"Constructs",id:"constructs",level:4},{value:"Details",id:"details",level:4},{value:"Code sample",id:"code-sample",level:4}],u={toc:l},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"230-core-redux"},"230. Core Redux"),(0,n.kt)("p",null,"Created Friday 29 July 2022"),(0,n.kt)("p",null,'Core Redux is the npm package "redux".\nCode: ',(0,n.kt)("a",{parentName:"p",href:"https://github.com/exemplar-codes/redux-demo"},"https://github.com/exemplar-codes/redux-demo")),(0,n.kt)("h4",{id:"constructs"},"Constructs"),(0,n.kt)("p",null,"There are 4 constructs in core Redux:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Store"),(0,n.kt)("li",{parentName:"ol"},"Reducer"),(0,n.kt)("li",{parentName:"ol"},"Subscribers, if any."),(0,n.kt)("li",{parentName:"ol"},"Dispatch calls")),(0,n.kt)("h4",{id:"details"},"Details"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Reducer"),' - this is a function that takes in 2 parameters, latest state and something called "action". The "action" is the same as argument passed to the dispatch function. It must must return the new state. Note:'),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"DO NOT mutate the state directly, this can cause unforeseen bugs. Instead return a copy of the new state."),(0,n.kt)("li",{parentName:"ol"},"It must return the complete state, as redux ",(0,n.kt)("em",{parentName:"li"},"will not")," merge the returned object with the state, i.e. behaves exactly like ",(0,n.kt)("inlineCode",{parentName:"li"},"React.useState"),"."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Store")," - this is created using ",(0,n.kt)("inlineCode",{parentName:"p"},"redux.createStore(reducerFunc)"),", takes reducer as the first argument. It has the following attributes:"),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"store.latestState()")," - latest snapshot of the store.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"store.dispatch")," - can dispatch to cause store mutation")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"store.subscribe(callback)")," - subscribe to the store via callback."),(0,n.kt)("p",{parentName:"li"},"Store initialization is not a part of core Redux. Store initialization is done indirectly by calling the reducer when the store is first created, so initialization logic is part of the reducer. "),(0,n.kt)("p",{parentName:"li"},'Note: For this first reducer call, "action" argument is generated by Redux, and state is ',(0,n.kt)("inlineCode",{parentName:"p"},"undefined"),". Because state is ",(0,n.kt)("inlineCode",{parentName:"p"},"undefined")," only for the first time, store initialization can be done by using a default argument in the reducer. Like so:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const initialState = {count: 0};\nconst reducer = (state=initialState, action) => {};\n"))))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Subscribers")," - callbacks without any parameter. Subscribed using ",(0,n.kt)("inlineCode",{parentName:"p"},"store.subscribe"),", triggered on store change. Subscriptions are optional. There can be multiple subscriptions.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Dispatch")," call - using ",(0,n.kt)("inlineCode",{parentName:"p"},"store.dispatch"),', the first argument (aka "action") will be made available as-is to the reducer as its second param. The "action" may be of any data type, but it is generally an object carrying a "type" string field and an optional "payload" variable.'))),(0,n.kt)("h4",{id:"code-sample"},"Code sample"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const {createStore} from 'redux';\n\nconst initialState = {count: 0, showCount: true}; // 0 initialization\n\nconst reducer = (state = initalState, action) => { // 1. Reducer\n    switch(action.type) {\n        case 'INCREMENT':\n            return {...state, count: state.count + 1};\n            break;\n            \n        case 'DECREMENT':\n            return {...state, count: state.count - 1};\n            break;\n            \n        case 'INCREASE_BY':\n            return {...state, count: state.count + action.delta};\n            break;\n            \n        case 'TOGGLE':\n            return {...state, showCount: !state.showCount};\n            break;\n    }\n\n    return state; // works for both initialization and wrong dispatch\n}\n    \nconst store = createStore(reducer); // 2. Store creation\n\nstore.dispatch({type: 'INCREMENT'}); // 3. Dispatch\nstore.dispatch({type: 'INCREASE_BY', delta: 20});\n\n\nfunction subscriberCallback = () => console.log('Store mutated!');\n\nstore.subscribe(subscriberCallback); // 4. subscription\n")))}d.isMDXComponent=!0}}]);