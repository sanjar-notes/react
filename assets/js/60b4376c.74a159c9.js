"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[5283],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>v});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,v=c["".concat(l,".").concat(m)]||c[m]||p[m]||o;return n?a.createElement(v,i(i({ref:t},d),{},{components:n})):a.createElement(v,i({ref:t},d))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(1163),r=(n(9496),n(9613));const o={},i="4. Two way Binding",s={unversionedId:"vault/State/Two_way_binding",id:"vault/State/Two_way_binding",title:"4. Two way Binding",description:"Created Monday 07 February 2022",source:"@site/docs/vault/4_State/4_Two_way_binding.md",sourceDirName:"vault/4_State",slug:"/vault/State/Two_way_binding",permalink:"/reactjs-notes/docs/vault/State/Two_way_binding",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/vault/4_State/4_Two_way_binding.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"3. Working with multiple states",permalink:"/reactjs-notes/docs/vault/State/Working_with_multiple_states"},next:{title:"5. Lifting state up",permalink:"/reactjs-notes/docs/vault/State/Lifting_state_up"}},l={},u=[{value:"Why",id:"why",level:4},{value:"How",id:"how",level:4}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"4-two-way-binding"},"4. Two way Binding"),(0,r.kt)("p",null,"Created Monday 07 February 2022"),(0,r.kt)("h4",{id:"why"},"Why"),(0,r.kt)("p",null,"In forms, we usually need to save the state to then do a PUT/PATCH call to the server asynchronously. This is easily done using ",(0,r.kt)("inlineCode",{parentName:"p"},"useState"),". But how do we reset inputs to their default value (or blank)."),(0,r.kt)("p",null,"Binding state to change in input is a binding. But we can also bind the input attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to the state. This way, when we clear the state, the inputs are also reset, on submission. This is a ",(0,r.kt)("strong",{parentName:"p"},"two way binding"),". And it's mostly used in forms."),(0,r.kt)("h4",{id:"how"},"How"),(0,r.kt)("p",null,"Here's a component that uses two way binding:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { useState } from "react";\n\nimport "./ExpenseForm.css";\n\nfunction ExpenseForm() {\n  const [enteredTitle, setEnteredTitle] = useState("");\n  const [enteredAmount, setEnteredAmount] = useState("");\n  const [enteredDate, setEnteredDate] = useState("");\n\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n  };\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n  };\n\n  const submitHandler = (event) => {\n    // this is called when submit is clicked\n    event.preventDefault(); // prevent default submit\n\n    // entered data is saved\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    console.log(expenseData);\n\n    // clearing/restting the input fields\n    setEnteredTitle("");\n    setEnteredAmount("");\n    setEnteredDate("");\n  };\n\n  return (\n    <form action="POST" onSubmit={submitHandler}>\n      <div className="new-expense__controls">\n        <div className="new-expense__control">\n          <label htmlFor="title">Title</label>\n          <input\n            type="text"\n            name="title"\n            value={enteredTitle} // for two way binding\n            onChange={titleChangeHandler}\n          />\n        </div>\n\n        <div className="new-expense__control">\n          <label htmlFor="amount">Amount</label>\n          <input\n            type="number"\n            name="amount"\n            min="0.01"\n            step="0.01"\n            value={enteredAmount} // for two way binding\n            onChange={amountChangeHandler}\n          />\n        </div>\n\n        <div className="new-expense__control">\n          <label htmlFor="date">Date</label>\n          <input\n            type="date"\n            name="date"\n            min="2019-01-01"\n            max="2022-12-31"\n            value={enteredDate} // for two way binding\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className="new-expense__actions">\n        <button type="submit">Add Expense</button>\n      </div>\n    </form>\n  );\n}\n\nexport default ExpenseForm;\n')),(0,r.kt)("p",null,"As said, it's quite useful in forms."))}p.isMDXComponent=!0}}]);