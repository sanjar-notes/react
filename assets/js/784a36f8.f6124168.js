"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[5161],{9613:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(a),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1515:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(1163),r=(a(9496),a(9613));const o={},i="2. State using useState hook",l={unversionedId:"vault/State/2_2_State_using_useState_hook",id:"vault/State/2_2_State_using_useState_hook",title:"2. State using useState hook",description:"Created Saturday 24 January 2022",source:"@site/docs/vault/4_State/2_2_State_using_useState_hook.md",sourceDirName:"vault/4_State",slug:"/vault/State/2_2_State_using_useState_hook",permalink:"/docs/vault/State/2_2_State_using_useState_hook",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/vault/4_State/2_2_State_using_useState_hook.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2.1. What is state",permalink:"/docs/vault/State/2_1_What_is_state"},next:{title:"1. React lifecycle",permalink:"/docs/vault/Lifecycle_and_hooks/React_lifecycle"}},s={},c=[{value:"Why",id:"why",level:4},{value:"How",id:"how",level:4},{value:"What",id:"what",level:4},{value:"General algorithm for <code>useState</code>",id:"general-algorithm-for-usestate",level:6},{value:"Computation of initialState",id:"computation-of-initialstate",level:4}],u={toc:c},p="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2-state-using-usestate-hook"},"2. State using useState hook"),(0,r.kt)("p",null,"Created Saturday 24 January 2022"),(0,r.kt)("h4",{id:"why"},"Why"),(0,r.kt)("p",null,"This is an implementation of state, so that components are redrawn when state is mutated explicitly. Note that state remains detached from the component lifecycle."),(0,r.kt)("h4",{id:"how"},"How"),(0,r.kt)("p",null,"A life-cycle method (informally called a hook) is used. It is added to the component's code."),(0,r.kt)("p",null,"A variable is captured as state and managed by the hook.\nWhen an update call using the hook is made, the component is re-rendered. So UI is synced with the state."),(0,r.kt)("h4",{id:"what"},"What"),(0,r.kt)("p",null,"Here's the syntax:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Import ",(0,r.kt)("inlineCode",{parentName:"li"},"useState")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"react"),"."),(0,r.kt)("li",{parentName:"ol"},"Capture a variable using ",(0,r.kt)("inlineCode",{parentName:"li"},"useState"),", and also get back an updater function. Add this code in the component."),(0,r.kt)("li",{parentName:"ol"},"Update the state using the updater method.\nExample")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JSX"},"import React, { useState } from 'react';\n\nfunction MyComponent (props) {\n    const [title, setTitle] = useState(props.title);\n\n    // some code/event that fires setTitle\n    const clickHandler = () => {\n        setTitle(\"Updated!\"); // this sets the states and fires a re-render\n    }\n\n    return (<div>\n            ...\n            <button onClick = {clickHandler}> Click me </button>\n            ...\n            </div>);\n}\n")),(0,r.kt)("p",null,"Also see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/exemplar-codes/expense-tracker-react/commit/45d42efca9e80754120da43d5989c05519a2965f"},"project commit"),"."),(0,r.kt)("h6",{id:"general-algorithm-for-usestate"},"General algorithm for ",(0,r.kt)("inlineCode",{parentName:"h6"},"useState")),(0,r.kt)("p",null,"For the skeleton:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JSX"},"function MyComponent {\n    const [readVar, setVariable] = useState(capture_variable);\n    // some code that calls setVariable\n    // component code (JSX) returned.\n}\n")),(0,r.kt)("p",null,"is:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In the first pass:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"useState is initialized, state is set internally."),(0,r.kt)("li",{parentName:"ol"},"Read variable set to state."),(0,r.kt)("li",{parentName:"ol"},"Component is drawn."))),(0,r.kt)("li",{parentName:"ol"},"In the second pass:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"useState argument (initialization) is ignored."),(0,r.kt)("li",{parentName:"ol"},"State set to setState argument - setState is called from event/timer etc."),(0,r.kt)("li",{parentName:"ol"},"Read variable set to state."),(0,r.kt)("li",{parentName:"ol"},"Component is drawn."))),(0,r.kt)("li",{parentName:"ol"},"Step 2 repeats.\nNote: ",(0,r.kt)("inlineCode",{parentName:"li"},"const")," is OK for the read variable, because we never assign (",(0,r.kt)("inlineCode",{parentName:"li"},"="),") anything to it. It's changed internally.")),(0,r.kt)("h4",{id:"computation-of-initialstate"},"Computation of initialState"),(0,r.kt)("p",null,"If the initial state is a large computation, we would not want to include it in the component, because it would execute on every re-render. Instead, pass a function to ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," instead of the intial value. This function will only be run once (when the component first renders), and never again. This way the computation is done only once, as needed."))}d.isMDXComponent=!0}}]);