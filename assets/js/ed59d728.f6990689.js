"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[2968],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var a=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return r?a.createElement(h,i(i({ref:t},c),{},{components:r})):a.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},338:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=r(1163),n=(r(9496),r(9613));const o={},i="286. Working with Query Params",l={unversionedId:"home/resource_itineraries/React_the_complete_guide/MultiPage_SPA_React_Router/Working_with_Query_Params",id:"home/resource_itineraries/React_the_complete_guide/MultiPage_SPA_React_Router/Working_with_Query_Params",title:"286. Working with Query Params",description:"Created Saturday 01 October 2022",source:"@site/docs/home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/286_Working_with_Query_Params.md",sourceDirName:"home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router",slug:"/home/resource_itineraries/React_the_complete_guide/MultiPage_SPA_React_Router/Working_with_Query_Params",permalink:"/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/MultiPage_SPA_React_Router/Working_with_Query_Params",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/home/4_resource_itineraries/2_React_the_complete_guide/20_MultiPage_SPA_React_Router/286_Working_with_Query_Params.md",tags:[],version:"current",sidebarPosition:286,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"285. Prompt before navigation",permalink:"/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/MultiPage_SPA_React_Router/Prompt_before_navigation"},next:{title:"288. Writing more flexible Routing code",permalink:"/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/MultiPage_SPA_React_Router/Writing_more_flexible_Routing_code"}},s={},u=[{value:"Why",id:"why",level:2},{value:"How",id:"how",level:2},{value:"What",id:"what",level:2},{value:"1. Reading query params",id:"1-reading-query-params",level:3},{value:"2. Writing to query params",id:"2-writing-to-query-params",level:3}],c={toc:u},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"286-working-with-query-params"},"286. Working with Query Params"),(0,n.kt)("p",null,"Created Saturday 01 October 2022"),(0,n.kt)("p",null,"Query params have no affect on matching criteria."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"They are however, ",(0,n.kt)("em",{parentName:"li"},"available")," via React Router."),(0,n.kt)("li",{parentName:"ul"},"In short, we need to ",(0,n.kt)("em",{parentName:"li"},"read")," qparams and do whatever we want with them. e.g. inside ",(0,n.kt)("inlineCode",{parentName:"li"},"useEffect"),", for example.")),(0,n.kt)("h2",{id:"why"},"Why"),(0,n.kt)("p",null,"Web standard."),(0,n.kt)("h2",{id:"how"},"How"),(0,n.kt)("p",null,"React Router can read/write query params. Implemented using the ",(0,n.kt)("inlineCode",{parentName:"p"},"location")," object, perhaps."),(0,n.kt)("h2",{id:"what"},"What"),(0,n.kt)("p",null,"Access them on and do what you want."),(0,n.kt)("h3",{id:"1-reading-query-params"},"1. Reading query params"),(0,n.kt)("p",null,"We need to read the URL and then parse the query string."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"We need to use ",(0,n.kt)("inlineCode",{parentName:"li"},"useLocation")," hook (provided by React Router) to read the URL."),(0,n.kt)("li",{parentName:"ol"},"Then we pass the query params from step 1 into native JS ",(0,n.kt)("inlineCode",{parentName:"li"},"URLSearchParams"),"'s constructor."),(0,n.kt)("li",{parentName:"ol"},"Finally we extract the query param value from the ",(0,n.kt)("inlineCode",{parentName:"li"},"URLSearchParams")," object using it's ",(0,n.kt)("inlineCode",{parentName:"li"},".get")," function.")),(0,n.kt)("p",null,"Note: accessed query params are strings."),(0,n.kt)("p",null,"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useLocation } from 'react-router-dom';\n\n// URI: ?age=2\nfunction App() {\n    const location = useLocation();\n\n    const qparams = new URLSearchParams(location.search);\n\n    const age = qparams.get('age'); // we get 'age' as string, '2'\n    \n    return <h1>Age: {age}</h1>;\n}\n")),(0,n.kt)("p",null,"Note that URL params are accessible before page load, since URL determine the page (even in case of React Router, FIXME: (really, always??))."),(0,n.kt)("h3",{id:"2-writing-to-query-params"},"2. Writing to query params"),(0,n.kt)("p",null,"We used the ",(0,n.kt)("inlineCode",{parentName:"p"},"useHistory")," hook to navigate to a different path.\nIt also works with query params.\nThere are two ways to do this:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Set the string yourself, i.e.",(0,n.kt)("inlineCode",{parentName:"li"},'history.push("..../?age=2")')," or inside ",(0,n.kt)("inlineCode",{parentName:"li"},"Link"),"(e.g. ",(0,n.kt)("inlineCode",{parentName:"li"},'Link to="/welcome?age=2">'),"."),(0,n.kt)("li",{parentName:"ul"},"Use ",(0,n.kt)("inlineCode",{parentName:"li"},"URLSearchParams")," to create the query string, and push the formed string to ",(0,n.kt)("inlineCode",{parentName:"li"},"history.push()"),". To create the query string, we also need the path, and so ",(0,n.kt)("inlineCode",{parentName:"li"},"useLocation")," is also needed.")),(0,n.kt)("p",null,"Example (manual string creation):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useHistory } from 'react-router-dom';\n\nfunction App() {\n    const history = useHistory();\n    \n    const onClickHandler = () => {\n        history.push(\"/list?sort=asc\");\n    };\n\n    return <button>Sort asc</button>; // clicking will add '?sort=asc' to the URL\n}\n")),(0,n.kt)("p",null,"Example (proper string creation):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useHistory, useLocation } from "react-router-dom";\n\nfunction App() {\n  const history = useHistory();\n  const location = useLocation();\n\n  const onClickHandler = () => {\n    const qParamBuilder = new URLSearchParams();\n    \n    qParamBuilder.set("avatarEmoji", "\ud83d\ude3c");\n\n    const updatedURL = location.pathname + "?" + qParamBuilder.toString();\n    \n    history.push(updatedURL); // clicking will add \'?sort=asc\' to the URL\n  };\n\n  return <button onClick={onClickHandler}>Sort asc</button>;\n}\n\n')),(0,n.kt)("p",null,"Note: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The page re-renders on navigate, even if only query params are being (potentially) updated."),(0,n.kt)("li",{parentName:"ul"},"We don't have to worry about ending ",(0,n.kt)("inlineCode",{parentName:"li"},"/"),". For the full URL, just add ",(0,n.kt)("inlineCode",{parentName:"li"},'"?"')," + ",(0,n.kt)("inlineCode",{parentName:"li"},"URLSearchParams.toString()"),".")),(0,n.kt)("p",null,"Concrete examples - ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/exemplar-codes/react-router-practice/commit/b21696a8fe8879ba6ef16e51cd16e263d70b55a3"},"read"),", ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/exemplar-codes/react-router-practice/commit/555aa078dab004549a4ce10683dd904a312664f6"},"write")))}m.isMDXComponent=!0}}]);