"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[1538],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var s=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return n?s.createElement(h,o(o({ref:t},p),{},{components:n})):s.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2274:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=n(1163),a=(n(9496),n(9613));const r={},o="166. Working with state and events",i={unversionedId:"home/resource_itineraries/React_the_complete_guide/Class_based_components/Working_with_state_and_events",id:"home/resource_itineraries/React_the_complete_guide/Class_based_components/Working_with_state_and_events",title:"166. Working with state and events",description:"Created Monday 15 July 2022",source:"@site/docs/home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/166_Working_with_state_and_events.md",sourceDirName:"home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components",slug:"/home/resource_itineraries/React_the_complete_guide/Class_based_components/Working_with_state_and_events",permalink:"/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/Class_based_components/Working_with_state_and_events",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/home/4_resource_itineraries/2_React_the_complete_guide/13_Class_based_components/166_Working_with_state_and_events.md",tags:[],version:"current",sidebarPosition:166,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"165. Adding a first class based component",permalink:"/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/Class_based_components/Adding_a_first_class_based_component"},next:{title:"167. Component life-cycles in class components",permalink:"/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/Class_based_components/Component_lifecycles_in_class_components"}},l={},c=[{value:"Learnings",id:"learnings",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"166-working-with-state-and-events"},"166. Working with state and events"),(0,a.kt)("p",null,"Created Monday 15 July 2022"),(0,a.kt)("p",null,"Goal: convert a functional stateful component from class based one."),(0,a.kt)("p",null,"Functional code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react';\nimport User from './User';\n\nimport classes from './Users.module.css';\n\nconst DUMMY_USERS = [\n  { id: 'u1', name: 'Max' },\n  { id: 'u2', name: 'Manuel' },\n  { id: 'u3', name: 'Julie' },\n];\n\nconst Users = () => {\n  const [showUsers, setShowUsers] = useState(true);\n\n  const toggleUsersHandler = () => {\n    setShowUsers((curState) => !curState);\n  };\n\n  const usersList = (\n    <ul>\n      {DUMMY_USERS.map((user) => (\n        <User key={user.id} name={user.name} />\n      ))}\n    </ul>\n  );\n\n  return (\n    <div className={classes.users}>\n      <button onClick={toggleUsersHandler}>\n        {showUsers ? 'Hide' : 'Show'} Users\n      </button>\n      {showUsers && usersList}\n    </div>\n  );\n};\n\nexport default Users;\n")),(0,a.kt)("p",null,"re-written as a class component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Component } from "react";\n\nclass Users extends Component {\n  constructor() {\n    super();\n    //   const [showUsers, setShowUsers] = useState(true);\n    this.state = { showUsers: true };\n  }\n  toggleUsersHandler() {\n    // setShowUsers((curState) => !curState);\n    this.setState((latestState) => {\n      return { showUsers: !latestState.showUsers };\n    });\n  }\n\n  render() {\n  // stateless helper functions/datum are OK inside render()\n    const usersList = (\n      <ul>\n        {DUMMY_USERS.map((user) => (\n          <User key={user.id} name={user.name} />\n        ))}\n      </ul>\n    );\n\n    return (\n      <div className={classes.users}>\n        {/* <button onClick={toggleUsersHandler}> */}\n        <button onClick={this.toggleUsersHandler.bind(this)}>\n          {this.state.showUsers ? "Hide" : "Show"} Users\n        </button>\n        {this.props.children}\n        {this.state.showUsers && usersList}\n      </div>\n    );\n  }\n}\n\nexport default Users;\n')),(0,a.kt)("h3",{id:"learnings"},"Learnings"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Callbacks")," should usually be made instance methods."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The proper way to specify an instance callback function is like this - ",(0,a.kt)("inlineCode",{parentName:"li"},"this.myFunction.bind(this)"),". e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"<button onClick={this.myFunc().bind(this)}>"),"."),(0,a.kt)("li",{parentName:"ul"},"Calling it does not require ",(0,a.kt)("inlineCode",{parentName:"li"},"bind"),", i.e. ",(0,a.kt)("inlineCode",{parentName:"li"},"this.myFunction()")," is OK."),(0,a.kt)("li",{parentName:"ul"},"We can still have helper functions/data in the render if we like, but callbacks involving state are better kept out of the ",(0,a.kt)("inlineCode",{parentName:"li"},"render")," method."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Working with ",(0,a.kt)("strong",{parentName:"p"},"state"),":"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},'Initialization - initialize an instance variable called "state", which must be an ',(0,a.kt)("inlineCode",{parentName:"p"},"object"),'. With class based components, all state variables are always kept in this object called "state".')),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Updation - to update state, use the React provided instance method called ",(0,a.kt)("inlineCode",{parentName:"p"},"setState")," which has two versions, just like the mutator provided by ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," hook:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Pass the new state ",(0,a.kt)("em",{parentName:"li"},"changes"),", as an object."),(0,a.kt)("li",{parentName:"ol"},"Pass a function that provides the latest state and returns the new state changes. This is used if the new state depends on the previous state.")),(0,a.kt)("p",{parentName:"li"},"Note: ",(0,a.kt)("inlineCode",{parentName:"p"},"setState")," automatically merges changes - we only pass the ",(0,a.kt)("em",{parentName:"p"},"changes")," to be made as an object, and React will automatically ",(0,a.kt)("em",{parentName:"p"},"merge")," the new state object with the existing state. i.e. the state is merged, not overridden. This is different from ",(0,a.kt)("inlineCode",{parentName:"p"},"useState"),", where state is overridden, instead of being merged.\nExample of state change:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"class MyComponent extends Component {\n    constructor() {\n        super();\n        this.state = {odd: false, color: 'blue'};\n    }\n\n    toggleParity() {\n        this.setState(prevState => {parity: !prevState.parity});\n    }\n    \n    render() { return <>...</>; }\n}\n"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Imported classes work exactly the same as functional components."))))}m.isMDXComponent=!0}}]);