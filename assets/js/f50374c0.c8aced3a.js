"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[2194],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,h=c["".concat(l,".").concat(m)]||c[m]||p[m]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8477:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var a=n(1163),i=(n(9496),n(9613));const r={},o="177. Sending a GET request",s={unversionedId:"home/resource_itineraries/React_the_complete_guide/Sending_HTTP_requests/Sending_a_GET_request",id:"home/resource_itineraries/React_the_complete_guide/Sending_HTTP_requests/Sending_a_GET_request",title:"177. Sending a GET request",description:"Created Monday 18 July 2022",source:"@site/docs/home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/177_Sending_a_GET_request.md",sourceDirName:"home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests",slug:"/home/resource_itineraries/React_the_complete_guide/Sending_HTTP_requests/Sending_a_GET_request",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Sending_HTTP_requests/Sending_a_GET_request",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/home/4_resource_itineraries/2_React_the_complete_guide/14_Sending_HTTP_requests/177_Sending_a_GET_request.md",tags:[],version:"current",sidebarPosition:177,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"176. Our starting App and backend",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Sending_HTTP_requests/Our_starting_App_and_backend"},next:{title:"178. Using async await",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Sending_HTTP_requests/Using_async_await"}},l={},u=[{value:"Why",id:"why",level:3},{value:"How",id:"how",level:3},{value:"What",id:"what",level:3},{value:"Extra",id:"extra",level:3},{value:"How to make requests with a time limit? (not discussed in course)",id:"how-to-make-requests-with-a-time-limit-not-discussed-in-course",level:4}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"177-sending-a-get-request"},"177. Sending a GET request"),(0,i.kt)("p",null,"Created Monday 18 July 2022"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/exemplar-codes/react-http-app"},"Section project")),(0,i.kt)("h3",{id:"why"},"Why"),(0,i.kt)("p",null,"To make send/receive data from/to the server. We usually use HTTP (or HTTPS)."),(0,i.kt)("h3",{id:"how"},"How"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A React app is fundamentally JavaScript code that runs in the browser, so we can use browser APIs (like ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch"),') as well as HTTP request libraries (like "axios").')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We'll be using the built in ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," because it's supported by all browsers, as of now. By default the HTTP verb is ",(0,i.kt)("inlineCode",{parentName:"p"},"GET"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Because network requests are handled asynchronously, we'll need to use state to cause a re-render when the request finishes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Keep an "isLoading" boolean state too. We set this to ',(0,i.kt)("inlineCode",{parentName:"p"},"true"),' on button click or App/component load, just before invoking the network request. We also add a conditional UI component for rendering "Loading..." text/animation. We set "isLoading" back to ',(0,i.kt)("inlineCode",{parentName:"p"},"false")," once the request is complete. This is a standard UX practice.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"There are two cases for fetching:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Without ",(0,i.kt)("inlineCode",{parentName:"li"},"useEffect")," - if fetch is triggered by the user or some other event."),(0,i.kt)("li",{parentName:"ul"},"With ",(0,i.kt)("inlineCode",{parentName:"li"},"useEffect")," - need to fetch on app/component load.")))),(0,i.kt)("p",null,"Example of GET request - without ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect"),", so using state:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react';\n\nconst App() {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(false);\n    \n    function getProfile() {\n        setLoading(true);\n        fetch('https://api.github.com/users/sanjarcode').then(response => response.json()).then(data => { setData(data); setLoading(false); });\n    }\n\n    return <>\n            <button onClick={getProfile}>Load Data</button>\n            <p>{loading && 'Loading...'}</p>\n            <p>{!loading && data && JSON.stringify(data)}</p>\n           </>;\n}\n\nexport default App;\n")),(0,i.kt)("p",null,"Observe the flow of this component:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Initially, both data and loading are false."),(0,i.kt)("li",{parentName:"ol"},"Upon button click, the ",(0,i.kt)("inlineCode",{parentName:"li"},"getProfile")," function is run. The first line (",(0,i.kt)("inlineCode",{parentName:"li"},"setLoading(true)"),") causes a re-render, but the function execution continues. The loading text is shown in this render."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"fetch")," runs, and if assuming it's a success, causes state changes ",(0,i.kt)("inlineCode",{parentName:"li"},"setData(data)")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"setLoading(false)"),". Both state changes are batched and the component re-renders. The loading text is now absent, and data is displayed.\nNote: The most important thing here is that the callback function ",(0,i.kt)("inlineCode",{parentName:"li"},"getProfile")," keeps running even if the component re-renders. This works because state mutators are guaranteed to remain unchanged on re-renders.")),(0,i.kt)("p",null,"Similarly, we can make requests on App/component load, without a user event. To do so, use ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect"),". Of course, we still need state to cause a re-render:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react';\n\nconst App() {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(false);\n    \n    function getProfile() {\n        setLoading(true);\n        fetch('https://api.github.com/users/sanjarcode').then(response => response.json()).then(data => { setData(data); setLoading(false); });\n    }\n\n    const dataSignature = JSON.stringify(data); // to avoid infinite re-renders\n    // need to stringify because object is a non-primitive data type\n    \n    useEffect(getProfile, [dataSignature]);\n    \n    return <>\n            <p>{loading && 'Loading...'}</p>\n            <p>{!loading && data && JSON.stringify(data)}</p>\n           </>;\n}\n\nexport default App;\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We can avoid do requests without state too, by using ",(0,i.kt)("inlineCode",{parentName:"li"},"ref"),"s to update DOM on network request success, but we won't be able to show \"Loading...\" UI, which is very important for UX. So it's better to use state.")),(0,i.kt)("h3",{id:"what"},"What"),(0,i.kt)("p",null,"To make network requests:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Use some state to render change on request success."),(0,i.kt)("li",{parentName:"ol"},'Also keep a "isLoading" variable, and use it to show some loading state, like an animation or text.'),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"useEffect")," if request must be sent on App/component load. For event triggered fetches (like button clicks), there's no need to use ",(0,i.kt)("inlineCode",{parentName:"li"},"useEffect"),", the event callback can do the network request.")),(0,i.kt)("h3",{id:"extra"},"Extra"),(0,i.kt)("h4",{id:"how-to-make-requests-with-a-time-limit-not-discussed-in-course"},"How to make requests with a time limit? (not discussed in course)"),(0,i.kt)("p",null,"Well, it is simple. Use ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/62082804/11392807"},"axios")," for straightforward code."),(0,i.kt)("p",null,"If using ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch"),", do this:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'Maintain an extra state "timeLimitExceeded" initialized to ',(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ol"},"Run the request (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"fetch"),") and a timer (with time limit) beside each other. Save this timer."),(0,i.kt)("li",{parentName:"ol"},'Nest this request and timer into a "void" promise, using ',(0,i.kt)("inlineCode",{parentName:"li"},"new Promise((resolve, reject) => ...)"),". Resolve inside the network request, and reject with an error inside the timer."),(0,i.kt)("li",{parentName:"ol"},'Mutate "timeLimitExceeded" state to ',(0,i.kt)("inlineCode",{parentName:"li"},"true")," in the catch clause of this promise. Add some UI element conditionally which displays an appropriate message."),(0,i.kt)("li",{parentName:"ol"},"In the ",(0,i.kt)("inlineCode",{parentName:"li"},"finally")," clause, clear the timeout, using ",(0,i.kt)("inlineCode",{parentName:"li"},"window.clearTimeout"),". Doing this to avoid running the timer if request was successful."),(0,i.kt)("li",{parentName:"ol"},"Nest this void promise inside a function."),(0,i.kt)("li",{parentName:"ol"},"Use this function in ",(0,i.kt)("inlineCode",{parentName:"li"},"useEffect")," or as an event callback.")),(0,i.kt)("p",null,"Code example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react';\n\nfunction TimedRequestApp() {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [timeLimitExceeded, setTimeLimitExceeded] = useState(false);\n\n    const maxTimeLimit = 10000; // in millisecond\n    \n    function requestHandler() {\n        setLoading(true);\n        setTimeLimitExceeded(false); // remove existing message\n\n        let limitTimer;\n        new Promise((resolve, reject) => {\n            limitTimer = setTimeout(() => {\n                reject(new Error('Time Limit Exceeded'));\n            }, maxTimeLimit)\n\n            fetch(url).then(response => response.json()).then(data => {\n                ...\n                // app-data logic\n                ...\n            \n                resolve();\n            })\n        })\n        .catch(() => setTimeLimitExceeded(true))\n        .finally(() => {\n            setLoading(false));\n            clearTimeout(limitTimer); // prevents execution if request successful\n        });\n    }\n    \n    return <>\n            <button onClick={requestHandler}>Load Data</button>\n            {loading && <p>Loading...</p>}\n            {timeLimitExceeded && <p>Time Limit Exceeded! Try again</p>}\n            {!loading && !timeLimitExceeded && data && JSON.stringify(data)}\n           </>;\n}\n\nexport default TimedRequestApp;\n")),(0,i.kt)("p",null,"Of course, we can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise.all"),"."))}p.isMDXComponent=!0}}]);