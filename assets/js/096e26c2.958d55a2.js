"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[8173],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",_={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,h=p["".concat(s,".").concat(d)]||p[d]||_[d]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6810:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>_,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=n(1163),r=(n(9496),n(9613));const i={},o="156. Prevent function re-evaluation with useCallback",c={unversionedId:"home/resource_itineraries/React_the_complete_guide/Behind_the_scenes_of_React_and_optimization_techniques/Prevent_function_re_creation_with_useCallback",id:"home/resource_itineraries/React_the_complete_guide/Behind_the_scenes_of_React_and_optimization_techniques/Prevent_function_re_creation_with_useCallback",title:"156. Prevent function re-evaluation with useCallback",description:"Created Sunday 10 July 2022",source:"@site/docs/home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/156_Prevent_function_re_creation_with_useCallback.md",sourceDirName:"home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques",slug:"/home/resource_itineraries/React_the_complete_guide/Behind_the_scenes_of_React_and_optimization_techniques/Prevent_function_re_creation_with_useCallback",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Behind_the_scenes_of_React_and_optimization_techniques/Prevent_function_re_creation_with_useCallback",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/home/4_resource_itineraries/2_React_the_complete_guide/12_Behind_the_scenes_of_React_and_optimization_techniques/156_Prevent_function_re_creation_with_useCallback.md",tags:[],version:"current",sidebarPosition:156,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"155. Preventing Unnecessary Re-Evaluations with React.memo()",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Behind_the_scenes_of_React_and_optimization_techniques/Preventing_Unnecessary_ReEvaluations_with_React_memo"},next:{title:"157. useCallback and its dependencies",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Behind_the_scenes_of_React_and_optimization_techniques/useCallback_and_its_dependencies"}},s={},l=[{value:"Situation - React.memo *generally fails for functions received as props",id:"situation---reactmemo-generally-fails-for-functions-received-as-props",level:2},{value:"Why",id:"why",level:2},{value:"How",id:"how",level:2},{value:"What",id:"what",level:2}],u={toc:l},p="wrapper";function _(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"156-prevent-function-re-evaluation-with-usecallback"},"156. Prevent function re-evaluation with useCallback"),(0,r.kt)("p",null,"Created Sunday 10 July 2022"),(0,r.kt)("h2",{id:"situation---reactmemo-generally-fails-for-functions-received-as-props"},"Situation - React.memo ","*","generally fails for functions received as props"),(0,r.kt)("p",null,"*","exceptions - function returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"useState"),", or functions that are not re-created on re-component evaluation."),(0,r.kt)("p",null,"Consider this UI tree:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useState } from "react";\n\nconst Button = React.memo((props) => {\n  console.log("Button ran");\n  return <button onClick={props.toggleShow}>Click me!</button>;\n}); // using React.memo\n\nconst App = () => {\n  const [show, setShow] = useState(true);\n\n  const toggleShow = () => setShow((prev) => !prev); // re-created on re-evaluation\n\n  return (\n    <>\n      {show && <p> Text visible </p>}\n      <Button toggleShow={toggleShow} />\n    </>\n  );\n};\n')),(0,r.kt)("p",null,"Will the ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," be re-evaluated when it is clicked here? Yes, it will be, even if we use ",(0,r.kt)("inlineCode",{parentName:"p"},"React.memo"),". This is because the prop passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," changes. Does it really? Yes, it is re-created on each re-evaluation in the ",(0,r.kt)("inlineCode",{parentName:"p"},"App"),". Reason: functions are not primitive values, and therefore a change in reference (address in memory) means non-equality even if the values are the same. Some examples of this phenomenon:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"[1, 2, 3] === [1, 2, 3] // false, non-primitive variables are compared by address, in addition to value.\nfalse === false // true, primitive values are compared by value.\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The function returned by ",(0,r.kt)("inlineCode",{parentName:"li"},"useState")," is guaranteed to remain constant irrespective of re-renders.")),(0,r.kt)("h2",{id:"why"},"Why"),(0,r.kt)("p",null,"The situation discussed above makes it impossible to use ",(0,r.kt)("inlineCode",{parentName:"p"},"React.memo")," with usual in-component created functions (a.k.a callbacks)."),(0,r.kt)("h2",{id:"how"},"How"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"React solves this problem by providing a hook that maintains the referential integrity of the callbacks between re-evaluations - the ",(0,r.kt)("inlineCode",{parentName:"li"},"useCallback")," hook."),(0,r.kt)("li",{parentName:"ul"},"To use it - wrap the callback function in ",(0,r.kt)("inlineCode",{parentName:"li"},"useCallback"),", along with a dependency array (empty array is fine too). The callback used in the code example on this page can be re-written as:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const toggleShow = useCallback(() => setShow(prev => !prev), []);\n"))),(0,r.kt)("li",{parentName:"ul"},"If anything in the dependency array changes, the callback function will be re-created on re-evaluation."),(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"useCallback")," is used, React stores the callback function internally and keeps it independent of function re-evaluation, of course assuming that nothing in the dependency array changes.")),(0,r.kt)("h2",{id:"what"},"What"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"useCallback")," to make ",(0,r.kt)("inlineCode",{parentName:"p"},"React.memo")," effective."))}_.isMDXComponent=!0}}]);