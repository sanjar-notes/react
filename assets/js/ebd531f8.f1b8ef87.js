"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[6019],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3150:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(1163),r=(n(9496),n(9613));const o={},l="1. Events and handlers in React",i={unversionedId:"vault/State/Events_and_handlers_in_React",id:"vault/State/Events_and_handlers_in_React",title:"1. Events and handlers in React",description:"Created Saturday 22 January 2022",source:"@site/docs/vault/4_State/1_Events_and_handlers_in_React.md",sourceDirName:"vault/4_State",slug:"/vault/State/Events_and_handlers_in_React",permalink:"/docs/vault/State/Events_and_handlers_in_React",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/vault/4_State/1_Events_and_handlers_in_React.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"4. PropTypes and defaultProps",permalink:"/docs/vault/styling,_props,_children/1_1_PropTypes_and_defaultProps"},next:{title:"3. Working with multiple states",permalink:"/docs/vault/State/Working_with_multiple_states"}},c={},s=[{value:"Why",id:"why",level:4},{value:"How",id:"how",level:4}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1-events-and-handlers-in-react"},"1. Events and handlers in React"),(0,r.kt)("p",null,"Created Saturday 22 January 2022"),(0,r.kt)("h4",{id:"why"},"Why"),(0,r.kt)("p",null,"We have to attach and detach listeners to elements in vanilla JavaScript, which is an imperative style of programming.\nBut React's philosophy is to be declarative first. So events are handled differently."),(0,r.kt)("h4",{id:"how"},"How"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All applicable events for different types of HTML elements are available as ",(0,r.kt)("inlineCode",{parentName:"li"},"onClick")," or something named similarly (",(0,r.kt)("inlineCode",{parentName:"li"},"on"),"+",(0,r.kt)("inlineCode",{parentName:"li"},"EventName")," in camelCase) in React. This way, no imperative ",(0,r.kt)("inlineCode",{parentName:"li"},"addEventListener")," have to be attached."),(0,r.kt)("li",{parentName:"ul"},"Note that the ",(0,r.kt)("inlineCode",{parentName:"li"},"onClick")," (or similar prop) should only indicate the function name, instead of the whole code or a function call. Code-logic (because it's not an expression) should remain de-coupled from the UI (JSX) code.\nExample:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JSX"},"function OurComponent () {\n    const clicked = () => { console.log('Clicked!!'); }; // de-coupled\n    return <div onClick={clicked}> Hello </div>;\n}\n")),(0,r.kt)("p",null,"FIXME: read and explain here if needed - ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/events.html"},"https://reactjs.org/docs/events.html")))}u.isMDXComponent=!0}}]);