"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[132],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(o,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(g,l(l({ref:t},c),{},{components:n})):r.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4934:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(1163),a=(n(9496),n(9613));const i={},l="390. Writing our first test",s={unversionedId:"home/resource_itineraries/React_the_complete_guide/Testing_React_Apps/Writing_our_first_test",id:"home/resource_itineraries/React_the_complete_guide/Testing_React_Apps/Writing_our_first_test",title:"390. Writing our first test",description:"Created Wednesday 4 January 2023",source:"@site/docs/home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/390_Writing_our_first_test.md",sourceDirName:"home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps",slug:"/home/resource_itineraries/React_the_complete_guide/Testing_React_Apps/Writing_our_first_test",permalink:"/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/Testing_React_Apps/Writing_our_first_test",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/home/4_resource_itineraries/2_React_the_complete_guide/26_Testing_React_Apps/390_Writing_our_first_test.md",tags:[],version:"current",sidebarPosition:390,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"389. Running a first test",permalink:"/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/Testing_React_Apps/Running_a_first_test"},next:{title:"391. Grouping tests together with test suites",permalink:"/reactjs-notes/docs/home/resource_itineraries/React_the_complete_guide/Testing_React_Apps/Grouping_tests_together_with_test_suites"}},o={},p=[{value:"How (constructs and intent)",id:"how-constructs-and-intent",level:2},{value:"Jest",id:"jest",level:3},{value:"RTL (React Testing Library)",id:"rtl-react-testing-library",level:3},{value:"What (details)",id:"what-details",level:2},{value:"Jest",id:"jest-1",level:3},{value:"RTL (React Testing Library)",id:"rtl-react-testing-library-1",level:3}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"390-writing-our-first-test"},"390. Writing our first test"),(0,a.kt)("p",null,"Created Wednesday 4 January 2023"),(0,a.kt)("p",null,"Advice: It's a good practice to write tests as close as possible to the actual code. Example - write tests for a button component in it's own file, instead of testing it in an integration/E2E/app wide test."),(0,a.kt)("h2",{id:"how-constructs-and-intent"},"How (constructs and intent)"),(0,a.kt)("h3",{id:"jest"},"Jest"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"test()")),' - basic testing unit where assertions are done. aka "test"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"expect()"))," - used for assertion."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"describe()")),' - nesting construct. aka "test suite". Not for asserting.')),(0,a.kt)("h3",{id:"rtl-react-testing-library"},"RTL (React Testing Library)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"render()"))," - renders components, virtually of course."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"screen()"))," - current state of the virtually rendered UI."),(0,a.kt)("li",{parentName:"ul"},"Inspectors are functions that grab elements from the virtual UI. They are of 3 types:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"get*"))," - get an element immediately. throws an error on not found. Maid - immediately get. Use - check existence. Example - ",(0,a.kt)("inlineCode",{parentName:"li"},"getByText"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"getAllByText"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"query*"))," - same as ",(0,a.kt)("inlineCode",{parentName:"li"},"*get")," except it doesn't throw an error on not found. Maid - ask politely. Use - check nonexistence."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"find*"))," - get element asynchronously (i.e. poll the UI until element is found), returns a promise for on found/not-found. Maid - go on a quest. Use - check eventual existence/nonexistence, e.g. list appears only when API call succeeds.")))),(0,a.kt)("h2",{id:"what-details"},"What (details)"),(0,a.kt)("h3",{id:"jest-1"},"Jest"),(0,a.kt)("p",null,"No need to import, as these are globally auto-loaded (thanks to ",(0,a.kt)("inlineCode",{parentName:"p"},"setupTests.js"),")."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"test"))),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Syntax - ",(0,a.kt)("inlineCode",{parentName:"p"},"test('some text', assertionCallback)"),". "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import HomePage from './some_path';\ntest('shows text hello on home page', () => {\n    // Arrange\n\n    // Act\n\n    // Assert, the focus of `test`\n});\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Default pass - A test with no assertions "passes" by default.'),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"test('some text here', () => {}); // pass\n\n// still, need to have both arguments.\ntest(); // fail\ntest('some text here'); // fail\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"expect"))),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Syntax - ",(0,a.kt)("inlineCode",{parentName:"p"},"expect(realValue).myMatcherHere(idealValue)"),". ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Argument may be of any type - a JS variable or UI element. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A matcher may have no argument.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Negative/complement  - ",(0,a.kt)("inlineCode",{parentName:"p"},"expect(realValue).not.myMatcherHere(idealValue)")," for complement. Example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// assert presence/existence\n// const helloElement = screen.getByText('Hello World!'); throws error\nconst helloElement = screen.getByText('Hello World!');\nexpect(helloElement).toBeInTheDocument();\n\n// assert absence\n// const helloElement = screen.getByText('Hello World!'); throws error\nconst byeElement = screen.queryByText('Bye World!');\nexpect(byeElement).not.toBeInTheDocument();\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"describe"))),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Syntax - ",(0,a.kt)("inlineCode",{parentName:"li"},"describe('text here', callbackFunc)")),(0,a.kt)("li",{parentName:"ul"},'Default pass - A suite with no assertions "passes" by default.',(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"describe('some text here', () => {}); // pass\n")))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    // still, need to have both arguments.\n    describe(); // fail\n    describe('some text here'); // fail\n    ```\n")),(0,a.kt)("h3",{id:"rtl-react-testing-library-1"},"RTL (React Testing Library)"),(0,a.kt)("p",null,"These need to be imported in each test file."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"render"))," - ",(0,a.kt)("inlineCode",{parentName:"li"},"render(<ComponentOrEquivalentJSX />)"),". Non default import from ",(0,a.kt)("inlineCode",{parentName:"li"},"@testing-library/react"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"screen"))," - ",(0,a.kt)("inlineCode",{parentName:"li"},"screen.inspectorFunc()"),". Non default import from ",(0,a.kt)("inlineCode",{parentName:"li"},"@testing-library/react"),"."),(0,a.kt)("li",{parentName:"ul"},"About inspectors:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"All inspectors have two modes -  return a single or multiple elements (as an array). e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"getByText")," returns a single element, whereas ",(0,a.kt)("inlineCode",{parentName:"li"},"getAllByText")," returns an array of elements. "),(0,a.kt)("li",{parentName:"ul"},"RTL will through an error if ",(0,a.kt)("inlineCode",{parentName:"li"},"getByText")," is used and there are multiple matches."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"*ByText"),"'s non-strict inspection - ",(0,a.kt)("inlineCode",{parentName:"li"},"*ByText")," takes an object as second argument where we can specify if we want to do an ",(0,a.kt)("inlineCode",{parentName:"li"},"exact")," match or not. e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"getByText('hello', {exact: false})"),". The default is ",(0,a.kt)("inlineCode",{parentName:"li"},"exact:true"),".")))))}u.isMDXComponent=!0}}]);