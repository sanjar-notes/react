"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[1399],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(9496);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,p=function(e,t){if(null==e)return{};var n,r,p={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(p[n]=e[n]);return p}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,p=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),y=p,m=u["".concat(i,".").concat(y)]||u[y]||d[y]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var a=n.length,o=new Array(a);o[0]=y;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:p,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},7926:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(1163),p=(n(9496),n(9613));const a={},o="4. PropTypes and defaultProps",s={unversionedId:"vault/styling,_props,_children/1_1_PropTypes_and_defaultProps",id:"vault/styling,_props,_children/1_1_PropTypes_and_defaultProps",title:"4. PropTypes and defaultProps",description:"Created Sunday 06 September 2020",source:"@site/docs/vault/3_styling,_props,_children/1_1_PropTypes_and_defaultProps.md",sourceDirName:"vault/3_styling,_props,_children",slug:"/vault/styling,_props,_children/1_1_PropTypes_and_defaultProps",permalink:"/docs/vault/styling,_props,_children/1_1_PropTypes_and_defaultProps",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/vault/3_styling,_props,_children/1_1_PropTypes_and_defaultProps.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2. Wrapper components",permalink:"/docs/vault/styling,_props,_children/Wrapper_components"},next:{title:"1. Events and handlers in React",permalink:"/docs/vault/State/Events_and_handlers_in_React"}},i={},l=[{value:"Why",id:"why",level:4},{value:"How",id:"how",level:4},{value:"What",id:"what",level:4},{value:"PropTypes",id:"proptypes",level:6},{value:"defaultProps",id:"defaultprops",level:6},{value:"Single child for wrapper",id:"single-child-for-wrapper",level:4}],c={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,p.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"4-proptypes-and-defaultprops"},"4. PropTypes and defaultProps"),(0,p.kt)("p",null,"Created Sunday 06 September 2020"),(0,p.kt)("h4",{id:"why"},"Why"),(0,p.kt)("p",null,"The props we use in React components are supposed to be of a certain type. But this is not indicated anywhere. This can cause wrong type of props to be received by the rendering component. To avoid this, we use the ",(0,p.kt)("inlineCode",{parentName:"p"},"prop-types")," npm library, which lets us created ",(0,p.kt)("inlineCode",{parentName:"p"},"console")," level error checks for the type of props received."),(0,p.kt)("p",null,"Note that we could use ",(0,p.kt)("inlineCode",{parentName:"p"},"TypeScript")," if we wanted to use a type for variables, but it is an overhead to use ",(0,p.kt)("inlineCode",{parentName:"p"},"TypeScript"),". ",(0,p.kt)("inlineCode",{parentName:"p"},"prop-types")," is a lighter solution for specifying types."),(0,p.kt)("p",null,"Also, sometimes we are supposed to receive a prop but it is not passed, this can break our component because of ",(0,p.kt)("inlineCode",{parentName:"p"},"undefined"),". To get rid of this, we can specify default values of the props, so errors like this are caught."),(0,p.kt)("h4",{id:"how"},"How"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"propTypes")," is a library.\n",(0,p.kt)("inlineCode",{parentName:"p"},"defaultProps")," are already included in ",(0,p.kt)("inlineCode",{parentName:"p"},"create-react-app")," projects."),(0,p.kt)("p",null,"It is to be noted that we are specifying props that are being received, not being sent. This is because sent ones are already known - they may be a prop or created just here."),(0,p.kt)("p",null,"Also, note that for both ",(0,p.kt)("inlineCode",{parentName:"p"},"propTypes")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"defaultProps"),", while receiving props, it does not matter if we use a props object or de-structure them. Just make sure the names of the receiving props are named correctly during specification."),(0,p.kt)("p",null,"During specification, both values are lowercase, follow component name and are plural. Like so:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-jsx"},"MyComponent.propTypes = { // lowercase start\n    name: PropTypes.string // capital here, coz it's a constant\n}\nMyComponent.defaultProps = {} //lowercase start\n")),(0,p.kt)("h4",{id:"what"},"What"),(0,p.kt)("h6",{id:"proptypes"},"PropTypes"),(0,p.kt)("p",null,"To use ",(0,p.kt)("inlineCode",{parentName:"p"},"propTypes"),", first install it in the project (",(0,p.kt)("inlineCode",{parentName:"p"},"npm i prop-types"),") and import it in the ",(0,p.kt)("em",{parentName:"p"},"receiving")," component."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-jsx"},"import PropTypes from 'prop-types'; // for using type constants, so capital\n")),(0,p.kt)("p",null,"To specify types, the syntax is:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-jsx"},"// receiving component file\n\nconst MyReceivingComponent = () => { ... } // component defintion\n// may be class or functional component\n\nMyReceivingComponent.propTypes = { // lowercase propTypes\n    name: PropTypes.string, // optional string\n    obj: PropTypes.object, // object\n    age: PropTypes.number, // optional number\n    rarr: PropTypes.array, // optional array\n    action: PropTypes.func.isRequired, // function and always required\n\n    numArr: PropTypes.arrayOf(PropTypes.number), // array of numbers\n    enumm: PropTypes.oneOf(['News', 'Photos', 'Game']) // enum - one of values\n    oneType: PropTypes.oneOfType([ // one of types\n        PropTypes.string,\n        PropTypes.number\n    ])\n    optionalShape: PropTypes.shape({ // object and it's minimalist shape. Can be nested. More name-value pairs could be added.\n        color: PropTypes.string,\n        fontSize: PropTypes.number\n    })\n    exactShape: PropTypes.exact({ // exact object, cannot have extra/less name value pairs\n        name: PropTypes.string,\n        fontSize: PropTypes.number,\n        id: PropTypes.string,\n    })\n    anyTypeProp: PropTypes.any, // any data type is acceptable\n\n    element: PropTypes.element, // a React element\n    specificElement: PropTypes.MyComponent, // a React element of type MyComponent\n    renderableNode: PropTypes.node, // anything that may be rendered directly\n\n    genericType: PropTypes.instanceOf(ClassName), // prop is an object of type ClassName\n}\n")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"isRequired")," for ",(0,p.kt)("inlineCode",{parentName:"li"},"propTypes")," entries is appended to the last to indicate the prop should always be received, i.e. it cannot be blank."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"isRequired")," and default value are mutually exclusive - If a prop is tagged ",(0,p.kt)("inlineCode",{parentName:"li"},"isRequired"),", a default value for it makes no sense, and should be omitted. If it's not ",(0,p.kt)("inlineCode",{parentName:"li"},"isRequired"),", a default value should always be specified."),(0,p.kt)("li",{parentName:"ul"},"Only ",(0,p.kt)("inlineCode",{parentName:"li"},"PropTypes.bool")," (",(0,p.kt)("inlineCode",{parentName:"li"},"boolean"),") and ",(0,p.kt)("inlineCode",{parentName:"li"},"PropTypes.func")," (",(0,p.kt)("inlineCode",{parentName:"li"},"function"),") are named unusually."),(0,p.kt)("li",{parentName:"ul"},"We can combine the types of values and make complex types using ",(0,p.kt)("inlineCode",{parentName:"li"},"PropType"),"."),(0,p.kt)("li",{parentName:"ul"},"For more types, see ",(0,p.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes"},"https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes"))),(0,p.kt)("hr",null),(0,p.kt)("h6",{id:"defaultprops"},"defaultProps"),(0,p.kt)("p",null,"The syntax for this is:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-jsx"},'// MyReceivingComponent is defined, class or functional component\n\nMyReceivingComponent.defaultProps = {\n    prop1: "Default val",\n    propObject: {}, // an empty object\n}\n')),(0,p.kt)("p",null,"That' all."),(0,p.kt)("h4",{id:"single-child-for-wrapper"},"Single child for wrapper"),(0,p.kt)("p",null,"To specify that a single component is wrapper around our component (see ",(0,p.kt)("a",{parentName:"p",href:"/docs/vault/styling,_props,_children/Wrapper_components"},"3_Wrapper_components"),"), do this:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-jsx"},"MyComponent.propTypes = {\n    children: propTypes.element.isRequired,\n}\n")))}d.isMDXComponent=!0}}]);