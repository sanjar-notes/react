"use strict";(self.webpackChunkreactjs_notes_docu=self.webpackChunkreactjs_notes_docu||[]).push([[5087],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9867:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(1163),i=(n(9496),n(9613));const o={},r="296. Adding Lazy loading",l={unversionedId:"home/resource_itineraries/React_the_complete_guide/Deploying_React_apps/Adding_Lazy_loading",id:"home/resource_itineraries/React_the_complete_guide/Deploying_React_apps/Adding_Lazy_loading",title:"296. Adding Lazy loading",description:"Created Saturday 29 October 2022",source:"@site/docs/home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/296_Adding_Lazy_loading.md",sourceDirName:"home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps",slug:"/home/resource_itineraries/React_the_complete_guide/Deploying_React_apps/Adding_Lazy_loading",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Deploying_React_apps/Adding_Lazy_loading",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/home/4_resource_itineraries/2_React_the_complete_guide/21_Deploying_React_apps/296_Adding_Lazy_loading.md",tags:[],version:"current",sidebarPosition:296,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"295. Deployment steps",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Deploying_React_apps/Deployment_steps"},next:{title:"297. Building the code for production",permalink:"/docs/home/resource_itineraries/React_the_complete_guide/Deploying_React_apps/Building_the_code_for_production"}},p={},s=[{value:"Why",id:"why",level:2},{value:"How",id:"how",level:2},{value:"What",id:"what",level:2},{value:"Advice",id:"advice",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"296-adding-lazy-loading"},"296. Adding Lazy loading"),(0,i.kt)("p",null,"Created Saturday 29 October 2022"),(0,i.kt)("h2",{id:"why"},"Why"),(0,i.kt)("p",null,"Splitting code according to routes/pages/section or otherwise to reduce initial bundle size."),(0,i.kt)("p",null,'In other words, load stuff only when it\'s needed, i.e. lazy loading. This is implemented via "code-splitting".'),(0,i.kt)("h2",{id:"how"},"How"),(0,i.kt)("p",null,"There are many constructs to specify lazy-loading in HTML, CSS, JavaScript and React."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In React, entities (components, images, etc) are ",(0,i.kt)("em",{parentName:"li"},"loaded")," using ",(0,i.kt)("inlineCode",{parentName:"li"},"import"),". And because the ",(0,i.kt)("inlineCode",{parentName:"li"},"import"),'s are usually done at file-level, outside of any function, it is effectively "eager loading" that we\'re doing.'),(0,i.kt)("li",{parentName:"ul"},"Conditional rendering of components, using bools or via routing doesn't help here, because even if a component (the function) isn't going to be rendered, ",(0,i.kt)("inlineCode",{parentName:"li"},"import"),"ing it will execute contents of it's file, thereby executing it's ",(0,i.kt)("inlineCode",{parentName:"li"},"import"),"s. This cascades further to all its dependencies. Example (",(0,i.kt)("inlineCode",{parentName:"li"},"NestedComponent")," is not rendered but still loaded`):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import NestedComponent from '...'; // crux of the problem.\n\nexport default function App() {\n  const isFetching = ...;\n  \n  return \n    <>\n      ...\n      {!isFetching && <NestedComponent />}\n      ...\n    </>;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This cascading effect is useful though, because if loading of a component is prevented, all it's dependencies are also prevented from loading.")),(0,i.kt)("p",null,"To solve this issue, we need to prevent native ",(0,i.kt)("inlineCode",{parentName:"p"},"import"),' of entities we wish to load "lazily".'),(0,i.kt)("h2",{id:"what"},"What"),(0,i.kt)("p",null,"To specify lazy loading in React, replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," like so."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// import NestedComponent from '.../path';\nconst NestedComponent = React.lazy(() => import('.../path'));\n")),(0,i.kt)("p",null,"Doing this alone won't work. Reason: Dynamic import, i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"import()"),", returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),' and so can be in the "pending" state.'),(0,i.kt)("p",null,"Consequently, we need to provide a fallback UI (e.g. a loading spinner) which will be rendered when the lazily loaded component is being downloaded."),(0,i.kt)("p",null,"All this is done via the ",(0,i.kt)("inlineCode",{parentName:"p"},"Suspense")," component provided by React, which accepts the fallback UI via the ",(0,i.kt)("inlineCode",{parentName:"p"},"fallback")," prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const NestedComponent = React.lazy(() => import('.../path'));\n\nexport default function App() {\n  const isFetching = ...;\n  \n  return \n    <>\n      ...\n      {!isFetching && (\n        <Suspense fallback={<div>Loading...</div>}>\n          <NestedComponent />\n        </Suspense>\n      )}\n      ...\n    </>;\n}\n")),(0,i.kt)("p",null,"One can lazy load any number of entities."),(0,i.kt)("p",null,"About ",(0,i.kt)("inlineCode",{parentName:"p"},"Suspense"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It's used in the JSX of a component that uses lazy loaded entities."),(0,i.kt)("li",{parentName:"ul"},"The lazy component needs to be nested within it. It can be used at depth w.r.t the lazy component, either as a parent or ancestor.")),(0,i.kt)("p",null,"FIXME, questions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"There's no way to associate ",(0,i.kt)("inlineCode",{parentName:"li"},"Suspense")," with a lazy component, even if there are multiple lazy dependencies. In other words, each JSX block effectively has just one ",(0,i.kt)("inlineCode",{parentName:"li"},"Suspense"),", and thus, custom fallback UIs for each cannot be specified."),(0,i.kt)("li",{parentName:"ol"},"Is their a way to associate a ",(0,i.kt)("inlineCode",{parentName:"li"},"Suspense")," with lazy entity?")),(0,i.kt)("h2",{id:"advice"},"Advice"),(0,i.kt)("p",null,"Lazy loading is optional for small apps, but it's almost compulsory for large apps."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/exemplar-codes/react-router-practice/tree/lazy_loading"},"See full code example")))}u.isMDXComponent=!0}}]);